<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-09-19T20:08:00+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[heroku]HerokuのclearDBとPostgresでのインポートとエクスポートまとめ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/09/10/mysql-postgres-import-export/"/>
    <updated>2015-09-10T15:38:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/09/10/mysql-postgres-import-export</id>
    <content type="html"><![CDATA[<p>herokuのmysqlとpostgresqlのDBのインポートエクスポートメモ。<br/>
heroku上のDBの中身を別のheroku上のDBへ移行するという前提。</p>

<!-- more -->


<h2>入れ替える情報</h2>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
<th align="left"> 例(clearDB) </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> USER_NAME </td>
<td align="left"> ユーザー名 </td>
<td align="left"> b114d7xxxxxxxb |</td>
</tr>
<tr>
<td></td>
<td align="left"> PASSWORD </td>
<td align="left"> パスワード </td>
<td align="left"> d81xxxxb |</td>
</tr>
<tr>
<td></td>
<td align="left"> HOST </td>
<td align="left"> ホスト名 </td>
<td align="left"> us-cdbr-iron-xxxx-xx.cleardb.net |</td>
</tr>
<tr>
<td></td>
<td align="left"> DB_NAME </td>
<td align="left"> DB名 </td>
<td align="left"> heroku_5f996e9xxxxxxxx |</td>
</tr>
</tbody>
</table>


<p>アプリを指定して実行する場合は、すべてのコマンドのお尻に、<code>--app app_name</code>とつける。</p>

<h2>ClearDB(mySql)</h2>

<h3>情報の構成</h3>

<p>環境変数にて取得可能な情報より。</p>

<pre><code>CLEARDB_DATABASE_URL=mysql://ユーザ名:パスワード@サーバ名/データベース?reconnect=true
</code></pre>

<h3>エクスポート</h3>

<pre><code>$ mysqldump -uUSER_NAME -pPASSWORD -h HOST -r backup.sql --single-transaction DB_NAME
</code></pre>

<h3>インポート</h3>

<pre><code>$ mysql --host=HOST --user=USER_NAME --password=PASSWORD --reconnect DB_NAME &lt; backup.sql
</code></pre>

<h3>参考</h3>

<p><a href="http://pronama.azurewebsites.net/2015/05/05/cleardb-to-azure-vm-mysql/">ClearDB から Azure VM 上の MySQL に移行 | プログラミング生放送</a><br/>
<a href="http://stackoverflow.com/questions/11803496/dump-sql-file-to-cleardb-in-heroku">mysql &ndash; Dump sql file to ClearDB in Heroku &ndash; Stack Overflow</a></p>

<h2>Heroku Postgres</h2>

<h3>概要</h3>

<p>Heroku Postgresに標準搭載されている<code>PG Backups</code>を使用します。</p>

<h3>エクスポート</h3>

<p>バックアップを取る</p>

<pre><code>$ heroku pg:backups capture
Use Ctrl-C at any time to stop monitoring progress; the backup
will continue running. Use heroku pg:backups info to check progress.
Stop a running backup with heroku pg:backups cancel.

DATABASE ---backup---&gt; b002
</code></pre>

<p>URLを取得する</p>

<pre><code>$ heroku pg:backups public-url b002
The following URL will expire at 2015-09-10 07:33:23 +0000:
  "https://xfrtu.s3.amazonaws.com/a53f7aa...."
</code></pre>

<p>ここで取得したS3のURLを、<code>S3_URL</code>とする。</p>

<p>（ダウンロードする場合は以下）</p>

<pre><code>$ curl -o latest.dump 'S3_URL'
</code></pre>

<h3>インポート</h3>

<pre><code>$ heroku pg:backups restore 'S3_URL' DATABASE_URL
</code></pre>

<h3>参考</h3>

<p><a href="https://devcenter.heroku.com/articles/heroku-postgres-import-export">Importing and Exporting Heroku Postgres Databases with PG Backups | Heroku Dev Center</a><br/>
<a href="https://devcenter.heroku.com/articles/heroku-postgres-backups">Heroku PGBackups | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuがcomposer.lock必須になったのでcomposerの入れ方をメモしておく]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/08/25/composer-lock-require/"/>
    <updated>2015-08-25T10:38:40+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/08/25/composer-lock-require</id>
    <content type="html"><![CDATA[<p>herokuにcomposerを使用したプロジェクトをデプロイする場合、今まではwarningは出ていたようだけど、composer.lockはなくてもデプロイ出来ていた。<br/>
それが、2015/8/21にPHPのランタイムがアップデートされ、composer.lockが必須になった、とのこと。<br/>
<a href="https://devcenter.heroku.com/changelog-items/704">PHP versions 5.5.28, 5.6.12, 7.0.0RC1 available; new composer.lock requirements | Heroku Dev Center</a></p>

<!-- more -->


<p>composer.lockがない場合は以下のようなエラーが出る。</p>

<blockquote><p>ERROR: Your &lsquo;composer.json&rsquo; lists dependencies inside &lsquo;require&rsquo;,but no &lsquo;composer.lock&rsquo; was found. Please run &lsquo;composer update&rsquo; to re-generate &lsquo;composer.lock&rsquo; if necessary, and commit it into your repository. For more information, please refer to the docs at <a href="https://devcenter.heroku.com/articles/php-support#activation">https://devcenter.heroku.com/articles/php-support#activation</a></p></blockquote>

<h2>composerのインストール</h2>

<p>環境はmacで、デフォルト等のPHPが入っている前提で。<br/>
以下のコマンドを適当なディレクトリで叩くだけ。</p>

<p><code>
$ curl -sS https://getcomposer.org/installer | php
$ mv composer.phar /usr/local/bin/composer
</code></p>

<p>ターミナルを再起動して、確認。</p>

<p><code>
$ composer -v
Composer version 1.0-dev (f1aa655e6113e0efa979b8b09d7951a762eaa04c) 2015-08-20 11:59:54
</code></p>

<h3>参考</h3>

<p><a href="http://mawatari.jp/archives/install-composer-in-mac">http://mawatari.jp/archives/install-composer-in-mac</a></p>

<h2>composer install</h2>

<p>この状態で、composer.jsonがあるディレクトリに移動し、<code>$ composer install</code>を叩いてみる。<br/>
これでインストール出来れば完了。<br/>
ただし、PCにインストールされているPHPによってはモジュールの関係でエラーが出る場合がある。<br/>
例）</p>

<blockquote><p>Problem 1<br/>
  &ndash; The requested PHP extension ext-mcrypt * is missing from your system.</p></blockquote>

<p>この場合は、全部入りのPHPを入れ直すのが早い。</p>

<h2>PHPのインストール</h2>

<p>以下のサイトに全部入りのものがまとまっているようなので、そこからインストール。<br/>
<a href="http://php-osx.liip.ch/">PHP for OS X as binary package</a></p>

<p>現時点で最新の5.6を入れる。</p>

<pre><code>$ curl -s http://php-osx.liip.ch/install.sh | bash -s 5.6
</code></pre>

<p>このままだと使用するようにはなってないのでパスを通す。<br/>
環境によって違うが、デフォルトでは、<code>.bash_profile</code>に記述すればよいよう。</p>

<p><code>~/</code>ディレクトリ以下の<code>.bash_profile</code>をエディタ等で開いて記述。<br/>
なければ作成する。<br/>
コマンドで実行する場合は、なければ新規作成としてくれる。<br/>
例えば、<code>vi</code>で開く場合は以下。<br/>
<code>sudo</code>をつけてルート権限で実行している。</p>

<pre><code>$ sudo vi ~/.bash_profile
</code></pre>

<p>以下を記述。</p>

<pre><code>export PATH=/usr/local/php5/bin:$PATH
</code></pre>

<p>保存して終了。<br/>
(viの場合は、<code>i</code>で入力モードに、<code>esc</code>で戻って、<code>:x</code>で保存して終了）<br/>
<a href="http://net-newbie.com/linux/commands/vi.html">ｖｉエディタの使い方</a></p>

<p>ターミナルを再起動してphpのバージョンを確認。</p>

<pre><code>$ php -v
PHP 5.6.11 (cli) (built: Jul 10 2015 21:46:48)
</code></pre>

<h2>composer install</h2>

<p>この状態で、<code>$ composer install</code>すれば完了。<br/>
実行後は実行したディレクトリ内に、<code>composer.lock</code>と<code>vendor/</code>が出来上がる。<br/>
<code>vendor</code>ディレクトリ以下はgitで共有しないように、<code>.gitignore</code>に追記しておくこと。</p>

<h2>.lockと.jsonの関係</h2>

<p><code>composer.json</code>には、必要なパッケージとインストールするバージョンの指定があれば記述する。<br/>
その状態で、<code>$ composer install</code>すると、パッケージがインストールされ、インストールされたパッケージのバージョン情報などが記述された、<code>composer.lock</code>ファイルが作成される。<br/>
この状態で、他環境などで同じく<code>$ composer install</code>すると、<code>composer.lock</code>に書かれたバージョンのパッケージがインストールされ、全く同じ環境が構築される。</p>

<p><code>$ copmoser update</code>をすると、再度<code>composer.json</code>の記述を元にパッケージがインストールされ、<code>composer.lock</code>が更新される。</p>

<h2>参考</h2>

<p><a href="http://qiita.com/nbkn/items/01a11392921119fa0153">MacでPATHを通す &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]PHPのセッションをherokuのRedisで管理する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/08/06/session-storage-in-redis-on-heroku/"/>
    <updated>2015-08-06T18:06:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/08/06/session-storage-in-redis-on-heroku</id>
    <content type="html"><![CDATA[<p>heroku上でのPHPのセッション管理の定番は<a href="https://addons.heroku.com/memcachier">MemCachier</a>だけれど、<br/>
今回はHerokuのRedisに保存さえてみた。</p>

<!-- more -->


<h2>Redis</h2>

<p>herokuで使えるRedis、といってもいくつか種類がある。<br/>
それぞれどう違うのか、とか、設定方法の違い、とかは正直わからない。</p>

<p><a href="http://qiita.com/Oakbow/items/98599da0fc62863fc1b8#%E3%81%A9%E3%81%AE-redis-%E3%81%AE%E3%82%A2%E3%83%89%E3%82%AA%E3%83%B3%E3%82%92%E4%BD%BF%E3%81%86">herokuでセッションの保存先をRedisにする &ndash; Qiita</a></p>

<blockquote><p>現在、heroku には4つの Redis のアドオンがあります。<br/>
早晩5つめが増えるようです。</p></blockquote>

<p>この5つめ、にあたるものが今回使用する、Heroku Redis、です。　　
これは他のredisと違って、<a href="https://elements.heroku.com/addons/heroku-postgresql">Postgres</a>と同じくheroku内部のものなのでまぁ間違いないのかも、ってことで使ってみました。</p>

<p><a href="https://elements.heroku.com/addons/heroku-redis">Heroku Redis</a></p>

<h2>インストール</h2>

<p>公式の通り、インストールコマンドは以下。<br/>
アプリページからポチポチっと入れても問題なし。</p>

<pre><code>$ eroku addons:create heroku-redis:hobby-dev -a YOUR-APP-NAME
</code></pre>

<p><code>hobby-dev</code>は無料バージョン。</p>

<h2>セットアップ</h2>

<p>必要なソースはComposerで入れる。</p>

<p>(公式より)</p>

<p><code>
"require": {
  ...
  "predis/predis": "1.0.1",
  ...
}
</code></p>

<h2>接続先をredisに</h2>

<p>以下のページを参考、というかほぼそのままで。<br/>
<a href="http://www.sitepoint.com/saving-php-sessions-in-redis/">PHP Master | Saving PHP Sessions in Redis</a></p>

<p>まずは、接続用のクラスを用意。</p>

<p>```
&lt;?php
class RedisSessionHandler implements SessionHandlerInterface
{</p>

<pre><code>public $ttl = 1800; // 30 minutes default
protected $db;
protected $prefix;

public function __construct(PredisClient $db, $prefix = 'PHPSESSID:') {
    $this-&gt;db = $db;
    $this-&gt;prefix = $prefix;
}

public function open($savePath, $sessionName) {
    // No action necessary because connection is injected
    // in constructor and arguments are not applicable.
}

public function close() {
    $this-&gt;db = null;
    unset($this-&gt;db);
}

public function read($id) {
    $id = $this-&gt;prefix . $id;
    $sessData = $this-&gt;db-&gt;get($id);
    $this-&gt;db-&gt;expire($id, $this-&gt;ttl);
    return $sessData;
}

public function write($id, $data) {
    $id = $this-&gt;prefix . $id;
    $this-&gt;db-&gt;set($id, $data);
    $this-&gt;db-&gt;expire($id, $this-&gt;ttl);
}

public function destroy($id) {
    $this-&gt;db-&gt;del($this-&gt;prefix . $id);
}

public function gc($maxLifetime) {
    // no action necessary because using EXPIRE
}
</code></pre>

<p>}
```</p>

<p>で、最初に保存先を変更するページにて以下を実行する。</p>

<p>```
&lt;?php
require_once( dirname(<strong>FILE</strong>). &ldquo;/vendor/autoload.php&rdquo; );
require_once( dirname(<strong>FILE</strong>). &ldquo;/RedisSessionHandler.php&rdquo; );</p>

<p>$redis = new Predis\Client([</p>

<pre><code>'host' =&gt; parse_url($_ENV['REDIS_URL'], PHP_URL_HOST),
'port' =&gt; parse_url($_ENV['REDIS_URL'], PHP_URL_PORT),
'password' =&gt; parse_url($_ENV['REDIS_URL'], PHP_URL_PASS),
</code></pre>

<p>]);
$sessHandler = new RedisSessionHandler($redis);
session_set_save_handler($sessHandler);
session_start();
```</p>

<p>2行目はredisのライブラリを読み込むための設定。<br/>
3行目は先程作成したクラス。<br/>
で、5行目でnewしているが、ここが参考サイトから少し変えていて、Heroku Redis公式の方に合わせている。<br/>
で、後は参考サイト通りに。</p>

<p>これで後は普通にセッションを使えばRedisに保存されるようになる。</p>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/heroku-redis#connecting-in-php">Heroku Redis | Heroku Dev Center</a><br/>
<a href="http://www.sitepoint.com/saving-php-sessions-in-redis/">PHP Master | Saving PHP Sessions in Redis</a><br/>
<a href="http://qiita.com/Oakbow/items/98599da0fc62863fc1b8#%E3%81%A9%E3%81%AE-redis-%E3%81%AE%E3%82%A2%E3%83%89%E3%82%AA%E3%83%B3%E3%82%92%E4%BD%BF%E3%81%86">herokuでセッションの保存先をRedisにする &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wordpress上のメディアをcloudinaryに自動アップロードして管理する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/30/auto-upload-cloudinary-on-heroku/"/>
    <updated>2015-06-30T12:54:33+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/30/auto-upload-cloudinary-on-heroku</id>
    <content type="html"><![CDATA[<p>herokuでwordpressを使用した場合、通常ではアップロードした画像は<br/>
heorkuの再起動のタイミングで全て消えてしまいます。</p>

<!-- more -->


<p>なので、そうならないようにクラウド上のストレージサービスである、cloudinaryに保存させたりします。<br/>
cloudinaryには公式でwordpressのプラグインが用意されています。<br/>
<a href="https://ja.wordpress.org/plugins/cloudinary-image-management-and-manipulation-in-the-cloud-cdn/">WordPress &#8250; Cloudinary &ndash; Image management and manipulation in the cloud + CDN &laquo; WordPress Plugins</a></p>

<p>これを利用することでwordpress上の画像をcloudinaryで管理できるようになるのですが、<br/>
アップロードした画像を手動でcloudinaryに反映させてやらねばなりません。<br/>
それをなんとか自動でアップされるようにしてみました。</p>

<h2>cloudinaryへのアップロード手順(通常)</h2>

<p>通常と同じようにメディアライブラリ上から画像をアップロードします。<br/>
一覧表示で、詳細まで表示される、テーブル表示に切り替えます。<br/>
この時の右端に、<code>Upload to Cloudinary</code>というリンクがあるのでそれをクリックします。</p>

<p><img src="/images/2015/06/cloudinary_heroku01.jpg" alt="" /></p>

<p>するとアップロードされ、表記がアップロード済に変わります。</p>

<p><img src="/images/2015/06/cloudinary_heroku02.jpg" alt="" /></p>

<p>この時に内部では何をしているかと言うと、<br/>
cloudinaryにアップロードし、アップ先のURLを使ってメタデータを書き換え、<br/>
cloudinaryへアップした、というフラグを立てています。<br/>
このフラグを立てているところがポイントになります。</p>

<h2>メタデータ</h2>

<p>wordpressでは画像は投稿データとして管理されています。<br/>
データ構造は以下が詳しいのですが、画像部分だけを引用させてもらうとこんな感じです。<br/>
<a href="http://hijiriworld.com/web/wp-data-register/">WordPress データ登録機構を知ってもっと自由で効率的なフローを  |  hijiriworld Web</a></p>

<p><code>wp_posts</code>テーブル</p>

<table>
<thead>
<tr>
<th>post_title </th>
<th> post_status </th>
<th> post_name </th>
<th> guid </th>
<th> post_type </th>
<th> post_mine_type</th>
</tr>
</thead>
<tbody>
<tr>
<td>{$file_name} </td>
<td> inherit </td>
<td> {$file_name} </td>
<td> {$guid} </td>
<td> attachment </td>
<td> {$mine_type}</td>
</tr>
</tbody>
</table>


<p><code>wp_postmeta</code>テーブル</p>

<table>
<thead>
<tr>
<th>post_id </th>
<th> meta_key </th>
<th> meta_value</th>
</tr>
</thead>
<tbody>
<tr>
<td>{$attachment_id} </td>
<td> _wp_attached_file </td>
<td> {$file_name}</td>
</tr>
<tr>
<td>{$attachment_id} </td>
<td> _wp_attachment_metadata </td>
<td> シリアライズされたメタデータ</td>
</tr>
</tbody>
</table>


<p>wp_postsの方は特に変更する必要はありません。<br/>
重要なのはwp_postmetaのメタデータの方です。</p>

<p>今回、変更する具体的な箇所は以下の２箇所です。<br/>
<code>_wp_attached_file</code>をファイル名からcloudinaryのURLへ変更。<br/>
<code>_wp_attachment_metadata</code>の中にcloudinaryフラグを立てる。</p>

<h2>メディア管理とプラグインの仕組み</h2>

<p>wordpressのメディアは都度URLを動的に生成しています。<br/>
メイン画像の場合は以下。</p>

<blockquote><p>ブログのパス + <code>_wp_attached_file</code>の$file_name</p></blockquote>

<p>サムネイルの場合は以下。</p>

<blockquote><p>ブログのパス + <code>_wp_attachment_metadata</code>の指定サイズのファイル名</p></blockquote>

<p>なのでファイル名にcloudinaryの絶対パスを入れてしまうとURLが２重になってしまいます。</p>

<p>で。<br/>
これが、cloudinaryのフラグが立っているものに関しては、cloudinaryのプラグイン側でURLをうまい具合に置き換えて表示してくれます。<br/>
なので、こちらとしてはフラグを立てるだけ、で大丈夫。</p>

<h2>実作業</h2>

<p>処理の流れは以下のように。</p>

<ol>
<li>画像をアップロード</li>
<li>メタデータ作成のフック内で画像URLを取得</li>
<li>取得したURLでcloudinaryにアップロード</li>
<li>cloudinaryのURLでDBのファイル名を更新</li>
<li>メタデータにフラグを立てる</li>
</ol>


<p><code>wp_generate_attachment_metadata</code>で、アップされたファイルのメタデータを作成する処理にフックをかけられるのでそれを使用します。</p>

<p>functions.phpに以下を記述。</p>

<p>```
function cldnry_wp_generate_attachment_metadata($metadata, $postid){</p>

<pre><code>$imgPath = get_attached_file( $postid );

//ファイル形式のチェック
$info = pathinfo($imgPath);
$public_id = $info["filename"];
$mime_types = array("png"=&gt;"image/png", "jpg"=&gt;"image/jpeg", "pdf"=&gt;"application/pdf", "gif"=&gt;"image/gif", "bmp"=&gt;"image/bmp");
$extension = $info["extension"];
$type = @$mime_types[$extension];
//画像以外はcloudinaryにアップしない
if($type === null){
    $stderr = fopen( 'php://stderr', 'w' );
    fwrite( $stderr, 'アップロードされたファイルが画像ではありません。file-type:'.$extension );
    return $metadata;
}

//Cloudinaryへアップ
$cl_upload = new CloudinaryUploader();
$uploaded = $cl_upload-&gt;upload($imgPath, array(
));
$public_id = $uploaded['public_id'];

//DBへ保存
update_attached_file($postid, $uploaded['secure_url']);
$metadata['cloudinary'] = true; //cloudinaryからアップしたことを記録

return $metadata;
</code></pre>

<p>}
add_filter( &ldquo;wp_generate_attachment_metadata&rdquo; , &ldquo;cldnry_wp_generate_attachment_metadata&rdquo;,10 ,2 );
```</p>

<p>※2015/08/21追記<br/>
cloudinaryへアップする際にpublic_idを指定してしまうと画像が次々と上書きされてしまうので、その部分を削除しました。</p>

<p>  &ldquo;public_id&rdquo; => $public_id,</p>

<p>まず、<code>get_attached_file( $postid )</code>でアップされたファイルのURLを取得。<br/>
そのファイルが画像かどうかを一応チェックしている。<br/>
で、cloudinaryへアップロード。<br/>
cloudinaryはプラグインのファイルから利用するので公式で解説されているコードとは少し異なります。<br/>
で、アップされたらURLをファイル名として保存。<br/>
最後にポイントとなる、フラグを立てて終了。</p>

<p>これだけであとの表示周りの処理はcloudinaryがやってくれます。</p>

<h2>結果</h2>

<p>通常と同じように画像をアップすると、アップ完了時点でcloudinaryへ保存されます。<br/>
以下のようにURLがcloudinaryになっている事が確認できるかと思います。</p>

<p><img src="/images/2015/06/cloudinary_heroku03.jpg" alt="" /></p>

<p>一覧でテーブル表示にすると、cloudinaryにはすでにアップロード済の表記となっています。</p>

<h2>まとめ</h2>

<p>herokuでwordpressを扱う場合、この画像問題がネックの一つとなっているのですが、<br/>
herokuにはcloudinaryのアドオンがあるので、これでとりあえずは解消したのではないでしょうか。<br/>
この解消は自分の中ではかなり大きいです。</p>

<p>使用の際の注意点としては、wordpress上でデータを削除してもcloudinary上からは削除されない、という点です。<br/>
cloudinaryのアップロード容量が決まっているため、メンテナンスが必要かもしれません。</p>

<p>あとはアップデートの問題が解決すればすっきり出来るのですが。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]exif情報を扱う]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/29/heroku-exif/"/>
    <updated>2015-05-29T12:26:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/29/heroku-exif</id>
    <content type="html"><![CDATA[<p>heorkuで画像アップロード機能をつけた際、画像かを判定するのに、exif情報を利用したところ、エラーが出た。</p>

<!-- more -->


<p><code>exif_imagetype</code>を利用して画像かを判定していたのだけど、<br/>
以下のように、そんな関数ないよ、と怒られた。</p>

<blockquote><p>Fatal error: Call to undefined function exif_imagetype() i</p></blockquote>

<p>調べてみると、herokuは標準ではexif情報を扱うためのPHPモジュールが入っていないよう。<br/>
composerを使えばインストール出来る、とのことなので以下のように記述し再度deploy。<br/>
これで解決出来た。</p>

<p>```
{</p>

<pre><code>"require": {
    "ext-exif":"*"
}
</code></pre>

<p>}
```</p>

<h2>参考</h2>

<p><a href="http://stackoverflow.com/questions/16224488/how-to-get-the-exif-php-extension-working-on-heroku">How to get the EXIF PHP extension working on Heroku? &ndash; Stack Overflow</a><br/>
<a href="https://devcenter.heroku.com/articles/php-support#extensions">Extensions | Heroku PHP Support | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
</feed>
