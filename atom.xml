<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-06-24T21:33:37+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOSにて、PHPのエラー出力をターミナルで監視]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/24/php-error-tail/"/>
    <updated>2015-06-24T21:26:49+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/24/php-error-tail</id>
    <content type="html"><![CDATA[<p>いつも忘れるのでメモ。</p>

<!-- more -->


<p>Vagrant環境にて、PHPのエラー出力をターミナルで監視する方法。<br/>
まずは、エラーの出力ファイルの場所。</p>

<pre><code>/var/log/httpd/error_log
</code></pre>

<p>これを、<code>tail</code>コマンドで表示させる。<br/>
常に監視、の<code>-f</code>オプション付きで。</p>

<pre><code>tail /var/log/httpd/error_log -f
</code></pre>

<p>かなり常識的な事だと思うけど、ググるのが面倒なのでメモ。</p>

<h2>参考</h2>

<p><a href="http://www.atmarkit.co.jp/fwin2k/win2ktips/423tail/tail.html">tailコマンドでログ・ファイルをリアルタイムに監視する － ＠IT</a><br/>
<a href="http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1213302327">『　リナックスサーバー　』　にＰＨＰのエラーログ・アクセスログにか&hellip; &ndash; Yahoo!知恵袋</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ApexRESTにてPOSTで送信された配列のデータを受け取る]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/23/apexrest-post-array/"/>
    <updated>2015-06-23T20:38:27+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/23/apexrest-post-array</id>
    <content type="html"><![CDATA[<p>RestApexを作成していて、配列でPOSTした値はどうやって取得するのかを調べてみた。</p>

<!-- more -->


<p>例えば、POSTでidというパラメータで送信した内容は以下のようにして取得可能。</p>

<pre><code>RestRequest req = RestContext.request;
String id = req.params.get('id');
</code></pre>

<p>しかし配列だとこれでは取得できなかった。</p>

<p>送信データ</p>

<pre><code>$value = [
  'hoge'=&gt;['1', '2', '3']
];
</code></pre>

<p>受信</p>

<pre><code>RestRequest req = RestContext.request;
String id = req.params.get('hoge');  //null
</code></pre>

<p>なので、どのようにしてデータがわたっているのかを出力させてみた。</p>

<p>送信したデータ</p>

<pre><code>$value = [
  'id'=&gt;'hoge',
  'arr'=&gt;['1', '2', '3']
];
</code></pre>

<p>出力させたコード</p>

<pre><code>RestRequest req = RestContext.request;
System.debug(req.params);
</code></pre>

<p>出力結果</p>

<pre><code>{arr[0]=1, arr[1]=2, arr[2]=3, id=hoge}
</code></pre>

<p>どうやらちゃんとデータは受け取れているよう。<br/>
この<code>req.params</code>で受け取るデータの型は<code>Map</code>になっているよう。<br/>
以下のように出来る。</p>

<pre><code>RestRequest req = RestContext.request;
Map&lt;String, String&gt; p = req.params;
</code></pre>

<p>ということはキーを取得できるし、キーから中身を全て取り出す事もできる。</p>

<hr />

<p>そんなわけで、かなり無理矢理だけど、指定したキーの中身を取り出す関数を作ってみた。<br/>
配列で受け取る場合はフォームではチェックボックス、SF上では複数選択リスト、になるので、<br/>
SFの形式に合わせて、<code>;</code>セミコロン区切りの文字列として返すようにした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public String convertArrayPostData(Map&lt;String, String&gt; val, String target){
</span><span class='line'>    String res = '';
</span><span class='line'>    for(String sKey : val.keySet()){
</span><span class='line'>        Integer c = sKey.indexOf('[');
</span><span class='line'>        if(c == -1) continue;
</span><span class='line'>        String key = sKey.left(c);
</span><span class='line'>        if(key == target){
</span><span class='line'>            res += val.get(sKey) + ';';
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    if(res != '') res = res.removeEnd(';');
</span><span class='line'>    return res;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上記の<code>arr</code>というキーのデータを取り出す場合は以下のように。</p>

<pre><code>RestRequest req = RestContext.request;
Map&lt;String, String&gt; p = req.params;
String arrs = convertArrayPostData(p, 'arr');  //1;2;3
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]指定のユーザーでテスト実行]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/11/system-run-as/"/>
    <updated>2015-06-11T14:53:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/11/system-run-as</id>
    <content type="html"><![CDATA[<p>salesforceのユーザーである、<code>User</code>オブジェクトにカスタム項目を作って、<br/>
それを使ったコードなんかを書いた時にそのユーザーでの実行が必要になる。<br/>
そんな時のメモ。</p>

<!-- more -->


<h2>テスト実行</h2>

<p><code>system.runas(){}</code>を使う。<br/>
引数に使用するユーザーを指定し、<code>{}</code>内で実行する処理を書く。</p>

<h2>ユーザーの作成</h2>

<p>指定するユーザーをテスト内で作成するには以下のようにする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Map&lt;String,ID&gt; profiles = new Map&lt;String,ID&gt;();
</span><span class='line'>Profile ps = [select id, name from Profile where name = '標準ユーザ' LIMIT 1];
</span><span class='line'>User standard = new User(alias = 'standt', 
</span><span class='line'>  email='standarduser@testorg.com', 
</span><span class='line'>  emailencodingkey='UTF-8', 
</span><span class='line'>  lastname='Testing', languagelocalekey='en_US', 
</span><span class='line'>  localesidkey='en_US', 
</span><span class='line'>  ProfileId = ps.id,
</span><span class='line'>  timezonesidkey='America/Los_Angeles', 
</span><span class='line'>  username='standarduser-test@testorg.com'
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<p>標準ユーザーのプロフィール権限で作成している。<br/>
この時に、<code>email</code>の項目と<code>username</code>を同じにしていると、すでにそのユーザーネームは使われています、とエラーが出た。</p>

<p>で、実行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>system.runas(standard){
</span><span class='line'>  //実行する内容
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://blogjp.sforce.com/2013/07/systemrunas-29e3.html">System.runAs()を使う時の注意点 | Salesforce Developers Japan Blog</a><br/>
<a href="view-source:http://developer.force.com/cookbook/recipe/using-system-runas-in-test-methods">Using System.runAs in Test Methods &ndash; null</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]バッチスケジュールの一通りの書き方]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/11/apex-batch-schedule/"/>
    <updated>2015-06-11T10:59:41+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/11/apex-batch-schedule</id>
    <content type="html"><![CDATA[<p>複数クラスにわたってたりしてややこしかったのでメモ。</p>

<!-- more -->


<h2>バッチ</h2>

<p>まずはバッチファイル。<br/>
ここで実際に動作させたい内容を書く。<br/>
枠はこんな感じ。</p>

<p><code>Batch_sample.apex</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global with sharing class Batch_sample implements Database.Batchable&lt;sObject&gt;
</span><span class='line'>{
</span><span class='line'>  private String query;
</span><span class='line'>  
</span><span class='line'>  //コンストラクタ
</span><span class='line'>  global Batch_UpdatePushlist(String q){
</span><span class='line'>      query = q;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  //データ取得
</span><span class='line'>  global Database.QueryLocator start(Database.BatchableContext BC){
</span><span class='line'>      return Database.getQueryLocator(query);
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  //開始
</span><span class='line'>  global void execute(Database.BatchableContext BC, List&lt;sObject&gt; scope){
</span><span class='line'>  
</span><span class='line'>      //バッチの処理を記述
</span><span class='line'>      
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  //完了
</span><span class='line'>  global void finish(Database.BatchableContext BC)
</span><span class='line'>  {
</span><span class='line'>      //完了後の処理があれば
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>バッチを起動させるには以下のようにSOQL文と件数を渡して実行する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String soql = 'SELECT ID FROM sObject';
</span><span class='line'>Batch_sample b = new Batch_sample(soql);
</span><span class='line'>Database.executeBatch(b, 200);</span></code></pre></td></tr></table></div></figure>


<p>実行時に指定したSOQLで取得するレコード分、バッチが動作する。<br/>
この際に取得出来る件数が、バッチの場合は500万件。<br/>
とはいえ、実際には一度の処理では指定した件数分のみ処理し、ガバナ制限がリセットされて再度実行、を繰り返す。<br/>
<code>executeBatch</code>の第二引数が一回の処理で実行する件数。<br/>
(デフォルトは200件)</p>

<p>バッチ全体の動作は10分以内、というガバナ制限もあり。<br/>
(100万件単位になってくると結構厳しい数字っぽい)</p>

<h2>スケジューラー</h2>

<p>設定したバッチをスケジューラーとして実行させる。<br/>
以下のように、<code>Schedulable</code>クラスをimplementsする。</p>

<p><code>Schedule_sample.apxc</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global class Schedule_sample implements Schedulable {
</span><span class='line'>  private final Integer BATCH_SIZE = 200;
</span><span class='line'>  
</span><span class='line'>  global void execute(SchedulableContext ctx) {
</span><span class='line'>      String soql = 'SELECT ID FROM sObject';
</span><span class='line'>      Batch_sample b = new Batch_sample(soql);
</span><span class='line'>      Database.executeBatch(b, BATCH_SIZE);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>このクラスをジョブに追加することでバッチをスケジューリング出来る。</p>

<h2>スケジュールに追加</h2>

<p>追加方法は２つある</p>

<h3>設定画面から追加</h3>

<p><code>設定-&gt;開発-&gt;Apexクラス</code>を選択。<br/>
画面内の<code>Apexをスケジュール</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/apex_schedule01.jpg" alt="" /></p>

<p>この中で毎月や毎日、などを選択できる。<br/>
終了日も設定出来るので、ずっと動作するさせるものに関しては長めに設定しておく。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/apex_schedule02.jpg" alt="" /></p>

<h3>コードで実行</h3>

<p>設定画面から追加での最大のデメリットは実行時間が毎時0分のみ、と、分の指定ができないところ。<br/>
これをさせようと思うとコードからジョブに追加してやる必要がある。</p>

<p>以下が追加させるコード</p>

<pre><code>System.schedule('ジョブ名','0 0 * * * ?', new Schedule_sample());
</code></pre>

<p>第二引数に指定しているものは、クーロン式、というもので、ここで時間指定をしている。<br/>
これは、左から、秒、分、時、日、月、曜日、年となっている。<br/>
(年は省略化)</p>

<p>例）</p>

<ul>
<li>&lsquo;0 0 13 * * ?&#8217;：毎日13時に実行</li>
<li>&lsquo;0 0 10 ? * MON-FRI&#8217;：月～金の10時に実行</li>
<li>&lsquo;0 0 * * * ?&#8217;：毎時0分に実行</li>
<li>&lsquo;0 30 * * * ?&#8217;：毎時30分に実行</li>
</ul>


<p>秒のみの指定は怖くて試してません。</p>

<p>この実行式を開発者コンソールの匿名実行から実行することでジョブに追加させられる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/apex_schedule03.jpg" alt="" /></p>

<p>コードを書いて、実行ボタンをクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/apex_schedule04.jpg" alt="" /></p>

<p>追加されたジョブは設定画面の、<code>ジョブ-&gt;スケジュール済みジョブ</code>から確認できる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/apex_schedule05.jpg" alt="" /></p>

<h2>動作テスト</h2>

<p>実際に開発中にいちいちスケジュールさせてジョブが実行されるのを待つのはあまりにもめんどくさい。<br/>
バッチを起動させるコードを匿名実行から起動させてもよいがそれでも待ち時間が長いので、結局バッチ処理特有の部分をコメントアウトして、単なるクラスにしてそれを直接実行させる方法で確認した。</p>

<p>以下のようにコメントアウトした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//global with sharing class Batch_sample implements Database.Batchable&lt;sObject&gt;
</span><span class='line'>public class Batch_sample
</span><span class='line'>{
</span><span class='line'>  /*
</span><span class='line'>  private String query;   
</span><span class='line'>  //コンストラクタ
</span><span class='line'>  global Batch_UpdatePushlist(String q){
</span><span class='line'>      query = q;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  //データ取得
</span><span class='line'>  global Database.QueryLocator start(Database.BatchableContext BC){
</span><span class='line'>      return Database.getQueryLocator(query);
</span><span class='line'>  }
</span><span class='line'>  */
</span><span class='line'>  
</span><span class='line'>  //開始
</span><span class='line'>  public void execute(List&lt;sObject&gt; scope){
</span><span class='line'>  //global void execute(Database.BatchableContext BC, List&lt;sObject&gt; scope){
</span><span class='line'>  
</span><span class='line'>      //バッチの処理を記述
</span><span class='line'>      
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  //global void finish(Database.BatchableContext BC){}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これを匿名実行からSOQLでデータを取得してからそれを渡してやりつつ実行する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String soql = 'SELECT ID FROM sObject';
</span><span class='line'>List&lt;sObject&gt; data = Database.query(soql);
</span><span class='line'>Batch_sample batch = new Batch_sample();
</span><span class='line'>batch.execute(data);</span></code></pre></td></tr></table></div></figure>


<p>もっとスマートなやり方があったらぜひ。</p>

<h2>テスト</h2>

<p>テストコードはスケジューラに対して実行する。</p>

<p><code>Schedule_sample_Test.apxc</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@isTest
</span><span class='line'>public class Schedule_sample_Test {
</span><span class='line'>  public static String CRON_EXP = '0 0 0 15 3 ? 2022';
</span><span class='line'>  
</span><span class='line'>  static testmethod void test() {
</span><span class='line'>      //データ準備
</span><span class='line'>  
</span><span class='line'>      Test.startTest();
</span><span class='line'>      String jobId = System.schedule('ScheduleApexClassTest', CRON_EXP, new Batch_sample());
</span><span class='line'>      Test.stopTest();
</span><span class='line'>      
</span><span class='line'>      //バッチ後のデータ確認
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>指定するクーロン式はなんでもよくて、<code>Test.stopTest();</code>の後にすぐにスケジュールが実行される。</p>

<h2>参考</h2>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.apex_workbook.meta/apex_workbook/apex_scheduling_2.htm">スケジュール可能なクラスのテストの追加 | Apex ワークブック | Salesforce Developers</a><br/>
<a href="http://blog.flect.co.jp/salesforce/2010/08/apex-2136.html">セールスフォースの豆知識: スケジュール実行するApexのテストメソッドと実行時刻の詳細設定</a><br/>
<a href="http://blog.livedoor.jp/androidbeginner/archives/39179776.html">【Salesforce】Apexジョブの書き方 : 怠けろ！プログラマ！</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerをvagrantに入れてwebサーバーを立ち上げるまで]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/09/my-first-docker/"/>
    <updated>2015-06-09T20:21:19+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/09/my-first-docker</id>
    <content type="html"><![CDATA[<p>dockerは話にはよく聞くけど全くわからなかったので、とりあえずインストールして動かすところまでやってみた。</p>

<!-- more -->


<h2>Ubuntu</h2>

<p>Dockerはlinux環境でのみ動作可能、ということで、Vagrantにlinux環境を作って、そこにdockerをインストールする。<br/>
さらに、dockerはUbuntuで開発されているとのことなので、同じくUbuntuにインストールしてやるのが一番無難っぽい。</p>

<h3>VagrantBoxの作成</h3>

<p>Ubuntu14の64bit版を使ってvagrantboxを作成する。<br/>
<a href="http://www.vagrantbox.es/">http://www.vagrantbox.es/</a><br/>
このページ内で、<code>trusty</code>で検索。<br/>
(Ubuntu14はtrustyと呼ばれているらしい)</p>

<p>その64bit版のURLをコピー。ちなみに以下のURL。</p>

<blockquote><p><a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box">https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box</a></p></blockquote>

<h3>VagratBoxの追加</h3>

<p>vagrantに追加する。</p>

<pre><code>$ vagrant box add trusty64 https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box
</code></pre>

<p><code>box add</code>で先程コピーしたURLから追加する。<br/>
<code>trusty64</code>としたところはboxの名前なので任意でよい。</p>

<p>10分くらい待つと完了した。</p>

<h3>初期化</h3>

<p>導入したいディレクトリに移動して、初期化する。</p>

<pre><code>$ vagrant init trusty64
</code></pre>

<p>先程指定したboxの名前を使用する。<br/>
ここでもしばらく待つと完了。<br/>
<code>Vagrantfile</code>というファイルが作成される。<br/>
特に編集する必要はないが、IPアドレスのみ変更した。</p>

<h3>起動</h3>

<p>で、起動。</p>

<pre><code>$ vagrant up
</code></pre>

<p>sshで入ってみる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh
</span><span class='line'>Welcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-53-generic x86_64)
</span><span class='line'>...
</span><span class='line'>vagrant@vagrant-ubuntu-trusty-64:~$</span></code></pre></td></tr></table></div></figure>


<h2>Doker</h2>

<h3>インストール</h3>

<p>で、Dockerをインストール。<br/>
公式に沿って実行する。<br/>
<a href="https://docs.docker.com/installation/ubuntulinux/">https://docs.docker.com/installation/ubuntulinux/</a></p>

<p>まずは必要なパッケージをインストール。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get update
</span><span class='line'>$ sudo apt-get install linux-image-generic-lts-trusty
</span><span class='line'>$ sudo reboot</span></code></pre></td></tr></table></div></figure>


<p>再起動後、dockerのインストール。<br/>
<code>wget</code>がインストールされているかを確認。<br/>
インストールされていたので、そのまま進む。</p>

<pre><code>$ which wget
/usr/bin/wget
</code></pre>

<p>で、dockerパッケージをダウンロードし、インストールする。</p>

<pre><code>$ wget -qO- https://get.docker.com/ | sh
</code></pre>

<p>しばらく待つと完了。</p>

<pre><code>$ docker --version
Docker version 1.6.2, build 7c8fca2
</code></pre>

<h2>Docker image</h2>

<h3>pull</h3>

<p><a href="https://registry.hub.docker.com/">https://registry.hub.docker.com/</a><br/>
上記サイトから任意のimageを引っ張ってくる。<br/>
<code>centos</code>のイメージを入れてみる。<br/>
<a href="https://registry.hub.docker.com/search?q=centos&amp;searchfield=">centosの検索結果</a></p>

<pre><code>$ sudo docker pull centos
</code></pre>

<p>入っているimageのリストは以下で確認できる。</p>

<pre><code>$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
centos              latest              fd44297e2ddb        6 weeks ago         215.7 MB
</code></pre>

<h3>Container</h3>

<p>で、落としてきたimageからcontainerを作成して、その上で簡単なコマンドを走らせてみる。</p>

<pre><code>$ sudo docker run centos echo "hello world!"
hello world!
</code></pre>

<p><code>docker run</code>で指定したimageからcontainerを作成。<br/>
その後に続くコマンドをそのcontainer上で実行している。</p>

<p>実行されたcontainerを確認スルには以下。<br/>
(<code>-a</code>のオプションを外すすと実行中のcontainerが表示される。)</p>

<pre><code>$ sudo docker ps -a
CONTAINER ID        IMAGE               COMMAND                CREATED              STATUS                          PORTS               NAMES
0a84f937b7c        centos:latest       "echo 'hello world!'   About a minute ago   Exited (0) About a minute ago                       agitated_banach
</code></pre>

<h2>Webサーバーの立ち上げ</h2>

<h3>dockerfile</h3>

<p>dockerfileを作る。</p>

<pre><code>$ vim Dockerfile
</code></pre>

<p>中身は簡単に以下のように。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM centos
</span><span class='line'>MAINTAINER xxx
</span><span class='line'>
</span><span class='line'>RUN yum install -y httpd
</span><span class='line'>ADD ./index.html /var/www/html/
</span><span class='line'>EXPOSE 80
</span><span class='line'>CMD ["/usr/sbin/httpd", "-D", "FOREGROUND"]</span></code></pre></td></tr></table></div></figure>


<p><code>MAINTAINER</code>は作成者の名前などを書いてやるのが習慣らしい。</p>

<p>index.htmlを適当に作成。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>hello docker world!
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<h3>build</h3>

<p>で、ビルドする。<br/>
ビルドで、imageからdockerfile内のコマンドを使用してcontainerを作成し、さらにその結果を新しくimageに出力する、ところまでをやってくれるコマンドのよう。</p>

<pre><code>$ sudo docker build -t test/httpd .
</code></pre>

<p><code>test/httpd</code>はcontainerの名前。任意でよい。<br/>
最後の<code>.</code>は現在のディレクトリでビルド、ということ。</p>

<p>しばらく待って完了…と行きたいところだけど、どうやらエラーが出て止まってしまってるよう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Complete!
</span><span class='line'>INFO[0012] The command [/bin/sh -c yum install -y httpd] returned a non-zero code: 1</span></code></pre></td></tr></table></div></figure>


<p>Complete!って出てるけど、その先のStepに進まない…。</p>

<h3>エラー回避</h3>

<p>ググってみると以下がヒット。<br/>
<a href="http://fujita222.hateblo.jp/entry/2015/03/10/163657">Dockerのcentosでapacheインストール失敗する。rpmがうんちゃらとか言われる</a></p>

<p>どうやらpullしてきたcentOSがあたらしすぎてダメだったよう。<br/>
なので、この記事どおりcentos6をpullして使う。</p>

<pre><code>$ sudo docker pull centos:centos6
$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
centos              centos6             b9aeeaeb5e17        6 weeks ago         202.6 MB
</code></pre>

<p>で、<code>Dockerfile</code>の中身をcentos6を使うように修正。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM centos:centos6
</span><span class='line'>MAINTAINER xxx
</span><span class='line'>
</span><span class='line'>RUN yum install -y httpd
</span><span class='line'>ADD ./index.html /var/www/html/
</span><span class='line'>EXPOSE 80
</span><span class='line'>CMD ["/usr/sbin/httpd", "-D", "FOREGROUND"]</span></code></pre></td></tr></table></div></figure>


<p>これで再度実行。</p>

<pre><code>$ sudo docker build -t test/httpd .
</code></pre>

<p>ようやく無事、完了。</p>

<pre><code>$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
test/httpd          latest              74ea9508c04c        52 seconds ago      271.2 MB
centos              centos6             b9aeeaeb5e17        6 weeks ago         202.6 MB
</code></pre>

<h3>run</h3>

<p>ポートを指定してバックグラウンドで実行。</p>

<pre><code>$ sudo docker run -p 8080:80 -d test/httpd
</code></pre>

<p>起動している。</p>

<pre><code>$ sudo docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                  NAMES
4aca4268ffa3        test/httpd:latest   "/usr/sbin/httpd -D    15 seconds ago      Up 15 seconds       0.0.0.0:8080-&gt;80/tcp   compassionate_poincare
</code></pre>

<p>Vagrantfileで指定したIPアドレスに8080のポートをつけてやればアクセスが出来る。</p>

<blockquote><p><a href="http://192.168.33.30:8080/">http://192.168.33.30:8080/</a></p></blockquote>

<p>アクセスすると、先程作成した<code>index.html</code>が表示された。</p>

<p>なんだかんだで大変だったけどとりあえず起動できた。</p>

<h2>参考</h2>

<p><a href="http://dotinstall.com/lessons/basic_docker">Docker入門 (全11回) &ndash; プログラミングならドットインストール</a><br/>
<a href="http://tech.lexues.co.jp/archives/1569">【社内勉強会】Docker入門してみました | LexTech</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]レコードの詳細からカスタムボタンでapexを呼び出す]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/01/custom-btn-apex/"/>
    <updated>2015-06-01T17:33:40+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/01/custom-btn-apex</id>
    <content type="html"><![CDATA[<p>カスタムボタンを使用してJSからApexを呼び出して処理させてみる。</p>

<!-- more -->


<h2>Apex</h2>

<p><code>webService</code>を使用して、apexクラスを作成しておく。<br/>
戻り値は文字列としておく。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global class SampleClass{
</span><span class='line'>  webService static String hogeMethod(String id){
</span><span class='line'>      return 'このレコードのIDは、' + msg_id + 'です。';
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>カスタムボタン</h2>

<p>リードの場合は以下にある。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/custom_btn02.jpg" alt="" /></p>

<p><code>新規ボタンまたはリンク</code>をクリック。</p>

<p><code>動作</code>を<code>JavaScriptを実行</code>に、<br/>
<code>内容のソース</code>を<code>onClick JavaScript</code>にする。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/custom_btn01.jpg" alt="" /></p>

<p>内容は以下の用に記述。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{!REQUIRESCRIPT('/soap/ajax/31.0/connection.js')} 
</span><span class='line'>{!REQUIRESCRIPT('/soap/ajax/31.0/apex.js')} 
</span><span class='line'>var ret = sforce.apex.execute('SampleClass','hogeMethod',{id:"{!CustomObject__c.Id}"}); 
</span><span class='line'>alert(ret);</span></code></pre></td></tr></table></div></figure>


<p>このカスタムボタンがクリックされると、このJSが実行される。<br/>
<code>sforce.apex.execute</code>で実行するapexとメソッドを指定している。<br/>
第一引数がクラス名。第二引数がメソッド。第三引数が引数、となる。<br/>
引数で実行しているレコードのIDを渡すように項目を差し込んでいる。</p>

<h2>表示</h2>

<p>表示は、レイアウトの編集で、ボタンから追加。<br/>
<img src="http://kayakuguri.github.io/images/2015/06/custom_btn04.jpg" alt="" /></p>

<p>レコードの詳細からボタンをクリックするとIDが渡されて実行される。<br/>
<img src="http://kayakuguri.github.io/images/2015/06/custom_btn03.jpg" alt="" /></p>

<h2>参考</h2>

<p><a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_and_ajax.htm">Apex in AJAX | Force.com Apex Code Developer&#x27;s Guide | Salesforce Developers</a><br/>
<a href="https://developer.salesforce.com/forums/ForumsMain?id=906F00000009BNkIAM">カスタムボタン押下時にSFDC上のWebServiceをコールする方法 &ndash; Salesforce Developer Community</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Force.com CLIをインストールして試してみた]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/29/forcecom-cli/"/>
    <updated>2015-05-29T21:06:19+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/29/forcecom-cli</id>
    <content type="html"><![CDATA[<blockquote><p>開発者の方は、Force.comのデータベースをいちいちブラウザを開いたりせずにコマンドラインから確認・操作したいと思う事があるかもしれません。</p></blockquote>

<p>試してみました。</p>

<!-- more -->


<h1>Go</h1>

<h2>go言語環境</h2>

<p>Force.com CLIはGOで動作しているので、go言語が動くようにする。</p>

<h3>Homebrewによるインストール</h3>

<p>homebrew自体をアップデートしてインストールする。</p>

<pre><code>$ brew update
$ brew install go
</code></pre>

<p>確認</p>

<pre><code>$ go version
go version go1.4.2 darwin/amd64
</code></pre>

<h3>$GOPATH</h3>

<p>パッケージ管理のためのパスを通すよう。<br/>
<code>$HOME/.go/${GO_VERSION}</code>のパスにするのがいいようなんで、それにならう。</p>

<pre><code>$ mkdir -p ~/.go/1.4/
</code></pre>

<p>zsh使ってるので、<code>.zshrc</code>にパスを追加。</p>

<pre><code>export GOPATH=$HOME/.go/1.4
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
</code></pre>

<p>再読み込みしておく。</p>

<pre><code>$ source ~/.zshrc
</code></pre>

<h3>Mercurial</h3>

<blockquote><p>Mercurial（マーキュリアル）は、クロスプラットフォームの分散型バージョン管理システム。 Pythonで実装されている（ただし、バイナリdiffに関してはC言語で実装されている）。 Mercurialはコマンドラインプログラムである。 全てのコマンドは hgで始まる。<br/>
<a href="http://ja.wikipedia.org/wiki/Mercurial">http://ja.wikipedia.org/wiki/Mercurial</a></p></blockquote>

<h4>Python</h4>

<p>Pythonで動作するとのことなので、Pythonが必要。<br/>
自分の環境には入っていた。</p>

<pre><code>$ python -V
Python 2.7.9
</code></pre>

<p>必要な場合は、homebrewでインストール出来るよう。</p>

<pre><code>$ brew install python
</code></pre>

<h4>pip</h4>

<p>あと、パッケージ管理のために<code>pip</code>が必要。<br/>
これも入っていた。</p>

<pre><code>$ pip -V
pip 6.1.0 from /usr/local/lib/python2.7/site-packages/pip-6.1.0-py2.7.egg (python 2.7)
</code></pre>

<p>インストールする場合は以下。</p>

<pre><code>$ brew install pip
</code></pre>

<p>ただ、最新版ではなさそうだったので、アップデート。</p>

<pre><code>$ pip install --upgrade pip
</code></pre>

<p>アップデート出来た。</p>

<pre><code>$ pip -V
pip 7.0.1 from /usr/local/lib/python2.7/site-packages (python 2.7)
</code></pre>

<h4>Mercurialのインストール</h4>

<p>で、ようやく、<code>Mercurial</code>のインストール。</p>

<pre><code>$ pip install --upgrade pip
...
Successfully installed mercurial-3.4
</code></pre>

<p>これでようやく整った。</p>

<h1>Force.com CLI</h1>

<h2>インストール</h2>

<pre><code>$ go get -u github.com/heroku/force
</code></pre>

<p>エラーが出た。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.go/1.4/src/github.com/ddollar/config/windows.go:8: (*Config).homeDirectory redeclared in this block
</span><span class='line'>  previous declaration at .go/1.4/src/github.com/ddollar/config/posix.go:9</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>エラー回避</h2>

<p>どうやら関連プラグイン？のとあるファイルが悪さをしているとかなんとか。<br/>
以下にあるファイルをリネームして退避させておく。</p>

<pre><code>$ cd /Users/YOUR_NAME/.go/1.4/src/github.com/ddollar/config
$ mv windows.go _windows.go
$ go get .
</code></pre>

<p>これでエラーが回避された状態でプラグイン？のインストールが完了したので、<br/>
あらためてインストール。</p>

<pre><code>$ go get -n github.com/heroku/force
</code></pre>

<p>入った。</p>

<p><a href="https://github.com/heroku/force/issues/138#issuecomment-86178284">Compiling from source not working · Issue #138 · heroku/force</a></p>

<h2>ログイン</h2>

<pre><code>$ force login
</code></pre>

<p>以下のように認証を求められるので、許可。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/Force_com_CLI_1.jpg" alt="" /></p>

<p>許可すると以下の画面になって接続完了。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/Force_com_CLI_2.jpg" alt="" /></p>

<pre><code>$ force login
Logged in as 'YOUR-EMAIL'
</code></pre>

<h3>SELECT</h3>

<p>とりあえず、select文でデータ取得</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ force query 'SELECT ID, NAME FROM Lead'
</span><span class='line'> Id                 | Name
</span><span class='line'>--------------------+---------------------
</span><span class='line'> 00Q1000000DnnMvEAJ | Boxer Bertha
</span><span class='line'> 00Q1000000DnnMwEAJ | Cotton Phyllis
</span><span class='line'> ...</span></code></pre></td></tr></table></div></figure>


<h3>カスタム項目の追加</h3>

<p>コマンドからカスタム項目の追加も可能。<br/>
だけど、エラーが。</p>

<pre><code>$ force field create User__c Due:DateTime
Attrs:  &lt;invalid Value&gt;
panic: reflect: call of reflect.Value.Type on zero Value
...
</code></pre>

<p>どうやら、型名を小文字で入れる必要があるよう。<br/>
<a href="https://github.com/heroku/force/issues/52">Error when calling force field create · Issue #52 · heroku/force</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ force field create User__c Due:datetime
</span><span class='line'>Attrs:  &lt;main.DatetimeFieldRequired Value&gt;
</span><span class='line'>
</span><span class='line'>      &lt;metadata xsi:type="CustomField" xmlns:cmd="http://soap.sforce.com/2006/04/metadata"&gt;
</span><span class='line'>          &lt;fullName&gt;User__c.Due__c&lt;/fullName&gt;
</span><span class='line'>          &lt;label&gt;Due&lt;/label&gt;
</span><span class='line'>          &lt;type&gt;DateTime&lt;/type&gt;
</span><span class='line'>      &lt;/metadata&gt;
</span><span class='line'>
</span><span class='line'>Not done yet.  Will check again in five seconds.
</span><span class='line'>Custom field created</span></code></pre></td></tr></table></div></figure>


<p><img src="http://kayakuguri.github.io/images/2015/05/Force_com_CLI_3.jpg" alt="" /></p>

<p>この指定方法だと、フィールド名とAPI参照名を別々に出来ない、、かも。</p>

<h3>利用方法</h3>

<pre><code>$ force
</code></pre>

<p>でヘルプを表示。<br/>
さらに、コマンドをそのまま打つと使いと例も表示してくれる。<br/>
先ほどの、<code>field</code>だとこんな感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ force field
</span><span class='line'>Usage: force field
</span><span class='line'>
</span><span class='line'>Manage sobject fields
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  force field list &lt;object&gt;
</span><span class='line'>  force field create &lt;object&gt; &lt;field&gt;:&lt;type&gt; [&lt;option&gt;:&lt;value&gt;]
</span><span class='line'>  force field delete &lt;object&gt; &lt;field&gt;
</span><span class='line'>  force field type
</span><span class='line'>  force field type &lt;fieldtype&gt;
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>
</span><span class='line'>  force field list Todo__c
</span><span class='line'>  force field create Inspection__c "Final Outcome":picklist picklist:"Pass, Fail, Redo"
</span><span class='line'>  force field create Todo__c Due:DateTime required:true
</span><span class='line'>  force field delete Todo__c Due
</span><span class='line'>  force field type     #displays all the supported field types
</span><span class='line'>  force field type email   #displays the required and optional attributes</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="https://force-cli.heroku.com/">Force.com CLI</a><br/>
<a href="http://blogjp.sforce.com/2013/11/forcecom-cli---d403.html">Force.com CLI &ndash; コマンドラインインタフェース | Salesforce Developers Japan Blog</a><br/>
<a href="http://qiita.com/zaki-yama/items/77b3aeff6b129a87019a">Salesforce &ndash; ターミナルからApexを実行できるforce.com CLIの使い方 &ndash; Qiita</a><br/>
<a href="http://sixeight.hatenablog.com/entry/2013/12/12/031752">golang の環境作った &ndash; ちなみに</a><br/>
<a href="http://qiita.com/puttyo_bubu/items/4e60e42ff041f2474428">Macでgo言語開発環境を作る &ndash; Qiita</a><br/>
<a href="http://blog.teapla.net/2010/12/1178">homebrewを使ってMercurialをインストールする | Ken&#039;s blog @teaplanet</a><br/>
<a href="http://qiita.com/tailak/items/0eedc6d5c4cc71a5e1a0">Python &ndash; Macでpipのアップデートでエラー &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]exif情報を扱う]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/29/heroku-exif/"/>
    <updated>2015-05-29T12:26:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/29/heroku-exif</id>
    <content type="html"><![CDATA[<p>heorkuで画像アップロード機能をつけた際、画像かを判定するのに、exif情報を利用したところ、エラーが出た。</p>

<!-- more -->


<p><code>exif_imagetype</code>を利用して画像かを判定していたのだけど、<br/>
以下のように、そんな関数ないよ、と怒られた。</p>

<blockquote><p>Fatal error: Call to undefined function exif_imagetype() i</p></blockquote>

<p>調べてみると、herokuは標準ではexif情報を扱うためのPHPモジュールが入っていないよう。<br/>
composerを使えばインストール出来る、とのことなので以下のように記述し再度deploy。<br/>
これで解決出来た。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "require": {
</span><span class='line'>        "ext-exif":"*"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://stackoverflow.com/questions/16224488/how-to-get-the-exif-php-extension-working-on-heroku">How to get the EXIF PHP extension working on Heroku? &ndash; Stack Overflow</a><br/>
<a href="https://devcenter.heroku.com/articles/php-support#extensions">Extensions | Heroku PHP Support | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant環境での環境変数の設定方法]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/26/vagrant-env/"/>
    <updated>2015-05-26T17:54:23+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/26/vagrant-env</id>
    <content type="html"><![CDATA[<p>vagrant環境で環境変数を使いたかったので調べてみたところ、<br/>
httpdファイルへの追記が必要とのことで試してみた。</p>

<!-- more -->


<h2>httpd</h2>

<p><code>/etc/sysconfig/httpd</code>このファイルへ必要な環境変数を記述し、<code>vagrant up</code>すればよい。</p>

<pre><code>export SET_VALUE=hoge
</code></pre>

<p>httpdの中身はデフォルトでは全てコメントアウトされているので、上記だけを記述したファイルに差し替えてもOK。</p>

<h2>再起動</h2>

<p>apacheの再起動ではだめで、vagrant自体の再起動が必要。</p>

<pre><code>$ vagrant reload
</code></pre>

<p>phpinfoで出力させてみると、無事、反映されていた。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/enviroment.jpg" alt="" /></p>

<h2>$_ENV</h2>

<p>これで反映はされたが、環境変数を取得するための、<code>$_ENV</code>が動作しなかった。<br/>
<code>getenv()</code>だと正しく取得出来る。</p>

<p>調べて見ると、<code>php.ini</code>の設定で<code>ENV</code>を使用するかを設定出来るよう。<br/>
デフォルトでは使用するようになっているようだが、なぜか使用しないようになっていた。</p>

<p>設定する場合は以下のように記述。<br/>
場所は、<code>/etc/php.ini</code>にあった。</p>

<pre><code>variables_order = "EGPCS"
</code></pre>

<p>EGPCSというのは以下のように頭文字となっている。</p>

<blockquote><p>EGPCS (Environment (環境変数)、 Get、Post、 Cookie (クッキー)、そして Server)<br/>
<a href="http://php.net/manual/ja/ini.core.php">http://php.net/manual/ja/ini.core.php</a></p></blockquote>

<p>これを反映して再起動。</p>

<h2>Vagrantでの反映</h2>

<p>ファイルは予め用意しておき、<code>vagrant up</code>だけで反映されるようにしてみる。<br/>
とはいえ、シェルでコピーしているだけだけど。</p>

<p>セットアップ用のシェルスクリプト内に以下を追記。<br/>
設定用の<code>httpd</code>ファイルはVagrantfileと同階層の<code>vagrant.config</code>ディレクトリ以下に設置しているものとする。</p>

<pre><code>cp /vagrant/vagrant.config/httpd /etc/sysconfig/httpd
</code></pre>

<p>この状態で、<code>vagrant up</code>すれば、<code>vagrant.config</code>内で設定したファイルがvagrant環境に反映される。</p>

<h2>参考</h2>

<p><a href="http://yukke.blog3.fc2.com/blog-entry-68.html">ブログ Apache＋PHPで環境変数を追加したい</a></p>

<p>この参考記事でわかったけれど、同じく<code>Apache Environment</code>と<code>environment</code>でハマってた。<br/>
以下のような関係になっているらしい。</p>

<table>
<thead>
<tr>
<th>方法 </th>
<th> 反映先 </th>
<th> 取得方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>httpd.conf </td>
<td> Apache Environment </td>
<td> $_SERVER</td>
</tr>
<tr>
<td>httpd </td>
<td> environment </td>
<td> $_ENV</td>
</tr>
</tbody>
</table>


<p><a href="http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q11102244256">phpで環境変数$_ENVを使用しようとしていますが使用できない状態です。&hellip; &ndash; Yahoo!知恵袋</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wordpressをherokuにインストールする場合はルーティングのhtaccessを自分で設置すること]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/22/heroku-wp-htaccess/"/>
    <updated>2015-05-22T16:11:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/22/heroku-wp-htaccess</id>
    <content type="html"><![CDATA[<p>タイトルママ。<br/>
ちょっとハマったのでメモ。</p>

<!-- more -->


<h2>WordPressのインストール</h2>

<p>以下の手順で通常通りwordpressをインストールした。</p>

<ol>
<li>herokuにインストール用のアプリを作成</li>
<li>gitでローカルにclone</li>
<li>2のディレクトリ内に<a href="https://ja.wordpress.org/">Wordpress日本語版</a>をダウンロードして展開</li>
<li>herokuのアプリにmySQLのアドオン、<a href="https://addons.heroku.com/cleardb">ClearDB</a>を入れる</li>
<li>環境変数から、DBの接続情報を確認。<br/>
<code>mysql://ユーザ名:パスワード@サーバ名/データベース?reconnect=true</code></li>
<li>wp-config.phpにDB情報を反映</li>
<li>PushしてDploy</li>
<li>wp-admin/install.phpにアクセスして、サイト名やユーザー名などを設定してインストール。</li>
<li>完了</li>
</ol>


<h2>固定ページにアクセス</h2>

<p>通常の投稿でもたぶん同じ事が起こると思うが、<br/>
最初から入っているサンプルの固定ページにアクセス。</p>

<blockquote><p><a href="http://YOUR-APP-NAME.herokuapp.com/sample-page/">http://YOUR-APP-NAME.herokuapp.com/sample-page/</a></p></blockquote>

<p>アクセスを確認してから、特にソースは触らずに<a href="http://kayakuguri.github.io/blog/2015/04/21/git-allow-empty/">空でdeploy</a>。</p>

<p>再度上記の固定ページにアクセスすると、<strong>404 Notfound</strong>。</p>

<h2>ルーティング</h2>

<p>ローカルに入れていたWordPressのディレクトとファイルを見比べていると、<br/>
ローカルのものはドキュメントルートに<code>.htaccess</code>がある。</p>

<p>中身を見ていると、リダイレクトしているよう。</p>

<p>どうやら、wordpressのインストール時に、wordpressのルートにルーティング用の<code>.htaccess</code>を自動で作成するよう。<br/>
それがdeployのタイミングで消えてしまい、リダイレクトがかからず、404となっていた。</p>

<p><code>.htaccess</code>の中身は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># BEGIN WordPress
</span><span class='line'>&lt;IfModule mod_rewrite.c&gt;
</span><span class='line'>RewriteEngine On
</span><span class='line'>RewriteBase /
</span><span class='line'>RewriteRule ^index\.php$ - [L]
</span><span class='line'>RewriteCond %{REQUEST_FILENAME} !-f
</span><span class='line'>RewriteCond %{REQUEST_FILENAME} !-d
</span><span class='line'>RewriteRule . /index.php [L]
</span><span class='line'>&lt;/IfModule&gt;
</span><span class='line'>
</span><span class='line'># END WordPress</span></code></pre></td></tr></table></div></figure>


<p>これを<code>.htaccess</code>の名前でwordpressのルートに保存してやり、git管理下においてやればよい。</p>

<p>これを置いた状態であれば、deployかけても問題なくアクセスが出来た。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Session Fixation]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/21/session-fixation/"/>
    <updated>2015-05-21T19:09:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/21/session-fixation</id>
    <content type="html"><![CDATA[<p>今更ながら、Session Fixationなるものを知ったのでメモ。</p>

<!-- more -->


<p>内容は以下、徳丸先生が詳しい。<br/>
<a href="http://blog.tokumaru.org/2009/01/introduction-to-session-fixation-attack.html">とくまるひろしのSession Fixation攻撃入門 | 徳丸浩の日記</a></p>

<p>日本語では、<code>セッション固定攻撃</code>と呼ばれているようで、<br/>
ログイン認証をセッションで行っているサイトに対して、何らかの方法でユーザーに意図した固定セッションIDを与えた状態でログインしてもらい、<br/>
攻撃者はそのIDでログインしたことにする、というもののよう。</p>

<p>対策としては以下いずれかになるよう。</p>

<blockquote><p>(1) セッション変数内に特定の値を常に与えるようにし、もしその値が無かった場合には正しくふられたセッションIDではないと判断する。<br/>
(セッションIDの正当性をセッション変数内に埋め込む)<br/>
(2) ログイン処理など、そのサイトでの本来のセッションの使用を行う時点で(重要な情報を持たせるときに)、セッションIDを変更する。
<a href="http://pentan.info/php/session_fixation.html">http://pentan.info/php/session_fixation.html</a></p></blockquote>

<p>2のセッションの付け替えは以下のようにする。</p>

<pre><code>session_start();
session_destroy();
session_start();
session_regenerate_id();
</code></pre>

<p>ログインが成功し、ログイン認証をセッションに格納する直前に付け替えを入れてやれば、<br/>
ログイン後には別のIDとなるので、攻撃側が用意した固定IDを回避することが出来る。</p>

<p>ただしこの、<code>session_regenerate_id</code>は結構な負荷がかかるようで、<br/>
連続して使用しているとセッションが切れてしまうらしい。<br/>
なので、連続的に実行されないようにする事が重要っぽい。<br/>
ログイン時に一回のみ実行されるようにしておけば特に問題なさそう。</p>

<h2>参考</h2>

<p><a href="http://canalize.jp/archives/009281.php">セッションハイジャック と session_regenerate_id( )関数 &ndash; Shoulder.jp</a> <br/>
<a href="http://pentan.info/php/session_gc.html">セッションの有効期間とか設定とか挙動とかを調べました &ndash; [PHP + PHP] ぺんたん info</a><br/>
<a href="http://pentan.info/php/session_fixation.html">セッション固定攻撃(session fixation) &ndash; [PHP + PHP] ぺんたん info</a><br/>
<a href="http://blog.ohgaki.net/session_regenerate_id_wo">ログイン後にsession_regenerate_id()を実行するだけで十分か? | yohgaki&#039;s blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesfroce]開発者コンソールでのFIELD_INTEGRITY_EXCEPTIONエラー]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/14/developper-console-error/"/>
    <updated>2015-05-14T14:50:12+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/14/developper-console-error</id>
    <content type="html"><![CDATA[<p>たまに起こっていつも調べている気がするのでメモ。</p>

<!-- more -->


<p>最近は開発者コンソールで開発をしている事が多いのだけれど、ファイルをいざ保存しようとしたらたまに以下のようなエラーが出て保存できない時がある。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/Force_com_Developer_Console_01.jpg" alt="" /></p>

<blockquote><p>FIELD_INTEGRITY_EXCEPTION<br/>
Failde to create createContainerMember for containerId=undefined:null は無効な containerIdです。</p></blockquote>

<p>保存しているファイルの種類や内容には関係ない。<br/>
これが起こるとsavingのまま止まってしまう。</p>

<p>で、解決方法は公式にある。</p>

<p><a href="https://help.salesforce.com/apex/HTViewSolution?id=000204953&amp;language=en_US">Developer console cannot save classes/triggers/pages</a></p>

<p>まず、開発者コンソールを閉じて、再度開く。(念のため)<br/>
で、開発者コンソールのメニューから、<code>Workspace</code> &ndash;> <code>New Workspace</code>を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/Force_com_Developer_Console_02.jpg" alt="" /></p>

<p>適当な名前で保存する。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/Force_com_Developer_Console_03.jpg" alt="" /></p>

<p>ワークスペースが新しく切り替わる(見た目は変わらない)。<br/>
すると、無事保存出来るようになる。</p>

<p>一度保存出来るようになったらもとのdefaultのワークスペースに戻しても問題なくなっているので、<br/>
先程作った適当なワークスペース削除しても問題なし。</p>

<p>開発者コンソールは便利なんだけど、いかんせん不安定な印象がある…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SFストリーミングAPIを試してみた]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/13/sf-streaming-api/"/>
    <updated>2015-05-13T11:54:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/13/sf-streaming-api</id>
    <content type="html"><![CDATA[<p>salesforceのストリーミングAPIを利用すればプッシュ通知のようなものを作成できる、ということで試してみた。</p>

<!-- more -->


<h2>仕組み</h2>

<p>Long pollingと呼ばれる技術が使用されているよう。<br/>
仕組みとしては以下がわかりやすかった。</p>

<blockquote><p>1.クライアントからは従来のポーリング同様に、サーバに対して要求を発行<br/>
2.サーバ側はその要求に対して即時に応答を返さず、ずっと掴んだままにしておく<br/>
3.サーバ側でイベントの発生を検知したら、それまで掴みっぱなしになっていた複数の要求に対して一斉に応答を返す<br/>
4.応答を受信したブラウザはすぐに次の要求を再発行して、ふたたび応答待ちの状態へと戻る<br/>
⇒  結果的にサーバからのプッシュ通知が行われたような動作になります。<br/>
<a href="http://www.terrasky.co.jp/blog/?p=802#sthash.HrI4ITMg.dpuf">http://www.terrasky.co.jp/blog/?p=802#sthash.HrI4ITMg.dpuf</a></p></blockquote>

<h2>流れ</h2>

<p>作成の手順は以下。</p>

<ol>
<li>オブジェクトの作成(設定)</li>
<li>PushTopicの作成</li>
<li>PushTopicをチャンネルに登録、テスト</li>
</ol>


<h2>1.オブジェクトの作成(設定)</h2>

<p>プッシュするためのオブジェクトとして今回は以下のカスタムオブジェクトを使用した。</p>

<p>オブジェクト名：CustomMessage<br/>
プッシュ内容：未読(Unread__c)のチェックボックスがtrueになればプッシュ通知</p>

<h2>2.PushTopicの作成</h2>

<p><code>PushTopic</code>は管理画面上からは作成出来ないよう。<br/>
開発者コンソールから直接レコードを作成する。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/stereaming_api1.jpg" alt="" /></p>

<p>実行させたコードは以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PushTopic pushTopic = new PushTopic();
</span><span class='line'>pushTopic.Name = 'UnreadNotification';
</span><span class='line'>pushTopic.Query = 'SELECT Id, Unread__c FROM CustomMessage__c';
</span><span class='line'>pushTopic.NotifyForOperationCreate = true;
</span><span class='line'>pushTopic.NotifyForOperationUpdate = true;
</span><span class='line'>pushTopic.NotifyForOperationUndelete = false;
</span><span class='line'>pushTopic.NotifyForOperationDelete = false;
</span><span class='line'>pushTopic.ApiVersion = 32.0;
</span><span class='line'>insert pushTopic;</span></code></pre></td></tr></table></div></figure>


<p>※<code>NotifyForOperations</code>と<code>NotifyForFields</code>は変更出来ない、と怒られた。</p>

<h3>通知タイミング</h3>

<p>レコードがどうなった時に通知するかを、<code>NotifyForOperationCreate</code>等で設定している。<br/>
(これらはデフォルトでは<code>true</code>)</p>

<table>
<thead>
<tr>
<th>項目 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>NotifyForOperationCreate </td>
<td> 作成</td>
</tr>
<tr>
<td>NotifyForOperationUpdate </td>
<td> 更新</td>
</tr>
<tr>
<td>NotifyForOperationUndelete </td>
<td> 復元</td>
</tr>
<tr>
<td>NotifyForOperationDelete </td>
<td> 削除</td>
</tr>
</tbody>
</table>


<p><img src="http://kayakuguri.github.io/images/2015/05/stereaming_api2.jpg" alt="" /></p>

<p>実行後、SOQLで参照してみた。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/stereaming_api3.jpg" alt="" /></p>

<h3>通知対象</h3>

<p><code>NotifyForFields</code>は設定出来ない、と怒られたが、ここはデフォルトでは<code>Referenced</code>になっている。<br/>
これは、指定したクエリのSELECT句とWHERE句、両方を通知対象とする、という意味のよう。<br/>
これをSELECT句だけを対象に、とも出来るのだとか。</p>

<p>今回はSELECTに指定した、Unread__cが作成、更新されると通知される。<br/>
(WHERE句がないので、全てのレコード対象)</p>

<p>またこのSELECT句には必ず<code>ID</code>を含める必要があるとのこと。</p>

<h2>3.PushTopicをチャンネルに登録、テスト</h2>

<h3>登録</h3>

<p>以下にアクセス。<br/>
<a href="https://workbench.developerforce.com/login.php">https://workbench.developerforce.com/login.php</a></p>

<p>これは、デモ目的でのみ利用可能な、Salesforceから提供されている、ワークベンチのホスト型インスタンス、だそう。<br/>
本番利用の際は自前で、ワークベンチの設定が必要なのだとか。<br/>
(この辺は未調査)</p>

<p><code>Environment</code>は<code>Production</code>を選択した。<br/>
<code>API Version</code>は<code>32</code>を選択。(33はなかった)</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/stereaming_api4.jpg" alt="" /></p>

<p>規約に同意して、<code>Login with Salesforce</code>をクリック。<br/>
承認を求められるので、<code>許可</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/stereaming_api5.jpg" alt="" /></p>

<p><code>Jump to:</code>で、<code>Streaming Push Topics</code>を選択。<br/>
<code>select</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/stereaming_api6.jpg" alt="" /></p>

<p>次の画面で接続が行われる。<br/>
Push Topicで先程作成した、PushTopicを選択。<br/>
デフォルトでは登録されていない状態っぽいので、<code>Subscribe</code>ボタンをクリックして登録しておく。<br/>
その状態でブラウザを開いたままにしておく。<br/>
<img src="http://kayakuguri.github.io/images/2015/05/stereaming_api7.jpg" alt="" /></p>

<h3>テスト</h3>

<p>新しいウインドウで、再度以下にアクセスし、同じく<code>Production</code>のバージョン<code>32</code>でログイン。<br/>
<a href="https://workbench.developerforce.com/login.php">https://workbench.developerforce.com/login.php</a></p>

<p>上部メニューの<code>data</code>から、<code>Insert</code>をクリック。<br/>
<img src="http://kayakuguri.github.io/images/2015/05/stereaming_api8.jpg" alt="" /></p>

<p>Object Typeで対象のカスタムオブジェクト(CustomMessage__c)を選択し、<code>Next</code>をクリック。<br/>
<img src="http://kayakuguri.github.io/images/2015/05/stereaming_api9.jpg" alt="" /></p>

<p>オブジェクトをインサートするための情報を入力。<br/>
OwinIDは入力しなくても大丈夫だった。<br/>
<img src="http://kayakuguri.github.io/images/2015/05/stereaming_api10.jpg" alt="" /></p>

<p><code>Commit Insert</code>をクリックするとインサートが完了する。<br/>
<img src="http://kayakuguri.github.io/images/2015/05/stereaming_api11.jpg" alt="" /></p>

<p>すると、先程開いていた画面に内容が(ほぼ)リアルタイムに通知される。<br/>
<img src="http://kayakuguri.github.io/images/2015/05/stereaming_api12.jpg" alt="" /></p>

<p><code>sobject</code>には、PushTopicのSELECT句で設定した項目が入っている。</p>

<p>このレコードの作成はこの<code>workbench</code>上からわざわざ作業しなくても、Salesfroceから直接レコードを新規で作成しても受信は問題なくできた。<br/>
あとは、Visualforceのコードに組み込めば受信ページを作れるよう。</p>

<h2>制限</h2>

<p>色々と制限があるよう。詳しくは以下の記事の最後のほうの表を参照。<br/>
<a href="http://www.terrasky.co.jp/blog/?p=802">http://www.terrasky.co.jp/blog/?p=802</a></p>

<p>トピック数が20、とか、登録者数が20、とか、結構厳しい。<br/>
そもそも、Visualforceでの利用で、SFのアカウントを持っている人が通知を受け取るページを開発するのに使用する事を前提としているっぽい。<br/>
通常のwebサービスでSFからの通知を受け取るのに利用出来るかと思って調べていたのだが、どうも違うようだった。</p>

<h2>参考</h2>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.api_streaming.meta/api_streaming/quick_start_workbench.htm">ワークベンチを使用したクイックスタート | Force.com ストリーミング API 開発者ガイド | Salesforce Developers</a><br/>
<a href="http://tyoshikawa1106.hatenablog.com/entry/2013/08/01/225204">SFDC：Streaming API 試してみました &ndash; tyoshikawa1106のブログ</a><br/>
<a href="http://www.terrasky.co.jp/blog/?p=802">10分で分かる！使える！ストリーミング API &laquo;  TerraSky Tech Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[herokuアドオン]cloudinaryでの画像制限設定について]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/11/cloudinary-security/"/>
    <updated>2015-05-11T12:07:56+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/11/cloudinary-security</id>
    <content type="html"><![CDATA[<p>cloudinaryを利用した時に他者に乱用されたりしないのかどうかを調べてみた。</p>

<!-- more -->


<h2>画像のURL</h2>

<p>アップロードする際に、画像名となる<code>public_url</code>を指定しなければランダムで文字列がふられる。</p>

<p><strong>デフォルトでのアップロードの例</strong></p>

<blockquote><p><a href="https://res.cloudinary.com/harslxcej/image/upload/xa9kfgp9jvxouekmrrqu">https://res.cloudinary.com/harslxcej/image/upload/xa9kfgp9jvxouekmrrqu</a></p></blockquote>

<p><code>harslxcej</code>はcloudinaryアカウトごとの名前。<code>cloud_name</code>と呼ばれるもの。<br/>
<a href="http://cloudinary.com/documentation/api_and_access_identifiers#cloud_name">Cloud Name | API, URLs and access identifiers | Cloudinary</a></p>

<p>これだけでも推測は不可能だが、さらにprivateモードを利用することでさらに複雑にすることが可能。</p>

<p>PHPでのアップロード時のオプション</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\Cloudinary\Uploader::upload("your-img",array(
</span><span class='line'>    "type" =&gt; "private"
</span><span class='line'>));</span></code></pre></td></tr></table></div></figure>


<p>表示時のオプション</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$private = cl_image_tag($public_id . ".jpg", array(
</span><span class='line'>    "type"=&gt;"private"
</span><span class='line'>));</span></code></pre></td></tr></table></div></figure>


<p>表示URL</p>

<blockquote><p><a href="http://res.cloudinary.com/harslxcej/image/private/leyxq6ys2wielv6b8yki">http://res.cloudinary.com/harslxcej/image/private/leyxq6ys2wielv6b8yki</a></p></blockquote>

<p>しかしこのままではアクセスが出来ない。<br/>
このURLでのアクセスを許可してやる必要がある。</p>

<h3>編集セットの個別許可</h3>

<p>Cloudinaryの管理画面から、<code>Transformations</code>を選択。<br/>
ここに、いままでアクセスしたことがある編集設定などがずらずらと並んでいるので、その中から探し出すか、新たに設定を作成してやる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/cloudinary_security04.jpg" alt="Create new" /></p>

<p>編集設定を作る</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/cloudinary_security05.jpg" alt="Create new" /></p>

<p>で、許可したい編集セットの<code>Disallowed</code>となっているマーク部分をクリックすると、<code>Allowed</code>の緑アイコンに代わり、アクセスが許可される。<br/>
(編集なしの生データにアクセスを許可してやるには、<code>Create a new transformaton..</code>で何もせずにそのまま保存してやればよい。)</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/cloudinary_security03.jpg" alt="allowed" /></p>

<h3>sign_url</h3>

<p>最初は<code>sign_url</code>をつけないとプライベートのものはアクセス出来ないと思っていたが、上記の方法で解消できた。<br/>
以下でもアクセスは出来るが、プライベートタイプのものを表示する方法、という用途ではないと思われる。</p>

<p><code>"sign_url"=&gt;true</code>をつけると固定のURLとなるので、編集が不可能になるが、表示が許可されるようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$private = cl_image_tag($public_id . ".jpg", array(
</span><span class='line'>    "type"=&gt;"private",
</span><span class='line'>    "sign_url"=&gt;true
</span><span class='line'>));</span></code></pre></td></tr></table></div></figure>


<p>表示URL</p>

<blockquote><p><a href="https://res.cloudinary.com/harslxcej/image/private/s--q7MlJXLg--/leyxq6ys2wielv6b8yki.jpg">https://res.cloudinary.com/harslxcej/image/private/s&#8211;q7MlJXLg&#8211;/leyxq6ys2wielv6b8yki.jpg</a></p></blockquote>

<h3>直リンクは可能</h3>

<p>ただし、URLさえわかってしまえば、表示することは可能。<br/>
また、いわゆる別サーバーからの直リンク、も制限は出来ない。</p>

<h2>編集の制限</h2>

<p>cloudinaryはURLから直接画像や動画を編集する事が出来る。<br/>
例えば以下のような指定。</p>

<pre><code>https://res.cloudinary.com/harslxcej/image/upload/h_100,w_100,c_fill/xa9kfgp9jvxouekmrrqu
</code></pre>

<p>これをプログラムからの指定のみに制限する事が可能。</p>

<p>Cloudinaryの管理画面から、<code>Setting -&gt; Security</code>にアクセス。<br/>
<code>Strict transformations:</code>を<code>Enabled</code>にしてsaveする。<br/>
これで、URLからの直接編集が禁止となる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/cloudinary_security01.jpg" alt="Strict transformations" /></p>

<p>２つ下の項目に、<code>Strict video transformations:</code>と動画でも同じく禁止する設定があるので合わせて設定しておくとよいかも。</p>

<p>これで、PHPなどプログラム上からの生成以外は制限することができたが、<br/>
特定のURLからのみはURLでの編集を許可してやることも可能。</p>

<p>上記、<code>Security</code>画面から、<code>Allowed strict referral domains:</code>に許可したいドメインを指定することで設定できる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/cloudinary_security02.jpg" alt="Allowed strict referral domains" /></p>

<h2>参考</h2>

<p><a href="http://support.cloudinary.com/hc/en-us/articles/202520342-Does-Cloudinary-support-uploading-private-images-">Does Cloudinary support uploading private images? &ndash; Cloudinary Support</a><br/>
<a href="http://support.cloudinary.com/hc/en-us/articles/202520632--Can-our-users-upload-private-images-which-are-not-accessible-through-a-public-URL-">Can our users upload private images which are not accessible through a public URL? &ndash; Cloudinary Support</a><br/>
<a href="http://cloudinary.com/blog/how_to_quickly_build_a_stock_photo_site_using_cloudinary">How to quickly build a stock photo site using Cloudinary | Cloudinary Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[herokuアドオン]cloudinaryで動画を試してみた[PHP]]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/07/cloudinary-movie/"/>
    <updated>2015-05-07T15:31:47+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/07/cloudinary-movie</id>
    <content type="html"><![CDATA[<p>2015年5月5日に新しく発表された動画サポートを試してみた。</p>

<!-- more -->


<h2>アップロード</h2>

<p>インストールなどは<a href="http://kayamemo.mrlittlebig.com/blog/2015/05/07/cloudinary-img/">前回の記事</a>参照。</p>

<p>同一ディレクトリにある、movファイルをアップロードした。<br/>
動画は、iPhoneで撮影したもの。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require '../vendor/autoload.php';
</span><span class='line'>
</span><span class='line'>use Cloudinary;
</span><span class='line'>use Cloudinary\Uploader;
</span><span class='line'>
</span><span class='line'>$account = parse_url(getenv('CLOUDINARY_URL'));
</span><span class='line'>
</span><span class='line'>\Cloudinary::config(array(
</span><span class='line'>    "cloud_name" =&gt; $account['host'],
</span><span class='line'>    "api_key" =&gt; $account['user'],
</span><span class='line'>    "api_secret" =&gt; $account['pass']
</span><span class='line'>));
</span><span class='line'>
</span><span class='line'>$ret = \Cloudinary\Uploader::upload("iphone_movie.mov",array(
</span><span class='line'>    "resource_type" =&gt; "video"
</span><span class='line'>));
</span><span class='line'>
</span><span class='line'>print_r($ret);</span></code></pre></td></tr></table></div></figure>


<p>結果は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Array ( 
</span><span class='line'>  [public_id] =&gt; wfdpqg39qjoc6lnkr3cs 
</span><span class='line'>  [version] =&gt; 1430967110 
</span><span class='line'>  [signature] =&gt; 7f52af2c53ccc3b38f8b33300a40d6085c85c032 
</span><span class='line'>  [width] =&gt; 1280 
</span><span class='line'>  [height] =&gt; 720 
</span><span class='line'>  [format] =&gt; mov 
</span><span class='line'>  [resource_type] =&gt; video 
</span><span class='line'>  [created_at] =&gt; 2015-05-07T02:51:50Z 
</span><span class='line'>  [tags] =&gt; Array ( ) 
</span><span class='line'>  [bytes] =&gt; 5572519 
</span><span class='line'>  [type] =&gt; upload 
</span><span class='line'>  [etag] =&gt; 3114c6de99a74817eef082b330754d1e 
</span><span class='line'>  [url] =&gt; http://res.cloudinary.com/harslxcej/video/upload/v1430967110/wfdpqg39qjoc6lnkr3cs.mov 
</span><span class='line'>  [secure_url] =&gt; https://res.cloudinary.com/harslxcej/video/upload/v1430967110/wfdpqg39qjoc6lnkr3cs.mov 
</span><span class='line'>  [audio] =&gt; Array ( 
</span><span class='line'>      [codec] =&gt; aac 
</span><span class='line'>      [bit_rate] =&gt; 63431 
</span><span class='line'>      [frequency] =&gt; 44100 
</span><span class='line'>      [channels] =&gt; 1 
</span><span class='line'>      [channel_layout] =&gt; mono 
</span><span class='line'>  ) 
</span><span class='line'>  [video] =&gt; Array ( 
</span><span class='line'>      [pix_format] =&gt; yuv420p 
</span><span class='line'>      [codec] =&gt; h264 
</span><span class='line'>      [level] =&gt; 31 
</span><span class='line'>      [bit_rate] =&gt; 4604806 
</span><span class='line'>  ) 
</span><span class='line'>  [frame_rate] =&gt; 29.97002997003 
</span><span class='line'>  [bit_rate] =&gt; 4686070 
</span><span class='line'>  [duration] =&gt; 9.538333 
</span><span class='line'>  [rotation] =&gt; 0 
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<h2>表示</h2>

<p>PHPでは、<code>cl_video_tag</code>を利用することで<code>video</code>タグを出力してくれる。</p>

<pre><code>cl_video_tag($public_id, array( "alt" =&gt; "Sample Video" ));
</code></pre>

<p>出力</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;video alt='Sample Video' poster='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.jpg'&gt;
</span><span class='line'>  &lt;source src='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.webm' type='video/webm'&gt;
</span><span class='line'>  &lt;source src='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.mp4' type='video/mp4'&gt;
</span><span class='line'>  &lt;source src='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.ogv' type='video/ogg'&gt;
</span><span class='line'>&lt;/video&gt;</span></code></pre></td></tr></table></div></figure>


<p>このままだとコントローラーが表示されていないので、その辺のオプションも追加する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cl_video_tag($public_id, array(
</span><span class='line'>    "width" =&gt; 600,
</span><span class='line'>    "height" =&gt; 400,
</span><span class='line'>    "crop" =&gt; "fill",
</span><span class='line'>    "preload" =&gt; "none",
</span><span class='line'>    "controls" =&gt; true,
</span><span class='line'>));</span></code></pre></td></tr></table></div></figure>


<p>出力</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;video controls='1' height='400' poster='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.jpg' preload='none' width='600'&gt;
</span><span class='line'>  &lt;source src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.webm' type='video/webm'&gt;
</span><span class='line'>  &lt;source src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.mp4' type='video/mp4'&gt;
</span><span class='line'>  &lt;source src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.ogv' type='video/ogg'&gt;
</span><span class='line'>&lt;/video&gt;</span></code></pre></td></tr></table></div></figure>


<p>サムネイルの出力は以下。<br/>
public idに拡張子をつけてやらないと表示が出来なかった。<br/>
(jpg, png, webp, wdpに対応しているよう)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cl_image_tag($public_id.".jpg", array(
</span><span class='line'>    "width"=&gt;300,
</span><span class='line'>    "height"=&gt;300,
</span><span class='line'>    "crop"=&gt;"fill",
</span><span class='line'>    "resource_type"=&gt;"video"
</span><span class='line'>));</span></code></pre></td></tr></table></div></figure>


<p>結果</p>

<pre><code>&lt;img src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_300,w_300/wfdpqg39qjoc6lnkr3cs.jpg' height='300' width='300'/&gt;
</code></pre>

<h2>フォームからアップロード</h2>

<p><a href="http://kayamemo.mrlittlebig.com/blog/2015/04/16/heroku-transloadit-2/">前回、Transloaditでアップロード</a>した時と同じように、フォームから選択した動画をアップロードしてみる。</p>

<h3>情報が取得できない</h3>

<p>動画をフォームからアップロードしてみると情報が取得できない、と思ったが、<br/>
どうやらサーバーの設定での最大アップロードサイズを超過していたよう。</p>

<p>アップロードサイズはデフォルトでは、<code>2MB</code>。<br/>
これの変更方法は以前に書いていた。<br/>
<a href="http://kayamemo.mrlittlebig.com/blog/2014/02/18/change-max-filesize/">[PHP][heroku]upload_max_filesizeを変更する &ndash; KayaMemo</a></p>

<h3>コード</h3>

<p>以下、全コード。<br/>
動画をアップロードされたら表示するところまで。<br/>
(エラーチェックなどは全くしていないので注意)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require '../vendor/autoload.php';
</span><span class='line'>use Cloudinary;
</span><span class='line'>use Cloudinary\Uploader;
</span><span class='line'>
</span><span class='line'>$showFlg = false;
</span><span class='line'>
</span><span class='line'>if(isset($_FILES['userfile'])){
</span><span class='line'>    if (move_uploaded_file($_FILES['userfile']['tmp_name'], $_FILES['userfile']['name'])) {
</span><span class='line'>        $uploadFile = $_FILES['userfile']['name'];
</span><span class='line'>
</span><span class='line'>    $account = parse_url(getenv('CLOUDINARY_URL'));
</span><span class='line'>    \Cloudinary::config(array(
</span><span class='line'>        "cloud_name" =&gt; $account['host'],
</span><span class='line'>        "api_key" =&gt; $account['user'],
</span><span class='line'>        "api_secret" =&gt; $account['pass']
</span><span class='line'>    ));
</span><span class='line'>
</span><span class='line'>    $ret = \Cloudinary\Uploader::upload($uploadFile,array(
</span><span class='line'>        "resource_type" =&gt; "video"
</span><span class='line'>    ));
</span><span class='line'>    $public_id = $ret['public_id'];
</span><span class='line'>    $showFlg = true;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>?&gt;
</span><span class='line'>
</span><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>&lt;html lang="ja"&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>    &lt;title&gt;ファイルアップロードテスト&lt;/title&gt;
</span><span class='line'>    &lt;meta charset="utf-8"&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>
</span><span class='line'>&lt;?php if(!$showFlg){ ?&gt;
</span><span class='line'>&lt;form enctype="multipart/form-data" method="post" action="upload-form-movie.php"&gt;
</span><span class='line'>    &lt;input type="hidden" name="MAX_FILE_SIZE" value="20000000" /&gt;
</span><span class='line'>    &lt;input name="userfile" type="file"&gt;
</span><span class='line'>    &lt;input type="submit" value="Upload"&gt;
</span><span class='line'>&lt;/form&gt;
</span><span class='line'>&lt;?php }else{
</span><span class='line'>    echo $resize = cl_video_tag($public_id, array(
</span><span class='line'>        "width" =&gt; 600,
</span><span class='line'>        "height" =&gt; 400,
</span><span class='line'>        "crop" =&gt; "fill",
</span><span class='line'>        "preload" =&gt; "none",
</span><span class='line'>        "controls" =&gt; true,
</span><span class='line'>    ));
</span><span class='line'>} ?&gt;
</span><span class='line'>
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://cloudinary.com/blog/introducing_cloud_based_service_for_video_upload_real_time_manipulation_and_optimized_viewing#api_example_1">Introducing cloud based service for video management | Cloudinary Blog</a><br/>
<a href="http://cloudinary.com/documentation/video_manipulation_and_delivery">Video manipulation and delivery | Cloudinary</a></p>

<p><a href="http://php.net/manual/ja/features.file-upload.post-method.php">PHP: POST メソッドによるアップロード &ndash; Manual </a><br/>
<a href="http://www.php-factory.net/trivia/05.php">サーバーのアップロードファイルの最大容量の確認と容量制限の変更｜PHP工房</a><br/>
<a href="https://devcenter.heroku.com/articles/custom-php-settings#user-ini-files-recommended">Customizing Web Server and Runtime Settings for PHP | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[herokuアドオン]cloudinaryで画像のアップロードと表示[PHP]]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/07/cloudinary-img/"/>
    <updated>2015-05-07T11:34:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/07/cloudinary-img</id>
    <content type="html"><![CDATA[<p>PHPを利用して、cloudinaryにアップロードして、画像を表示させてみた。</p>

<!-- more -->


<h2>インストール</h2>

<p>composerを利用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "require": {
</span><span class='line'>    "cloudinary/cloudinary_php": "dev-master"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>インストール。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ composer install
</span><span class='line'>Loading composer repositories with package information
</span><span class='line'>Installing dependencies (including require-dev)
</span><span class='line'>  - Installing cloudinary/cloudinary_php (dev-master cfa2fd7)
</span><span class='line'>    Cloning cfa2fd7d4043844b46411c213795eafb648703df
</span><span class='line'>
</span><span class='line'>Writing lock file
</span><span class='line'>Generating autoload files</span></code></pre></td></tr></table></div></figure>


<h2>herokuにインストール</h2>

<p>アドオンを追加。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/Cloudinary01.jpg" alt="add-on" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons:create cloudinary:starter
</span><span class='line'>Creating unwinding-truly-5886... done
</span><span class='line'>Adding unwinding-truly-5886 to your-app-name... done
</span><span class='line'>Setting CLOUDINARY_URL and restarting your-app-name... done, v3
</span><span class='line'>Use `heroku addons:docs cloudinary` to view documentation.</span></code></pre></td></tr></table></div></figure>


<p>環境変数の<code>CLOUDINARY_URL</code>でアカウント情報を取得できる。</p>

<h2>アップロード</h2>

<p>以下のコードを記述し、アクセス。<br/>
flickr上にある画像をアップロードしている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require '../vendor/autoload.php';
</span><span class='line'>
</span><span class='line'>use Cloudinary;
</span><span class='line'>use Cloudinary\Uploader;
</span><span class='line'>
</span><span class='line'>$account = parse_url(getenv('CLOUDINARY_URL'));
</span><span class='line'>
</span><span class='line'>\Cloudinary::config(array(
</span><span class='line'>    "cloud_name" =&gt; $account['host'],
</span><span class='line'>    "api_key" =&gt; $account['user'],
</span><span class='line'>    "api_secret" =&gt; $account['pass']
</span><span class='line'>));
</span><span class='line'>
</span><span class='line'>$ret = \Cloudinary\Uploader::upload("https://farm9.staticflickr.com/8748/16531734384_afdd2327e5_z.jpg");
</span><span class='line'>
</span><span class='line'>print_r($ret);</span></code></pre></td></tr></table></div></figure>


<p>で、結果は以下のように返ってくる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Array ( 
</span><span class='line'>  [public_id] =&gt; xa9kfgp9jvxouekmrrqu 
</span><span class='line'>  [version] =&gt; 1430964069 
</span><span class='line'>  [signature] =&gt; 088135f7c32ad04436a18eb35d05b28bfd9e7870 
</span><span class='line'>  [width] =&gt; 640 
</span><span class='line'>  [height] =&gt; 480 
</span><span class='line'>  [format] =&gt; jpg 
</span><span class='line'>  [resource_type] =&gt; image 
</span><span class='line'>  [created_at] =&gt; 2015-05-07T02:01:09Z 
</span><span class='line'>  [tags] =&gt; Array ( ) 
</span><span class='line'>  [bytes] =&gt; 174550 
</span><span class='line'>  [type] =&gt; upload 
</span><span class='line'>  [etag] =&gt; 6fdff26d1bd4d9cc55c3c613743a8dc1 
</span><span class='line'>  [url] =&gt; http://res.cloudinary.com/harslxcej/image/upload/v1430964069/xa9kfgp9jvxouekmrrqu.jpg 
</span><span class='line'>  [secure_url] =&gt; https://res.cloudinary.com/harslxcej/image/upload/v1430964069/xa9kfgp9jvxouekmrrqu.jpg 
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<h2>URLでの表示</h2>

<p>アップロードが完了したものはアクセスするURLを変更することでサイズなどを変更できる。</p>

<h3>オリジナル</h3>

<pre><code>http://res.cloudinary.com/dalir2yty/image/upload/xa9kfgp9jvxouekmrrqu_nml8db.jpg
</code></pre>

<p><img src="http://res.cloudinary.com/dalir2yty/image/upload/xa9kfgp9jvxouekmrrqu_nml8db.jpg" alt="オリジナル" /></p>

<h3>リサイズ</h3>

<pre><code>http://res.cloudinary.com/dalir2yty/image/upload/w_100,h_100/xa9kfgp9jvxouekmrrqu_nml8db.jpg
</code></pre>

<p><img src="http://res.cloudinary.com/dalir2yty/image/upload/w_100,h_100/xa9kfgp9jvxouekmrrqu_nml8db.jpg" alt="リサイズ" /></p>

<h3>角丸</h3>

<pre><code>http://res.cloudinary.com/dalir2yty/image/upload/w_320,h_240,c_fill,r_20/xa9kfgp9jvxouekmrrqu_nml8db.jpg
</code></pre>

<p><img src="http://res.cloudinary.com/dalir2yty/image/upload/w_320,h_240,c_fill,r_20/xa9kfgp9jvxouekmrrqu_nml8db.jpg" alt="角丸" /></p>

<p>利用できるタグなどは以下を参照。<br/>
<a href="http://cloudinary.com/documentation/image_transformations">Image transformations | Cloudinary</a></p>

<h2>PHPでURLの生成</h2>

<p>上記のURLをPHPのコードで生成する。</p>

<h3>cl_image_tag</h3>

<p><code>cl_image_tag</code>を利用すると、<code>&lt;img&gt;</code>のタグごと出力される。</p>

<pre><code>$public_id = 'xa9kfgp9jvxouekmrrqu';
echo cl_image_tag($public_id, array( "alt" =&gt; "Sample Image" ));
</code></pre>

<p>結果</p>

<pre><code>&lt;img src='https://res.cloudinary.com/harslxcej/image/upload/xa9kfgp9jvxouekmrrqu' alt='Sample Image'/&gt;
</code></pre>

<p>加工</p>

<pre><code>cl_image_tag($public_id, array(
    "width" =&gt; 100,
    "height" =&gt; 100,
    "crop" =&gt; "fill",
    "effect" =&gt; "grayscale"
));
</code></pre>

<p>結果</p>

<pre><code>&lt;img src='http://res.cloudinary.com/dalir2yty/image/upload/c_fill,e_grayscale,h_100,w_100/xa9kfgp9jvxouekmrrqu_nml8db.jpg' height='100' width='100'/&gt;
</code></pre>

<p><img src='http://res.cloudinary.com/dalir2yty/image/upload/c_fill,e_grayscale,h_100,w_100/xa9kfgp9jvxouekmrrqu_nml8db.jpg' height='100' width='100'/></p>

<h3>cloudinary_url</h3>

<p>URLを直接取得するには、<code>cloudinary_url</code>を使用する。</p>

<pre><code>echo cloudinary_url($public_id);
echo cloudinary_url($public_id, array(
    "width" =&gt; 100,
    "height" =&gt; 100,
    "crop" =&gt; "fill",
    "effect" =&gt; "grayscale"
));
</code></pre>

<p>その他、詳しくは以下を参照。</p>

<p><a href="http://cloudinary.com/documentation/php_image_manipulation">PHP image manipulation | Cloudinary</a></p>

<h2>参考</h2>

<p><a href="http://cloudinary.com/documentation/php_integration">PHP integration | Cloudinary</a><br/>
<a href="http://programmer-jobs.blogspot.jp/2013/12/phpphalconcloudinary.html">PHPフレームワークのPhalconで&#12289;写真ストレージクラウドのCloudinaryと連携 一言多いプログラマーの独り言</a><br/>
<a href="https://github.com/cloudinary/cloudinary_php">cloudinary/cloudinary_php</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]アウトバウンドメッセージ送信時のエラー]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/01/salesforce-outbound-xml/"/>
    <updated>2015-05-01T14:26:22+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/01/salesforce-outbound-xml</id>
    <content type="html"><![CDATA[<p>先日、アウトバウンドメッセージをPHPで受けとる方法を紹介したけれど、試しているとアウトバウンドメッセージの送信がSalesforce側から何度も試行されていることがわかった。</p>

<!-- more -->


<p>salesforce側のログを見ていると、以下のようなエラーが出ている。<br/>
<code>設定 &gt; 監視 &gt; アウトバウンドメッセージ</code></p>

<p><img src="http://kayakuguri.github.io/images/2015/05/outbound_error.jpg" alt="エラー" /></p>

<blockquote><p>org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.</p></blockquote>

<p>どうやら、PHP側の応答が、SOAPの形式に則ってないとsalesforce側でXMLの解析ができずにエラーが出てしまうっぽい。<br/>
なので、エラーが解消されるまで数回試行が続く、っぽい。</p>

<p>応答はXMLの形式でなければならないので、headerでXMLとしてやる必要がある。</p>

<pre><code>header("Content-Type: application/xml; charset=UTF-8");
</code></pre>

<p>また、返却するXMLは以下のような形でないといけないよう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
</span><span class='line'>  &lt;soapenv:Body&gt;
</span><span class='line'>      &lt;notificationsResponse xmlns="http://soap.sforce.com/2005/09/outbound"&gt;
</span><span class='line'>      &lt;Ack&gt;true&lt;/Ack&gt;
</span><span class='line'>  &lt;/notificationsResponse&gt;
</span><span class='line'>  &lt;/soapenv:Body&gt;
</span><span class='line'>&lt;/soapenv:Envelope&gt;</span></code></pre></td></tr></table></div></figure>


<p>というわけで、以下のようにPHPを書いてやればエラーは出ない。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>header("Content-Type: application/xml; charset=UTF-8");
</span><span class='line'>
</span><span class='line'>//--何らかの処理--
</span><span class='line'>
</span><span class='line'>$response = '&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;notificationsResponse xmlns="http://soap.sforce.com/2005/09/outbound"&gt;&lt;Ack&gt;true&lt;/Ack&gt;&lt;/notificationsResponse&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;';
</span><span class='line'>echo $response;</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://www.tgerm.com/2014/08/testing-soap-outbound-messages-without-failures-saxexception.html">{!blog.concret.io}: Testing SOAP Outbound Messages without failures</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Heroku]スティッキーセッションの有効化]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/30/heroku-sticky-session/"/>
    <updated>2015-04-30T10:03:06+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/30/heroku-sticky-session</id>
    <content type="html"><![CDATA[<p>herokuで、<code>スティッキーセッション(セッションアフィニティ)</code>を有効化するオプションが公開されたってことで、調べてみた。</p>

<!-- more -->


<h2>dyno</h2>

<p>herokuでは、dynoを増やしていく=ロードバランサとなって、アクセスの度にランダムにサーバを割り振られる。<br/>
なので、サーバ側に保持しているセッションは同一ユーザーのアクセスであってもページを遷移しただけでセッションが保持されていないサーバに割り振られてしまい、セッション切れを起こしてしまう、という問題がある。<br/>
これを解決していたのが主に、<a href="https://addons.heroku.com/memcachier">MemCachier</a>というアドオンで、このMemCachier側にセッションを保持してやることでサーバが変わってもセッションを維持する、という流れで作成するのがセオリーだった。<br/>
(1Dynoだとサーバは一つなので必要ない)</p>

<h2>スティッキーセッション</h2>

<p>それを解決するのが、スティッキーセッション、セッション・アフィニティ、と呼ばれるもののよう。<br/>
これは、ロードバランサなどでサーバが数台ある場合に、特定のユーザーからのアクセスは特定のサーバのみに接続するように調整するもの、らしい。<br/>
なので、ページ遷移をしてもサーバが変わらず、セッションが切れる事がない、というわけ。<br/>
ただし、この設定で重要なのは、この同じサーバに割り当てる時間、の設定、とのこと。<br/>
長くするとロードバランサの意味がなくなっていくし、短くするとセッションが切れてしまう。<br/>
heroku上でこの時間を設定できるのかは今のところ不明。</p>

<p><a href="http://docs.aws.amazon.com/ja_jp/ElasticLoadBalancing/latest/DeveloperGuide/elb-sticky-sessions.html">スティッキーセッションの有効化と無効化</a></p>

<h2>herokuでの設定</h2>

<p>この機能はまだベータ版、ってことで、デフォルトではもちろん無効となっている。<br/>
有効にするには以下のコマンドを実行する必要がある。</p>

<pre><code>$ heroku labs:enable http-session-affinity
</code></pre>

<h2>検証</h2>

<p>実際に検証してみる。<br/>
検証は、以下のサイトにあった、訪問回数をカウントする単純なものを使用してみた。<br/>
この回数がリロードの度に増えていけばセッションが引き継がれている、ということだが、<br/>
別サーバに接続されてセッションがなくなるとカウントがやり直しになったりする、はず。</p>

<p><a href="http://www.phppro.jp/school/phpschool/vol8/1">第8回　セッションの仕組みを知ろう &ndash; PHP基礎講座</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>session_start();
</span><span class='line'>
</span><span class='line'>if (isset($_SESSION["counter"])) {
</span><span class='line'>  $_SESSION["counter"]++;
</span><span class='line'>  print($_SESSION["counter"]."回目の読み込みです。");
</span><span class='line'>} else {
</span><span class='line'>   $_SESSION["counter"] = 0;
</span><span class='line'>  print("はじめての読み込みです。");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>1 Dyno</h3>

<p>まず、Dynoを１で。<br/>
これは順調に増えた。当然の結果。</p>

<h3>2 Dyno</h3>

<p>dynoを増やしてみる。<br/>
何度かリロードしていると、10回目くらいで「はじめての読み込みです。」という表示が登場。<br/>
それ以降、何回かごとに別々のカウント数が表示される状態に。</p>

<h3>セッションアフィニティ</h3>

<p>で、この2Dynoの状態でセッションアフィニティをオンに。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku labs:enable http-session-affinity                                                    [ruby-2.1.2]
</span><span class='line'>Enabling http-session-affinity for session-afinity-test... done
</span><span class='line'>WARNING: This feature is experimental and may change or be removed without notice.
</span><span class='line'>For more information see: https://devcenter.heroku.com/articles/session-affinity</span></code></pre></td></tr></table></div></figure>


<p>アクセスしてみる。<br/>
100になるくらいまでリロードしてみたが、正常にカウント出来たいたので、きちんと同一セッションを見にいっていると思う。</p>

<h3>注意</h3>

<p>ただし、herokuをdeployするとセッションが切れてしまうのは変わらないようなので注意が必要。<br/>
また、ベータ版の機能となるので、これに頼った実装はまだ早いと思われる。</p>

<h2>参考</h2>

<p><a href="https://blog.heroku.com/archives/2015/4/28/introducing_session_affinity">Heroku | Introducing Session Affinity</a><br/>
<a href="https://devcenter.heroku.com/articles/session-affinity">Heroku Labs: Session Affinity | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Salesforce]承認申請のアウトバウンドメッセージをPHPで受け取る]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/28/approval-process-outbound-massage/"/>
    <updated>2015-04-28T20:20:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/28/approval-process-outbound-massage</id>
    <content type="html"><![CDATA[<p>salesforceからのアウトバウンドメッセージの内容をPHPで受け取ってみた。</p>

<!-- more -->


<h2>アウトバウンドメッセージの設定</h2>

<p>前回作成したものの申請時のアクション部分に<code>アウトバウンドメッセージ</code>を追加。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/outbound01.jpg" alt="" /></p>

<p>以下のように設定した。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/outbound02.jpg" alt="" /></p>

<p>設定完了<br/>
<img src="http://kayakuguri.github.io/images/2015/04/outbound03.jpg" alt="" /></p>

<h2>PHPで受け取る</h2>

<p>アウトバウンドメッセージは<code>SOAP</code>で通信が行われる。<br/>
なので、XML。<br/>
以下のようにアクセスが記録されていた。</p>

<pre><code>at=info method=POST path="/liam_dnes.php?id=1" host=shrouded-island-xxxx.herokuapp.com request_id=01b99464-c9dc-4e15-aa19-xxxxxxx fwd="xxx.xxx.78.8" dyno=web.1 connect=1ms service=4ms status=200 bytes=189
</code></pre>

<p>どうやらPOSTでアクセスされているよう。<br/>
<code>$_POST</code>のままでは取得できなかった。<br/>
どうやら生のPOSTデータを取得する必要があるらしい。</p>

<p>以下で取得した。</p>

<pre><code>$data = file_get_contents( 'php://input' );
</code></pre>

<p>取得すると、以下のようなXMLが取得できた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
</span><span class='line'>    &lt;soapenv:Body&gt;
</span><span class='line'>        &lt;notifications xmlns="http://soap.sforce.com/2005/09/outbound"&gt;
</span><span class='line'>            &lt;OrganizationId&gt;00D10000000Zyxxxxx&lt;/OrganizationId&gt;
</span><span class='line'>            &lt;SessionId xsi:nil="true"/&gt;
</span><span class='line'>            &lt;PartnerUrl&gt;https://ap.salesforce.com/services/Soap/u/33.0/00D100000xxxxx&lt;/PartnerUrl&gt;
</span><span class='line'>            &lt;ActionId&gt;04k100000008STGAA2&lt;/ActionId&gt;
</span><span class='line'>            &lt;EnterpriseUrl&gt;https://ap.salesforce.com/services/Soap/c/33.0/00D100000xxxxx&lt;/EnterpriseUrl&gt;
</span><span class='line'>            &lt;Notification&gt;
</span><span class='line'>                &lt;Id&gt;04l1000000xxxxxx&lt;/Id&gt;
</span><span class='line'>                &lt;sObject xsi:type="sf:Opportunity" xmlns:sf="urn:sobject.enterprise.soap.sforce.com"&gt;
</span><span class='line'>                    &lt;sf:Id&gt;0061000000cxxxxx&lt;/sf:Id&gt;
</span><span class='line'>                    &lt;sf:Name&gt;アウトバウンドのテスト商談&lt;/sf:Name&gt;
</span><span class='line'>                    &lt;sf:StageName&gt;Prospecting&lt;/sf:StageName&gt;
</span><span class='line'>                    &lt;sf:IsClosed&gt;false&lt;/sf:IsClosed&gt;
</span><span class='line'>                &lt;/sObject&gt;
</span><span class='line'>            &lt;/Notification&gt;
</span><span class='line'>        &lt;/notifications&gt;
</span><span class='line'>    &lt;/soapenv:Body&gt;
</span><span class='line'>&lt;/soapenv:Envelope&gt;</span></code></pre></td></tr></table></div></figure>


<p>アウトバウンドの設定は以下のような形。</p>

<p>ここからXMLをパースして、名前など設定した値を取得するには以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>
</span><span class='line'>$data = file_get_contents('php://input');
</span><span class='line'>$xml = simplexml_load_string($data);
</span><span class='line'>
</span><span class='line'>//ID
</span><span class='line'>$notification = $xml-&gt;children('http://schemas.xmlsoap.org/soap/envelope/')-&gt;Body-&gt;children('http://soap.sforce.com/2005/09/outbound')-&gt;notifications-&gt;Notification;
</span><span class='line'>echo $notification-&gt;Id;
</span><span class='line'>
</span><span class='line'>//パラメータ
</span><span class='line'>$params = $notification-&gt;sObject-&gt;children('urn:sobject.enterprise.soap.sforce.com');
</span><span class='line'>echo $params-&gt;Id;
</span><span class='line'>echo $params-&gt;Name;
</span><span class='line'>echo $params-&gt;IsClosed;</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://php.net/manual/ja/wrappers.php.php#wrappers.php.input">php://input</a><br/>
<a href="http://ivystar.jp/programming/php/what-is-phpinput/">「php://input」とは何？－POSTの生データ？ | アイビースター</a><br/>
<a href="https://amigotechnotes.wordpress.com/2013/11/16/parse-xml-with-namespace-by-simplexml-in-php/">Parse XML with namespace by SimpleXML in PHP | Amigo&#039;s Technical Notes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Salesforce]承認プロセスの作り方]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/28/approval-process/"/>
    <updated>2015-04-28T12:43:41+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/28/approval-process</id>
    <content type="html"><![CDATA[<p>承認プロセスを作成してみたので、そのログ。</p>

<!-- more -->


<h2>承認プロセスの作成</h2>

<p><code>商談</code>オブジェクトで作成してみる。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin01.jpg" alt="" /></p>

<h4>ステップ 1. 名前と説明の入力</h4>

<p>プロセス名と一意の名前を適当に入力。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin02.jpg" alt="" /></p>

<h4>ステップ 2. 入力条件の指定</h4>

<p>特定の入力条件で承認プロセスを発動する場合は設定。<br/>
全てレコードで承認を必要とする場合はなしで。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin03.jpg" alt="" /></p>

<h4>ステップ 3. 承認者項目と編集権限のプロパティの指定</h4>

<p>この承認申請を誰に割り当てるのか＝誰に承認してもらうのかを決定<br/>
標準項目としてマネージャーという項目がある。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin04.jpg" alt="" /></p>

<p>これは、ユーザーの項目内で設定しているマネージャーに指定されたユーザーを承認者とするもの。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin05.jpg" alt="" /></p>

<p>今回はなしにしておいて後で設定する。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin06.jpg" alt="" /></p>

<h4>ステップ 4. 通知テンプレートの選択</h4>

<p>承認開始時に送信するメールを設定。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin07.jpg" alt="" /></p>

<p>メールテンプレートは以下から作成可能。<br/>
管理->コミュニケーションテンプレート->メールテンプレート</p>

<p>なしでもよい。</p>

<h4>ステップ 5. 承認ページレイアウトに表示する項目の選択</h4>

<p>承認者が承認時に確認する画面の項目を選択する。<br/>
今回はそのままで。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin08.jpg" alt="" /></p>

<h4>ステップ 6. 申請者の指定</h4>

<p>この承認プロセスを申請できるユーザーを限定できる。<br/>
通常は所有者、となる。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin09.jpg" alt="" /></p>

<p><code>保存</code>する。</p>

<h2>承認ステップの作成</h2>

<p><img src="http://kayakuguri.github.io/images/2015/04/shonin10.jpg" alt="" /></p>

<p>最大15個までのステップを追加可能。</p>

<h4>ステップ 1. 名前と説明の入力</h4>

<p>名前と一意の名前を適当に入力。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin11.jpg" alt="" /></p>

<h4>ステップ 2. ステップ条件の指定</h4>

<p>このステップに入る条件を指定できる。<br/>
今回は全てのレコードとする。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin25.jpg" alt="" /></p>

<h4>ステップ 3. 割り当て先の選択</h4>

<p>承認者の設定。<br/>
都度変えたい場合は、手動、も選べる。<br/>
今回は固定で、特定のユーザーに自動で割り当てる。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin12.jpg" alt="" /></p>

<p><code>保存</code>する。</p>

<h2>アクション</h2>

<p><img src="http://kayakuguri.github.io/images/2015/04/shonin13.jpg" alt="" /></p>

<p>以下の4つを選択可能。<br/>
上記で設定した承認ステップのアクションを作成。<br/>
申請時や承認時、却下時にアクションが起動する。</p>

<ul>
<li>ToDo</li>
<li>電子メールアラート</li>
<li>項目自動更新</li>
<li>アウトバウンドメッセージ</li>
</ul>


<h3>項目自動更新</h3>

<p>名前、一意の名前を適当に作成。<br/>
更新する項目を選択し、どの値にするかを決定する。<br/>
今回はフェーズを更新するとする。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/shonin14.jpg" alt="" /></p>

<h2>作成完了</h2>

<p>全ての設定が終わったら、<code>有効化</code>しておく。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin15.jpg" alt="" /></p>

<p>警告が出るが、OKをクリック。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin16.jpg" alt="" /></p>

<p>完了。</p>

<h2>承認の流れ</h2>

<p>商談レコードを作成し、承認申請を行う、のだが、承認申請のボタンがデフォルトでは出てなかった。 <br/>
(環境によって変わるかも)<br/>
なので、ページレイアウトから<code>承認申請</code>のボタンを追加した。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin17.jpg" alt="" /></p>

<p>また、同じく関連項目の<code>承認履歴</code>を追加しておく。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin21.jpg" alt="" /></p>

<p>表示されるようになったので、<code>承認申請</code>をクリック。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin18.jpg" alt="" /></p>

<p>警告が表示されるが、OK。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin19.jpg" alt="" /></p>

<p>するとレコードがロックされ、<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin20.jpg" alt="" /></p>

<p>設定したメールが飛ぶ。</p>

<p>そして、承認履歴の部分に承認、却下などの項目が現れる。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin22.jpg" alt="" /></p>

<p><code>承認/却下</code>をクリックすると、入力エリアが現れるので、適当にコメントを書いて承認してみる。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin23.jpg" alt="" /></p>

<p>レコードに戻ると、承認されている。設定した項目自動更新も反映されている。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin24.jpg" alt="" /></p>

<p>実際は承認するユーザーは別になると思うが、今回は自分で申請して承認している。</p>

<h2>参考</h2>

<p><a href="https://www.youtube.com/watch?v=b6_9NNTn_Hk">Salesforceをもっと使い倒そう-承認プロセス &ndash; YouTube</a></p>
]]></content>
  </entry>
  
</feed>
