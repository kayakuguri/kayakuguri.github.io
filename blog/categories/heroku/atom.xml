<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2014-02-18T18:43:51+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[PHP][heroku]upload_max_filesizeを変更する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/18/change-max-filesize/"/>
    <updated>2014-02-18T17:02:20+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/18/change-max-filesize</id>
    <content type="html"><![CDATA[<p>herokuにて、<code>upload_max_filesize</code>を変更してみた。</p>

<!-- more -->


<p>初め、<code>ini_set</code>で変更しようとしてみたところ、<br/>
変更出来なかった。</p>

<pre><code>ini_set('upload_max_filesize', '6M');
</code></pre>

<p>参考：<a href="http://d.hatena.ne.jp/knowledgetree/20110217/1297939617">php.iniの設定を変えてもファイルをアップロードできないケース</a></p>

<p>調べてみると、変更出来るもの、出来ないものがあるらしく、<br/>
<code>upload_max_filesize</code>は、<code>ini_set()</code>では変更出来ないよう。</p>

<p><code>upload_max_filesize</code>は、<code>PHP_INI_PERDIR</code>となっていて、<br/>
php.ini、.htaccess、httpd.conf あるいは .user.ini (PHP 5.3 以降の場合) で設定可能なエントリ<br/>
となっている。<br/>
<a href="http://jp2.php.net/manual/ja/configuration.changes.modes.php">http://jp2.php.net/manual/ja/configuration.changes.modes.php</a></p>

<p>参考：PHP/ini_set()で変更できない値<br/>
<a href="http://hodade.adam.ne.jp/itmemo/index.php?PHP%2Fini_set()%A4%C7%CA%D1%B9%B9%A4%C7%A4%AD%A4%CA%A4%A4%C3%CD">http://hodade.adam.ne.jp/itmemo/index.php?PHP%2Fini_set()%A4%C7%CA%D1%B9%B9%A4%C7%A4%AD%A4%CA%A4%A4%C3%CD</a></p>

<p>herokuでは(たぶん).htaccessが使えない。<br/>
代わりに、<code>.user.ini</code>を試してみるとそちらで変更出来た。</p>

<p><code>.user.ini</code>ファイルを作成して、アップロード。<br/>
<strong>設置したディレクトリ内でのみ</strong>、有効になる。</p>

<p>[内容]</p>

<pre><code>upload_max_filesize = 6M
</code></pre>

<p>参考：<a href="http://yamanxworld.blogspot.jp/2009/12/php-53-htaccess-userini.html">PHP 5.3 の新機能: .htaccess の代わりになる .user.ini</a></p>

<hr />

<p><strong>追記</strong></p>

<p>上記の方法を取ったけれど、pnp.iniの設定ファイルを読み込ませる方法があった。<br/>
今回herokuにインストールしたbuildpackは、confというディレクトリ以下に設定ファイルを置けば<br/>
自動で認識されるような作りになっていたようです。</p>

<p>なので、conf以下に<code>php.ini</code>ファイルを置けば、いちいち各ディレクトリに設定ファイルを置かないでも大丈夫。</p>

<p>さらに、このbuildpackの環境は以下になっています。</p>

<ul>
<li>PHP 5.4.9（mbstring, mysql, pgsql, phpredis, mcryptなどなど）</li>
<li>nginx + php-fpm</li>
</ul>


<p>この、<code>nginx</code>というphpサーバはデフォルトではPOST出来るサイズが<code>1MB</code>になっているよう。<br/>
ここも変更しておかないとエラーになってしまう。</p>

<p><a href="http://qiita.com/notanota/items/4816ad71b90a9967fa18">nginxで"client intended to send too large body"が発生した時の対策方法</a></p>

<p>このnginxの設定ファイルは、<code>nginx.conf.erb</code>になるので、これも置いておく。<br/>
デフォルトの設定ファイルはそれぞれ以下にある。</p>

<ul>
<li><a href="https://raw.github.com/iphoting/heroku-buildpack-php-tyler/master/conf/php.ini">php.ini</a></li>
<li><a href="https://raw.github.com/iphoting/heroku-buildpack-php-tyler/master/conf/nginx.conf.erb">nginx.conf.erb</a></li>
</ul>


<p>php.iniの設定</p>

<pre><code>post_max_size = 8M
upload_max_filesize = 8M
</code></pre>

<p>nginxの設定</p>

<pre><code>http {
    client_max_body_size 1048576; # default 1M

    server {
        client_max_body_size 8M;
    }
}
</code></pre>

<p>参考：<a href="http://tkyk.name/blog/2012/11/28/php-on-heroku/">Heroku上に最新のPHP5.4 + Nginx環境を30秒で構築する</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuでmb-string付きのPHP環境を作る]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/18/create-php-heroku-mbstring/"/>
    <updated>2014-02-18T10:57:30+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/18/create-php-heroku-mbstring</id>
    <content type="html"><![CDATA[<p>順番が前後しますが、mbstring付きのphp環境を作る方法をメモしておきます。</p>

<!-- more -->


<p>前提条件としては、heorkuのアカウントを持っていて、herokuコマンドが有効になっていて、<br/>
gitも使える状態、です。<br/>
<a href="http://devcenter.heroku.com/articles/heroku-command">Heroku Toolbelt</a>とかをインストールしておけば、herokuコマンドが使えるようになります。</p>

<p>参考：<a href="http://blog.infinity-dimensions.com/2012/01/heroku-toolbelt-install.html">Herokuコマンドを使えるようにするHeroku Toolbeltをインストール</a></p>

<hr />

<p>まずは、ディレクトリを作成しておき、そのディレクトリ内にgitを作成。<br/>
phpinfo()などだけ書いたテストのindex.phpを作成し、commitしておきます。</p>

<pre><code>$ mkdir myapp
$ cd myapp
$ git init
$ echo '&lt;?php phpinfo();' &gt; index.php
$ git add .
$ git commit -m 'initial commit'
</code></pre>

<p>で、herokuコマンドを使用して、phpをherokuで動かすためのプラグインである、'buildpack'をインストール。</p>

<pre><code>$ heroku create -s cedar -b git://github.com/iphoting/heroku-buildpack-php-tyler.git#php/5.4.9
</code></pre>

<p>ただし、このまま作成すると、heroku側で勝手に決められたアプリ名になってしまう。<br/>
後から名前を変更することは出来るが、リポジトリのURLを変更しないといけなかったりして、ちょっと面倒。<br/>
最初から名前を指定した上で作成するには、<code>heroku create myapp</code>とすればよい。<br/>
(名前は他のユーザーと被っているとダメ。また、アルファベットの大文字を使用しても怒られた。)<br/>
なので上記の分を名前指定で作成すると、以下。</p>

<pre><code>$ heroku create myapp -s cedar -b git://github.com/iphoting/heroku-buildpack-php-tyler.git#php/5.4.9
</code></pre>

<p>で、herokuにpush。<br/>
pushすると自動的にdeployもされるので、成功すればこれでmbstring付きのphp環境の作成は環境。</p>

<pre><code>$ git push heroku master
</code></pre>

<p>openするとページが表示される。</p>

<pre><code>$ heroku open
</code></pre>

<p>参考：<a href="http://d.hatena.ne.jp/hnw/20120603">HerokuのBuildpackを利用してmbstringが有効なPHPサーバを立ててみた</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PHP]herokuで添付ファイル付きメールを送る]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/18/php-heroku-sendattachmail/"/>
    <updated>2014-02-18T10:38:12+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/18/php-heroku-sendattachmail</id>
    <content type="html"><![CDATA[<p>herokuで、POSTされたファイルを添付してメールを送信してみた。</p>

<!-- more -->


<p>環境は、PHPのmbstring環境。<br/>
メールは、Mailgun。</p>

<p>SMTPメールを送るためのライブラリは、QBMailを使用。<br/>
<a href="http://qiita.com/tsunet111/items/0ba0e8fc61882c3905c0">php から確実にメール送信（Qdmail使用、SMTP経由）</a></p>

<p>POSTから送信されたファイルは、<code>$_FILES</code>に保存される。<br/>
herokuでは、<a href="http://gihyo.jp/dev/serial/01/heroku/0011">ファイルの保存が出来ない</a>ので、<br/>
一時ファイルから添付することで実現する。</p>

<p>送信された一時ファイル : <code>$_FILES['xxx']['tmp_name']</code><br/>
ファイル名 : <code>$_FILES['xxx']['name']</code></p>

<p>以下、送信部分のソース。</p>

<pre><code>[HTML]
&lt;input type="file" name="upfile" /&gt;

[PHP]
$mail = new Qdmail();
$mail -&gt; smtp(true);
$param = array(
    'host'=&gt; $_ENV['MAILGUN_SMTP_SERVER'],
    'port'=&gt; $_ENV['MAILGUN_SMTP_PORT'],
    'from'=&gt; 'test@hoge.jp',
    'protocol'=&gt;'SMTP_AUTH',
    'user'=&gt; $_ENV['MAILGUN_SMTP_LOGIN'],
    'pass' =&gt; $_ENV['MAILGUN_SMTP_PASSWORD'],
);
$mail -&gt;attach(array($_FILES["upfile"]["tmp_name"], $_FILES["upfile"]['name'])); //添付ファイル
$mail -&gt;smtpServer($param);
$mail -&gt;to('送信先アドレス');
$mail -&gt;subject('件名');
$mail -&gt;from('送信元アドレス','送信元名');
$mail -&gt;text('本文');
$mail -&gt;send();
</code></pre>

<p>参考：<a href="http://hal456.net/qdmail/oopattach"> 添付ファイルの指定(OOP)</a></p>

<hr />

<p>　
　</p>

<p>以下、余談。</p>

<p>ファイルを送信する場合は、htmlのformタグに、<code>enctype="multipart/form-data"</code>をつけないといけない。</p>

<pre><code>&lt;form method="post" action="example.php" enctype="multipart/form-data"&gt;
</code></pre>

<p>jqueryを使ってajaxで実現したい場合は、enctypeは必要なく、<code>FormData</code>でまとめたデータを送信するようにし、<br/>
<code>contentType</code>と<code>processData</code>を<code>false</code>にする必要がある。</p>

<pre><code>var $form = $("form");
var fd = new FormData($form[0]);
// 送信
$.ajax({
    url: $form.attr('action'),
    type: $form.attr('method'),
    data: fd,
    contentType : false,
    processData : false,
    success: function(result) {
        console.log(result);
    },
    error: function(xhr, textStatus, error) {}
}
</code></pre>

<p>参考：<br/>
<a href="http://ginpen.com/2013/05/07/jquery-ajax-form/">jQueryでフォームをAjax送信する際の基本パターンのチュートリアル。二重送信の防御とか。</a><br/>
<a href="http://yokano-jp.blogspot.jp/2013/07/jqueryajax.html">jQuery.ajax() でファイルを送る</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPでMailgunを使ってherokuでメール送信する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/17/send-mail-from-heroku-with-mailgun/"/>
    <updated>2014-02-17T11:31:07+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/17/send-mail-from-heroku-with-mailgun</id>
    <content type="html"><![CDATA[<p>herokuのphp環境でMailgunを使ってメール送信をしてみました。<br/>
ただし、日本語環境は入れなかったので、英語環境のみ。</p>

<!-- more -->


<p>まず、herokuにプラグインをインストールするためには、<br/>
クレジットカードの登録が必要なので、登録しておく。<br/>
(無料範囲内でのみでの利用でも必要)</p>

<p><a href="https://addons.heroku.com/#email-sms">Mail/SNSアドオン一覧</a></p>

<p>Mailgunの場合は、無料だと<code>300通/日</code>送れるよう。</p>

<p><a href="https://addons.heroku.com/mailgun">Mailgun</a></p>

<p>で、インストールすると、環境変数にSMTP情報が格納されるので、<br/>
そちらを利用して、メールを送れるようになる。<br/>
(<code>sendmail</code>関数は使えない。)</p>

<pre><code>$_ENV['MAILGUN_SMTP_SERVER'] = host
$_ENV['MAILGUN_SMTP_PORT'] = port
$_ENV['MAILGUN_SMTP_LOGIN'] = user
$_ENV['MAILGUN_SMTP_PASSWORD'] = password

$_ENV['MAILGUN_API_KEY'] = key
</code></pre>

<p>日本語環境だと、<code>Qdmail</code>というものが有名だそう。</p>

<p>参考：<a href="http://qiita.com/tsunet111/items/0ba0e8fc61882c3905c0">php から確実にメール送信（Qdmail使用、SMTP経由）</a></p>

<p>ただし、今回は<code>mbstring</code>環境を入れてないので、エラーが出てしまった。<br/>
なので、英語の解説ページを参考に、<code>phpmailer</code>を使ってみた。</p>

<pre><code>$mail = new PHPMailer;
$mail-&gt;isSMTP();
$mail-&gt;Host = $_ENV['MAILGUN_SMTP_SERVER'];
$mail-&gt;SMTPAuth = true;
$mail-&gt;Username = $_ENV['MAILGUN_SMTP_LOGIN'];
$mail-&gt;Password = $_ENV['MAILGUN_SMTP_PASSWORD'];
$mail-&gt;Port     = $_ENV['MAILGUN_SMTP_PORT'];
$mail-&gt;SMTPSecure = 'tls';
$mail-&gt;From = MAIL_FROM;
$mail-&gt;FromName = MAIL_FROM_NAME;

$mail-&gt;addAddress("hoge@exsample.jp");
$mail-&gt;addAddress("huga@exsample.com");

$mail-&gt;Subject = MAIL_SUBJECT;
$mail-&gt;Body    = MAIL_MSG1 . $body . MAIL_MSG2;
if(!$mail-&gt;send()){
    //falseが返ってくる場合はエラー。
    //送信完了の場合は、1が返ってくる。
}
</code></pre>

<p>ただし、もちろんだけど、日本語で送信すると文字化けする。<br/>
(Gmailの場合はなぜか本文は正しく表示出来た。件名は文字化けする)</p>
]]></content>
  </entry>
  
</feed>
