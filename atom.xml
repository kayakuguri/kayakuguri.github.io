<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-09-10T15:40:04+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[heroku]HerokuのclearDBとPostgresでのインポートとエクスポートまとめ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/09/10/mysql-postgres-import-export/"/>
    <updated>2015-09-10T15:38:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/09/10/mysql-postgres-import-export</id>
    <content type="html"><![CDATA[<p>herokuのmysqlとpostgresqlのDBのインポートエクスポートメモ。<br/>
heroku上のDBの中身を別のheroku上のDBへ移行するという前提。</p>

<!-- more -->


<h2>入れ替える情報</h2>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
<th align="left"> 例(clearDB) </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> USER_NAME </td>
<td align="left"> ユーザー名 </td>
<td align="left"> b114d7xxxxxxxb |</td>
</tr>
<tr>
<td></td>
<td align="left"> PASSWORD </td>
<td align="left"> パスワード </td>
<td align="left"> d81xxxxb |</td>
</tr>
<tr>
<td></td>
<td align="left"> HOST </td>
<td align="left"> ホスト名 </td>
<td align="left"> us-cdbr-iron-xxxx-xx.cleardb.net |</td>
</tr>
<tr>
<td></td>
<td align="left"> DB_NAME </td>
<td align="left"> DB名 </td>
<td align="left"> heroku_5f996e9xxxxxxxx |</td>
</tr>
</tbody>
</table>


<p>アプリを指定して実行する場合は、すべてのコマンドのお尻に、<code>--app app_name</code>とつける。</p>

<h2>ClearDB(mySql)</h2>

<h3>情報の構成</h3>

<p>環境変数にて取得可能な情報より。</p>

<pre><code>CLEARDB_DATABASE_URL=mysql://ユーザ名:パスワード@サーバ名/データベース?reconnect=true
</code></pre>

<h3>エクスポート</h3>

<pre><code>$ mysqldump -uUSER_NAME -pPASSWORD -h HOST -r backup.sql --single-transaction DB_NAME
</code></pre>

<h3>インポート</h3>

<pre><code>$ mysql --host=HOST --user=USER_NAME --password=PASSWORD --reconnect DB_NAME &lt; backup.sql
</code></pre>

<h3>参考</h3>

<p><a href="http://pronama.azurewebsites.net/2015/05/05/cleardb-to-azure-vm-mysql/">ClearDB から Azure VM 上の MySQL に移行 | プログラミング生放送</a><br/>
<a href="http://stackoverflow.com/questions/11803496/dump-sql-file-to-cleardb-in-heroku">mysql &ndash; Dump sql file to ClearDB in Heroku &ndash; Stack Overflow</a></p>

<h2>Heroku Postgres</h2>

<h3>概要</h3>

<p>Heroku Postgresに標準搭載されている<code>PG Backups</code>を使用します。</p>

<h3>エクスポート</h3>

<p>バックアップを取る</p>

<pre><code>$ heroku pg:backups capture
Use Ctrl-C at any time to stop monitoring progress; the backup
will continue running. Use heroku pg:backups info to check progress.
Stop a running backup with heroku pg:backups cancel.

DATABASE ---backup---&gt; b002
</code></pre>

<p>URLを取得する</p>

<pre><code>$ heroku pg:backups public-url b002
The following URL will expire at 2015-09-10 07:33:23 +0000:
  "https://xfrtu.s3.amazonaws.com/a53f7aa...."
</code></pre>

<p>ここで取得したS3のURLを、<code>S3_URL</code>とする。</p>

<p>（ダウンロードする場合は以下）</p>

<pre><code>$ curl -o latest.dump 'S3_URL'
</code></pre>

<h3>インポート</h3>

<pre><code>$ heroku pg:backups restore 'S3_URL' DATABASE_URL
</code></pre>

<h3>参考</h3>

<p><a href="https://devcenter.heroku.com/articles/heroku-postgres-import-export">Importing and Exporting Heroku Postgres Databases with PG Backups | Heroku Dev Center</a><br/>
<a href="https://devcenter.heroku.com/articles/heroku-postgres-backups">Heroku PGBackups | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuがcomposer.lock必須になったのでcomposerの入れ方をメモしておく]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/08/25/composer-lock-require/"/>
    <updated>2015-08-25T10:38:40+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/08/25/composer-lock-require</id>
    <content type="html"><![CDATA[<p>herokuにcomposerを使用したプロジェクトをデプロイする場合、今まではwarningは出ていたようだけど、composer.lockはなくてもデプロイ出来ていた。<br/>
それが、2015/8/21にPHPのランタイムがアップデートされ、composer.lockが必須になった、とのこと。<br/>
<a href="https://devcenter.heroku.com/changelog-items/704">PHP versions 5.5.28, 5.6.12, 7.0.0RC1 available; new composer.lock requirements | Heroku Dev Center</a></p>

<!-- more -->


<p>composer.lockがない場合は以下のようなエラーが出る。</p>

<blockquote><p>ERROR: Your &lsquo;composer.json&rsquo; lists dependencies inside &lsquo;require&rsquo;,but no &lsquo;composer.lock&rsquo; was found. Please run &lsquo;composer update&rsquo; to re-generate &lsquo;composer.lock&rsquo; if necessary, and commit it into your repository. For more information, please refer to the docs at <a href="https://devcenter.heroku.com/articles/php-support#activation">https://devcenter.heroku.com/articles/php-support#activation</a></p></blockquote>

<h2>composerのインストール</h2>

<p>環境はmacで、デフォルト等のPHPが入っている前提で。<br/>
以下のコマンドを適当なディレクトリで叩くだけ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -sS https://getcomposer.org/installer | php
</span><span class='line'>$ mv composer.phar /usr/local/bin/composer</span></code></pre></td></tr></table></div></figure>


<p>ターミナルを再起動して、確認。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ composer -v
</span><span class='line'>Composer version 1.0-dev (f1aa655e6113e0efa979b8b09d7951a762eaa04c) 2015-08-20 11:59:54</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<p><a href="http://mawatari.jp/archives/install-composer-in-mac">http://mawatari.jp/archives/install-composer-in-mac</a></p>

<h2>composer install</h2>

<p>この状態で、composer.jsonがあるディレクトリに移動し、<code>$ composer install</code>を叩いてみる。<br/>
これでインストール出来れば完了。<br/>
ただし、PCにインストールされているPHPによってはモジュールの関係でエラーが出る場合がある。<br/>
例）</p>

<blockquote><p>Problem 1<br/>
  &ndash; The requested PHP extension ext-mcrypt * is missing from your system.</p></blockquote>

<p>この場合は、全部入りのPHPを入れ直すのが早い。</p>

<h2>PHPのインストール</h2>

<p>以下のサイトに全部入りのものがまとまっているようなので、そこからインストール。<br/>
<a href="http://php-osx.liip.ch/">PHP for OS X as binary package</a></p>

<p>現時点で最新の5.6を入れる。</p>

<pre><code>$ curl -s http://php-osx.liip.ch/install.sh | bash -s 5.6
</code></pre>

<p>このままだと使用するようにはなってないのでパスを通す。<br/>
環境によって違うが、デフォルトでは、<code>.bash_profile</code>に記述すればよいよう。</p>

<p><code>~/</code>ディレクトリ以下の<code>.bash_profile</code>をエディタ等で開いて記述。<br/>
なければ作成する。<br/>
コマンドで実行する場合は、なければ新規作成としてくれる。<br/>
例えば、<code>vi</code>で開く場合は以下。<br/>
<code>sudo</code>をつけてルート権限で実行している。</p>

<pre><code>$ sudo vi ~/.bash_profile
</code></pre>

<p>以下を記述。</p>

<pre><code>export PATH=/usr/local/php5/bin:$PATH
</code></pre>

<p>保存して終了。<br/>
(viの場合は、<code>i</code>で入力モードに、<code>esc</code>で戻って、<code>:x</code>で保存して終了）<br/>
<a href="http://net-newbie.com/linux/commands/vi.html">ｖｉエディタの使い方</a></p>

<p>ターミナルを再起動してphpのバージョンを確認。</p>

<pre><code>$ php -v
PHP 5.6.11 (cli) (built: Jul 10 2015 21:46:48)
</code></pre>

<h2>composer install</h2>

<p>この状態で、<code>$ composer install</code>すれば完了。<br/>
実行後は実行したディレクトリ内に、<code>composer.lock</code>と<code>vendor/</code>が出来上がる。<br/>
<code>vendor</code>ディレクトリ以下はgitで共有しないように、<code>.gitignore</code>に追記しておくこと。</p>

<h2>.lockと.jsonの関係</h2>

<p><code>composer.json</code>には、必要なパッケージとインストールするバージョンの指定があれば記述する。<br/>
その状態で、<code>$ composer install</code>すると、パッケージがインストールされ、インストールされたパッケージのバージョン情報などが記述された、<code>composer.lock</code>ファイルが作成される。<br/>
この状態で、他環境などで同じく<code>$ composer install</code>すると、<code>composer.lock</code>に書かれたバージョンのパッケージがインストールされ、全く同じ環境が構築される。</p>

<p><code>$ copmoser update</code>をすると、再度<code>composer.json</code>の記述を元にパッケージがインストールされ、<code>composer.lock</code>が更新される。</p>

<h2>参考</h2>

<p><a href="http://qiita.com/nbkn/items/01a11392921119fa0153">MacでPATHを通す &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]PHPのセッションをherokuのRedisで管理する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/08/06/session-storage-in-redis-on-heroku/"/>
    <updated>2015-08-06T18:06:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/08/06/session-storage-in-redis-on-heroku</id>
    <content type="html"><![CDATA[<p>heroku上でのPHPのセッション管理の定番は<a href="https://addons.heroku.com/memcachier">MemCachier</a>だけれど、<br/>
今回はHerokuのRedisに保存さえてみた。</p>

<!-- more -->


<h2>Redis</h2>

<p>herokuで使えるRedis、といってもいくつか種類がある。<br/>
それぞれどう違うのか、とか、設定方法の違い、とかは正直わからない。</p>

<p><a href="http://qiita.com/Oakbow/items/98599da0fc62863fc1b8#%E3%81%A9%E3%81%AE-redis-%E3%81%AE%E3%82%A2%E3%83%89%E3%82%AA%E3%83%B3%E3%82%92%E4%BD%BF%E3%81%86">herokuでセッションの保存先をRedisにする &ndash; Qiita</a></p>

<blockquote><p>現在、heroku には4つの Redis のアドオンがあります。<br/>
早晩5つめが増えるようです。</p></blockquote>

<p>この5つめ、にあたるものが今回使用する、Heroku Redis、です。　　
これは他のredisと違って、<a href="https://elements.heroku.com/addons/heroku-postgresql">Postgres</a>と同じくheroku内部のものなのでまぁ間違いないのかも、ってことで使ってみました。</p>

<p><a href="https://elements.heroku.com/addons/heroku-redis">Heroku Redis</a></p>

<h2>インストール</h2>

<p>公式の通り、インストールコマンドは以下。<br/>
アプリページからポチポチっと入れても問題なし。</p>

<pre><code>$ eroku addons:create heroku-redis:hobby-dev -a YOUR-APP-NAME
</code></pre>

<p><code>hobby-dev</code>は無料バージョン。</p>

<h2>セットアップ</h2>

<p>必要なソースはComposerで入れる。</p>

<p>(公式より)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"require": {
</span><span class='line'>  ...
</span><span class='line'>  "predis/predis": "1.0.1",
</span><span class='line'>  ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>接続先をredisに</h2>

<p>以下のページを参考、というかほぼそのままで。<br/>
<a href="http://www.sitepoint.com/saving-php-sessions-in-redis/">PHP Master | Saving PHP Sessions in Redis</a></p>

<p>まずは、接続用のクラスを用意。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>class RedisSessionHandler implements SessionHandlerInterface
</span><span class='line'>{
</span><span class='line'>    public $ttl = 1800; // 30 minutes default
</span><span class='line'>    protected $db;
</span><span class='line'>    protected $prefix;
</span><span class='line'> 
</span><span class='line'>    public function __construct(PredisClient $db, $prefix = 'PHPSESSID:') {
</span><span class='line'>        $this-&gt;db = $db;
</span><span class='line'>        $this-&gt;prefix = $prefix;
</span><span class='line'>    }
</span><span class='line'> 
</span><span class='line'>    public function open($savePath, $sessionName) {
</span><span class='line'>        // No action necessary because connection is injected
</span><span class='line'>        // in constructor and arguments are not applicable.
</span><span class='line'>    }
</span><span class='line'> 
</span><span class='line'>    public function close() {
</span><span class='line'>        $this-&gt;db = null;
</span><span class='line'>        unset($this-&gt;db);
</span><span class='line'>    }
</span><span class='line'> 
</span><span class='line'>    public function read($id) {
</span><span class='line'>        $id = $this-&gt;prefix . $id;
</span><span class='line'>        $sessData = $this-&gt;db-&gt;get($id);
</span><span class='line'>        $this-&gt;db-&gt;expire($id, $this-&gt;ttl);
</span><span class='line'>        return $sessData;
</span><span class='line'>    }
</span><span class='line'> 
</span><span class='line'>    public function write($id, $data) {
</span><span class='line'>        $id = $this-&gt;prefix . $id;
</span><span class='line'>        $this-&gt;db-&gt;set($id, $data);
</span><span class='line'>        $this-&gt;db-&gt;expire($id, $this-&gt;ttl);
</span><span class='line'>    }
</span><span class='line'> 
</span><span class='line'>    public function destroy($id) {
</span><span class='line'>        $this-&gt;db-&gt;del($this-&gt;prefix . $id);
</span><span class='line'>    }
</span><span class='line'> 
</span><span class='line'>    public function gc($maxLifetime) {
</span><span class='line'>        // no action necessary because using EXPIRE
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>で、最初に保存先を変更するページにて以下を実行する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require_once( dirname(__FILE__). "/vendor/autoload.php" );
</span><span class='line'>require_once( dirname(__FILE__). "/RedisSessionHandler.php" );
</span><span class='line'>
</span><span class='line'>$redis = new Predis\Client([
</span><span class='line'>    'host' =&gt; parse_url($_ENV['REDIS_URL'], PHP_URL_HOST),
</span><span class='line'>    'port' =&gt; parse_url($_ENV['REDIS_URL'], PHP_URL_PORT),
</span><span class='line'>    'password' =&gt; parse_url($_ENV['REDIS_URL'], PHP_URL_PASS),
</span><span class='line'>]);
</span><span class='line'>$sessHandler = new RedisSessionHandler($redis);
</span><span class='line'>session_set_save_handler($sessHandler);
</span><span class='line'>session_start();</span></code></pre></td></tr></table></div></figure>


<p>2行目はredisのライブラリを読み込むための設定。<br/>
3行目は先程作成したクラス。<br/>
で、5行目でnewしているが、ここが参考サイトから少し変えていて、Heroku Redis公式の方に合わせている。<br/>
で、後は参考サイト通りに。</p>

<p>これで後は普通にセッションを使えばRedisに保存されるようになる。</p>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/heroku-redis#connecting-in-php">Heroku Redis | Heroku Dev Center</a><br/>
<a href="http://www.sitepoint.com/saving-php-sessions-in-redis/">PHP Master | Saving PHP Sessions in Redis</a><br/>
<a href="http://qiita.com/Oakbow/items/98599da0fc62863fc1b8#%E3%81%A9%E3%81%AE-redis-%E3%81%AE%E3%82%A2%E3%83%89%E3%82%AA%E3%83%B3%E3%82%92%E4%BD%BF%E3%81%86">herokuでセッションの保存先をRedisにする &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[apex]バッチ実行時にカウントデータを引き継ぐ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/08/05/apex-batch-data/"/>
    <updated>2015-08-05T11:26:58+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/08/05/apex-batch-data</id>
    <content type="html"><![CDATA[<p>apexでバッチを走らせる場合は、デフォルトでの200件ごとに処理を走らせる場合が多いけれれど、<br/>
その時に処理の中でカウントアップしたデータを次の処理に引き継ぎたかった。</p>

<!-- more -->


<p>結論から言うと、 <code>Database.Stateful</code> を使うと、データの内容を保持した状態でバッチが走らせられた。</p>

<p>具体的には以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public with sharing class Hogehoge_Batch implements Database.Batchable&lt;sObject&gt;, Database.Stateful{
</span><span class='line'>  
</span><span class='line'>    private Integer count {get; set;}
</span><span class='line'>    
</span><span class='line'>  public Hogehoge_Batch(Boolean isLastBatch){
</span><span class='line'>      this.count = 0;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    public Database.QueryLocator start(Database.BatchableContext BC){
</span><span class='line'>        String query = 'select id from Lead';
</span><span class='line'>         return Database.getQueryLocator(query);
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    public void execute(Database.BatchableContext BC, List&lt;Lead&gt; scope){
</span><span class='line'>        for(Lead user : scope){ 
</span><span class='line'>            user.count__c = this.count;
</span><span class='line'>            this.count++;
</span><span class='line'>        }
</span><span class='line'>        update scope;
</span><span class='line'>    }
</span><span class='line'>   
</span><span class='line'>    public void finish(Database.BatchableContext BC){
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>クラス定義の1行目の最後にくっついてる。<br/>
これがないと<code>count</code>は毎回リセットされてしまう。</p>

<h2>参考</h2>

<p><a href="http://tyoshikawa1106.hatenablog.com/entry/2015/02/15/182505">SFDC：【大量データ処理】Apex Batchで一括更新処理を確認してみました &ndash; tyoshikawa1106のブログ</a><br/>
<a href="http://salesforceapexcodecorner.blogspot.jp/2011/08/state-management-in-batch-apex-in.html">State Management In Batch Apex in Salesforce</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]apexでレコードをフォローさせる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/07/02/record-follow/"/>
    <updated>2015-07-02T09:54:50+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/07/02/record-follow</id>
    <content type="html"><![CDATA[<p>レコードを作った段階で自動的にフォローさせたかったので調べてみた。</p>

<!-- more -->


<h2>チャター</h2>

<p>デフォルトでは一部のレコードを除いてレコードのフォロー機能はオフになっている。<br/>
オンにするには、<code>フィード追跡</code>で有効にする。</p>

<p><code>設定 -&gt; カスタマイズ -&gt; Chatter -&gt; フィード追跡</code>を選択。<br/>
有効にしたいオブジェクトを選んで、<code>フィード追跡の有効化</code>にチェックを入れて保存。</p>

<p><img src="http://kayakuguri.github.io/images/2015/07/feed_follow01.jpg" alt="" /></p>

<p>すると、設定したレコード詳細の上部にフォローの表示とチャターコメントが出現する。<br/>
フォローしたい場合はここをクリックしてフォロー出来る。</p>

<p><img src="http://kayakuguri.github.io/images/2015/07/feed_follow02.jpg" alt="" /></p>

<p>フォローすると以下のような表示に変わる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/07/feed_follow03.jpg" alt="" /></p>

<h2>apexでのフォロー</h2>

<p>フォローは、<code>EntitySubscription</code>なるオブジェクトで管理されている。<br/>
現在のフォロー関係一覧を取得するSOQLは以下。</p>

<pre><code>SELECT Id, ParentId, SubscriberId FROM EntitySubscription
</code></pre>

<p><code>ParentId</code>が、フォロー対象のユーザーやオブジェクトのレコードID。<br/>
<code>SubscriberId</code>が、フォローするユーザーのID、となる。</p>

<p>なので、このオブジェクトにフォロー対象とフォローするIDを入れてインサートしてやればよい。</p>

<p>例）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>EntitySubscription follow = new EntitySubscription();
</span><span class='line'>follow.ParentId = 'ID'; //対象のレコード
</span><span class='line'>follow.SubscriberId = 'ID'; //ユーザーのID
</span><span class='line'>insert follow;</span></code></pre></td></tr></table></div></figure>


<p>トリガーで実装する場合は、レコードのIDが必要になるので、<code>after insert</code>で実行すること。</p>

<h2>参考</h2>

<p><a href="http://vaindespair.blogspot.jp/2011/01/blog-post.html">memo: Force.com&#12288;&#65306;&#12288;行動を作成したとき&#12289;自動的にフォローするようにしたい</a></p>

<p>チャター関係は以下のPDFにまとまっていた。<br/>
<a href="http://developerforcejp.s3.amazonaws.com/books/cheatsheets/Chatter-cheatsheet_Ja.pdf">http://developerforcejp.s3.amazonaws.com/books/cheatsheets/Chatter-cheatsheet_Ja.pdf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrantを1.7.2にアップデートしたら起動しなくなったメモ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/07/01/update-vagrant/"/>
    <updated>2015-07-01T18:55:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/07/01/update-vagrant</id>
    <content type="html"><![CDATA[<p>Vagrantを1.3くらいから1.7.2にアップデートしたら起動しなくなった。<br/>
解決方法をメモ。</p>

<!-- more -->


<h2>対処方法</h2>

<p>以下のファイルを書き換えた。</p>

<p><code>~/.vagrant.d/setup_version</code><br/>
元は、<code>1.5</code>という文字列が入っていたが、それを、<br/>
<code>1.1</code>という文字に変更した。<br/>
追記ではなく、変更。</p>

<h2>実行</h2>

<p>で、任意のディレクトリで<code>vagrant up</code>すると以下の文言が。</p>

<blockquote><p>Vagrant is upgrading some internal state for the latest version.
Please do not quit Vagrant at this time. While upgrading, Vagrant
will need to copy all your boxes, so it will use a considerable
amount of disk space. After it is done upgrading, the temporary disk
space will be freed.</p>

<p>Press ctrl-c now to exit if you want to remove some boxes or free
up some disk space.</p>

<p>Press the Enter or Return key to continue.</p></blockquote>

<p>そのまま<code>Enter</code>キー叩く。<br/>
しばらく待つと何やら表示されるが、無事、起動。</p>

<pre><code>$ vagrant up
default                   running (virtualbox)
</code></pre>

<p>そもそもvagrantのアップデートやインストールがパッケージってのがめんどくさい。。</p>

<h2>参考</h2>

<p><a href="http://qiita.com/hgsk/items/520b4160804d7299eb34">Vagrant1.5.1へのアップグレード後にvagrant upに失敗する場合の直し方 &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[WordPress]新規ユーザー登録時に選べる権限を制限する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/07/01/wordpress-capabilities/"/>
    <updated>2015-07-01T13:24:37+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/07/01/wordpress-capabilities</id>
    <content type="html"><![CDATA[<p>Wordpressにて、自分に設定されている権限レベル以下の権限のみを取得して、<br/>
新規登録画面で登録出来る権限を制御できるようにしてみた。</p>

<!-- more  -->


<h2>権限一覧の取得</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function xx(){
</span><span class='line'>  global $wp_roles;
</span><span class='line'>  $all_roles = $wp_roles-&gt;roles;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>出力</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[(権限名-スラッグ)] =&gt; Array
</span><span class='line'>        (
</span><span class='line'>            [name] =&gt; 権限名
</span><span class='line'>            [capabilities] =&gt; Array
</span><span class='line'>                (
</span><span class='line'>                    [read] =&gt; 1
</span><span class='line'>                    [level_0] =&gt; 1
</span><span class='line'>                    権限内容                    
</span><span class='line'>                )
</span><span class='line'>
</span><span class='line'>        )
</span></code></pre></td></tr></table></div></figure>


<h2>シリアライズ</h2>

<p>自分に設定されている権限を取得する。<br/>
ただし、DBを直接除くとシリアライズされている。</p>

<p>とはいえ、取得は普通にWPの関数で可能。</p>

<pre><code>get_user_meta(ID, 'wp_capabilities', true);
</code></pre>

<p>セットは以下のように</p>

<pre><code>update_user_meta($user_id, 'wp_capabilities', ['staff' =&gt; 1]);
</code></pre>

<h2>取得</h2>

<h3>自分のレベルを取得</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global $current_user;
</span><span class='line'>$mylevel = $current_user-&gt;user_level;</span></code></pre></td></tr></table></div></figure>


<p>これで一見取れているようにみえたが、なぜかレベルの低いユーザーもレベルが10と取得されてしまった。<br/>
なので、実際に入っているデータの、<code>level_xx</code>を見て一致させていく泥臭い手法をとった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$uid = wp_get_current_user()-&gt;get('ID');
</span><span class='line'>//自分のロール
</span><span class='line'>$my_role = get_user_meta($uid, 'wp_capabilities', true);
</span><span class='line'>$my_role = key($my_role);
</span><span class='line'>$myobj = $wp_roles-&gt;role_objects[$my_role]-&gt;capabilities;
</span><span class='line'>$mylevel = 0;
</span><span class='line'>for($i = 10; $i&gt;=0; $i--){
</span><span class='line'>    if(isset($myobj['level_'.$i]) && $myobj['level_'.$i]){
</span><span class='line'>        $mylevel = $i;
</span><span class='line'>        break;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>アクセス可能な権限をレベルで判別</h3>

<p>あとは取得したレベルと、権限の一覧のレベルを比べて、自分の方が大きければ取得していけばよい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global $wp_roles;
</span><span class='line'>
</span><span class='line'>$aste_user_role = [];
</span><span class='line'>foreach($wp_roles-&gt;role_objects as $key=&gt;$role){
</span><span class='line'>    $level = 0;
</span><span class='line'>    for($i = 10; $i&gt;=0; $i--){
</span><span class='line'>        if(isset($role-&gt;capabilities['level_'.$i]) && $role-&gt;capabilities['level_'.$i]){
</span><span class='line'>            $level = $i;
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    if($mylevel &gt;= $level){
</span><span class='line'>        $aste_user_role[] = [$key, $wp_roles-&gt;role_names[$key]];
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>結果</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>array (size=8)
</span><span class='line'>  0 =&gt; 
</span><span class='line'>    array (size=2)
</span><span class='line'>      0 =&gt; string 'administrator' (length=13)
</span><span class='line'>      1 =&gt; string 'システム管理者' (length=21)
</span><span class='line'>  1 =&gt; 
</span><span class='line'>    array (size=2)
</span><span class='line'>      0 =&gt; string 'staff' (length=5)
</span><span class='line'>      1 =&gt; string 'スタッフ' (length=12)
</span><span class='line'>  2 =&gt; 
</span><span class='line'>    array (size=2)
</span><span class='line'>...
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h2>表示</h2>

<h3>新規登録</h3>

<p>新規登録画面への表示は、<code>user_new_form</code>のフックで行う。<br/>
フック内でHTMLを直接書いて対応。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//ユーザー登録画面
</span><span class='line'>function user_new_form_css() {
</span><span class='line'>  ?&gt;
</span><span class='line'>  &lt;table class="form-table"&gt;
</span><span class='line'>  &lt;tr&gt;
</span><span class='line'>      &lt;th scope="row"&gt;権限ロール &lt;span class="description"&gt;(必須)&lt;/span&gt;&lt;/th&gt;
</span><span class='line'>      &lt;td&gt;&lt;select name="user_role"&gt;
</span><span class='line'>                &lt;?php
</span><span class='line'>                $tempo = '';
</span><span class='line'>                foreach ($aste_user_role as $val) {
</span><span class='line'>                    $selected = 'selected';
</span><span class='line'>                    if($val[0] == 'subscriber'){
</span><span class='line'>                        $tempo .= '&lt;option value="' . $val[0] . '"' . $selected . '&gt;' . $val[1] . '&lt;/option&gt;';
</span><span class='line'>                    }else{
</span><span class='line'>                        $tempo .= '&lt;option value="' . $val[0] . '" &gt;' . $val[1] . '&lt;/option&gt;';
</span><span class='line'>                    }
</span><span class='line'>                }
</span><span class='line'>                echo $tempo;
</span><span class='line'>                ?&gt;
</span><span class='line'>            &lt;/select&gt;
</span><span class='line'>        &lt;/td&gt;
</span><span class='line'>    &lt;/tr&gt;
</span><span class='line'>    &lt;/table&gt;
</span><span class='line'>    &lt;?php
</span><span class='line'>}
</span><span class='line'>add_action( 'user_new_form', 'user_new_form_css' );</span></code></pre></td></tr></table></div></figure>


<h3>編集</h3>

<p>編集画面は、<code>personal_options</code>のフックで対応。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function add_profile_custom ($profileuser) {
</span><span class='line'>  //権限
</span><span class='line'>    global $aste_user_role; //自身が参照可能な権限リスト
</span><span class='line'>    set_aste_role();
</span><span class='line'>    $html = '&lt;tr&gt;&lt;th scope="row"&gt;権限ロール &lt;span class="description"&gt;(必須)&lt;/span&gt;&lt;/th&gt;';
</span><span class='line'>    $html .= '&lt;td&gt;&lt;select name="user_role"&gt;';
</span><span class='line'>    //このユーザーの権現を取得
</span><span class='line'>    $current_role = get_user_meta($profileuser-&gt;ID, 'wp_capabilities', true);
</span><span class='line'>    $current_role = key($current_role);
</span><span class='line'>    foreach ($aste_user_role as $val) {
</span><span class='line'>        $r = $current_role;
</span><span class='line'>        $selected = '';
</span><span class='line'>        if ($r == $val[0]) {
</span><span class='line'>            $selected = ' selected="selected" ';
</span><span class='line'>        }
</span><span class='line'>        $html .= '&lt;option value="' . $val[0] . '"' . $selected . '&gt;' . $val[1] . '&lt;/option&gt;';
</span><span class='line'>    }
</span><span class='line'>    $html .= '&lt;/select&gt;&lt;/td&gt;&lt;/tr&gt;';
</span><span class='line'>    echo $html;
</span><span class='line'>}
</span><span class='line'>add_action( 'personal_options', 'add_profile_custom');</span></code></pre></td></tr></table></div></figure>


<h2>登録処理</h2>

<p>登録は新規は、<code>user_register</code>、更新は、<code>profile_update</code>。<br/>
どちらも処理としては同じ。<br/>
<code>$_POST</code>から取得した値をシリアライズして入れる、のみ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function save_custom_options_fields( $user_id ) {
</span><span class='line'>  //権限ロール
</span><span class='line'>    $role_name = $_POST['user_role'];
</span><span class='line'>    update_user_meta($user_id, 'wp_capabilities', [$role_name =&gt; 1]);
</span><span class='line'>}
</span><span class='line'>add_action( 'profile_update', 'save_custom_options_fields' ); //更新
</span><span class='line'>add_action('user_register', 'save_custom_options_fields');  //新規登録</span></code></pre></td></tr></table></div></figure>


<h2>既存のものを非表示に</h2>

<p>既存で表示されている権限設定のセレクトボックスを非表示に。</p>

<h3>新規登録</h3>

<p>上記、新規登録で項目を追加したフックと同じ関数内で実装する。<br/>
特定のクラスもIDも振られてないので、x番目と指定して非表示とする。<br/>
ただし、これはCSS3となっているので非対応のブラウザだと見えてしまうと思う。<br/>
他にいい方法があれば知りたい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>?&gt;&lt;style type="text/css"&gt;
</span><span class='line'>  table.form-table tr.form-field:nth-of-type(9)
</span><span class='line'>&lt;/style&gt;&lt;?php</span></code></pre></td></tr></table></div></figure>


<h3>編集</h3>

<p>上記、編集で項目を追加したフックと同じ関数内で実装する。<br/>
こちらはクラスが振ってあるので、それを指定して非表示とする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>?&gt;&lt;style type="text/css"&gt;
</span><span class='line'>  .user-role-wrap, /*権限グループ*/
</span><span class='line'>&lt;/style&gt;&lt;?php</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>これにて完成。<br/>
非表示にする箇所がかなり無理矢理だけれども、なんとか見た目は整った。<br/>
プラグインなどを使えばこの辺一発で出来たりするのだろうか。<br/>
ちなみに、権限の編集にはプラグインを使用した。<br/>
<a href="https://ja.wordpress.org/plugins/user-role-editor/">WordPress &#8250; User Role Editor &laquo; WordPress Plugins</a></p>

<h2>参考</h2>

<p><a href="http://wordpress.stackexchange.com/questions/1665/getting-a-list-of-currently-available-roles-on-a-wordpress-site">security &ndash; Getting a List of Currently Available Roles on a WordPress Site? &ndash; WordPress Development Stack Exchange</a><br/>
<a href="http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q12132319417">wordpressのユーザ権限を管理画面以外から変更する必要があり、～ &ndash; Yahoo!知恵袋</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wordpress上のメディアをcloudinaryに自動アップロードして管理する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/30/auto-upload-cloudinary-on-heroku/"/>
    <updated>2015-06-30T12:54:33+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/30/auto-upload-cloudinary-on-heroku</id>
    <content type="html"><![CDATA[<p>herokuでwordpressを使用した場合、通常ではアップロードした画像は<br/>
heorkuの再起動のタイミングで全て消えてしまいます。</p>

<!-- more -->


<p>なので、そうならないようにクラウド上のストレージサービスである、cloudinaryに保存させたりします。<br/>
cloudinaryには公式でwordpressのプラグインが用意されています。<br/>
<a href="https://ja.wordpress.org/plugins/cloudinary-image-management-and-manipulation-in-the-cloud-cdn/">WordPress &#8250; Cloudinary &ndash; Image management and manipulation in the cloud + CDN &laquo; WordPress Plugins</a></p>

<p>これを利用することでwordpress上の画像をcloudinaryで管理できるようになるのですが、<br/>
アップロードした画像を手動でcloudinaryに反映させてやらねばなりません。<br/>
それをなんとか自動でアップされるようにしてみました。</p>

<h2>cloudinaryへのアップロード手順(通常)</h2>

<p>通常と同じようにメディアライブラリ上から画像をアップロードします。<br/>
一覧表示で、詳細まで表示される、テーブル表示に切り替えます。<br/>
この時の右端に、<code>Upload to Cloudinary</code>というリンクがあるのでそれをクリックします。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/cloudinary_heroku01.jpg" alt="" /></p>

<p>するとアップロードされ、表記がアップロード済に変わります。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/cloudinary_heroku02.jpg" alt="" /></p>

<p>この時に内部では何をしているかと言うと、<br/>
cloudinaryにアップロードし、アップ先のURLを使ってメタデータを書き換え、<br/>
cloudinaryへアップした、というフラグを立てています。<br/>
このフラグを立てているところがポイントになります。</p>

<h2>メタデータ</h2>

<p>wordpressでは画像は投稿データとして管理されています。<br/>
データ構造は以下が詳しいのですが、画像部分だけを引用させてもらうとこんな感じです。<br/>
<a href="http://hijiriworld.com/web/wp-data-register/">WordPress データ登録機構を知ってもっと自由で効率的なフローを  |  hijiriworld Web</a></p>

<p><code>wp_posts</code>テーブル</p>

<table>
<thead>
<tr>
<th>post_title </th>
<th> post_status </th>
<th> post_name </th>
<th> guid </th>
<th> post_type </th>
<th> post_mine_type</th>
</tr>
</thead>
<tbody>
<tr>
<td>{$file_name} </td>
<td> inherit </td>
<td> {$file_name} </td>
<td> {$guid} </td>
<td> attachment </td>
<td> {$mine_type}</td>
</tr>
</tbody>
</table>


<p><code>wp_postmeta</code>テーブル</p>

<table>
<thead>
<tr>
<th>post_id </th>
<th> meta_key </th>
<th> meta_value</th>
</tr>
</thead>
<tbody>
<tr>
<td>{$attachment_id} </td>
<td> _wp_attached_file </td>
<td> {$file_name}</td>
</tr>
<tr>
<td>{$attachment_id} </td>
<td> _wp_attachment_metadata </td>
<td> シリアライズされたメタデータ</td>
</tr>
</tbody>
</table>


<p>wp_postsの方は特に変更する必要はありません。<br/>
重要なのはwp_postmetaのメタデータの方です。</p>

<p>今回、変更する具体的な箇所は以下の２箇所です。<br/>
<code>_wp_attached_file</code>をファイル名からcloudinaryのURLへ変更。<br/>
<code>_wp_attachment_metadata</code>の中にcloudinaryフラグを立てる。</p>

<h2>メディア管理とプラグインの仕組み</h2>

<p>wordpressのメディアは都度URLを動的に生成しています。<br/>
メイン画像の場合は以下。</p>

<blockquote><p>ブログのパス + <code>_wp_attached_file</code>の$file_name</p></blockquote>

<p>サムネイルの場合は以下。</p>

<blockquote><p>ブログのパス + <code>_wp_attachment_metadata</code>の指定サイズのファイル名</p></blockquote>

<p>なのでファイル名にcloudinaryの絶対パスを入れてしまうとURLが２重になってしまいます。</p>

<p>で。<br/>
これが、cloudinaryのフラグが立っているものに関しては、cloudinaryのプラグイン側でURLをうまい具合に置き換えて表示してくれます。<br/>
なので、こちらとしてはフラグを立てるだけ、で大丈夫。</p>

<h2>実作業</h2>

<p>処理の流れは以下のように。</p>

<ol>
<li>画像をアップロード</li>
<li>メタデータ作成のフック内で画像URLを取得</li>
<li>取得したURLでcloudinaryにアップロード</li>
<li>cloudinaryのURLでDBのファイル名を更新</li>
<li>メタデータにフラグを立てる</li>
</ol>


<p><code>wp_generate_attachment_metadata</code>で、アップされたファイルのメタデータを作成する処理にフックをかけられるのでそれを使用します。</p>

<p>functions.phpに以下を記述。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function cldnry_wp_generate_attachment_metadata($metadata, $postid){
</span><span class='line'>    $imgPath = get_attached_file( $postid );
</span><span class='line'>
</span><span class='line'>    //ファイル形式のチェック
</span><span class='line'>    $info = pathinfo($imgPath);
</span><span class='line'>    $public_id = $info["filename"];
</span><span class='line'>    $mime_types = array("png"=&gt;"image/png", "jpg"=&gt;"image/jpeg", "pdf"=&gt;"application/pdf", "gif"=&gt;"image/gif", "bmp"=&gt;"image/bmp");
</span><span class='line'>    $extension = $info["extension"];
</span><span class='line'>    $type = @$mime_types[$extension];
</span><span class='line'>    //画像以外はcloudinaryにアップしない
</span><span class='line'>    if($type === null){
</span><span class='line'>        $stderr = fopen( 'php://stderr', 'w' );
</span><span class='line'>        fwrite( $stderr, 'アップロードされたファイルが画像ではありません。file-type:'.$extension );
</span><span class='line'>        return $metadata;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    //Cloudinaryへアップ
</span><span class='line'>    $cl_upload = new CloudinaryUploader();
</span><span class='line'>    $uploaded = $cl_upload-&gt;upload($imgPath, array(
</span><span class='line'>    ));
</span><span class='line'>    $public_id = $uploaded['public_id'];
</span><span class='line'>
</span><span class='line'>    //DBへ保存
</span><span class='line'>    update_attached_file($postid, $uploaded['secure_url']);
</span><span class='line'>    $metadata['cloudinary'] = true; //cloudinaryからアップしたことを記録
</span><span class='line'>
</span><span class='line'>    return $metadata;
</span><span class='line'>}
</span><span class='line'>add_filter( "wp_generate_attachment_metadata" , "cldnry_wp_generate_attachment_metadata",10 ,2 );</span></code></pre></td></tr></table></div></figure>


<p>※2015/08/21追記<br/>
cloudinaryへアップする際にpublic_idを指定してしまうと画像が次々と上書きされてしまうので、その部分を削除しました。</p>

<p>  &ldquo;public_id&rdquo; => $public_id,</p>

<p>まず、<code>get_attached_file( $postid )</code>でアップされたファイルのURLを取得。<br/>
そのファイルが画像かどうかを一応チェックしている。<br/>
で、cloudinaryへアップロード。<br/>
cloudinaryはプラグインのファイルから利用するので公式で解説されているコードとは少し異なります。<br/>
で、アップされたらURLをファイル名として保存。<br/>
最後にポイントとなる、フラグを立てて終了。</p>

<p>これだけであとの表示周りの処理はcloudinaryがやってくれます。</p>

<h2>結果</h2>

<p>通常と同じように画像をアップすると、アップ完了時点でcloudinaryへ保存されます。<br/>
以下のようにURLがcloudinaryになっている事が確認できるかと思います。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/cloudinary_heroku03.jpg" alt="" /></p>

<p>一覧でテーブル表示にすると、cloudinaryにはすでにアップロード済の表記となっています。</p>

<h2>まとめ</h2>

<p>herokuでwordpressを扱う場合、この画像問題がネックの一つとなっているのですが、<br/>
herokuにはcloudinaryのアドオンがあるので、これでとりあえずは解消したのではないでしょうか。<br/>
この解消は自分の中ではかなり大きいです。</p>

<p>使用の際の注意点としては、wordpress上でデータを削除してもcloudinary上からは削除されない、という点です。<br/>
cloudinaryのアップロード容量が決まっているため、メンテナンスが必要かもしれません。</p>

<p>あとはアップデートの問題が解決すればすっきり出来るのですが。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOSにて、PHPのエラー出力をターミナルで監視]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/24/php-error-tail/"/>
    <updated>2015-06-24T21:26:49+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/24/php-error-tail</id>
    <content type="html"><![CDATA[<p>いつも忘れるのでメモ。</p>

<!-- more -->


<p>Vagrant環境にて、PHPのエラー出力をターミナルで監視する方法。<br/>
まずは、エラーの出力ファイルの場所。</p>

<pre><code>/var/log/httpd/error_log
</code></pre>

<p>これを、<code>tail</code>コマンドで表示させる。<br/>
常に監視、の<code>-f</code>オプション付きで。</p>

<pre><code>tail /var/log/httpd/error_log -f
</code></pre>

<p>かなり常識的な事だと思うけど、ググるのが面倒なのでメモ。</p>

<h2>参考</h2>

<p><a href="http://www.atmarkit.co.jp/fwin2k/win2ktips/423tail/tail.html">tailコマンドでログ・ファイルをリアルタイムに監視する － ＠IT</a><br/>
<a href="http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1213302327">『　リナックスサーバー　』　にＰＨＰのエラーログ・アクセスログにか&hellip; &ndash; Yahoo!知恵袋</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ApexRESTにてPOSTで送信された配列のデータを受け取る]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/23/apexrest-post-array/"/>
    <updated>2015-06-23T20:38:27+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/23/apexrest-post-array</id>
    <content type="html"><![CDATA[<p>RestApexを作成していて、配列でPOSTした値はどうやって取得するのかを調べてみた。</p>

<!-- more -->


<p>例えば、POSTでidというパラメータで送信した内容は以下のようにして取得可能。</p>

<pre><code>RestRequest req = RestContext.request;
String id = req.params.get('id');
</code></pre>

<p>しかし配列だとこれでは取得できなかった。</p>

<p>送信データ</p>

<pre><code>$value = [
  'hoge'=&gt;['1', '2', '3']
];
</code></pre>

<p>受信</p>

<pre><code>RestRequest req = RestContext.request;
String id = req.params.get('hoge');  //null
</code></pre>

<p>なので、どのようにしてデータがわたっているのかを出力させてみた。</p>

<p>送信したデータ</p>

<pre><code>$value = [
  'id'=&gt;'hoge',
  'arr'=&gt;['1', '2', '3']
];
</code></pre>

<p>出力させたコード</p>

<pre><code>RestRequest req = RestContext.request;
System.debug(req.params);
</code></pre>

<p>出力結果</p>

<pre><code>{arr[0]=1, arr[1]=2, arr[2]=3, id=hoge}
</code></pre>

<p>どうやらちゃんとデータは受け取れているよう。<br/>
この<code>req.params</code>で受け取るデータの型は<code>Map</code>になっているよう。<br/>
以下のように出来る。</p>

<pre><code>RestRequest req = RestContext.request;
Map&lt;String, String&gt; p = req.params;
</code></pre>

<p>ということはキーを取得できるし、キーから中身を全て取り出す事もできる。</p>

<hr />

<p>そんなわけで、かなり無理矢理だけど、指定したキーの中身を取り出す関数を作ってみた。<br/>
配列で受け取る場合はフォームではチェックボックス、SF上では複数選択リスト、になるので、<br/>
SFの形式に合わせて、<code>;</code>セミコロン区切りの文字列として返すようにした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public String convertArrayPostData(Map&lt;String, String&gt; val, String target){
</span><span class='line'>    String res = '';
</span><span class='line'>    for(String sKey : val.keySet()){
</span><span class='line'>        Integer c = sKey.indexOf('[');
</span><span class='line'>        if(c == -1) continue;
</span><span class='line'>        String key = sKey.left(c);
</span><span class='line'>        if(key == target){
</span><span class='line'>            res += val.get(sKey) + ';';
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    if(res != '') res = res.removeEnd(';');
</span><span class='line'>    return res;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上記の<code>arr</code>というキーのデータを取り出す場合は以下のように。</p>

<pre><code>RestRequest req = RestContext.request;
Map&lt;String, String&gt; p = req.params;
String arrs = convertArrayPostData(p, 'arr');  //1;2;3
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]指定のユーザーでテスト実行]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/11/system-run-as/"/>
    <updated>2015-06-11T14:53:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/11/system-run-as</id>
    <content type="html"><![CDATA[<p>salesforceのユーザーである、<code>User</code>オブジェクトにカスタム項目を作って、<br/>
それを使ったコードなんかを書いた時にそのユーザーでの実行が必要になる。<br/>
そんな時のメモ。</p>

<!-- more -->


<h2>テスト実行</h2>

<p><code>system.runas(){}</code>を使う。<br/>
引数に使用するユーザーを指定し、<code>{}</code>内で実行する処理を書く。</p>

<h2>ユーザーの作成</h2>

<p>指定するユーザーをテスト内で作成するには以下のようにする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Map&lt;String,ID&gt; profiles = new Map&lt;String,ID&gt;();
</span><span class='line'>Profile ps = [select id, name from Profile where name = '標準ユーザ' LIMIT 1];
</span><span class='line'>User standard = new User(alias = 'standt', 
</span><span class='line'>  email='standarduser@testorg.com', 
</span><span class='line'>  emailencodingkey='UTF-8', 
</span><span class='line'>  lastname='Testing', languagelocalekey='en_US', 
</span><span class='line'>  localesidkey='en_US', 
</span><span class='line'>  ProfileId = ps.id,
</span><span class='line'>  timezonesidkey='America/Los_Angeles', 
</span><span class='line'>  username='standarduser-test@testorg.com'
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<p>標準ユーザーのプロフィール権限で作成している。<br/>
この時に、<code>email</code>の項目と<code>username</code>を同じにしていると、すでにそのユーザーネームは使われています、とエラーが出た。</p>

<p>で、実行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>system.runas(standard){
</span><span class='line'>  //実行する内容
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://blogjp.sforce.com/2013/07/systemrunas-29e3.html">System.runAs()を使う時の注意点 | Salesforce Developers Japan Blog</a><br/>
<a href="view-source:http://developer.force.com/cookbook/recipe/using-system-runas-in-test-methods">Using System.runAs in Test Methods &ndash; null</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]バッチスケジュールの一通りの書き方]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/11/apex-batch-schedule/"/>
    <updated>2015-06-11T10:59:41+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/11/apex-batch-schedule</id>
    <content type="html"><![CDATA[<p>複数クラスにわたってたりしてややこしかったのでメモ。</p>

<!-- more -->


<h2>バッチ</h2>

<p>まずはバッチファイル。<br/>
ここで実際に動作させたい内容を書く。<br/>
枠はこんな感じ。</p>

<p><code>Batch_sample.apex</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global with sharing class Batch_sample implements Database.Batchable&lt;sObject&gt;
</span><span class='line'>{
</span><span class='line'>  private String query;
</span><span class='line'>  
</span><span class='line'>  //コンストラクタ
</span><span class='line'>  global Batch_UpdatePushlist(String q){
</span><span class='line'>      query = q;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  //データ取得
</span><span class='line'>  global Database.QueryLocator start(Database.BatchableContext BC){
</span><span class='line'>      return Database.getQueryLocator(query);
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  //開始
</span><span class='line'>  global void execute(Database.BatchableContext BC, List&lt;sObject&gt; scope){
</span><span class='line'>  
</span><span class='line'>      //バッチの処理を記述
</span><span class='line'>      
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  //完了
</span><span class='line'>  global void finish(Database.BatchableContext BC)
</span><span class='line'>  {
</span><span class='line'>      //完了後の処理があれば
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>バッチを起動させるには以下のようにSOQL文と件数を渡して実行する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String soql = 'SELECT ID FROM sObject';
</span><span class='line'>Batch_sample b = new Batch_sample(soql);
</span><span class='line'>Database.executeBatch(b, 200);</span></code></pre></td></tr></table></div></figure>


<p>実行時に指定したSOQLで取得するレコード分、バッチが動作する。<br/>
この際に取得出来る件数が、バッチの場合は500万件。<br/>
とはいえ、実際には一度の処理では指定した件数分のみ処理し、ガバナ制限がリセットされて再度実行、を繰り返す。<br/>
<code>executeBatch</code>の第二引数が一回の処理で実行する件数。<br/>
(デフォルトは200件)</p>

<p>バッチ全体の動作は10分以内、というガバナ制限もあり。<br/>
(100万件単位になってくると結構厳しい数字っぽい)</p>

<h2>スケジューラー</h2>

<p>設定したバッチをスケジューラーとして実行させる。<br/>
以下のように、<code>Schedulable</code>クラスをimplementsする。</p>

<p><code>Schedule_sample.apxc</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global class Schedule_sample implements Schedulable {
</span><span class='line'>  private final Integer BATCH_SIZE = 200;
</span><span class='line'>  
</span><span class='line'>  global void execute(SchedulableContext ctx) {
</span><span class='line'>      String soql = 'SELECT ID FROM sObject';
</span><span class='line'>      Batch_sample b = new Batch_sample(soql);
</span><span class='line'>      Database.executeBatch(b, BATCH_SIZE);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>このクラスをジョブに追加することでバッチをスケジューリング出来る。</p>

<h2>スケジュールに追加</h2>

<p>追加方法は２つある</p>

<h3>設定画面から追加</h3>

<p><code>設定-&gt;開発-&gt;Apexクラス</code>を選択。<br/>
画面内の<code>Apexをスケジュール</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/apex_schedule01.jpg" alt="" /></p>

<p>この中で毎月や毎日、などを選択できる。<br/>
終了日も設定出来るので、ずっと動作するさせるものに関しては長めに設定しておく。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/apex_schedule02.jpg" alt="" /></p>

<h3>コードで実行</h3>

<p>設定画面から追加での最大のデメリットは実行時間が毎時0分のみ、と、分の指定ができないところ。<br/>
これをさせようと思うとコードからジョブに追加してやる必要がある。</p>

<p>以下が追加させるコード</p>

<pre><code>System.schedule('ジョブ名','0 0 * * * ?', new Schedule_sample());
</code></pre>

<p>第二引数に指定しているものは、クーロン式、というもので、ここで時間指定をしている。<br/>
これは、左から、秒、分、時、日、月、曜日、年となっている。<br/>
(年は省略化)</p>

<p>例）</p>

<ul>
<li>&lsquo;0 0 13 * * ?&#8217;：毎日13時に実行</li>
<li>&lsquo;0 0 10 ? * MON-FRI&#8217;：月～金の10時に実行</li>
<li>&lsquo;0 0 * * * ?&#8217;：毎時0分に実行</li>
<li>&lsquo;0 30 * * * ?&#8217;：毎時30分に実行</li>
</ul>


<p>秒のみの指定は怖くて試してません。</p>

<p>この実行式を開発者コンソールの匿名実行から実行することでジョブに追加させられる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/apex_schedule03.jpg" alt="" /></p>

<p>コードを書いて、実行ボタンをクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/apex_schedule04.jpg" alt="" /></p>

<p>追加されたジョブは設定画面の、<code>ジョブ-&gt;スケジュール済みジョブ</code>から確認できる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/apex_schedule05.jpg" alt="" /></p>

<h2>動作テスト</h2>

<p>実際に開発中にいちいちスケジュールさせてジョブが実行されるのを待つのはあまりにもめんどくさい。<br/>
バッチを起動させるコードを匿名実行から起動させてもよいがそれでも待ち時間が長いので、結局バッチ処理特有の部分をコメントアウトして、単なるクラスにしてそれを直接実行させる方法で確認した。</p>

<p>以下のようにコメントアウトした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//global with sharing class Batch_sample implements Database.Batchable&lt;sObject&gt;
</span><span class='line'>public class Batch_sample
</span><span class='line'>{
</span><span class='line'>  /*
</span><span class='line'>  private String query;   
</span><span class='line'>  //コンストラクタ
</span><span class='line'>  global Batch_UpdatePushlist(String q){
</span><span class='line'>      query = q;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  //データ取得
</span><span class='line'>  global Database.QueryLocator start(Database.BatchableContext BC){
</span><span class='line'>      return Database.getQueryLocator(query);
</span><span class='line'>  }
</span><span class='line'>  */
</span><span class='line'>  
</span><span class='line'>  //開始
</span><span class='line'>  public void execute(List&lt;sObject&gt; scope){
</span><span class='line'>  //global void execute(Database.BatchableContext BC, List&lt;sObject&gt; scope){
</span><span class='line'>  
</span><span class='line'>      //バッチの処理を記述
</span><span class='line'>      
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  //global void finish(Database.BatchableContext BC){}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これを匿名実行からSOQLでデータを取得してからそれを渡してやりつつ実行する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String soql = 'SELECT ID FROM sObject';
</span><span class='line'>List&lt;sObject&gt; data = Database.query(soql);
</span><span class='line'>Batch_sample batch = new Batch_sample();
</span><span class='line'>batch.execute(data);</span></code></pre></td></tr></table></div></figure>


<p>もっとスマートなやり方があったらぜひ。</p>

<h2>テスト</h2>

<p>テストコードはスケジューラに対して実行する。</p>

<p><code>Schedule_sample_Test.apxc</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@isTest
</span><span class='line'>public class Schedule_sample_Test {
</span><span class='line'>  public static String CRON_EXP = '0 0 0 15 3 ? 2022';
</span><span class='line'>  
</span><span class='line'>  static testmethod void test() {
</span><span class='line'>      //データ準備
</span><span class='line'>  
</span><span class='line'>      Test.startTest();
</span><span class='line'>      String jobId = System.schedule('ScheduleApexClassTest', CRON_EXP, new Batch_sample());
</span><span class='line'>      Test.stopTest();
</span><span class='line'>      
</span><span class='line'>      //バッチ後のデータ確認
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>指定するクーロン式はなんでもよくて、<code>Test.stopTest();</code>の後にすぐにスケジュールが実行される。</p>

<h2>参考</h2>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.apex_workbook.meta/apex_workbook/apex_scheduling_2.htm">スケジュール可能なクラスのテストの追加 | Apex ワークブック | Salesforce Developers</a><br/>
<a href="http://blog.flect.co.jp/salesforce/2010/08/apex-2136.html">セールスフォースの豆知識: スケジュール実行するApexのテストメソッドと実行時刻の詳細設定</a><br/>
<a href="http://blog.livedoor.jp/androidbeginner/archives/39179776.html">【Salesforce】Apexジョブの書き方 : 怠けろ！プログラマ！</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerをvagrantに入れてwebサーバーを立ち上げるまで]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/09/my-first-docker/"/>
    <updated>2015-06-09T20:21:19+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/09/my-first-docker</id>
    <content type="html"><![CDATA[<p>dockerは話にはよく聞くけど全くわからなかったので、とりあえずインストールして動かすところまでやってみた。</p>

<!-- more -->


<h2>Ubuntu</h2>

<p>Dockerはlinux環境でのみ動作可能、ということで、Vagrantにlinux環境を作って、そこにdockerをインストールする。<br/>
さらに、dockerはUbuntuで開発されているとのことなので、同じくUbuntuにインストールしてやるのが一番無難っぽい。</p>

<h3>VagrantBoxの作成</h3>

<p>Ubuntu14の64bit版を使ってvagrantboxを作成する。<br/>
<a href="http://www.vagrantbox.es/">http://www.vagrantbox.es/</a><br/>
このページ内で、<code>trusty</code>で検索。<br/>
(Ubuntu14はtrustyと呼ばれているらしい)</p>

<p>その64bit版のURLをコピー。ちなみに以下のURL。</p>

<blockquote><p><a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box">https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box</a></p></blockquote>

<h3>VagratBoxの追加</h3>

<p>vagrantに追加する。</p>

<pre><code>$ vagrant box add trusty64 https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box
</code></pre>

<p><code>box add</code>で先程コピーしたURLから追加する。<br/>
<code>trusty64</code>としたところはboxの名前なので任意でよい。</p>

<p>10分くらい待つと完了した。</p>

<h3>初期化</h3>

<p>導入したいディレクトリに移動して、初期化する。</p>

<pre><code>$ vagrant init trusty64
</code></pre>

<p>先程指定したboxの名前を使用する。<br/>
ここでもしばらく待つと完了。<br/>
<code>Vagrantfile</code>というファイルが作成される。<br/>
特に編集する必要はないが、IPアドレスのみ変更した。</p>

<h3>起動</h3>

<p>で、起動。</p>

<pre><code>$ vagrant up
</code></pre>

<p>sshで入ってみる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh
</span><span class='line'>Welcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-53-generic x86_64)
</span><span class='line'>...
</span><span class='line'>vagrant@vagrant-ubuntu-trusty-64:~$</span></code></pre></td></tr></table></div></figure>


<h2>Doker</h2>

<h3>インストール</h3>

<p>で、Dockerをインストール。<br/>
公式に沿って実行する。<br/>
<a href="https://docs.docker.com/installation/ubuntulinux/">https://docs.docker.com/installation/ubuntulinux/</a></p>

<p>まずは必要なパッケージをインストール。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get update
</span><span class='line'>$ sudo apt-get install linux-image-generic-lts-trusty
</span><span class='line'>$ sudo reboot</span></code></pre></td></tr></table></div></figure>


<p>再起動後、dockerのインストール。<br/>
<code>wget</code>がインストールされているかを確認。<br/>
インストールされていたので、そのまま進む。</p>

<pre><code>$ which wget
/usr/bin/wget
</code></pre>

<p>で、dockerパッケージをダウンロードし、インストールする。</p>

<pre><code>$ wget -qO- https://get.docker.com/ | sh
</code></pre>

<p>しばらく待つと完了。</p>

<pre><code>$ docker --version
Docker version 1.6.2, build 7c8fca2
</code></pre>

<h2>Docker image</h2>

<h3>pull</h3>

<p><a href="https://registry.hub.docker.com/">https://registry.hub.docker.com/</a><br/>
上記サイトから任意のimageを引っ張ってくる。<br/>
<code>centos</code>のイメージを入れてみる。<br/>
<a href="https://registry.hub.docker.com/search?q=centos&amp;searchfield=">centosの検索結果</a></p>

<pre><code>$ sudo docker pull centos
</code></pre>

<p>入っているimageのリストは以下で確認できる。</p>

<pre><code>$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
centos              latest              fd44297e2ddb        6 weeks ago         215.7 MB
</code></pre>

<h3>Container</h3>

<p>で、落としてきたimageからcontainerを作成して、その上で簡単なコマンドを走らせてみる。</p>

<pre><code>$ sudo docker run centos echo "hello world!"
hello world!
</code></pre>

<p><code>docker run</code>で指定したimageからcontainerを作成。<br/>
その後に続くコマンドをそのcontainer上で実行している。</p>

<p>実行されたcontainerを確認スルには以下。<br/>
(<code>-a</code>のオプションを外すすと実行中のcontainerが表示される。)</p>

<pre><code>$ sudo docker ps -a
CONTAINER ID        IMAGE               COMMAND                CREATED              STATUS                          PORTS               NAMES
0a84f937b7c        centos:latest       "echo 'hello world!'   About a minute ago   Exited (0) About a minute ago                       agitated_banach
</code></pre>

<h2>Webサーバーの立ち上げ</h2>

<h3>dockerfile</h3>

<p>dockerfileを作る。</p>

<pre><code>$ vim Dockerfile
</code></pre>

<p>中身は簡単に以下のように。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM centos
</span><span class='line'>MAINTAINER xxx
</span><span class='line'>
</span><span class='line'>RUN yum install -y httpd
</span><span class='line'>ADD ./index.html /var/www/html/
</span><span class='line'>EXPOSE 80
</span><span class='line'>CMD ["/usr/sbin/httpd", "-D", "FOREGROUND"]</span></code></pre></td></tr></table></div></figure>


<p><code>MAINTAINER</code>は作成者の名前などを書いてやるのが習慣らしい。</p>

<p>index.htmlを適当に作成。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>hello docker world!
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<h3>build</h3>

<p>で、ビルドする。<br/>
ビルドで、imageからdockerfile内のコマンドを使用してcontainerを作成し、さらにその結果を新しくimageに出力する、ところまでをやってくれるコマンドのよう。</p>

<pre><code>$ sudo docker build -t test/httpd .
</code></pre>

<p><code>test/httpd</code>はcontainerの名前。任意でよい。<br/>
最後の<code>.</code>は現在のディレクトリでビルド、ということ。</p>

<p>しばらく待って完了…と行きたいところだけど、どうやらエラーが出て止まってしまってるよう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Complete!
</span><span class='line'>INFO[0012] The command [/bin/sh -c yum install -y httpd] returned a non-zero code: 1</span></code></pre></td></tr></table></div></figure>


<p>Complete!って出てるけど、その先のStepに進まない…。</p>

<h3>エラー回避</h3>

<p>ググってみると以下がヒット。<br/>
<a href="http://fujita222.hateblo.jp/entry/2015/03/10/163657">Dockerのcentosでapacheインストール失敗する。rpmがうんちゃらとか言われる</a></p>

<p>どうやらpullしてきたcentOSがあたらしすぎてダメだったよう。<br/>
なので、この記事どおりcentos6をpullして使う。</p>

<pre><code>$ sudo docker pull centos:centos6
$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
centos              centos6             b9aeeaeb5e17        6 weeks ago         202.6 MB
</code></pre>

<p>で、<code>Dockerfile</code>の中身をcentos6を使うように修正。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM centos:centos6
</span><span class='line'>MAINTAINER xxx
</span><span class='line'>
</span><span class='line'>RUN yum install -y httpd
</span><span class='line'>ADD ./index.html /var/www/html/
</span><span class='line'>EXPOSE 80
</span><span class='line'>CMD ["/usr/sbin/httpd", "-D", "FOREGROUND"]</span></code></pre></td></tr></table></div></figure>


<p>これで再度実行。</p>

<pre><code>$ sudo docker build -t test/httpd .
</code></pre>

<p>ようやく無事、完了。</p>

<pre><code>$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
test/httpd          latest              74ea9508c04c        52 seconds ago      271.2 MB
centos              centos6             b9aeeaeb5e17        6 weeks ago         202.6 MB
</code></pre>

<h3>run</h3>

<p>ポートを指定してバックグラウンドで実行。</p>

<pre><code>$ sudo docker run -p 8080:80 -d test/httpd
</code></pre>

<p>起動している。</p>

<pre><code>$ sudo docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                  NAMES
4aca4268ffa3        test/httpd:latest   "/usr/sbin/httpd -D    15 seconds ago      Up 15 seconds       0.0.0.0:8080-&gt;80/tcp   compassionate_poincare
</code></pre>

<p>Vagrantfileで指定したIPアドレスに8080のポートをつけてやればアクセスが出来る。</p>

<blockquote><p><a href="http://192.168.33.30:8080/">http://192.168.33.30:8080/</a></p></blockquote>

<p>アクセスすると、先程作成した<code>index.html</code>が表示された。</p>

<p>なんだかんだで大変だったけどとりあえず起動できた。</p>

<h2>参考</h2>

<p><a href="http://dotinstall.com/lessons/basic_docker">Docker入門 (全11回) &ndash; プログラミングならドットインストール</a><br/>
<a href="http://tech.lexues.co.jp/archives/1569">【社内勉強会】Docker入門してみました | LexTech</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]レコードの詳細からカスタムボタンでapexを呼び出す]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/01/custom-btn-apex/"/>
    <updated>2015-06-01T17:33:40+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/01/custom-btn-apex</id>
    <content type="html"><![CDATA[<p>カスタムボタンを使用してJSからApexを呼び出して処理させてみる。</p>

<!-- more -->


<h2>Apex</h2>

<p><code>webService</code>を使用して、apexクラスを作成しておく。<br/>
戻り値は文字列としておく。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global class SampleClass{
</span><span class='line'>  webService static String hogeMethod(String id){
</span><span class='line'>      return 'このレコードのIDは、' + msg_id + 'です。';
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>カスタムボタン</h2>

<p>リードの場合は以下にある。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/custom_btn02.jpg" alt="" /></p>

<p><code>新規ボタンまたはリンク</code>をクリック。</p>

<p><code>動作</code>を<code>JavaScriptを実行</code>に、<br/>
<code>内容のソース</code>を<code>onClick JavaScript</code>にする。</p>

<p><img src="http://kayakuguri.github.io/images/2015/06/custom_btn01.jpg" alt="" /></p>

<p>内容は以下の用に記述。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{!REQUIRESCRIPT('/soap/ajax/31.0/connection.js')} 
</span><span class='line'>{!REQUIRESCRIPT('/soap/ajax/31.0/apex.js')} 
</span><span class='line'>var ret = sforce.apex.execute('SampleClass','hogeMethod',{id:"{!CustomObject__c.Id}"}); 
</span><span class='line'>alert(ret);</span></code></pre></td></tr></table></div></figure>


<p>このカスタムボタンがクリックされると、このJSが実行される。<br/>
<code>sforce.apex.execute</code>で実行するapexとメソッドを指定している。<br/>
第一引数がクラス名。第二引数がメソッド。第三引数が引数、となる。<br/>
引数で実行しているレコードのIDを渡すように項目を差し込んでいる。</p>

<h2>表示</h2>

<p>表示は、レイアウトの編集で、ボタンから追加。<br/>
<img src="http://kayakuguri.github.io/images/2015/06/custom_btn04.jpg" alt="" /></p>

<p>レコードの詳細からボタンをクリックするとIDが渡されて実行される。<br/>
<img src="http://kayakuguri.github.io/images/2015/06/custom_btn03.jpg" alt="" /></p>

<h2>参考</h2>

<p><a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_and_ajax.htm">Apex in AJAX | Force.com Apex Code Developer&#x27;s Guide | Salesforce Developers</a><br/>
<a href="https://developer.salesforce.com/forums/ForumsMain?id=906F00000009BNkIAM">カスタムボタン押下時にSFDC上のWebServiceをコールする方法 &ndash; Salesforce Developer Community</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Force.com CLIをインストールして試してみた]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/29/forcecom-cli/"/>
    <updated>2015-05-29T21:06:19+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/29/forcecom-cli</id>
    <content type="html"><![CDATA[<blockquote><p>開発者の方は、Force.comのデータベースをいちいちブラウザを開いたりせずにコマンドラインから確認・操作したいと思う事があるかもしれません。</p></blockquote>

<p>試してみました。</p>

<!-- more -->


<h1>Go</h1>

<h2>go言語環境</h2>

<p>Force.com CLIはGOで動作しているので、go言語が動くようにする。</p>

<h3>Homebrewによるインストール</h3>

<p>homebrew自体をアップデートしてインストールする。</p>

<pre><code>$ brew update
$ brew install go
</code></pre>

<p>確認</p>

<pre><code>$ go version
go version go1.4.2 darwin/amd64
</code></pre>

<h3>$GOPATH</h3>

<p>パッケージ管理のためのパスを通すよう。<br/>
<code>$HOME/.go/${GO_VERSION}</code>のパスにするのがいいようなんで、それにならう。</p>

<pre><code>$ mkdir -p ~/.go/1.4/
</code></pre>

<p>zsh使ってるので、<code>.zshrc</code>にパスを追加。</p>

<pre><code>export GOPATH=$HOME/.go/1.4
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
</code></pre>

<p>再読み込みしておく。</p>

<pre><code>$ source ~/.zshrc
</code></pre>

<h3>Mercurial</h3>

<blockquote><p>Mercurial（マーキュリアル）は、クロスプラットフォームの分散型バージョン管理システム。 Pythonで実装されている（ただし、バイナリdiffに関してはC言語で実装されている）。 Mercurialはコマンドラインプログラムである。 全てのコマンドは hgで始まる。<br/>
<a href="http://ja.wikipedia.org/wiki/Mercurial">http://ja.wikipedia.org/wiki/Mercurial</a></p></blockquote>

<h4>Python</h4>

<p>Pythonで動作するとのことなので、Pythonが必要。<br/>
自分の環境には入っていた。</p>

<pre><code>$ python -V
Python 2.7.9
</code></pre>

<p>必要な場合は、homebrewでインストール出来るよう。</p>

<pre><code>$ brew install python
</code></pre>

<h4>pip</h4>

<p>あと、パッケージ管理のために<code>pip</code>が必要。<br/>
これも入っていた。</p>

<pre><code>$ pip -V
pip 6.1.0 from /usr/local/lib/python2.7/site-packages/pip-6.1.0-py2.7.egg (python 2.7)
</code></pre>

<p>インストールする場合は以下。</p>

<pre><code>$ brew install pip
</code></pre>

<p>ただ、最新版ではなさそうだったので、アップデート。</p>

<pre><code>$ pip install --upgrade pip
</code></pre>

<p>アップデート出来た。</p>

<pre><code>$ pip -V
pip 7.0.1 from /usr/local/lib/python2.7/site-packages (python 2.7)
</code></pre>

<h4>Mercurialのインストール</h4>

<p>で、ようやく、<code>Mercurial</code>のインストール。</p>

<pre><code>$ pip install --upgrade pip
...
Successfully installed mercurial-3.4
</code></pre>

<p>これでようやく整った。</p>

<h1>Force.com CLI</h1>

<h2>インストール</h2>

<pre><code>$ go get -u github.com/heroku/force
</code></pre>

<p>エラーが出た。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.go/1.4/src/github.com/ddollar/config/windows.go:8: (*Config).homeDirectory redeclared in this block
</span><span class='line'>  previous declaration at .go/1.4/src/github.com/ddollar/config/posix.go:9</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>エラー回避</h2>

<p>どうやら関連プラグイン？のとあるファイルが悪さをしているとかなんとか。<br/>
以下にあるファイルをリネームして退避させておく。</p>

<pre><code>$ cd /Users/YOUR_NAME/.go/1.4/src/github.com/ddollar/config
$ mv windows.go _windows.go
$ go get .
</code></pre>

<p>これでエラーが回避された状態でプラグイン？のインストールが完了したので、<br/>
あらためてインストール。</p>

<pre><code>$ go get -n github.com/heroku/force
</code></pre>

<p>入った。</p>

<p><a href="https://github.com/heroku/force/issues/138#issuecomment-86178284">Compiling from source not working · Issue #138 · heroku/force</a></p>

<h2>ログイン</h2>

<pre><code>$ force login
</code></pre>

<p>以下のように認証を求められるので、許可。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/Force_com_CLI_1.jpg" alt="" /></p>

<p>許可すると以下の画面になって接続完了。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/Force_com_CLI_2.jpg" alt="" /></p>

<pre><code>$ force login
Logged in as 'YOUR-EMAIL'
</code></pre>

<h3>SELECT</h3>

<p>とりあえず、select文でデータ取得</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ force query 'SELECT ID, NAME FROM Lead'
</span><span class='line'> Id                 | Name
</span><span class='line'>--------------------+---------------------
</span><span class='line'> 00Q1000000DnnMvEAJ | Boxer Bertha
</span><span class='line'> 00Q1000000DnnMwEAJ | Cotton Phyllis
</span><span class='line'> ...</span></code></pre></td></tr></table></div></figure>


<h3>カスタム項目の追加</h3>

<p>コマンドからカスタム項目の追加も可能。<br/>
だけど、エラーが。</p>

<pre><code>$ force field create User__c Due:DateTime
Attrs:  &lt;invalid Value&gt;
panic: reflect: call of reflect.Value.Type on zero Value
...
</code></pre>

<p>どうやら、型名を小文字で入れる必要があるよう。<br/>
<a href="https://github.com/heroku/force/issues/52">Error when calling force field create · Issue #52 · heroku/force</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ force field create User__c Due:datetime
</span><span class='line'>Attrs:  &lt;main.DatetimeFieldRequired Value&gt;
</span><span class='line'>
</span><span class='line'>      &lt;metadata xsi:type="CustomField" xmlns:cmd="http://soap.sforce.com/2006/04/metadata"&gt;
</span><span class='line'>          &lt;fullName&gt;User__c.Due__c&lt;/fullName&gt;
</span><span class='line'>          &lt;label&gt;Due&lt;/label&gt;
</span><span class='line'>          &lt;type&gt;DateTime&lt;/type&gt;
</span><span class='line'>      &lt;/metadata&gt;
</span><span class='line'>
</span><span class='line'>Not done yet.  Will check again in five seconds.
</span><span class='line'>Custom field created</span></code></pre></td></tr></table></div></figure>


<p><img src="http://kayakuguri.github.io/images/2015/05/Force_com_CLI_3.jpg" alt="" /></p>

<p>この指定方法だと、フィールド名とAPI参照名を別々に出来ない、、かも。</p>

<h3>利用方法</h3>

<pre><code>$ force
</code></pre>

<p>でヘルプを表示。<br/>
さらに、コマンドをそのまま打つと使いと例も表示してくれる。<br/>
先ほどの、<code>field</code>だとこんな感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ force field
</span><span class='line'>Usage: force field
</span><span class='line'>
</span><span class='line'>Manage sobject fields
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  force field list &lt;object&gt;
</span><span class='line'>  force field create &lt;object&gt; &lt;field&gt;:&lt;type&gt; [&lt;option&gt;:&lt;value&gt;]
</span><span class='line'>  force field delete &lt;object&gt; &lt;field&gt;
</span><span class='line'>  force field type
</span><span class='line'>  force field type &lt;fieldtype&gt;
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>
</span><span class='line'>  force field list Todo__c
</span><span class='line'>  force field create Inspection__c "Final Outcome":picklist picklist:"Pass, Fail, Redo"
</span><span class='line'>  force field create Todo__c Due:DateTime required:true
</span><span class='line'>  force field delete Todo__c Due
</span><span class='line'>  force field type     #displays all the supported field types
</span><span class='line'>  force field type email   #displays the required and optional attributes</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="https://force-cli.heroku.com/">Force.com CLI</a><br/>
<a href="http://blogjp.sforce.com/2013/11/forcecom-cli---d403.html">Force.com CLI &ndash; コマンドラインインタフェース | Salesforce Developers Japan Blog</a><br/>
<a href="http://qiita.com/zaki-yama/items/77b3aeff6b129a87019a">Salesforce &ndash; ターミナルからApexを実行できるforce.com CLIの使い方 &ndash; Qiita</a><br/>
<a href="http://sixeight.hatenablog.com/entry/2013/12/12/031752">golang の環境作った &ndash; ちなみに</a><br/>
<a href="http://qiita.com/puttyo_bubu/items/4e60e42ff041f2474428">Macでgo言語開発環境を作る &ndash; Qiita</a><br/>
<a href="http://blog.teapla.net/2010/12/1178">homebrewを使ってMercurialをインストールする | Ken&#039;s blog @teaplanet</a><br/>
<a href="http://qiita.com/tailak/items/0eedc6d5c4cc71a5e1a0">Python &ndash; Macでpipのアップデートでエラー &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]exif情報を扱う]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/29/heroku-exif/"/>
    <updated>2015-05-29T12:26:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/29/heroku-exif</id>
    <content type="html"><![CDATA[<p>heorkuで画像アップロード機能をつけた際、画像かを判定するのに、exif情報を利用したところ、エラーが出た。</p>

<!-- more -->


<p><code>exif_imagetype</code>を利用して画像かを判定していたのだけど、<br/>
以下のように、そんな関数ないよ、と怒られた。</p>

<blockquote><p>Fatal error: Call to undefined function exif_imagetype() i</p></blockquote>

<p>調べてみると、herokuは標準ではexif情報を扱うためのPHPモジュールが入っていないよう。<br/>
composerを使えばインストール出来る、とのことなので以下のように記述し再度deploy。<br/>
これで解決出来た。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "require": {
</span><span class='line'>        "ext-exif":"*"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://stackoverflow.com/questions/16224488/how-to-get-the-exif-php-extension-working-on-heroku">How to get the EXIF PHP extension working on Heroku? &ndash; Stack Overflow</a><br/>
<a href="https://devcenter.heroku.com/articles/php-support#extensions">Extensions | Heroku PHP Support | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant環境での環境変数の設定方法]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/26/vagrant-env/"/>
    <updated>2015-05-26T17:54:23+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/26/vagrant-env</id>
    <content type="html"><![CDATA[<p>vagrant環境で環境変数を使いたかったので調べてみたところ、<br/>
httpdファイルへの追記が必要とのことで試してみた。</p>

<!-- more -->


<h2>httpd</h2>

<p><code>/etc/sysconfig/httpd</code>このファイルへ必要な環境変数を記述し、<code>vagrant up</code>すればよい。</p>

<pre><code>export SET_VALUE=hoge
</code></pre>

<p>httpdの中身はデフォルトでは全てコメントアウトされているので、上記だけを記述したファイルに差し替えてもOK。</p>

<h2>再起動</h2>

<p><s>apacheの再起動ではだめで、vagrant自体の再起動が必要。</s><br/>
追記：apacheの再起動だけで大丈夫でした。</p>

<pre><code>$ vagrant reload
</code></pre>

<p>phpinfoで出力させてみると、無事、反映されていた。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/enviroment.jpg" alt="" /></p>

<h2>$_ENV</h2>

<p>これで反映はされたが、環境変数を取得するための、<code>$_ENV</code>が動作しなかった。<br/>
<code>getenv()</code>だと正しく取得出来る。</p>

<p>調べて見ると、<code>php.ini</code>の設定で<code>ENV</code>を使用するかを設定出来るよう。<br/>
デフォルトでは使用するようになっているようだが、なぜか使用しないようになっていた。</p>

<p>設定する場合は以下のように記述。<br/>
場所は、<code>/etc/php.ini</code>にあった。</p>

<pre><code>variables_order = "EGPCS"
</code></pre>

<p>EGPCSというのは以下のように頭文字となっている。</p>

<blockquote><p>EGPCS (Environment (環境変数)、 Get、Post、 Cookie (クッキー)、そして Server)<br/>
<a href="http://php.net/manual/ja/ini.core.php">http://php.net/manual/ja/ini.core.php</a></p></blockquote>

<p>これを反映して再起動。</p>

<h2>Vagrantでの反映</h2>

<p>ファイルは予め用意しておき、<code>vagrant up</code>だけで反映されるようにしてみる。<br/>
とはいえ、シェルでコピーしているだけだけど。</p>

<p>セットアップ用のシェルスクリプト内に以下を追記。<br/>
設定用の<code>httpd</code>ファイルはVagrantfileと同階層の<code>vagrant.config</code>ディレクトリ以下に設置しているものとする。</p>

<pre><code>cp /vagrant/vagrant.config/httpd /etc/sysconfig/httpd
</code></pre>

<p>この状態で、<code>vagrant up</code>すれば、<code>vagrant.config</code>内で設定したファイルがvagrant環境に反映される。</p>

<h2>参考</h2>

<p><a href="http://yukke.blog3.fc2.com/blog-entry-68.html">ブログ Apache＋PHPで環境変数を追加したい</a></p>

<p>この参考記事でわかったけれど、同じく<code>Apache Environment</code>と<code>environment</code>でハマってた。<br/>
以下のような関係になっているらしい。</p>

<table>
<thead>
<tr>
<th>方法 </th>
<th> 反映先 </th>
<th> 取得方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>httpd.conf </td>
<td> Apache Environment </td>
<td> $_SERVER</td>
</tr>
<tr>
<td>httpd </td>
<td> environment </td>
<td> $_ENV</td>
</tr>
</tbody>
</table>


<p><a href="http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q11102244256">phpで環境変数$_ENVを使用しようとしていますが使用できない状態です。&hellip; &ndash; Yahoo!知恵袋</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wordpressをherokuにインストールする場合はルーティングのhtaccessを自分で設置すること]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/22/heroku-wp-htaccess/"/>
    <updated>2015-05-22T16:11:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/22/heroku-wp-htaccess</id>
    <content type="html"><![CDATA[<p>タイトルママ。<br/>
ちょっとハマったのでメモ。</p>

<!-- more -->


<h2>WordPressのインストール</h2>

<p>以下の手順で通常通りwordpressをインストールした。</p>

<ol>
<li>herokuにインストール用のアプリを作成</li>
<li>gitでローカルにclone</li>
<li>2のディレクトリ内に<a href="https://ja.wordpress.org/">Wordpress日本語版</a>をダウンロードして展開</li>
<li>herokuのアプリにmySQLのアドオン、<a href="https://addons.heroku.com/cleardb">ClearDB</a>を入れる</li>
<li>環境変数から、DBの接続情報を確認。<br/>
<code>mysql://ユーザ名:パスワード@サーバ名/データベース?reconnect=true</code></li>
<li>wp-config.phpにDB情報を反映</li>
<li>PushしてDploy</li>
<li>wp-admin/install.phpにアクセスして、サイト名やユーザー名などを設定してインストール。</li>
<li>完了</li>
</ol>


<h2>固定ページにアクセス</h2>

<p>通常の投稿でもたぶん同じ事が起こると思うが、<br/>
最初から入っているサンプルの固定ページにアクセス。</p>

<blockquote><p><a href="http://YOUR-APP-NAME.herokuapp.com/sample-page/">http://YOUR-APP-NAME.herokuapp.com/sample-page/</a></p></blockquote>

<p>アクセスを確認してから、特にソースは触らずに<a href="http://kayakuguri.github.io/blog/2015/04/21/git-allow-empty/">空でdeploy</a>。</p>

<p>再度上記の固定ページにアクセスすると、<strong>404 Notfound</strong>。</p>

<h2>ルーティング</h2>

<p>ローカルに入れていたWordPressのディレクトとファイルを見比べていると、<br/>
ローカルのものはドキュメントルートに<code>.htaccess</code>がある。</p>

<p>中身を見ていると、リダイレクトしているよう。</p>

<p>どうやら、wordpressのインストール時に、wordpressのルートにルーティング用の<code>.htaccess</code>を自動で作成するよう。<br/>
それがdeployのタイミングで消えてしまい、リダイレクトがかからず、404となっていた。</p>

<p><code>.htaccess</code>の中身は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># BEGIN WordPress
</span><span class='line'>&lt;IfModule mod_rewrite.c&gt;
</span><span class='line'>RewriteEngine On
</span><span class='line'>RewriteBase /
</span><span class='line'>RewriteRule ^index\.php$ - [L]
</span><span class='line'>RewriteCond %{REQUEST_FILENAME} !-f
</span><span class='line'>RewriteCond %{REQUEST_FILENAME} !-d
</span><span class='line'>RewriteRule . /index.php [L]
</span><span class='line'>&lt;/IfModule&gt;
</span><span class='line'>
</span><span class='line'># END WordPress</span></code></pre></td></tr></table></div></figure>


<p>これを<code>.htaccess</code>の名前でwordpressのルートに保存してやり、git管理下においてやればよい。</p>

<p>これを置いた状態であれば、deployかけても問題なくアクセスが出来た。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Session Fixation]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/21/session-fixation/"/>
    <updated>2015-05-21T19:09:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/21/session-fixation</id>
    <content type="html"><![CDATA[<p>今更ながら、Session Fixationなるものを知ったのでメモ。</p>

<!-- more -->


<p>内容は以下、徳丸先生が詳しい。<br/>
<a href="http://blog.tokumaru.org/2009/01/introduction-to-session-fixation-attack.html">とくまるひろしのSession Fixation攻撃入門 | 徳丸浩の日記</a></p>

<p>日本語では、<code>セッション固定攻撃</code>と呼ばれているようで、<br/>
ログイン認証をセッションで行っているサイトに対して、何らかの方法でユーザーに意図した固定セッションIDを与えた状態でログインしてもらい、<br/>
攻撃者はそのIDでログインしたことにする、というもののよう。</p>

<p>対策としては以下いずれかになるよう。</p>

<blockquote><p>(1) セッション変数内に特定の値を常に与えるようにし、もしその値が無かった場合には正しくふられたセッションIDではないと判断する。<br/>
(セッションIDの正当性をセッション変数内に埋め込む)<br/>
(2) ログイン処理など、そのサイトでの本来のセッションの使用を行う時点で(重要な情報を持たせるときに)、セッションIDを変更する。
<a href="http://pentan.info/php/session_fixation.html">http://pentan.info/php/session_fixation.html</a></p></blockquote>

<p>2のセッションの付け替えは以下のようにする。</p>

<pre><code>session_start();
session_destroy();
session_start();
session_regenerate_id();
</code></pre>

<p>ログインが成功し、ログイン認証をセッションに格納する直前に付け替えを入れてやれば、<br/>
ログイン後には別のIDとなるので、攻撃側が用意した固定IDを回避することが出来る。</p>

<p>ただしこの、<code>session_regenerate_id</code>は結構な負荷がかかるようで、<br/>
連続して使用しているとセッションが切れてしまうらしい。<br/>
なので、連続的に実行されないようにする事が重要っぽい。<br/>
ログイン時に一回のみ実行されるようにしておけば特に問題なさそう。</p>

<h2>参考</h2>

<p><a href="http://canalize.jp/archives/009281.php">セッションハイジャック と session_regenerate_id( )関数 &ndash; Shoulder.jp</a> <br/>
<a href="http://pentan.info/php/session_gc.html">セッションの有効期間とか設定とか挙動とかを調べました &ndash; [PHP + PHP] ぺんたん info</a><br/>
<a href="http://pentan.info/php/session_fixation.html">セッション固定攻撃(session fixation) &ndash; [PHP + PHP] ぺんたん info</a><br/>
<a href="http://blog.ohgaki.net/session_regenerate_id_wo">ログイン後にsession_regenerate_id()を実行するだけで十分か? | yohgaki&#039;s blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesfroce]開発者コンソールでのFIELD_INTEGRITY_EXCEPTIONエラー]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/14/developper-console-error/"/>
    <updated>2015-05-14T14:50:12+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/14/developper-console-error</id>
    <content type="html"><![CDATA[<p>たまに起こっていつも調べている気がするのでメモ。</p>

<!-- more -->


<p>最近は開発者コンソールで開発をしている事が多いのだけれど、ファイルをいざ保存しようとしたらたまに以下のようなエラーが出て保存できない時がある。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/Force_com_Developer_Console_01.jpg" alt="" /></p>

<blockquote><p>FIELD_INTEGRITY_EXCEPTION<br/>
Failde to create createContainerMember for containerId=undefined:null は無効な containerIdです。</p></blockquote>

<p>保存しているファイルの種類や内容には関係ない。<br/>
これが起こるとsavingのまま止まってしまう。</p>

<p>で、解決方法は公式にある。</p>

<p><a href="https://help.salesforce.com/apex/HTViewSolution?id=000204953&amp;language=en_US">Developer console cannot save classes/triggers/pages</a></p>

<p>まず、開発者コンソールを閉じて、再度開く。(念のため)<br/>
で、開発者コンソールのメニューから、<code>Workspace</code> &ndash;> <code>New Workspace</code>を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/Force_com_Developer_Console_02.jpg" alt="" /></p>

<p>適当な名前で保存する。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/Force_com_Developer_Console_03.jpg" alt="" /></p>

<p>ワークスペースが新しく切り替わる(見た目は変わらない)。<br/>
すると、無事保存出来るようになる。</p>

<p>一度保存出来るようになったらもとのdefaultのワークスペースに戻しても問題なくなっているので、<br/>
先程作った適当なワークスペース削除しても問題なし。</p>

<p>開発者コンソールは便利なんだけど、いかんせん不安定な印象がある…。</p>
]]></content>
  </entry>
  
</feed>
