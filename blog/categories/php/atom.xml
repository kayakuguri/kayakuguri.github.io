<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2017-01-05T18:20:48+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ScotchboxでのPHPエラーの出力場所]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/12/05/ubuntu-error-log/"/>
    <updated>2016-12-05T17:02:15+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/12/05/ubuntu-error-log</id>
    <content type="html"><![CDATA[<p>自分用メモ。<br/>
<a href="https://box.scotch.io/">Scotchbox</a>のVagrant環境で、PHPの標準エラー出力がどこに吐かれるかをいつも調べるのでメモ。</p>

<!-- more -->


<h1>環境</h1>

<p>環境は以下。</p>

<ul>
<li>Scotchbox 2.5</li>
<li>Ubuntu 14.04 LTS</li>
<li>PHP 5.6</li>
</ul>


<p>純粋なUbuntuでも同じ場所にログが出力されるのかは調査していないので、あくまでもScotchbox環境、とする</p>

<h1>結果</h1>

<p>結論から書くと、以下のパスに保存されていた。</p>

<p><code>
/var/log/apache2/error.log
</code></p>

<p>というわけで、<code>tail</code>する場合は以下。</p>

<p>```</p>

<h1>tail -f /var/log/apache2/error.log</h1>

<p>```</p>

<h1>設定内容</h1>

<p>出力するパスは、以下のファイルで設定されている。<br/>
<code>/etc/apache2/sites-available/000-default.conf</code></p>

<p>内容</p>

<p>```
<VirtualHost *:80></p>

<pre><code>...
ErrorLog ${APACHE_LOG_DIR}/error.log
...
</code></pre>

<p></VirtualHost><br/>
```</p>

<p><code>APACHE_LOG_DIR</code>という環境変数で設定されていることがわかる。<br/>
では、この環境変数はどこで設定しているかというと、以下のファイル。</p>

<p><code>/etc/apache2/envvars</code></p>

<p><code>
...
export APACHE_LOG_DIR=/var/log/apache2$SUFFIX
...
</code></p>

<p>というわけで、冒頭のディレクトリに保存されていた。<br/>
もし変更したい場合は上記<code>envvars</code>にて変更すればよさそう。<br/>
(パーミッションの設定を与えてやる必要はあると思う。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku] タイムゾーンの設定各種]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/01/heroku-timezone/"/>
    <updated>2016-09-01T10:02:04+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/01/heroku-timezone</id>
    <content type="html"><![CDATA[<p>heroku環境でタイムゾーンの設定が色々あったのでまとめ。</p>

<!-- more -->


<h1>サーバー時間</h1>

<p>まずは、herokuのサーバー時間のタイムゾーン設定。<br/>
これは簡単で、環境変数に入れてやるだけ。</p>

<blockquote><p>TZ : Asia/Tokyo</p></blockquote>

<p>コマンドで入れる場合は以下。</p>

<p><code>
$ heroku config:add TZ=Asia/Tokyo -a APP_NAME
</code></p>

<p>きちんと反映されているかどうかは下記コマンドから参照可能。<br/>
意図した時間が返ってきてればOK。</p>

<p><code>
$ heroku run date -a APP_NAME
Running date on ⬢ APP_NAME... up, run.1198
Thu Sep  1 10:06:57 JST 2016
</code></p>

<h2>参考</h2>

<ul>
<li><a href="http://blog.skktmlab.info/blog/2015_03_02_2">Herokuでホスティングしているブログのタイムゾーンを設定する</a></li>
</ul>


<h1>PHP</h1>

<p>PHPの設定でタイムゾーンを指定する場合。<br/>
通常は、 <code>php.ini</code> で設定するが、herokuの場合は、 <code>.user.ini</code> ファイルを使う。</p>

<p>ドキュメントルート直下に <code>.user.ini</code> ファイルを設置。<br/>
中に以下を記述。</p>

<p><code>
date.timezone = "Asia/Tokyo"
</code></p>

<p>この設定ではその他にはアップロードの最大容量なんかを指定する場合が多い。<br/>
参考 : <a href="http://kayakuguri.github.io/blog/2014/02/18/change-max-filesize/">[PHP][heroku]upload_max_filesizeを変更する &ndash; KayaMemo</a></p>

<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/hiro_y/items/bc631a27c9701f81a4f9#runtime-settings">HerokuでPHPを使うときに気を付けるところ &ndash; Qiita</a></li>
<li><a href="https://devcenter.heroku.com/articles/custom-php-settings#php-runtime-settings-ini-settings">Customizing Web Server and Runtime Settings for PHP | Heroku Dev Center</a></li>
</ul>


<h1>WordPress</h1>

<p>最後はherokuと直接は関係ないけれど、wordpressのタイムゾーン。<br/>
WordPressのタイムゾーンはデフォルトで標準時になるようにしてある、とのこと。<br/>
しかしこれは設定で変更するものではなく、取得する際に調整するもののよう。</p>

<p>一番簡易なものとしては、 <code>date</code> 関数で取得していた箇所をWordPress関数である、 <code>date_i18n</code> を利用して取得するようにする、というもの。<br/>
これだけで、日本時間で取得できるようになる。</p>

<p><code>
date_i18n('Y-m-d H:i:s');
</code></p>

<p>その他では、 <code>datetime</code> クラスを使用してタイムゾーンを指定する方法もあり。</p>

<p><code>
$now = new DateTime('', new DateTimeZone('Asia/Tokyo'));
$now-&gt;format('Y-m-d H:i:s');
</code></p>

<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/yousan/items/a385f794a9bb433aecbb">WordPressで現在時刻を利用すると9時間ずれてしまう問題 &ndash; Qiita</a></li>
</ul>


<h1>まとめ</h1>

<p>WordPressはともかく、herokuとPHPのタイムゾーン設定はherokuでPHPを使うのなら、デフォルトで設定しておいた方が後々間違いがなさそう。<br/>
環境構築の際にまず設定しておくとよさげ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PHP]CurlでのSSL接続をOpenSSL方式に変更する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/07/07/curl-openssl-tls/"/>
    <updated>2016-07-07T17:50:07+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/07/07/curl-openssl-tls</id>
    <content type="html"><![CDATA[<p>curlでsslを接続する際に、opensslを利用した接続になっていなかったために接続出来ない事例があったのだが、curlを入れ替えてopensslを利用するようにしたら接続出来たのでそのメモ。</p>

<!-- more -->


<h1>前提</h1>

<p>接続をしている環境は以下とする。</p>

<ul>
<li>CnetOS 5.6</li>
<li>PHP 5.3</li>
</ul>


<p>この環境で、SalesforceへRestAPIを利用して接続をする。<br/>
接続する際の認証は以下のクラスを利用している。</p>

<ul>
<li><a href="https://github.com/nkjm/Force.com-OAuth-Toolkit-for-PHP">nkjm/Force.com-OAuth-Toolkit-for-PHP: A toolkit to enable OAuth in external Web Services developed in php</a></li>
</ul>


<p>自作の <code>/sample/login</code>のエンドポイントへ接続するものとする。<br/>
接続に利用しているPHP。</p>

<p>```
&lt;?php
require_once(&lsquo;oauth.php&rsquo;);</p>

<p>define(&lsquo;CLIENT_ID&rsquo;, &lsquo;xxx&rsquo;);
define(&lsquo;CLIENT_SECRET&rsquo;, &lsquo;xxx&rsquo;);
define(&lsquo;CALLBACK_URL&rsquo;, &lsquo;<a href="http://localhost/">http://localhost/</a>&rsquo;);
define(&lsquo;LOGIN_URL&rsquo;, &lsquo;<a href="https://test.salesforce.com">https://test.salesforce.com</a>&rsquo;);
define(&lsquo;USERNAME&rsquo;, &lsquo;xxx&rsquo;);
define(&lsquo;PASSWORD&rsquo;, &lsquo;xxx&rsquo;);</p>

<p>$oauth = new oauth(CLIENT_ID, CLIENT_SECRET, CALLBACK_URL, LOGIN_URL);
$oauth->auth_with_password(USERNAME, PASSWORD, 120);
$url = &ldquo;$oauth->instance_url/services/apexrest/sample/login&rdquo;;
$curl = curl_init($url);
$POST_DATA = array(</p>

<pre><code>'email' =&gt; 'sample',
'passwd' =&gt; 'password'
</code></pre>

<p>);</p>

<p>curl_setopt($curl, CURLOPT_POST, TRUE);
curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($POST_DATA));
curl_setopt($curl, CURLOPT_HEADER, false);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_HTTPHEADER, array(&lsquo;Content-type: application/x-www-form-urlencoded;charset=UTF-8&rsquo;, &ldquo;Authorization: OAuth &rdquo; . $oauth->access_token));
$output= curl_exec($curl);
curl_close($curl);
$response = json_decode($output, true);</p>

<p>echo $output;
```</p>

<p>この辺詳しくは以下をどうぞ。<br/>
<a href="http://kayakuguri.github.io/blog/2014/10/27/apex-rest-post/">[Salesforce]apex Rest APIでPOSTでデータを送信する</a></p>

<h1>失敗する</h1>

<p>このまま送信をすると、以下のようなエラーが出て失敗する。<br/>
ちなみに、ログイン履歴には残っている。</p>

<p>```
[</p>

<pre><code>{
    message: "この組織では TLS 1.0 が無効になりました。HTTPS を使用して Salesforce に接続するには、TLS 1.1 以降を使用してください。",
    errorCode: "UNSUPPORTED_CLIENT"
}
</code></pre>

<p>]
```</p>

<h1>TLS</h1>

<p>ssl通信をする時の暗号化規格で、TLS1.0は暗号化のレベルが低い、とかで1.1以上が推奨されているよう。<br/>
<a href="http://www.intellilink.co.jp/article/pcidss/18.html">SSL/TLS 1.0 はいつまでに無効化しなければならないか？ | NTTデータ先端技術株式会社</a><br/>
それに伴って、Salesforceでは、TLS1.0での接続を無効に切り替えていっている。<br/>
変更内容など詳しくは公式で。</p>

<ul>
<li><a href="https://help.salesforce.com/apex/HTViewSolution?id=000221207&amp;language=ja">Salesforce による TLS 1.0 の無効化</a></li>
</ul>


<p>組織の設定から明示的に有効にする事も可能だが、強制的に切り替えが行われるタイミングは以下。</p>

<ul>
<li>Sandbox 組織 &ndash; 2016 年 6 月 25 日、午前 9:30 (太平洋夏時間) (16:30 UTC)</li>
<li>本番組織 &ndash; 2017 年 3 月 4 日、午前 9:30 (太平洋標準時) (17:30 UTC)</li>
</ul>


<p>今回は、Sandboxでの設定が適用されたために接続が出来なくなったよう。</p>

<p>ちなみにTLSについて調べていて、現状、SSLと呼んでいるものは全てTLSによる接続になっているらしい。</p>

<blockquote><p>SSLはバージョン1.0と2.0は既に脆弱性で消えていたが、2014(平成26)年10月14日、GoogleのセキュリティチームによりSSL 3.0の深刻な脆弱性「POODLE」が発見されたことでSSLは全バージョンに脆弱性が発覚、これをもってSSLは現役を退いた。<br/>
<a href="http://www.wdic.org/w/WDIC/TLS">http://www.wdic.org/w/WDIC/TLS</a></p></blockquote>

<h1>原因</h1>

<p>上記環境で原因を探ってみると、<code>curl</code>でエンドポイントへ投げる際に<code>NSS</code>という方式が使われている事が原因となっている事がわかった。</p>

<p><img src="/images/2016/07/tls01.jpg" alt="" /></p>

<p><a href="https://developer.mozilla.org/ja/docs/NSS_FAQ">NSS FAQ | MDN</a></p>

<p>NSSのバージョンは3.14だが、このバージョンでは一応TLS1.1には対応しているとリリースノートには書かれていたが…。詳細は不明。<br/>
<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_3.14_release_notes">NSS 3.14 release notes &ndash; Mozilla | MDN</a></p>

<h1>対処</h1>

<p>というわけで、これを<code>NSS</code>ではなく、<code>OpenSSL</code>方式で接続するように変更する。<br/>
といっても、設定変更で済むわけではなく、curlのインストールし直し、となる。</p>

<p>作業内容は以下のサイトをそのまま利用させてもらった。<br/>
<a href="http://www.apollo.jp/blog/?p=2382">wordpressの引っ越し | 紅い夕陽</a></p>

<h2>作業</h2>

<p>サーバー側での作業となる。<br/>
今回はvagrant環境で作業をしたので、<code>$ vagrant ssh</code>でsshログインして作業した。<br/>
また、ルートログインしておく。</p>

<p>・必要なモジュールをインストール</p>

<p>```</p>

<h1>yum install gcc</h1>

<h1>yum -y install openssl-devel</h1>

<h1>yum -y install wget</h1>

<h1>yum -y install lbzip2</h1>

<p>```</p>

<p>・curlを取得して展開(curlは少し前のバージョン)</p>

<p>```</p>

<h1>wget <a href="http://curl.haxx.se/download/curl-7.37.0.tar.bz2">http://curl.haxx.se/download/curl-7.37.0.tar.bz2</a></h1>

<h1>tar xf curl-7.37.0.tar.bz2</h1>

<h1>cd curl-7.37.0</h1>

<h1>./configure &mdash;enable-libcurl-option</h1>

<p>```</p>

<p>・コンパイルしてインストール</p>

<p>```</p>

<h1>make</h1>

<h1>make install</h1>

<p>```</p>

<p>・ライブラリを登録</p>

<p>```</p>

<h1>vi /etc/ld.so.conf.d/curl-x86_64.conf</h1>

<p>```</p>

<p>内容</p>

<p><code>
/usr/local/lib
</code></p>

<p>・ライブラリを更新</p>

<p>```</p>

<h1>ldconfig -v</h1>

<p>```</p>

<p>最後に、apacheを再起動しておく。</p>

<p>```</p>

<h1>service httpd restart</h1>

<p>```</p>

<p>これでOpensslを使うように変更できた。</p>

<p><img src="/images/2016/07/tls02.jpg" alt="" /></p>

<p>この状態で再度冒頭のPHPでアクセスすると、無事、接続することが出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="http://www.apollo.jp/blog/?p=2382">wordpressの引っ越し | 紅い夕陽</a></li>
<li><a href="http://blog.wnotes.net/blog/article/php_curl_error">PHPのcurlで&quot;SSL Connection Error.&quot;のエラーがどうしても出る時の対策 | ブログ :: Web notes.log</a></li>
<li><a href="http://www.wdic.org/w/WDIC/TLS">TLS ‐ 通信用語の基礎知識</a></li>
<li><a href="http://www.intellilink.co.jp/article/pcidss/18.html">SSL/TLS 1.0 はいつまでに無効化しなければならないか？ | NTTデータ先端技術株式会社</a></li>
<li><a href="http://tkengo.github.io/blog/2015/12/01/https-details/">理解してるつもりの SSL/TLS でも、もっと理解したら面白かった話 &middot; けんごのお屋敷</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UbuntuでApacheの環境変数を設定する方法]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/04/22/ubuntu-env/"/>
    <updated>2016-04-22T16:21:16+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/04/22/ubuntu-env</id>
    <content type="html"><![CDATA[<p><a href="http://kayakuguri.github.io/blog/2015/05/26/vagrant-env/">以前に書いた環境変数の設定方法</a>は、centOS用だったので(後で知った）、ubuntuでの方法も書いておく。<br/>
といってもパスのメモだけど。</p>

<!-- more -->


<p>Ubuntuでの設定が必要になった理由としては、いつも愛用している<a href="https://box.scotch.io/">Scotchbox</a>がUbuntuのディストリビューションだったため。</p>

<h1>設定ファイルのパス</h1>

<p>以下。</p>

<p><code>
/etc/apache2/envvars
</code></p>

<p>このファイルの末尾などに、以下のように追記する。</p>

<p><code>
export HOGE=xxx
</code></p>

<h1>apatch再起動</h1>

<p><code>service</code>で再起動。</p>

<p><code>
$ sudo service apache2 restart
</code></p>

<p>以上で設定完了。</p>

<h1>取得</h1>

<p>取得は通常通り、<code>getenv</code>で可能。</p>

<p><code>
getenv('HOGE');
</code></p>

<h1>参考</h1>

<p><a href="http://www.yamamo10.jp/yamamoto/comp/home_server/ubuntu_server/apache/index.php">自宅サーバー(ubuntu server Apache)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cakephpのtransitionコンポーネントで送信ボタンを複数配置する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/02/29/cakephp-transition-multi-submit/"/>
    <updated>2016-02-29T18:07:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/02/29/cakephp-transition-multi-submit</id>
    <content type="html"><![CDATA[<p>cakephpのtransitionコンポーネント利用時に送信ボタンを複数配置し、どちらが押されたかを判定してみたメモ。</p>

<!-- more -->


<h1>ビュー</h1>

<p>以下のように <code>name</code> 属性でわけておく。<br/>
今回は、完了、と、一時保存、でわけた。</p>

<p><code>
&lt;?php echo $this-&gt;Form-&gt;submit('一時保存', array('name' =&gt; 'temp')); ?&gt;
&lt;?php echo $this-&gt;Form-&gt;submit('完了', array('name' =&gt; 'comp')); ?&gt;
</code></p>

<h1>コントローラ</h1>

<p>コントローラので受けた際に、以下のように取得する。</p>

<p>```
$all_data = $this->Transition->mergedData();</p>

<p>if(isset($all_data[&ldquo;comp&rdquo;]){</p>

<pre><code>//完了が押された時の処理
</code></pre>

<p>}else if(isset($all_data[&ldquo;temp&rdquo;])){</p>

<pre><code>//一時保存が押された時の処理
</code></pre>

<p>}
```</p>

<p><code>mergedData</code> の中には以下のように格納されている。<br/>
(<code>var_dump</code> した結果)</p>

<p>```
array(2) {
  [&ldquo;hoge_model&rdquo;]=>
  array(87) {</p>

<pre><code>["huga"]=&gt;
string(0) "test"
["foo"]=&gt;
string(0) "bar"
...
</code></pre>

<p>  }
  [&ldquo;temp&rdquo;]=>
  string(12) &ldquo;一時保存&rdquo;
}
```</p>

<p>これであるかどうかの判定で判別が出来るので、処理をそれぞれ変える事が出来た。</p>
]]></content>
  </entry>
  
</feed>
