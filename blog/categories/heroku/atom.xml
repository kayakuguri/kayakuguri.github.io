<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-05-01T14:29:14+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Heroku]スティッキーセッションの有効化]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/30/heroku-sticky-session/"/>
    <updated>2015-04-30T10:03:06+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/30/heroku-sticky-session</id>
    <content type="html"><![CDATA[<p>herokuで、<code>スティッキーセッション(セッションアフィニティ)</code>を有効化するオプションが公開されたってことで、調べてみた。</p>

<!-- more -->


<h2>dyno</h2>

<p>herokuでは、dynoを増やしていく=ロードバランサとなって、アクセスの度にランダムにサーバを割り振られる。<br/>
なので、サーバ側に保持しているセッションは同一ユーザーのアクセスであってもページを遷移しただけでセッションが保持されていないサーバに割り振られてしまい、セッション切れを起こしてしまう、という問題がある。<br/>
これを解決していたのが主に、<a href="https://addons.heroku.com/memcachier">MemCachier</a>というアドオンで、このMemCachier側にセッションを保持してやることでサーバが変わってもセッションを維持する、という流れで作成するのがセオリーだった。<br/>
(1Dynoだとサーバは一つなので必要ない)</p>

<h2>スティッキーセッション</h2>

<p>それを解決するのが、スティッキーセッション、セッション・アフィニティ、と呼ばれるもののよう。<br/>
これは、ロードバランサなどでサーバが数台ある場合に、特定のユーザーからのアクセスは特定のサーバのみに接続するように調整するもの、らしい。<br/>
なので、ページ遷移をしてもサーバが変わらず、セッションが切れる事がない、というわけ。<br/>
ただし、この設定で重要なのは、この同じサーバに割り当てる時間、の設定、とのこと。<br/>
長くするとロードバランサの意味がなくなっていくし、短くするとセッションが切れてしまう。<br/>
heroku上でこの時間を設定できるのかは今のところ不明。</p>

<p><a href="http://docs.aws.amazon.com/ja_jp/ElasticLoadBalancing/latest/DeveloperGuide/elb-sticky-sessions.html">スティッキーセッションの有効化と無効化</a></p>

<h2>herokuでの設定</h2>

<p>この機能はまだベータ版、ってことで、デフォルトではもちろん無効となっている。<br/>
有効にするには以下のコマンドを実行する必要がある。</p>

<pre><code>$ heroku labs:enable http-session-affinity
</code></pre>

<h2>検証</h2>

<p>実際に検証してみる。<br/>
検証は、以下のサイトにあった、訪問回数をカウントする単純なものを使用してみた。<br/>
この回数がリロードの度に増えていけばセッションが引き継がれている、ということだが、<br/>
別サーバに接続されてセッションがなくなるとカウントがやり直しになったりする、はず。</p>

<p><a href="http://www.phppro.jp/school/phpschool/vol8/1">第8回　セッションの仕組みを知ろう &ndash; PHP基礎講座</a></p>

<p>```
&lt;?php
session_start();</p>

<p>if (isset($<em>SESSION[&ldquo;counter&rdquo;])) {
  $</em>SESSION[&ldquo;counter&rdquo;]++;
  print($<em>SESSION[&ldquo;counter&rdquo;].&ldquo;回目の読み込みです。&rdquo;);
} else {
   $</em>SESSION[&ldquo;counter&rdquo;] = 0;
  print(&ldquo;はじめての読み込みです。&rdquo;);
}
```</p>

<h3>1 Dyno</h3>

<p>まず、Dynoを１で。<br/>
これは順調に増えた。当然の結果。</p>

<h3>2 Dyno</h3>

<p>dynoを増やしてみる。<br/>
何度かリロードしていると、10回目くらいで「はじめての読み込みです。」という表示が登場。<br/>
それ以降、何回かごとに別々のカウント数が表示される状態に。</p>

<h3>セッションアフィニティ</h3>

<p>で、この2Dynoの状態でセッションアフィニティをオンに。</p>

<p><code>
$ heroku labs:enable http-session-affinity                                                    [ruby-2.1.2]
Enabling http-session-affinity for session-afinity-test... done
WARNING: This feature is experimental and may change or be removed without notice.
For more information see: https://devcenter.heroku.com/articles/session-affinity
</code></p>

<p>アクセスしてみる。<br/>
100になるくらいまでリロードしてみたが、正常にカウント出来たいたので、きちんと同一セッションを見にいっていると思う。</p>

<h3>注意</h3>

<p>ただし、herokuをdeployするとセッションが切れてしまうのは変わらないようなので注意が必要。<br/>
また、ベータ版の機能となるので、これに頼った実装はまだ早いと思われる。</p>

<h2>参考</h2>

<p><a href="https://blog.heroku.com/archives/2015/4/28/introducing_session_affinity">Heroku | Introducing Session Affinity</a><br/>
<a href="https://devcenter.heroku.com/articles/session-affinity">Heroku Labs: Session Affinity | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Herokuアドオン]TransloaditでAWS S3にアップロード]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/24/heroku-transloadit-3/"/>
    <updated>2015-04-24T12:41:32+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/24/heroku-transloadit-3</id>
    <content type="html"><![CDATA[<p>アップロードした動画をS3にエクスポートしてみた。</p>

<!-- more -->


<h2>AWS</h2>

<h4>バケットを作る</h4>

<p>まずはawsにてバケットを作る。</p>

<p><code>movie-upload-sample</code>で作った。<br/>
(アンダースコアを入れると怒られた)</p>

<p><img src="/images/2015/04/aws01.png" alt="" /></p>

<p><img src="/images/2015/04/aws02.png" alt="" /></p>

<h4>アクセスキーとシークレットキー</h4>

<p><img src="/images/2015/04/aws03.png" alt="" /></p>

<p><code>s3upload</code>で、作成した。</p>

<p><img src="/images/2015/04/aws04.png" alt="" /></p>

<p>作成後、アクセスキーとシークレットキーを確認できる。<br/>
CSVでもダウンロード化。</p>

<p><img src="/images/2015/04/aws05.png" alt="" /></p>

<p>ただし、シークレットアクセスキーを確認できるのはこの状態が最後らしく、そのまま閉じようとしたら警告された。</p>

<p><img src="/images/2015/04/aws06.png" alt="" /></p>

<p>確かに作成したユーザー情報を見ても確認は出来なかった。<br/>
忘れてしまったりした場合は再度アクセスキーの作成が必要なよう。<br/>
(セキュリティ的にはある程度の頻度で変更することがオススメされている)</p>

<p>次に権限を付与。<br/>
作成したユーザーをクリックして、アクセス許可 &ndash;> ポリシーのアタッチ、をクリック。</p>

<p><img src="/images/2015/04/aws07.png" alt="" /></p>

<p><code>AmazonS3FullAccess</code>を選択して、ポリシーのアタッチ。</p>

<p><img src="/images/2015/04/aws08.png" alt="" /></p>

<p>アタッチされた。</p>

<p><img src="/images/2015/04/aws09.png" alt="" /></p>

<p>これでS3にアップロードする準備が整った。</p>

<h2>Transloaditテンプレート</h2>

<p>作成したバケットやIAMの情報をテンプレートに埋め込んでいく。<br/>
その時、アップするpathを選択できる。</p>

<h3>path</h3>

<p>ドキュメントを見ていると、以下のようにするのが推奨？されていた。<br/>
<code>${previous_step.name}/${unique_prefix}/${file.id}.${file.ext}</code><br/>
出力例：<code>video-step-name/a8/d3eeeb67479f11f8b091b04f6181ad.png</code></p>

<p>とりあえずこのままアップロードしてみた。<br/>
アップロードしたテンプレートは以下。</p>

<pre><code>'params' =&gt; [
    'steps' =&gt; [
        'encode_video' =&gt; [
            'use' =&gt; ':original',
            'robot' =&gt; '/video/encode',
            'preset' =&gt; 'android'
        ],
        'thumb' =&gt; [
            'user' =&gt; 'encode_video',
            'robot' =&gt; '/video/thumbs',
            'count' =&gt; 1,
            'offsets' =&gt; [1],
            'width'=&gt; 100,
            'height'=&gt; 100,
        ],
        'export' =&gt; [
            'use' =&gt; ['encode_video', 'thumb'],
            'robot' =&gt; '/s3/store',
            'bucket' =&gt; 'movie-upload-sample',
            'key' =&gt; 'アクセスキー',
            'secret' =&gt; 'シークレットキー',
            'path' =&gt; '${previous_step.name}/${unique_prefix}/${file.id}.${file.ext}'
        ]
    ],
    'redirect_url' =&gt; $redirectUrl,
]
</code></pre>

<p>awsを見ると以下のようにアップロードされていた。</p>

<p><strong>動画</strong><br/>
<img src="/images/2015/04/aws10.png" alt="" /><br/>
<strong>サムネイル</strong><br/>
<img src="/images/2015/04/aws11.png" alt="" /></p>

<p>ユニーク、なのだが、<code>${unique_prefix}</code>が戻り値にも含まれておらず、アップロード側から知ることが出来ないっぽい。<br/>
<code>file.id</code>は、UUIDになっているとのことなのでユニークなよう。<br/>
これを利用して以下のようにする。</p>

<pre><code>${previous_step.name}/${file.id}.${file.ext}
</code></pre>

<p>これで以下の様なURLで参照出来るようになる。</p>

<pre><code>https://{bucket}.s3.amazonaws.com/movie-upload-sample/encode_video/{id}.mp4
https://{bucket}.s3.amazonaws.com/movie-upload-sample/thumb/{id}.jpg
</code></pre>

<p>ちなみに、エクスポートを使用した場合は、<br/>
transloaditの管理画面から処理済のファイルへのアクセスも、指定したS3へのファイルが参照されるようになるよう。<br/>
(S3だけでなく、FTPなどでも同様)</p>

<h2>全コード</h2>

<pre><code>&lt;?php

require 'vendor/autoload.php';

use transloadit\Transloadit;
$transloadit = new Transloadit([
    'key' =&gt; getenv('TRANSLOADIT_AUTH_KEY'),
    'secret' =&gt; getenv('TRANSLOADIT_SECRET_KEY')
]);

$response = Transloadit::response();
if ($response) {
    echo '&lt;h1&gt;Assembly status:&lt;/h1&gt;';
    echo '&lt;pre&gt;';
    print_r($response);
    echo '&lt;/pre&gt;';
    exit;
}

$redirectUrl = sprintf(
    'http://%s%s',
    $_SERVER['HTTP_HOST'],
    $_SERVER['REQUEST_URI']
);

echo $transloadit-&gt;createAssemblyForm([
    'params' =&gt; [
        'steps' =&gt; [
            'encode_video' =&gt; [
                'use' =&gt; ':original',
                'robot' =&gt; '/video/encode',
                'preset' =&gt; 'android'
            ],
            'thumb' =&gt; [
                'user' =&gt; 'encode_video',
                'robot' =&gt; '/video/thumbs',
                'count' =&gt; 1,
                'offsets' =&gt; [1],
                'width'=&gt; 100,
                'height'=&gt; 100,
            ],
            'export' =&gt; [
                'use' =&gt; ['encode_video', 'thumb'],
                'robot' =&gt; '/s3/store',
                'bucket' =&gt; 'movie-upload-sample',
                'key' =&gt; 'アクセスキー',
                'secret' =&gt; 'シークレットキー',
                'path' =&gt; '${previous_step.name}/${file.id}.${file.ext}'
            ]
        ],
        'redirect_url' =&gt; $redirectUrl
    ]
]);
?&gt;

&lt;!DOCTYPE html&gt;
&lt;html lang="ja"&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="container"&gt;
    &lt;h1&gt;Pick a video to encode for iPhone / Android.&lt;/h1&gt;
    &lt;form&gt;
        &lt;div class="form-group"&gt;
            &lt;label for="exampleInputFile"&gt;File input&lt;/label&gt;
            &lt;input name="example_upload" id="exampleInputFile" type="file"&gt;
            &lt;p class="help-block"&gt;Upload video, NOW.&lt;/p&gt;
        &lt;/div&gt;
        &lt;input type="submit" class="btn btn-danger btn-lg" value="Upload"&gt;
    &lt;/form&gt;
&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>余談</h2>

<p>ちなみに、transloaditのエンコードタイプには、プリセットでiPhoneとアンドロイドどちらも用意されているけれど、<br/>
今回試してみたところではどちらも同じ内容のようだった。<br/>
<code>ffmpeg</code>で読み込ませてみた内容は以下。<br/>
(videoとaudioだけ抽出)</p>

<pre><code>Stream #0:0(und): Video: h264 (Constrained Baseline) (avc1 / 0x31637661), yuv420p, 480x320, 523 kb/s, 25 fps, 25 tbr, 25 tbn, 50 tbc (default)
Stream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, mono, fltp, 82 kb/s (default)
</code></pre>

<h2>参考</h2>

<p><a href="https://transloadit.com/demos/video-encode/encode-for-iphone">Encode a video for the iPhone and strip sound | Transloadit</a><br/>
<a href="https://transloadit.com/demos/video-encode/encode-for-android">Encode a video for Android | Transloadit</a><br/>
<a href="https://transloadit.com/demos/s3-store/store-encoding-and-thumbnails">Encode a video, extract 8 thumbnails and store everything in your S3 bucket | Transloadit</a><br/>
<a href="http://joppot.info/2014/06/14/1621">awsのs3を操作する為のaccess keyとsecret keyを取得する(IAM)</a><br/>
<a href="https://transloadit.com/docs/conversion-robots/#export-to-amazon-s3-with-the-s3store-bot">Export to Amazon S3 with the /s3/store bot | Transloadit</a><br/>
<a href="https://transloadit.com/docs/#assembly-variables">#Assembly variables | Integration | Transloadit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuをデプロイするためにgitに空でコミットする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/21/git-allow-empty/"/>
    <updated>2015-04-21T11:14:17+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/21/git-allow-empty</id>
    <content type="html"><![CDATA[<p>小ネタ。<br/>
タイトル通り。</p>

<!-- more -->


<p>herokuはgitにてpushした時にのみ、deployが走る。<br/>
しかし、アドオンを追加した時など、ファイルの変更はないけれどデプロイだけしたい場合がたまにある。<br/>
そんな時にはファイルを無駄に少しだけ触ったりしていたのだけれど、空でコミット出来る事が出来ると知ったので、メモ。</p>

<pre><code>$ git commit -m "for deploy heroku" --allow-empty
</code></pre>

<p>これでコミットしておいてpushすると無事、デプロイ出来る。</p>

<p>以下、検証。</p>

<pre><code>$ git push heroku master
Everything up-to-date
$ git commit -m "for deploy heroku" --allow-empty
[master 069260f] for deploy heroku
$ git push heroku master
Counting objects: 1, done.
Writing objects: 100% (1/1), 190 bytes | 0 bytes/s, done.
.....
  0022947..069260f  master -&gt; master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Herokuアドオン]TransloaditでFTPアップロード]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/16/heroku-transloadit-2/"/>
    <updated>2015-04-16T17:08:38+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/16/heroku-transloadit-2</id>
    <content type="html"><![CDATA[<p>アップロード先をFTPに指定する方法と、<br/>
その内容をテンプレート化するまでのメモ。</p>

<!-- more -->


<p><code>steps</code>内の<code>robot</code>で、<code>/ftp/store</code>を指定する。<br/>
詳しいパラメータは以下。</p>

<p><a href="https://transloadit.com/docs/conversion-robots/#export-to-your-ftp-server-with-the-ftpexport-robot">6.3 Export to your FTP Server with the /ftp/export robot</a></p>

<p>設定ファイル部分は以下のようにした。</p>

<p>```
$transloadit->createAssemblyForm([</p>

<pre><code>'params' =&gt; [
    'steps' =&gt; [
        'export' =&gt; [
            'use' =&gt; ':original',
            'robot' =&gt; '/ftp/store',
            'user' =&gt; 'ユーザー名',
            'password' =&gt; 'パスワード',
            'host' =&gt; 'ホスト名',
            'path' =&gt; '/ディレクトリ/test.jpg'
        ]
    ],
    'redirect_url' =&gt; $redirectUrl
]
</code></pre>

<p>]);
```</p>

<p>フォームから入力されたファイルがアップロードされる。</p>

<ul>
<li> <code>export</code>：ここは名前をつけているだけなので、なんでもよい。</li>
<li><code>use</code>：どの時点のファイルを使用するか。<code>:original</code>だとオリジナルのファイル。複数のパターンを指定する場合は配列で指定する。<br>ただし、その場合、パスは１つしか指定出来ないので、後に書いたほうが上書きされる。<br>(２つ書かないといけないと思われる)</li>
<li><code>user</code>：ユーザー名</li>
<li><code>password</code>：パスワード</li>
<li><code>host</code>：ホスト</li>
<li><code>path</code>：保存先のパス。ファイル名まで指定しないといけない</li>
</ul>


<p>ファイル名は、<code>${file.url_name}</code>と指定することで、ユーザーが選択したファイル名でアップロード出来る。<br/>
この書き方の種類は以下にあった。<br/>
<a href="https://transloadit.com/docs/conversion-robots/#available-job-variables">https://transloadit.com/docs/conversion-robots/#available-job-variables</a></p>

<p>実行後は即時にアップロードされるわけではなく、多少の処理が必要になるよう。<br/>
なので実際にはキューを出している状態。<br/>
数秒後にサーバー上にアップロードが行われる。</p>

<p><img src="/images/2015/04/transloadit05.jpg" alt="Executing" /></p>

<p>なので、クライアント側で完了を検知するには、transloaditから通知させるか(まだよくわかってない)、<br/>
定期的に確認しにいくか、などの処理が必要と思われる。</p>

<h2>テンプレート化</h2>

<p>上記の設定内容をテンプレート化して保存してみる。<br/>
テンプレート化することによってアカウント情報などをソース上から分離出来、セキュリティを高める効果があるよう。</p>

<p>herokuのアドオンからtranloaditの管理画面に遷移後、<code>TEMPLATES</code>を選択。<br/>
<code>+NES</code>をクリック。</p>

<p><img src="/images/2015/04/transloadit06.jpg" alt="Executing" /></p>

<p>で、以下のようにテンプレートを作成する。</p>

<p>```
{
  &ldquo;steps&rdquo;: {</p>

<pre><code>"export": {
  "use": ":original",
  "robot": "/ftp/store",
  "user": "ユーザー名",
  "password": "パスワード",
  "host": "ホスト名",
  "path": "/ディレクトリ/${file.url_name}"
}
</code></pre>

<p>  }
}
```</p>

<p>適当に名前をつけて保存。<br/>
保存後、テンプレートの一覧画面から、IDを確認できるようになるので、これを覚えておく。</p>

<p><img src="/images/2015/04/transloadit07.jpg" alt="Template list" /></p>

<p>で、このIDを使用して以下のように書き換える。</p>

<p>```
$transloadit->createAssemblyForm([</p>

<pre><code>'params' =&gt; [
    'template_id' =&gt; 'テンプレートのID',
    'redirect_url' =&gt; $redirectUrl
]
</code></pre>

<p>]);
```</p>

<p>これで実行すると上記のテンプレートが使用されて、FTPアップロードが行われる。<br/>
テンプレートを使用してアップロードした場合は、結果のリストにもその旨が表示される。</p>

<p><img src="/images/2015/04/transloadit08.jpg" alt="Assemblies" /></p>

<h2>コード</h2>

<p>```
&lt;?php
require &lsquo;../vendor/autoload.php&rsquo;;</p>

<p>use transloadit\Transloadit;
$transloadit = new Transloadit([</p>

<pre><code>'key' =&gt; getenv('TRANSLOADIT_AUTH_KEY'),
'secret' =&gt; getenv('TRANSLOADIT_SECRET_KEY')
</code></pre>

<p>]);</p>

<p>$response = Transloadit::response();
if ($response) {</p>

<pre><code>echo '&lt;h1&gt;Assembly status:&lt;/h1&gt;';
echo '&lt;pre&gt;';
print_r($response);
echo '&lt;/pre&gt;';
exit;
</code></pre>

<p>}</p>

<p>$redirectUrl = sprintf(</p>

<pre><code>'http://%s%s',
$_SERVER['HTTP_HOST'],
$_SERVER['REQUEST_URI']
</code></pre>

<p>);</p>

<p>echo $transloadit->createAssemblyForm([</p>

<pre><code>'params' =&gt; [
    'template_id' =&gt; 'テンプレートのID',
    'redirect_url' =&gt; $redirectUrl
]
</code></pre>

<p>]);</p>

<p>?></p>

<p>&lt;!DOCTYPE html>
<html lang="ja">
<head></p>

<pre><code>&lt;meta charset="utf-8"&gt;
</code></pre>

<p></head>
<body></p>

<p><form method="post" action="upload_select_sample.php"></p>

<pre><code>&lt;input name="example_upload" type="file" accept="image/*,video/*"&gt;
&lt;input type="submit" value="Upload"&gt;
</code></pre>

<p></form></p>

<p></body>
</html>
```</p>

<hr />

<h2>参考</h2>

<p><a href="https://transloadit.com/demos/ftp-store/store-uploaded-files">Store the originally uploaded files on your FTP server | Transloadit</a><br/>
<a href="https://transloadit.com/docs/#how-to-use-a-template">How to use a template</a><br/>
<a href="https://transloadit.com/docs/conversion-robots/#available-job-variables">Available job variables</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Herokuアドオン]Transloaditアドオンを使ってPHPでファイルアップロード]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/16/heroku-transloadit-1/"/>
    <updated>2015-04-16T10:32:46+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/16/heroku-transloadit-1</id>
    <content type="html"><![CDATA[<p>動画をアップロード + エンコードしてくれるというTransloaditのherokuアドオンを使ってみた。</p>

<!-- more -->


<h2>herokuへのインストール</h2>

<p>無料プランがあるので、とりあえずそれで。</p>

<pre><code>$ heroku addons:add transloadit:sandbox
</code></pre>

<p>無料プランの場合は、Encoding Volumeが1GB、の制限がある。</p>

<p>transloaditの料金体系は少しややこしくなっているようで、<br/>
無料のsandboxプランだと、トータルで1GBになっているよう。</p>

<p><a href="https://addons.heroku.com/transloadit">Transloadit | Add-ons | Heroku</a><br/>
<img src="/images/2015/04/transloadit02.jpg" alt="heroku料金" /></p>

<p>公式ページのプランでも値段は一緒。</p>

<p><a href="https://transloadit.com/pricing/">Pricing &amp; Signup | Transloadit</a><br/>
<img src="/images/2015/04/transloadit01.jpg" alt="公式料金" /></p>

<p>この1GBとうのは何が含まれるかというと、公式で説明があった。<br/>
エンコードした場合、する前とした後と両方のサイズが合算されてカウントされるよう。</p>

<p>例えば、0.8MBの画像ファイルをエンコードして0.2MBしたとすれば、それで1MBを使用した事になる。<br/>
で、これを1024回繰り返すと、1GBになるので無料枠は終了。</p>

<p>ファイルの閲覧自体には加算されないよう。</p>

<h2>PHP SDKのインストール</h2>

<p>公式どおり、Composerでインストールする。</p>

<p>```
{
  &ldquo;require&rdquo;: {</p>

<pre><code>"transloadit/php-sdk": "dev-master"
</code></pre>

<p>  }
}
```</p>

<p>ローカルで<code>composer install</code>しておく。<br/>
この際、php5.6以上でないとインストール出来ないので注意。<br/>
(自分の環境ではphp5.4だったので、<a href="http://kayamemo.mrlittlebig.com/blog/2015/04/15/mac-update-php/">アップデートした</a>)</p>

<h2>ファイルのアップロード</h2>

<p>公式に載っていたママだけど、<br/>
アクセスするとheroku上の同じディレクトリに置いたファイルをアップロードするだけ、のサンプルを実行してみる。</p>

<p><strong>PHP全コード</strong></p>

<p>```
&lt;?php
require &lsquo;../vendor/autoload.php&rsquo;;</p>

<p>use transloadit\Transloadit;
$transloadit = new Transloadit(array(</p>

<pre><code>'key' =&gt; getenv('TRANSLOADIT_AUTH_KEY'),
'secret' =&gt; getenv('TRANSLOADIT_SECRET_KEY')
</code></pre>

<p>));</p>

<p>$response = $transloadit->createAssembly(array(</p>

<pre><code>'files' =&gt; array(dirname(__FILE__).'/160x160.png'),
'params' =&gt; array(
    'steps' =&gt; array(
        'resize' =&gt; array(
            'robot' =&gt; '/image/resize',
            'width' =&gt; 100,
            'height' =&gt; 100,
        )
    )
),
</code></pre>

<p>));</p>

<p>// Show the results of the assembly we spawned
echo &lsquo;<pre>&rsquo;;
print_r($response);
echo &lsquo;</pre>&rsquo;;
```</p>

<p><strong>レスポンス</strong></p>

<p>```
transloadit\TransloaditResponse Object
(</p>

<pre><code>[data] =&gt; Array
    (
        [ok] =&gt; ASSEMBLY_EXECUTING
        [message] =&gt; The assembly is currently being executed.
        [assembly_id] =&gt; id
        [parent_id] =&gt; 
        [account_id] =&gt; id
        [template_id] =&gt; 
        [instance] =&gt; xxx.transloadit.com
        [assembly_url] =&gt; http://api2.karima.transloadit.com/assemblies/xxx
        [assembly_ssl_url] =&gt; https://karima.transloadit.com/assemblies/xxx
        [bytes_received] =&gt; 1107
        [bytes_expected] =&gt; 1107
        [upload_duration] =&gt; 1.477
        [client_agent] =&gt; Transloadit PHP SDK v2.0.0
        [client_ip] =&gt; 10.166.13.48
        [client_referer] =&gt; 
        [start_date] =&gt; 2015/04/16 01:29:02 GMT
        [is_infinite] =&gt; 
        [has_dupe_jobs] =&gt; 
        [execution_start] =&gt; 2015/04/16 01:29:03 GMT
        [execution_duration] =&gt; 0.002
        [notify_start] =&gt; 
        [notify_url] =&gt; 
        [notify_status] =&gt; 
        [notify_response_code] =&gt; 
        [notify_duration] =&gt; 
        [last_job_completed] =&gt; 
        [fields] =&gt; Array
            (
            )

        [running_jobs] =&gt; Array
            (
            )

        [bytes_usage] =&gt; 0
        [executing_jobs] =&gt; Array
            (
                [0] =&gt; resize
            )

        [started_jobs] =&gt; Array
            (
                [0] =&gt; resize:::original
            )

        [parent_assembly_status] =&gt; 
        [params] =&gt; {"steps":{"resize":{"robot":"/image/resize","width":100,"height":100}},"auth":{"key":"****","expires":"2015/04/16 03:29:01+00:00"}}
        [template] =&gt; 
        [uploads] =&gt; Array
            (
                [0] =&gt; Array
                    (
                        [id] =&gt; xxx
                        [name] =&gt; 160x160.png
                        [basename] =&gt; 160x160
                        [ext] =&gt; png
                        [size] =&gt; 494
                        [mime] =&gt; image/png
                        [type] =&gt; image
                        [field] =&gt; file_1
                        [md5hash] =&gt; xxx
                        [original_id] =&gt; xxx
                        [original_basename] =&gt; 160x160
                        [original_md5hash] =&gt; xxx
                        [url] =&gt; http://tmp.transloadit.com.s3.amazonaws.com/xxx.png
                        [ssl_url] =&gt; https://s3.amazonaws.com/tmp.transloadit.com/xxx.png
                        [meta] =&gt; Array
                            (
                                [width] =&gt; 160
                                [height] =&gt; 160
                                [date_recorded] =&gt; 
                                [date_file_created] =&gt; 
                                [date_file_modified] =&gt; 2015/04/16 01:29:02 GMT
                                [title] =&gt; 
                                [description] =&gt; 
                                [location] =&gt; 
                                [aspect_ratio] =&gt; 1
                                [city] =&gt; 
                                [state] =&gt; 
                                [country] =&gt; 
                                [country_code] =&gt; 
                                [keywords] =&gt; 
                                [aperture] =&gt; 
                                [exposure_compensation] =&gt; 
                                [exposure_mode] =&gt; 
                                [exposure_time] =&gt; 
                                [flash] =&gt; 
                                [focal_length] =&gt; 
                                [f_number] =&gt; 
                                [iso] =&gt; 
                                [light_value] =&gt; 
                                [metering_mode] =&gt; 
                                [shutter_speed] =&gt; 
                                [white_balance] =&gt; 
                                [device_name] =&gt; 
                                [device_vendor] =&gt; 
                                [device_software] =&gt; 
                                [latitude] =&gt; 
                                [longitude] =&gt; 
                                [orientation] =&gt; 
                                [has_clipping_path] =&gt; 
                                [creator] =&gt; 
                                [author] =&gt; 
                                [copyright] =&gt; 
                                [copyright_notice] =&gt; 
                                [frame_count] =&gt; 1
                                [colorspace] =&gt; Gray
                                [average_color] =&gt; #686868
                            )

                    )

            )

        [results] =&gt; Array
            (
            )

    )

[curlInfo] =&gt; Array
    (
        [url] =&gt; https://karima.transloadit.com/assemblies
        [content_type] =&gt; application/json; charset=utf-8
        [http_code] =&gt; 200
        [header_size] =&gt; 371
        [request_size] =&gt; 220
        [filetime] =&gt; -1
        [ssl_verify_result] =&gt; 0
        [redirect_count] =&gt; 0
        [total_time] =&gt; 1.91859
        [namelookup_time] =&gt; 0.012709
        [connect_time] =&gt; 0.421413
        [pretransfer_time] =&gt; 0.435759
        [size_upload] =&gt; 1107
        [size_download] =&gt; 2527
        [speed_download] =&gt; 1317
        [speed_upload] =&gt; 576
        [download_content_length] =&gt; -1
        [upload_content_length] =&gt; 1107
        [starttransfer_time] =&gt; 0.43577
        [redirect_time] =&gt; 0
        [redirect_url] =&gt; 
        [primary_ip] =&gt; 10.234.41.26
        [certinfo] =&gt; Array
            (
            )

        [primary_port] =&gt; 443
        [local_ip] =&gt; 172.18.203.90
        [local_port] =&gt; 41591
    )

[curlErrorNumber] =&gt; 0
[curlErrorMessage] =&gt; 
</code></pre>

<p>)
```</p>

<p>画像のURLはレスポンスの、<code>data &gt; uploads &gt; url(ssl_url)</code>に入っている。</p>

<h2>結果</h2>

<p>herokuのアドオンからTransloadit上で確認すると以下のようにファイルがアップロードされていた。<br/>
<img src="/images/2015/04/transloadit03.jpg" alt="結果" /></p>

<p>ファイル名をクリックする事で詳細を確認出来る。<br/>
ファイルの確認やダウンロードもここから可能。<br/>
<img src="/images/2015/04/transloadit04.jpg" alt="詳細" /></p>

<p>アップロードされたファイルは上記からダウンロード可能だが、この保存ファイルは一時的なもののよう。<br/>
24時間後には消える。らしい。</p>

<blockquote><p>Please keep in mind that we store files only for 24 hours after they were created. To persist your files, please use one of our <a href="https://transloadit.com/docs/conversion-robots/#file-export-robots">file export robots</a>.</p></blockquote>

<p>なので、<code>file export robots</code>を使用してどこかしらにエクスポートしてやる必要がある。<br/>
エクスポート先として用意されているものは以下のよう。</p>

<ul>
<li>Amazon S3</li>
<li>SFTP</li>
<li>FTP</li>
<li>Rackspace</li>
<li>YouTube</li>
</ul>


<h2>参考</h2>

<p><a href="https://addons.heroku.com/transloadit">Transloadit | Add-ons | Heroku</a><br/>
<a href="https://devcenter.heroku.com/articles/transloadit">Transloadit | Heroku Dev Center</a><br/>
<a href="https://transloadit.com/">File upload processing web service | Transloadit</a><br/>
<a href="https://github.com/transloadit/php-sdk">transloadit/php-sdk</a></p>
]]></content>
  </entry>
  
</feed>
