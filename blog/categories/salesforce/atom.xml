<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: salesforce | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/salesforce/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-04-28T20:24:48+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Salesforce]承認申請のアウトバウンドメッセージをPHPで受け取る]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/28/approval-process-outbound-massage/"/>
    <updated>2015-04-28T20:20:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/28/approval-process-outbound-massage</id>
    <content type="html"><![CDATA[<p>salesforceからのアウトバウンドメッセージの内容をPHPで受け取ってみた。</p>

<!-- more -->


<h2>アウトバウンドメッセージの設定</h2>

<p>前回作成したものの申請時のアクション部分に<code>アウトバウンドメッセージ</code>を追加。<br/>
<img src="/images/2015/04/outbound01.jpg" alt="" /></p>

<p>以下のように設定した。<br/>
<img src="/images/2015/04/outbound02.jpg" alt="" /></p>

<p>設定完了<br/>
<img src="/images/2015/04/outbound03.jpg" alt="" /></p>

<h2>PHPで受け取る</h2>

<p>アウトバウンドメッセージは<code>SOAP</code>で通信が行われる。<br/>
なので、XML。<br/>
以下のようにアクセスが記録されていた。</p>

<pre><code>at=info method=POST path="/liam_dnes.php?id=1" host=shrouded-island-2254.herokuapp.com request_id=01b99464-c9dc-4e15-aa19-8c941a48b40a fwd="182.50.78.8" dyno=web.1 connect=1ms service=4ms status=200 bytes=189
</code></pre>

<p>どうやらPOSTでアクセスされているよう。<br/>
<code>$_POST</code>のままでは取得できなかった。<br/>
どうやら生のPOSTデータを取得する必要があるらしい。</p>

<p>以下で取得した。</p>

<pre><code>$data = file_get_contents( 'php://input' );
</code></pre>

<p>取得すると、以下のようなXMLが取得できた。</p>

<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;soapenv:Envelope xmlns:soapenv=&ldquo;<a href="http://schemas.xmlsoap.org/soap/envelope/">http://schemas.xmlsoap.org/soap/envelope/</a>&rdquo; xmlns:xsd=&ldquo;<a href="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</a>&rdquo; xmlns:xsi=&ldquo;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&rdquo;></p>

<pre><code>&lt;soapenv:Body&gt;
    &lt;notifications xmlns="http://soap.sforce.com/2005/09/outbound"&gt;
        &lt;OrganizationId&gt;00D10000000Zyxxxxx&lt;/OrganizationId&gt;
        &lt;SessionId xsi:nil="true"/&gt;
        &lt;PartnerUrl&gt;https://ap.salesforce.com/services/Soap/u/33.0/00D100000xxxxx&lt;/PartnerUrl&gt;
        &lt;ActionId&gt;04k100000008STGAA2&lt;/ActionId&gt;
        &lt;EnterpriseUrl&gt;https://ap.salesforce.com/services/Soap/c/33.0/00D100000xxxxx&lt;/EnterpriseUrl&gt;
        &lt;Notification&gt;
            &lt;Id&gt;04l1000000xxxxxx&lt;/Id&gt;
            &lt;sObject xsi:type="sf:Opportunity" xmlns:sf="urn:sobject.enterprise.soap.sforce.com"&gt;
                &lt;sf:Id&gt;0061000000cxxxxx&lt;/sf:Id&gt;
                &lt;sf:Name&gt;アウトバウンドのテスト商談&lt;/sf:Name&gt;
                &lt;sf:StageName&gt;Prospecting&lt;/sf:StageName&gt;
                &lt;sf:IsClosed&gt;false&lt;/sf:IsClosed&gt;
            &lt;/sObject&gt;
        &lt;/Notification&gt;
    &lt;/notifications&gt;
&lt;/soapenv:Body&gt;
</code></pre>

<p>&lt;/soapenv:Envelope>
```</p>

<p>アウトバウンドの設定は以下のような形。</p>

<p>ここからXMLをパースして、名前など設定した値を取得するには以下。</p>

<p>```
&lt;?php</p>

<p>$data = file_get_contents(&lsquo;php://input&rsquo;);
$xml = simplexml_load_string($data);</p>

<p>//ID
$notification = $xml->children(&lsquo;<a href="http://schemas.xmlsoap.org/soap/envelope/">http://schemas.xmlsoap.org/soap/envelope/</a>&rsquo;)&ndash;>Body->children(&lsquo;<a href="http://soap.sforce.com/2005/09/outbound">http://soap.sforce.com/2005/09/outbound</a>&rsquo;)&ndash;>notifications->Notification;
echo $notification->Id;</p>

<p>//パラメータ
$params = $notification->sObject->children(&lsquo;urn:sobject.enterprise.soap.sforce.com&rsquo;);
echo $params->Id;
echo $params->Name;
echo $params->IsClosed;
```</p>

<h2>参考</h2>

<p><a href="http://php.net/manual/ja/wrappers.php.php#wrappers.php.input">php://input</a><br/>
<a href="http://ivystar.jp/programming/php/what-is-phpinput/">「php://input」とは何？－POSTの生データ？ | アイビースター</a><br/>
<a href="https://amigotechnotes.wordpress.com/2013/11/16/parse-xml-with-namespace-by-simplexml-in-php/">Parse XML with namespace by SimpleXML in PHP | Amigo&#039;s Technical Notes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Salesforce]承認プロセスの作り方]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/28/approval-process/"/>
    <updated>2015-04-28T12:43:41+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/28/approval-process</id>
    <content type="html"><![CDATA[<p>承認プロセスを作成してみたので、そのログ。</p>

<!-- more -->


<h2>承認プロセスの作成</h2>

<p><code>商談</code>オブジェクトで作成してみる。<br/>
<img src="/images/2015/04/shonin01.jpg" alt="" /></p>

<h4>ステップ 1. 名前と説明の入力</h4>

<p>プロセス名と一意の名前を適当に入力。<br/>
<img src="/images/2015/04/shonin02.jpg" alt="" /></p>

<h4>ステップ 2. 入力条件の指定</h4>

<p>特定の入力条件で承認プロセスを発動する場合は設定。<br/>
全てレコードで承認を必要とする場合はなしで。<br/>
<img src="/images/2015/04/shonin03.jpg" alt="" /></p>

<h4>ステップ 3. 承認者項目と編集権限のプロパティの指定</h4>

<p>この承認申請を誰に割り当てるのか＝誰に承認してもらうのかを決定<br/>
標準項目としてマネージャーという項目がある。<br/>
<img src="/images/2015/04/shonin04.jpg" alt="" /></p>

<p>これは、ユーザーの項目内で設定しているマネージャーに指定されたユーザーを承認者とするもの。<br/>
<img src="/images/2015/04/shonin05.jpg" alt="" /></p>

<p>今回はなしにしておいて後で設定する。<br/>
<img src="/images/2015/04/shonin06.jpg" alt="" /></p>

<h4>ステップ 4. 通知テンプレートの選択</h4>

<p>承認開始時に送信するメールを設定。<br/>
<img src="/images/2015/04/shonin07.jpg" alt="" /></p>

<p>メールテンプレートは以下から作成可能。<br/>
管理->コミュニケーションテンプレート->メールテンプレート</p>

<p>なしでもよい。</p>

<h4>ステップ 5. 承認ページレイアウトに表示する項目の選択</h4>

<p>承認者が承認時に確認する画面の項目を選択する。<br/>
今回はそのままで。<br/>
<img src="/images/2015/04/shonin08.jpg" alt="" /></p>

<h4>ステップ 6. 申請者の指定</h4>

<p>この承認プロセスを申請できるユーザーを限定できる。<br/>
通常は所有者、となる。<br/>
<img src="/images/2015/04/shonin09.jpg" alt="" /></p>

<p><code>保存</code>する。</p>

<h2>承認ステップの作成</h2>

<p><img src="/images/2015/04/shonin10.jpg" alt="" /></p>

<p>最大15個までのステップを追加可能。</p>

<h4>ステップ 1. 名前と説明の入力</h4>

<p>名前と一意の名前を適当に入力。<br/>
<img src="/images/2015/04/shonin11.jpg" alt="" /></p>

<h4>ステップ 2. ステップ条件の指定</h4>

<p>このステップに入る条件を指定できる。<br/>
今回は全てのレコードとする。<br/>
<img src="/images/2015/04/shonin25.jpg" alt="" /></p>

<h4>ステップ 3. 割り当て先の選択</h4>

<p>承認者の設定。<br/>
都度変えたい場合は、手動、も選べる。<br/>
今回は固定で、特定のユーザーに自動で割り当てる。<br/>
<img src="/images/2015/04/shonin12.jpg" alt="" /></p>

<p><code>保存</code>する。</p>

<h2>アクション</h2>

<p><img src="/images/2015/04/shonin13.jpg" alt="" /></p>

<p>以下の4つを選択可能。<br/>
上記で設定した承認ステップのアクションを作成。<br/>
申請時や承認時、却下時にアクションが起動する。</p>

<ul>
<li>ToDo</li>
<li>電子メールアラート</li>
<li>項目自動更新</li>
<li>アウトバウンドメッセージ</li>
</ul>


<h3>項目自動更新</h3>

<p>名前、一意の名前を適当に作成。<br/>
更新する項目を選択し、どの値にするかを決定する。<br/>
今回はフェーズを更新するとする。</p>

<p><img src="/images/2015/04/shonin14.jpg" alt="" /></p>

<h2>作成完了</h2>

<p>全ての設定が終わったら、<code>有効化</code>しておく。<br/>
<img src="/images/2015/04/shonin15.jpg" alt="" /></p>

<p>警告が出るが、OKをクリック。<br/>
<img src="/images/2015/04/shonin16.jpg" alt="" /></p>

<p>完了。</p>

<h2>承認の流れ</h2>

<p>商談レコードを作成し、承認申請を行う、のだが、承認申請のボタンがデフォルトでは出てなかった。 <br/>
(環境によって変わるかも)<br/>
なので、ページレイアウトから<code>承認申請</code>のボタンを追加した。<br/>
<img src="/images/2015/04/shonin17.jpg" alt="" /></p>

<p>また、同じく関連項目の<code>承認履歴</code>を追加しておく。<br/>
<img src="/images/2015/04/shonin21.jpg" alt="" /></p>

<p>表示されるようになったので、<code>承認申請</code>をクリック。<br/>
<img src="/images/2015/04/shonin18.jpg" alt="" /></p>

<p>警告が表示されるが、OK。<br/>
<img src="/images/2015/04/shonin19.jpg" alt="" /></p>

<p>するとレコードがロックされ、<br/>
<img src="/images/2015/04/shonin20.jpg" alt="" /></p>

<p>設定したメールが飛ぶ。</p>

<p>そして、承認履歴の部分に承認、却下などの項目が現れる。<br/>
<img src="/images/2015/04/shonin22.jpg" alt="" /></p>

<p><code>承認/却下</code>をクリックすると、入力エリアが現れるので、適当にコメントを書いて承認してみる。<br/>
<img src="/images/2015/04/shonin23.jpg" alt="" /></p>

<p>レコードに戻ると、承認されている。設定した項目自動更新も反映されている。<br/>
<img src="/images/2015/04/shonin24.jpg" alt="" /></p>

<p>実際は承認するユーザーは別になると思うが、今回は自分で申請して承認している。</p>

<h2>参考</h2>

<p><a href="https://www.youtube.com/watch?v=b6_9NNTn_Hk">Salesforceをもっと使い倒そう-承認プロセス &ndash; YouTube</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[apex][SF]ApexRESTのテストコードでのパラメータの渡し方]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/20/rest-apex-test/"/>
    <updated>2015-04-20T15:43:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/20/rest-apex-test</id>
    <content type="html"><![CDATA[<p>いくつくか方法があるような。<br/>
そのうち一番楽だったものを。</p>

<!-- more -->


<p>例えば以下のようなクラスを作ったとする。</p>

<p>```
@RestResource(urlMapping=&lsquo;/user/*&rsquo;)
global with sharing class userInfo_API {</p>

<pre><code>@HttpPost
global static ResultData doPost(){
    RestRequest req = RestContext.request;
    String user_id = req.params.get('user_id');

    //何らかの処理
}
</code></pre>

<p>}
```</p>

<p>この場合、<code>user_id</code>を渡すためには以下のように記述します。</p>

<p>```
@isTest
private class Test_userInfo_API {</p>

<pre><code>static testMethod void postTest(){
    RestRequest req = new RestRequest();
    RestContext.request = req;
    req.addParameter('user_id', 'ユーザーID');
    userInfo_API.doPost();
}
</code></pre>

<p>}
```</p>

<p><code>RestRequest</code>のパラメータにセットしておくだけでOKなよう。</p>

<p>余談。<br/>
APIのクラスのみを実行させようとしてもエラーが出る。</p>

<blockquote><p>System.NullPointerException: Attempt to de-reference a null object</p></blockquote>

<p>なのでテストメソッド内では最低限以下は必要。</p>

<p><code>
RestRequest req = new RestRequest();
RestContext.request = req;
userInfo_API.doPost();
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]Apex REST作成時のtips]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/27/apex-rest-tips/"/>
    <updated>2015-03-27T19:45:44+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/27/apex-rest-tips</id>
    <content type="html"><![CDATA[<p>最近よくApexRESTを作成していて、<br/>
その中でちょっとしたtipsというかメモをメモっておきます。</p>

<!-- more -->


<h2>エンドポイント</h2>

<p>エンドポイントの指定には以下のように書きます。</p>

<pre><code>@RestResource(urlMapping='/User/Login')
</code></pre>

<p>この時に、<code>*</code>を使う事も出来ます。</p>

<pre><code>@RestResource(urlMapping='/User/*')
</code></pre>

<p>なので、ここにユーザーIDを入れたりして、そのIDを取得することで、<br/>
よりREST APIらしい(?)挙動でAPIを作成する事が出来ます。<br/>
apex側で送信されたIDを取得するには、以下のように<code>/</code>で区切って取得します。</p>

<pre><code>String accountId = req.requestURI.substring(req.requestURI.lastIndexOf('/')+1);
</code></pre>

<p>公式のドキュメントに正にこのままの内容が載っていました。</p>

<p><a href="https://www.salesforce.com/us/developer/docs/apexcode/Content/apex_rest_code_sample_basic.htm">Apex REST Basic Code Sample</a></p>

<h2>JSON</h2>

<p>返却するJSONの形式ですが、クラスの入れ子や、<code>List</code>を活用することで<br/>
かなり自由度高く作成出来ます。</p>

<p>例えば、以下のようなJSONを返すとします。</p>

<p>```
&ldquo;success&rdquo;:1,
&ldquo;User&rdquo; : {</p>

<pre><code>"user_id": xxx,
"hobby":[
    {"name":"映画", "level":"3"},
    {"name":"サッカー", "level":"1"}
]
</code></pre>

<p>},
&ldquo;request_time&rdquo;: &ldquo;2015-3-27 12:33&rdquo;
```</p>

<p>この場合、以下のようにクラスを複数作り、入れ子構造を作る事で作成出来ます。</p>

<p>```
global class UserData{</p>

<pre><code>global String user_id;
global HobbyData hobby
</code></pre>

<p>}
global class HobbyData{</p>

<pre><code>global String name;
global String level;
</code></pre>

<p>}
global class resultData{</p>

<pre><code>global Integer success;
global UserData User;
global String request_time;
</code></pre>

<p>}
```</p>

<p>作成するときは以下のような感じで。</p>

<p>```
List<HobbyData> hobbies = new List<HobbyData>();
HobbyData hobby1 = new HobbyData();
hobby1.name = &lsquo;映画&rsquo;;
hobby1.level = &lsquo;3&rsquo;;
hobbies.add(hobby1);
HobbyData hobby2 = new HobbyData();
hobby2.name = &lsquo;サッカー&rsquo;;
hobby2.level = &lsquo;1&rsquo;;
hobbies.add(hobby2);</p>

<p>UserData user = new UserData();
user.user_id = &lsquo;xxx&rsquo;;
user.hobby = hobbies;</p>

<p>resultData result = new resultData();
result.success = 1;
result.User = user;
result.request_time = &lsquo;2015-3-27 12:33&rsquo;;</p>

<p>return result;
```</p>

<p>地道な作業にはなりますが、これでわりかし綺麗なJSONが返せました。<br/>
もっと簡単な方法があったらまた書きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ビュー画面に出るチャターフォローボタンを非表示にする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/10/chatter-follow/"/>
    <updated>2015-03-10T16:13:23+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/10/chatter-follow</id>
    <content type="html"><![CDATA[<p>キャンペーンやリードなどのビュー画面を表示した時にアクションの列に表示される、<br/>
緑の＋ボタンは、このリード(やキャンペーンなど)をチャターでフォローする、というボタンなのですが、<br/>
特に使用しないので非表示にする方法を調べました。</p>

<!-- more -->


<p>このボタンを非表示にしたい。</p>

<p><img src="/images/2015/03/chatter1.jpg" alt="チャターフォローボタン" /></p>

<p>これは、フィード追跡、という機能で制御できます。<br/>
<code>カスタマイズ</code> &ndash;> <code>Chatter</code> &ndash;> <code>フィード追跡</code> を選択。</p>

<p><img src="/images/2015/03/chatter2.jpg" alt="フィード追跡" /></p>

<p>追跡をやめたいオブジェクトを選択します。<br/>
上部にある、「フィード追跡の有効化」のチェックを外します。</p>

<p><img src="/images/2015/03/chatter3.jpg" alt="" /></p>

<p>保存します。</p>

<p><img src="/images/2015/03/chatter4.jpg" alt="" /></p>

<p>これでビュー画面からボタンが非表示になりました。</p>

<p><img src="/images/2015/03/chatter5.jpg" alt="" /></p>

<p>このフィード追跡機能はフォローしたレコードにどういう変更があった時に通知するか、を設定できるので、<br/>
上手く使えば便利になるのかもしれません。</p>
]]></content>
  </entry>
  
</feed>
