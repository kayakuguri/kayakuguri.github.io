<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2014-12-24T12:12:19+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[herokuからgitのアップグレードを促されたので対応する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/12/24/git-update-for-mac/"/>
    <updated>2014-12-24T11:56:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/12/24/git-update-for-mac</id>
    <content type="html"><![CDATA[<p>コマンドからherokuを使おうと思うと、以下のようなメッセージが。</p>

<blockquote><p>Your version of git is 2.1.2. <br/>
Which has serious security vulnerabilities.<br/>
More information here: <a href="https://blog.heroku.com/archives/2014/12/23/update_your_git_clients_on_windows_and_os_x">https://blog.heroku.com/archives/2014/12/23/update_your_git_clients_on_windows_and_os_x</a></p></blockquote>

<p><a href="https://blog.heroku.com/archives/2014/12/23/update_your_git_clients_on_windows_and_os_x">Update Git clients on Windows and OS X</a><br/>
どうやらgitが古いとセキュリティ的に危ないから最新にしてね、という事のよう。</p>

<!-- more -->


<h3>確認</h3>

<p>現行の状態を確認。</p>

<pre><code>$ git --version
git version 2.1.2
</code></pre>

<h3>homebrewで</h3>

<p><code>homebrew</code>でもアップグレード出来るよ、とあったので、コマンドをググって叩いてみた。</p>

<pre><code>$ brew upgrade git
Error: git-2.1.2 already installed
</code></pre>

<p>しかし、すでに最新が入っている、と起こられてしまう。<br/>
まだ対応していないのかな？</p>

<h3>パッケージでインストール</h3>

<p>仕方ないので、直接gitのページからインストーラーをダウンロードして、<br/>
道なりに(いい表現)インストール。</p>

<p><a href="http://sourceforge.net/projects/git-osx-installer/files/">http://sourceforge.net/projects/git-osx-installer/files/</a></p>

<p>しかし、変わらない。。</p>

<h3>パスを変更</h3>

<p>ググるとこんなパスが違う、とうい情報が。<br/>
<a href="http://qiita.com/d_nishiyama85/items/d63da1e50405abc0929c">OSX で Git をバージョンアップする</a></p>

<p>というわけで、heroku toolebeltのパスが記載されていた、<code>.bashrc</code>に以下を追記。</p>

<pre><code>export PATH="/usr/local/git/bin:$PATH"
</code></pre>

<p>で、読み込みなおす。</p>

<pre><code>$ source ~/.bashrc
</code></pre>

<p>バージョン確認。</p>

<pre><code>$ git --version
git version 2.2.1
</code></pre>

<p>無事、アップグレード完了。<br/>
herokuコマンドを叩いても注意は出なくなりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HerokuからPHPでFTPにファイルをアップしてみる]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/12/16/heroku-php-ftp/"/>
    <updated>2014-12-16T19:10:31+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/12/16/heroku-php-ftp</id>
    <content type="html"><![CDATA[<p>herokuのPHPから、FTPプロトコルで接続し、<br/>
同じディレクトリにあるファイルをアップロードしてみた。</p>

<!-- more -->


<p><code>ftp_put</code>を使用するば、接続後にアップロードが出来るよう。<br/>
<a href="http://php.net/manual/ja/function.ftp-put.php">http://php.net/manual/ja/function.ftp-put.php</a></p>

<p>以下のPHPを書いて、herokuにアップしてみた。</p>

<pre><code>ini_set( 'display_errors', 1 );

$ftp_server = 'ホスト名';
$ftp_user_name = 'ユーザー名';
$ftp_user_pass = 'パスワード';

$file = 'somefile.txt';
$remote_file = '/ディレクトリ/readme.txt';

// 接続を確立する
$conn_id = ftp_connect($ftp_server);

// ユーザー名とパスワードでログインする
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

//パッシブモードをオンにする
ftp_pasv($conn_id, true);

// ファイルをアップロードする
if (ftp_put($conn_id, $remote_file, $file, FTP_ASCII)) {
 echo "successfully uploaded $file\n";
} else {
 echo "There was a problem while uploading $file\n";
}       

// 接続を閉じる
ftp_close($conn_id);
</code></pre>

<p>ローカルではこれで動いていたのだが、herokuにアップすると、以下のエラーが出て動作しなかった。</p>

<blockquote><p>Fatal error: Call to undefined function ftp_connect() in /app/index.php on line 17</p></blockquote>

<p><code>phpinfo</code>で確認してみると、<code>FTP support</code>がなかったので、これでエラーが出ていたよう。<br/>
<a href="http://d.hatena.ne.jp/kasahi/20090206/1234198797">http://d.hatena.ne.jp/kasahi/20090206/1234198797</a></p>

<h3>追記</h3>

<p><code>FTP support</code>は、composerの設定で後から追加できた。<br/>
<code>composert.json</code>に以下を記述してdeployするとFTPサポートが追加される。</p>

<pre><code>{
    "require": {
        "ext-ftp":"*"
    }
}
</code></pre>

<p>composerで追加できるオプションは以下にある。<br/>
<a href="https://devcenter.heroku.com/articles/php-support#extensions">https://devcenter.heroku.com/articles/php-support#extensions</a></p>

<p>追加した上で、1つ目のPHPを試してみると、無事、アップロードできました。</p>

<hr />

<p>他に方法がないか探してみると、どうやら、<code>CURL</code>でも出来る、とのこと。<br/>
<a href="http://d.hatena.ne.jp/calpo/20110216/p1">PHPでPASV(passiveモード)なFTP</a></p>

<p>以下を書いてherokuにアップしてみたところ、無事、アップロードされた。</p>

<pre><code>$remote_file = 'ftp://ユーザー:パスワード@ホスト名/ディレクトリ/readme.txt';
$local_file = 'somefile.txt';

try{
    $fp = fopen($local_file, "r");
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_FTP_USE_EPSV, false);
    curl_setopt($ch, CURLOPT_UPLOAD, true);
    curl_setopt($ch, CURLOPT_URL, $remote_file);
    curl_setopt($ch, CURLOPT_INFILE, $fp);
    curl_setopt($ch, CURLOPT_INFILESIZE, filesize($local_file));
    curl_exec($ch);
    curl_close($ch);
    echo 'success';
} catch (Exception $e) {
    var_dump($e);
}
</code></pre>

<h3>参考URL</h3>

<p><a href="http://loumo.jp/wp/archive/20090813164314/">PHP の cURL を使って FTP を行う。</a></p>

<p>ライブラリもあったけど、未検証<br/>
<a href="https://github.com/dg/ftp-php">FTP for PHP</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuアプリとdropboxのファイル同期]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/11/21/heroku-dropbox-sync/"/>
    <updated>2014-11-21T20:11:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/11/21/heroku-dropbox-sync</id>
    <content type="html"><![CDATA[<p>herokuがdropboxとの同期サービスをベータ版ですが開始したようです。<br/>
記事：<a href="https://blog.heroku.com/archives/2014/11/19/announcing_beta_dropbox_sync">https://blog.heroku.com/archives/2014/11/19/announcing_beta_dropbox_sync</a><br/>
ドキュメント：<a href="https://devcenter.heroku.com/articles/dropbox-sync">https://devcenter.heroku.com/articles/dropbox-sync</a></p>

<!-- more -->


<p>で、実際に試してみました。</p>

<p>herokuで作成しているアプリの、<code>code</code>からdropboxへの接続が出来ます。</p>

<p><img src="/images/2014/11/dropbox-test1.jpg" alt="" /></p>

<p>少し下に、<code>Connect to Dropbox</code>があるので、クリック。</p>

<p><img src="/images/2014/11/dropbox-test2.jpg" alt="" /></p>

<p>ログインして認証。</p>

<p><img src="/images/2014/11/dropbox-test3.jpg" alt="" />
<img src="/images/2014/11/dropbox-test4.jpg" alt="" /></p>

<p>認証すると、接続したdropboxの中にフォルダが作成され、そこにアプリ上のソースが一式同期されます。<br/>
<code>Dropbox/Apps/heroku/アプリ名</code>のフォルダが作成されます。</p>

<p>で、ここにある通り、ここからdropbox内のファイルを使ってdeploy出来ます。<br/>
メッセージを書いて<code>deploy</code>をクリックすると、書いたメッセージで、<code>commit</code>、<code>push</code>、<code>deploy</code>が実行されます。</p>

<p><img src="/images/2014/11/dropbox-test5.jpg" alt="" /></p>

<p>実行中</p>

<p><img src="/images/2014/11/dropbox-test6.jpg" alt="" /></p>

<p>完了</p>

<p><img src="/images/2014/11/dropbox-test7.jpg" alt="" /></p>

<p>git上でもコミットメッセージが反映されています。</p>

<p><img src="/images/2014/11/dropbox-test8.jpg" alt="" /></p>

<p>シュチエーションとしては、dropboxで同期したディレクトリを他の人とコラボして、<br/>
その人が更新したファイルをブラウザ上からdeploy出来る、みたいな感じかと。<br/>
それだと、コラボ相手はgitがいらないので。</p>

<p>dropboxとの接続サービスはいっぱいあるので、他にも組み合わせれば色々出来そう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]herokuでのSSL設定とカスタムサブドメインの適用方法]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain/"/>
    <updated>2014-09-30T19:24:37+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain</id>
    <content type="html"><![CDATA[<p>herokuでのSSL設定とカスタムサブドメインの設定をさっくりと調べてみた。</p>

<!-- more -->


<h2>SSL</h2>

<h3>手順</h3>

<ol>
<li>プライベートキーを作成</li>
<li>CSRを作成</li>
<li>CSRを契約の際に業者に提出</li>
<li>証明書が発行される</li>
<li>証明書 + 中間証明書 + プライベートキーをherokuに設定</li>
</ol>


<p>1はローカルPC上にて作成<br/>
2の作成方法は以下、など。
<a href="https://jp.globalsign.com/support/ssl/list.php?cat=csr">https://jp.globalsign.com/support/ssl/list.php?cat=csr</a><br/>
5のみ、heroku上。</p>

<h3>ファイルの準備</h3>

<p>サーバー会社等から取得したデータを保存する。<br/>
テキストに文字列を貼り付けて保存すればよい。<br/>
※ファイル名の指定は特になし。拡張子もなんでもいい。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> ファイル名 </th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> 秘密鍵 </td>
<td align="left"> server.key </td>
<td></td>
</tr>
<tr>
<td></td>
<td align="left"> 証明書  </td>
<td align="left">  server.crt </td>
<td></td>
</tr>
<tr>
<td></td>
<td align="left"> 中間CA証明書  </td>
<td align="left">  chain_ca.pem </td>
<td></td>
</tr>
</tbody>
</table>


<p><a href="http://q.hatena.ne.jp/1188202204">http://q.hatena.ne.jp/1188202204</a></p>

<h3>herokuでの操作</h3>

<p>SSLのアドオン($20/mo)<br/>
<a href="https://addons.heroku.com/ssl">https://addons.heroku.com/ssl</a></p>

<p>アドオンの追加</p>

<pre><code>$ heroku addons:add ssl:endpoint
</code></pre>

<p>サーバー証明書と中間証明書を合体させる</p>

<pre><code>$ cat chain_ca.pem &gt;&gt; server.crt
</code></pre>

<p>プライベートキーのパスフレーズが解除されていない場合は解除する。</p>

<pre><code>$ openssl rsa -in site.key -out server.key
Enter pass phrase for site.key:
writing RSA key
</code></pre>

<p>で、合体させた証明書とキーをアップする。</p>

<pre><code>$ heroku certs:add server.crt server.key
</code></pre>

<p>アップロード結果で返ってくるURLが証明書が適応されたURLとなる。<br/>
<code>hokkaido-1212.herokussl.com</code><br/>
この状態でアクセスすると、<code>No such app</code>と出るがこれで正しい。</p>

<h3>参考</h3>

<p><a href="http://qiita.com/yu1ch1/items/290efb666209354e8fb3">herokuのssl証明書を更新する</a><br/>
<a href="http://interu.hatenablog.com/entry/2012/07/25/184812">HerokuでカスタムドメインのSSL endpointを利用する方法</a><br/>
<a href="http://d.hatena.ne.jp/install-memo/20110906/1315291837">SSL証明書のKEYファイル・CSRファイル・CRTファイルのチェック方法</a></p>

<h2>サブドメイン</h2>

<h3>herokuでの操作</h3>

<p>herokuのアプリのSettings内にある、<br/>
Domains、から設定したいドメインを指定する。</p>

<p><img src="/images/2014/09/Settings___Heroku.jpg" alt="Settings___Heroku" /></p>

<p>契約しているドメイン業者のCNAMEに、適用したいアプリのURLを指定する。<br/>
例：<code>hoge.herokuapp.com</code></p>

<h3>SSLの場合</h3>

<p>SSLをカスタムドメインで使用したい場合は、上記SSLの項で設定した、<br/>
<code>hokkaido-1212.herokussl.com</code>のドメインをCNAMEに指定する。</p>

<p>反映後、設定の確認は以下で出来る。</p>

<pre><code>$ heroku certs
Endpoint                     Common Name(s)            Expires               Trusted
---------------------------  ------------------------  --------------------  -------
hokkaido-1212.herokussl.com  secure.example.co.jp  2015-06-24 23:59 UTC  True
</code></pre>

<p>詳細は、<code>heroku certs:info</code>で確認できる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]QuotaGuard Staticを使ってHerokuでのIP固定を試してみる]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/26/static-ip-heroku/"/>
    <updated>2014-09-26T17:59:42+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/26/static-ip-heroku</id>
    <content type="html"><![CDATA[<p>herokuでのIP固定といえば、<a href="https://addons.heroku.com/proximo">Proximo</a>の方が有名っぽいけど、<br/>
QuotaGuard Staticというのでも同じく固定できるようなので試してみた。</p>

<!-- more -->


<p><img src="/images/2014/09/quotaguard1.jpg" alt="QuotaGuard Static add-on" /></p>

<p><a href="https://addons.heroku.com/quotaguardstatic">QuotaGuard Static</a></p>

<p>アプリへのセットアップをコマンドラインからする場合は以下。<br/>
無料プランがあるので、それで試してみる。</p>

<pre><code>$ heroku addons:add quotaguardstatic
</code></pre>

<p>以下のように結果が返ってくる。<br/>
その中にIPアドレスも含まれる。</p>

<pre><code>Adding quotaguardstatic on static-ip-test... done, v4 (free)
Your static IPs are [54.88.136.216, 54.84.188.199]
Use `heroku addons:docs quotaguardstatic` to view documentation.
</code></pre>

<p>Proximoでも同じ仕組のようだけど、<br/>
入れたアドオンによって指定されたURLを介してアクセスすることで<br/>
固定IPを実現しているよ。<br/>
アドオンがプロキシの役目を果たす。<br/>
このプロキシ経由でのアクセス数に制限があり、その数で値段が変わる仕組み。</p>

<p>そのアクセス用のURLは環境変数に格納されている。</p>

<pre><code>$ heroku config
QUOTAGUARDSTATIC_URL: http://username:pass@us-east-1-static-brooks.quotaguard.com:9293
</code></pre>

<p>上記、<code>IPs</code>となっているのは、２つのIPのうちどちらかでアクセスされる、とのこと。<br/>
負荷分散のよう。<br/>
一応、公式の理由。</p>

<blockquote><p>We believe all apps should be built for scalability and high availability. Our commitment to this means we only provide load balanced, high availability services. Load balancing our nodes allows one node to fail or be brought down for maintenance with no impact to your application. Each IP you are given represents one proxy node that is running behind a load balancer.</p></blockquote>

<p>IPアドレスはアドオンのダッシュボードからも確認できる。<br/>
以下、ダッシュボードを開くコマンド</p>

<pre><code>$ heroku addons:open quotaguardstatic
</code></pre>

<p>公式にPHPでの動作サンプルが載っていたのでそのまま使用して試してみた。<br/>
以下、転載。</p>

<p><a href="https://devcenter.heroku.com/articles/quotaguardstatic#using-with-php">PHPのサンプル</a></p>

<pre><code>&lt;?php

function lookup(){
  $quotaguard_env = getenv("QUOTAGUARDSTATIC_URL");
  $quotaguard = parse_url($quotaguard_env);

  $proxyUrl       = $quotaguard['host'].":".$quotaguard['port'];
  $proxyAuth       = $quotaguard['user'].":".$quotaguard['pass'];

  $url = "http://ip.jsontest.com/";

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_PROXY, $proxyUrl);
  curl_setopt($ch, CURLOPT_PROXYAUTH, CURLAUTH_BASIC);
  curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyAuth);
  $response = curl_exec($ch);
  return $response;
}

$res = lookup();
print_r($res);

?&gt;
</code></pre>

<p>ここでアクセスしている<code>http://ip.jsontest.com/</code>のURLは、接続元のIPアドレスをJsonで返してくれるサービスのよう。</p>

<p>アクセスすると、以下のようなJSONが返ってきた。</p>

<pre><code>{"ip": "54.84.188.199"}
</code></pre>

<p>リロードすると以下のものとランダムに切り替わっているのが確認できる。</p>

<pre><code>{"ip": "54.88.136.216"}
</code></pre>

<p>管理画面を確認すると、アクセス数と残りアクセス数がわかる。<br/>
アクセス数は、１月の制限のよう。<br/>
無料の場合は250/月。</p>

<p><img src="/images/2014/09/quotaguard2.jpg" alt="管理画面" /></p>

<p>冒頭のProximoと比較すべく、料金表を抜き出してみた。</p>

<p><strong>QuotaGuard Static</strong></p>

<table>
<thead>
<tr>
<th>プラン </th>
<th> 値段(月) </th>
<th> アクセス数(月) </th>
<th> 帯域幅</th>
</tr>
</thead>
<tbody>
<tr>
<td>Starter </td>
<td> 無料 </td>
<td> 250 </td>
<td> 100MB</td>
</tr>
<tr>
<td>Spike </td>
<td> $5 </td>
<td> 500 </td>
<td> 250MB</td>
</tr>
<tr>
<td>Micro </td>
<td> $19 </td>
<td> 10,000 </td>
<td> 1GB</td>
</tr>
<tr>
<td>Medium </td>
<td> $49 </td>
<td> 50,000 </td>
<td> 10GB</td>
</tr>
<tr>
<td>Large </td>
<td> $89 </td>
<td> 1000,000 </td>
<td> 50GB</td>
</tr>
<tr>
<td>Enterprise </td>
<td> $219 </td>
<td> 1,000,000 </td>
<td> 1TB</td>
</tr>
<tr>
<td>Premium </td>
<td> $399 </td>
<td> 5,000,000 </td>
<td> 無制限</td>
</tr>
</tbody>
</table>


<p><strong>Proximo</strong></p>

<table>
<thead>
<tr>
<th>プラン </th>
<th> 値段(月) </th>
<th> アクセス数(月) </th>
<th> 帯域幅</th>
</tr>
</thead>
<tbody>
<tr>
<td>Development </td>
<td> $5 </td>
<td> 1,000 </td>
<td> 500MB</td>
</tr>
<tr>
<td>Starter </td>
<td> $25 </td>
<td> 20,000 </td>
<td> 2GB</td>
</tr>
<tr>
<td>Professional </td>
<td> $75 </td>
<td> 200,000 </td>
<td> 100GB</td>
</tr>
<tr>
<td>Dedicated </td>
<td> $250 </td>
<td> 1,000,000 </td>
<td> 1TB</td>
</tr>
<tr>
<td>Elite </td>
<td> $500 </td>
<td> 5,000,000 </td>
<td> 5TB</td>
</tr>
<tr>
<td>Enterprise </td>
<td> $1250 </td>
<td> 無制限 </td>
<td> 無制限</td>
</tr>
</tbody>
</table>


<p>QuotaGuardは無料があるのがやはりお手軽。<br/>
しかし、安いうちはProximoの方がお得。<br/>
増えてくるとQuotaGuardの方がお得かも。<br/>
他の機能もあったりするので一概には言えないけれど。</p>

<h3>参考</h3>

<p><a href="https://devcenter.heroku.com/articles/quotaguardstatic">QuotaGuard Static 公式ドキュメント</a><br/>
<a href="https://devcenter.heroku.com/articles/proximo">Proximo 公式ドキュメント</a></p>
]]></content>
  </entry>
  
</feed>
