<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cakephp | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/cakephp/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-04-01T19:31:01+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[CakePHP]Transitionコンポーネントでバリデーションを効かせるモデルを指定]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/01/cakephp-transition-validate/"/>
    <updated>2015-04-01T19:22:30+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/01/cakephp-transition-validate</id>
    <content type="html"><![CDATA[<p>またバリデーションネタ。<br/>
cakephpでフォーム作成の際に、Transitionコンポーネントを使用するとすこぶる便利。<br/>
以下が使い方としてはわかりやすかった。<br/>
<a href="http://endoyuta.com/2013/05/18/cakephp-transition%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%881-0/">cakePHP Transitionコンポーネント &ndash; Logicky Blog</a></p>

<!-- more -->


<p>で、その中で、入力画面から確認画面に遷移する際に指定したバリデーションルールを適用させたかった。<br/>
たいていのサイトでは、<code>$this-&gt;Transition-&gt;checkData('xxx')</code>を使えばよい、と書いてあったのだが、それだと効かなかった。<br/>
原因を探していると、どうやら使用しているコントローラーで複数のモデルを使用していると効かないよう。<br/>
そんなときは<code>checkData</code>の第２引数でモデルを明示的に指定してやると効くようになった。</p>

<p>```
class FormController extends AppController
{</p>

<pre><code>public $uses = array('User', 'Hoge', 'Fuga');

public function input(){
    $this-&gt;Transition-&gt;checkData('confirm','Hoge');
    ...
}
</code></pre>

<p>}
```</p>

<p>上記のように書くと、<code>Hoge</code>モデルで記述したバリデーションが適用される。<br/>
ここを配列にして複数のモデルを指定してやることも可能だそう。</p>

<p><a href="http://d.hatena.ne.jp/kunit/20101005#1286265311">[PHP][CakePHP] Transitionコンポーネント &ndash; checkData() について</a></p>

<p>それにしてもこのコンポーネントはびっくりするくらい便利。ほんとに。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePHP]手動でフォームのバリデーションチェックにかける]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/31/cake-php-validates/"/>
    <updated>2015-03-31T21:06:40+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/31/cake-php-validates</id>
    <content type="html"><![CDATA[<p>最近cakephpを触るようになりました。ようやく。<br/>
で、コントローラーから明示的にバリデーションにかける方法を調べたのでメモ。</p>

<!-- more -->


<p>まず準備として、<code>Model</code>にルールを記述します。<br/>
今回は<code>User</code>というモデル内に記述したとします。</p>

<p>```
var $validate = array(</p>

<pre><code>'password' =&gt; array(
    'rule' =&gt; array('minLength', 8),
    'message' =&gt; 'パスワードは8文字以上で入力してください'
)
</code></pre>

<p>);
```</p>

<p>で、次に<code>View</code>で入力欄を作成します。<br/>
作成の際に、先程作ったルールの<code>password</code>を<code>type</code>として指定してやります。</p>

<pre><code>&lt;?php echo $this-&gt;Form-&gt;input('User.password', array('type' =&gt; 'password', 'value' =&gt; '','label' =&gt; false)); ?&gt;
</code></pre>

<p>HTMLは以下のように表示されます。</p>

<pre><code>&lt;input name="data[User][password]" value="" type="password" id="UserPassword" required="required"&gt;
</code></pre>

<p>最後に<code>Controller</code>からバリデーションにデータを送信します。<br/>
記述する箇所は、フォームを送信した後に実行されるアクション内です。</p>

<p>```
$this->User->set($this->request->data); //モデルにデータをセット
if(!$this->User->validates()){</p>

<pre><code>//エラー時の挙動
</code></pre>

<p>}
```</p>

<p>これで8文字以下で送信するとエラーが表示されます。</p>

<h3>参考</h3>

<p><a href="http://book.cakephp.org/2.0/ja/models/data-validation/validating-data-from-the-controller.html">http://book.cakephp.org/2.0/ja/models/data-validation/validating-data-from-the-controller.html</a></p>
]]></content>
  </entry>
  
</feed>
