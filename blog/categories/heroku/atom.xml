<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-05-09T21:09:15+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[herokuアドオン]cloudinaryで動画を試してみた[PHP]]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/07/cloudinary-movie/"/>
    <updated>2015-05-07T15:31:47+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/07/cloudinary-movie</id>
    <content type="html"><![CDATA[<p>2015年5月5日に新しく発表された動画サポートを試してみた。</p>

<!-- more -->


<h2>アップロード</h2>

<p>インストールなどは<a href="http://kayamemo.mrlittlebig.com/blog/2015/05/07/cloudinary-img/">前回の記事</a>参照。</p>

<p>同一ディレクトリにある、movファイルをアップロードした。<br/>
動画は、iPhoneで撮影したもの。</p>

<p>```
&lt;?php
require &lsquo;../vendor/autoload.php&rsquo;;</p>

<p>use Cloudinary;
use Cloudinary\Uploader;</p>

<p>$account = parse_url(getenv(&lsquo;CLOUDINARY_URL&rsquo;));</p>

<p>\Cloudinary::config(array(</p>

<pre><code>"cloud_name" =&gt; $account['host'],
"api_key" =&gt; $account['user'],
"api_secret" =&gt; $account['pass']
</code></pre>

<p>));</p>

<p>$ret = \Cloudinary\Uploader::upload(&ldquo;iphone_movie.mov&rdquo;,array(</p>

<pre><code>"resource_type" =&gt; "video"
</code></pre>

<p>));</p>

<p>print_r($ret);
```</p>

<p>結果は以下。</p>

<p>```
Array (</p>

<pre><code>[public_id] =&gt; wfdpqg39qjoc6lnkr3cs 
[version] =&gt; 1430967110 
[signature] =&gt; 7f52af2c53ccc3b38f8b33300a40d6085c85c032 
[width] =&gt; 1280 
[height] =&gt; 720 
[format] =&gt; mov 
[resource_type] =&gt; video 
[created_at] =&gt; 2015-05-07T02:51:50Z 
[tags] =&gt; Array ( ) 
[bytes] =&gt; 5572519 
[type] =&gt; upload 
[etag] =&gt; 3114c6de99a74817eef082b330754d1e 
[url] =&gt; http://res.cloudinary.com/harslxcej/video/upload/v1430967110/wfdpqg39qjoc6lnkr3cs.mov 
[secure_url] =&gt; https://res.cloudinary.com/harslxcej/video/upload/v1430967110/wfdpqg39qjoc6lnkr3cs.mov 
[audio] =&gt; Array ( 
    [codec] =&gt; aac 
    [bit_rate] =&gt; 63431 
    [frequency] =&gt; 44100 
    [channels] =&gt; 1 
    [channel_layout] =&gt; mono 
) 
[video] =&gt; Array ( 
    [pix_format] =&gt; yuv420p 
    [codec] =&gt; h264 
    [level] =&gt; 31 
    [bit_rate] =&gt; 4604806 
) 
[frame_rate] =&gt; 29.97002997003 
[bit_rate] =&gt; 4686070 
[duration] =&gt; 9.538333 
[rotation] =&gt; 0 
</code></pre>

<p>)
```</p>

<h2>表示</h2>

<p>PHPでは、<code>cl_video_tag</code>を利用することで<code>video</code>タグを出力してくれる。</p>

<pre><code>cl_video_tag($public_id, array( "alt" =&gt; "Sample Video" ));
</code></pre>

<p>出力</p>

<p>```
<video alt='Sample Video' poster='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.jpg'></p>

<pre><code>&lt;source src='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.webm' type='video/webm'&gt;
&lt;source src='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.mp4' type='video/mp4'&gt;
&lt;source src='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.ogv' type='video/ogg'&gt;
</code></pre>

<p></video>
```</p>

<p>このままだとコントローラーが表示されていないので、その辺のオプションも追加する。</p>

<p>```
cl_video_tag($public_id, array(</p>

<pre><code>"width" =&gt; 600,
"height" =&gt; 400,
"crop" =&gt; "fill",
"preload" =&gt; "none",
"controls" =&gt; true,
</code></pre>

<p>));
```</p>

<p>出力</p>

<p>```
<video controls='1' height='400' poster='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.jpg' preload='none' width='600'></p>

<pre><code>&lt;source src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.webm' type='video/webm'&gt;
&lt;source src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.mp4' type='video/mp4'&gt;
&lt;source src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.ogv' type='video/ogg'&gt;
</code></pre>

<p></video>
```</p>

<p>サムネイルの出力は以下。<br/>
public idに拡張子をつけてやらないと表示が出来なかった。<br/>
(jpg, png, webp, wdpに対応しているよう)</p>

<p>```
cl_image_tag($public_id.&ldquo;.jpg&rdquo;, array(</p>

<pre><code>"width"=&gt;300,
"height"=&gt;300,
"crop"=&gt;"fill",
"resource_type"=&gt;"video"
</code></pre>

<p>));
```</p>

<p>結果</p>

<pre><code>&lt;img src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_300,w_300/wfdpqg39qjoc6lnkr3cs.jpg' height='300' width='300'/&gt;
</code></pre>

<h2>フォームからアップロード</h2>

<p><a href="http://kayamemo.mrlittlebig.com/blog/2015/04/16/heroku-transloadit-2/">前回、Transloaditでアップロード</a>した時と同じように、フォームから選択した動画をアップロードしてみる。</p>

<h3>情報が取得できない</h3>

<p>動画をフォームからアップロードしてみると情報が取得できない、と思ったが、<br/>
どうやらサーバーの設定での最大アップロードサイズを超過していたよう。</p>

<p>アップロードサイズはデフォルトでは、<code>2MB</code>。<br/>
これの変更方法は以前に書いていた。<br/>
<a href="http://kayamemo.mrlittlebig.com/blog/2014/02/18/change-max-filesize/">[PHP][heroku]upload_max_filesizeを変更する &ndash; KayaMemo</a></p>

<h3>コード</h3>

<p>以下、全コード。<br/>
動画をアップロードされたら表示するところまで。<br/>
(エラーチェックなどは全くしていないので注意)</p>

<p>```
&lt;?php
require &lsquo;../vendor/autoload.php&rsquo;;
use Cloudinary;
use Cloudinary\Uploader;</p>

<p>$showFlg = false;</p>

<p>if(isset($_FILES[&lsquo;userfile&rsquo;])){</p>

<pre><code>if (move_uploaded_file($_FILES['userfile']['tmp_name'], $_FILES['userfile']['name'])) {
    $uploadFile = $_FILES['userfile']['name'];

$account = parse_url(getenv('CLOUDINARY_URL'));
\Cloudinary::config(array(
    "cloud_name" =&gt; $account['host'],
    "api_key" =&gt; $account['user'],
    "api_secret" =&gt; $account['pass']
));

$ret = \Cloudinary\Uploader::upload($uploadFile,array(
    "resource_type" =&gt; "video"
));
$public_id = $ret['public_id'];
$showFlg = true;
}
</code></pre>

<p>}
?></p>

<p>&lt;!DOCTYPE html>
<html lang="ja">
<head></p>

<pre><code>&lt;title&gt;ファイルアップロードテスト&lt;/title&gt;
&lt;meta charset="utf-8"&gt;
</code></pre>

<p></head>
<body></p>

<p>&lt;?php if(!$showFlg){ ?>
<form enctype="multipart/form-data" method="post" action="upload-form-movie.php"></p>

<pre><code>&lt;input type="hidden" name="MAX_FILE_SIZE" value="20000000" /&gt;
&lt;input name="userfile" type="file"&gt;
&lt;input type="submit" value="Upload"&gt;
</code></pre>

<p></form>
&lt;?php }else{</p>

<pre><code>echo $resize = cl_video_tag($public_id, array(
    "width" =&gt; 600,
    "height" =&gt; 400,
    "crop" =&gt; "fill",
    "preload" =&gt; "none",
    "controls" =&gt; true,
));
</code></pre>

<p>} ?></p>

<p></body>
</html>
```</p>

<h2>参考</h2>

<p><a href="http://cloudinary.com/blog/introducing_cloud_based_service_for_video_upload_real_time_manipulation_and_optimized_viewing#api_example_1">Introducing cloud based service for video management | Cloudinary Blog</a><br/>
<a href="http://cloudinary.com/documentation/video_manipulation_and_delivery">Video manipulation and delivery | Cloudinary</a></p>

<p><a href="http://php.net/manual/ja/features.file-upload.post-method.php">PHP: POST メソッドによるアップロード &ndash; Manual </a><br/>
<a href="http://www.php-factory.net/trivia/05.php">サーバーのアップロードファイルの最大容量の確認と容量制限の変更｜PHP工房</a><br/>
<a href="https://devcenter.heroku.com/articles/custom-php-settings#user-ini-files-recommended">Customizing Web Server and Runtime Settings for PHP | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[herokuアドオン]cloudinaryで画像のアップロードと表示[PHP]]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/07/cloudinary-img/"/>
    <updated>2015-05-07T11:34:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/07/cloudinary-img</id>
    <content type="html"><![CDATA[<p>PHPを利用して、cloudinaryにアップロードして、画像を表示させてみた。</p>

<!-- more -->


<h2>インストール</h2>

<p>composerを利用。</p>

<p>```
{
  &ldquo;require&rdquo;: {</p>

<pre><code>"cloudinary/cloudinary_php": "dev-master"
</code></pre>

<p>  }
}
```</p>

<p>インストール。</p>

<p>```
$ composer install
Loading composer repositories with package information
Installing dependencies (including require-dev)
  &ndash; Installing cloudinary/cloudinary_php (dev-master cfa2fd7)</p>

<pre><code>Cloning cfa2fd7d4043844b46411c213795eafb648703df
</code></pre>

<p>Writing lock file
Generating autoload files
```</p>

<h2>herokuにインストール</h2>

<p>アドオンを追加。</p>

<p><img src="/images/2015/05/Cloudinary01.jpg" alt="add-on" /></p>

<p><code>
$ heroku addons:create cloudinary:starter
Creating unwinding-truly-5886... done
Adding unwinding-truly-5886 to your-app-name... done
Setting CLOUDINARY_URL and restarting your-app-name... done, v3
Use `heroku addons:docs cloudinary` to view documentation.
</code></p>

<p>環境変数の<code>CLOUDINARY_URL</code>でアカウント情報を取得できる。</p>

<h2>アップロード</h2>

<p>以下のコードを記述し、アクセス。<br/>
flickr上にある画像をアップロードしている。</p>

<p>```
&lt;?php
require &lsquo;../vendor/autoload.php&rsquo;;</p>

<p>use Cloudinary;
use Cloudinary\Uploader;</p>

<p>$account = parse_url(getenv(&lsquo;CLOUDINARY_URL&rsquo;));</p>

<p>\Cloudinary::config(array(</p>

<pre><code>"cloud_name" =&gt; $account['host'],
"api_key" =&gt; $account['user'],
"api_secret" =&gt; $account['pass']
</code></pre>

<p>));</p>

<p>$ret = \Cloudinary\Uploader::upload(&ldquo;<a href="https://farm9.staticflickr.com/8748/16531734384_afdd2327e5_z.jpg">https://farm9.staticflickr.com/8748/16531734384_afdd2327e5_z.jpg</a>&rdquo;);</p>

<p>print_r($ret);
```</p>

<p>で、結果は以下のように返ってくる。</p>

<p>```
Array (</p>

<pre><code>[public_id] =&gt; xa9kfgp9jvxouekmrrqu 
[version] =&gt; 1430964069 
[signature] =&gt; 088135f7c32ad04436a18eb35d05b28bfd9e7870 
[width] =&gt; 640 
[height] =&gt; 480 
[format] =&gt; jpg 
[resource_type] =&gt; image 
[created_at] =&gt; 2015-05-07T02:01:09Z 
[tags] =&gt; Array ( ) 
[bytes] =&gt; 174550 
[type] =&gt; upload 
[etag] =&gt; 6fdff26d1bd4d9cc55c3c613743a8dc1 
[url] =&gt; http://res.cloudinary.com/harslxcej/image/upload/v1430964069/xa9kfgp9jvxouekmrrqu.jpg 
[secure_url] =&gt; https://res.cloudinary.com/harslxcej/image/upload/v1430964069/xa9kfgp9jvxouekmrrqu.jpg 
</code></pre>

<p>)
```</p>

<h2>URLでの表示</h2>

<p>アップロードが完了したものはアクセスするURLを変更することでサイズなどを変更できる。</p>

<h3>オリジナル</h3>

<pre><code>http://res.cloudinary.com/harslxcej/image/upload/xa9kfgp9jvxouekmrrqu.jpg
</code></pre>

<p><img src="http://res.cloudinary.com/harslxcej/image/upload/xa9kfgp9jvxouekmrrqu.jpg" alt="オリジナル" /></p>

<h3>リサイズ</h3>

<pre><code>http://res.cloudinary.com/harslxcej/image/upload/w_100,h_100/xa9kfgp9jvxouekmrrqu.jpg
</code></pre>

<p><img src="http://res.cloudinary.com/harslxcej/image/upload/w_100,h_100/xa9kfgp9jvxouekmrrqu.jpg" alt="リサイズ" /></p>

<h3>角丸</h3>

<pre><code>http://res.cloudinary.com/harslxcej/image/upload/w_320,h_240,c_fill,r_20/xa9kfgp9jvxouekmrrqu.png
</code></pre>

<p><img src="http://res.cloudinary.com/harslxcej/image/upload/w_320,h_240,c_fill,r_20/xa9kfgp9jvxouekmrrqu.png" alt="角丸" /></p>

<p>利用できるタグなどは以下を参照。<br/>
<a href="http://cloudinary.com/documentation/image_transformations">Image transformations | Cloudinary</a></p>

<h2>PHPでURLの生成</h2>

<p>上記のURLをPHPのコードで生成する。</p>

<h3>cl_image_tag</h3>

<p><code>cl_image_tag</code>を利用すると、<code>&lt;img&gt;</code>のタグごと出力される。</p>

<pre><code>$public_id = 'xa9kfgp9jvxouekmrrqu';
echo cl_image_tag($public_id, array( "alt" =&gt; "Sample Image" ));
</code></pre>

<p>結果</p>

<pre><code>&lt;img src='https://res.cloudinary.com/harslxcej/image/upload/xa9kfgp9jvxouekmrrqu' alt='Sample Image'/&gt;
</code></pre>

<p>加工</p>

<pre><code>cl_image_tag($public_id, array(
    "width" =&gt; 100,
    "height" =&gt; 100,
    "crop" =&gt; "fill",
    "effect" =&gt; "grayscale"
));
</code></pre>

<p>結果</p>

<pre><code>&lt;img src='https://res.cloudinary.com/harslxcej/image/upload/c_fill,e_grayscale,h_100,w_100/xa9kfgp9jvxouekmrrqu' height='100' width='100'/&gt;
</code></pre>

<p><img src='https://res.cloudinary.com/harslxcej/image/upload/c_fill,e_grayscale,h_100,w_100/xa9kfgp9jvxouekmrrqu' height='100' width='100'/></p>

<h3>cloudinary_url</h3>

<p>URLを直接取得するには、<code>cloudinary_url</code>を使用する。</p>

<pre><code>echo cloudinary_url($public_id);
echo cloudinary_url($public_id, array(
    "width" =&gt; 100,
    "height" =&gt; 100,
    "crop" =&gt; "fill",
    "effect" =&gt; "grayscale"
));
</code></pre>

<p>その他、詳しくは以下を参照。</p>

<p><a href="http://cloudinary.com/documentation/php_image_manipulation">PHP image manipulation | Cloudinary</a></p>

<h2>参考</h2>

<p><a href="http://cloudinary.com/documentation/php_integration">PHP integration | Cloudinary</a><br/>
<a href="http://programmer-jobs.blogspot.jp/2013/12/phpphalconcloudinary.html">PHPフレームワークのPhalconで&#12289;写真ストレージクラウドのCloudinaryと連携 一言多いプログラマーの独り言</a><br/>
<a href="https://github.com/cloudinary/cloudinary_php">cloudinary/cloudinary_php</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Heroku]スティッキーセッションの有効化]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/30/heroku-sticky-session/"/>
    <updated>2015-04-30T10:03:06+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/30/heroku-sticky-session</id>
    <content type="html"><![CDATA[<p>herokuで、<code>スティッキーセッション(セッションアフィニティ)</code>を有効化するオプションが公開されたってことで、調べてみた。</p>

<!-- more -->


<h2>dyno</h2>

<p>herokuでは、dynoを増やしていく=ロードバランサとなって、アクセスの度にランダムにサーバを割り振られる。<br/>
なので、サーバ側に保持しているセッションは同一ユーザーのアクセスであってもページを遷移しただけでセッションが保持されていないサーバに割り振られてしまい、セッション切れを起こしてしまう、という問題がある。<br/>
これを解決していたのが主に、<a href="https://addons.heroku.com/memcachier">MemCachier</a>というアドオンで、このMemCachier側にセッションを保持してやることでサーバが変わってもセッションを維持する、という流れで作成するのがセオリーだった。<br/>
(1Dynoだとサーバは一つなので必要ない)</p>

<h2>スティッキーセッション</h2>

<p>それを解決するのが、スティッキーセッション、セッション・アフィニティ、と呼ばれるもののよう。<br/>
これは、ロードバランサなどでサーバが数台ある場合に、特定のユーザーからのアクセスは特定のサーバのみに接続するように調整するもの、らしい。<br/>
なので、ページ遷移をしてもサーバが変わらず、セッションが切れる事がない、というわけ。<br/>
ただし、この設定で重要なのは、この同じサーバに割り当てる時間、の設定、とのこと。<br/>
長くするとロードバランサの意味がなくなっていくし、短くするとセッションが切れてしまう。<br/>
heroku上でこの時間を設定できるのかは今のところ不明。</p>

<p><a href="http://docs.aws.amazon.com/ja_jp/ElasticLoadBalancing/latest/DeveloperGuide/elb-sticky-sessions.html">スティッキーセッションの有効化と無効化</a></p>

<h2>herokuでの設定</h2>

<p>この機能はまだベータ版、ってことで、デフォルトではもちろん無効となっている。<br/>
有効にするには以下のコマンドを実行する必要がある。</p>

<pre><code>$ heroku labs:enable http-session-affinity
</code></pre>

<h2>検証</h2>

<p>実際に検証してみる。<br/>
検証は、以下のサイトにあった、訪問回数をカウントする単純なものを使用してみた。<br/>
この回数がリロードの度に増えていけばセッションが引き継がれている、ということだが、<br/>
別サーバに接続されてセッションがなくなるとカウントがやり直しになったりする、はず。</p>

<p><a href="http://www.phppro.jp/school/phpschool/vol8/1">第8回　セッションの仕組みを知ろう &ndash; PHP基礎講座</a></p>

<p>```
&lt;?php
session_start();</p>

<p>if (isset($<em>SESSION[&ldquo;counter&rdquo;])) {
  $</em>SESSION[&ldquo;counter&rdquo;]++;
  print($<em>SESSION[&ldquo;counter&rdquo;].&ldquo;回目の読み込みです。&rdquo;);
} else {
   $</em>SESSION[&ldquo;counter&rdquo;] = 0;
  print(&ldquo;はじめての読み込みです。&rdquo;);
}
```</p>

<h3>1 Dyno</h3>

<p>まず、Dynoを１で。<br/>
これは順調に増えた。当然の結果。</p>

<h3>2 Dyno</h3>

<p>dynoを増やしてみる。<br/>
何度かリロードしていると、10回目くらいで「はじめての読み込みです。」という表示が登場。<br/>
それ以降、何回かごとに別々のカウント数が表示される状態に。</p>

<h3>セッションアフィニティ</h3>

<p>で、この2Dynoの状態でセッションアフィニティをオンに。</p>

<p><code>
$ heroku labs:enable http-session-affinity                                                    [ruby-2.1.2]
Enabling http-session-affinity for session-afinity-test... done
WARNING: This feature is experimental and may change or be removed without notice.
For more information see: https://devcenter.heroku.com/articles/session-affinity
</code></p>

<p>アクセスしてみる。<br/>
100になるくらいまでリロードしてみたが、正常にカウント出来たいたので、きちんと同一セッションを見にいっていると思う。</p>

<h3>注意</h3>

<p>ただし、herokuをdeployするとセッションが切れてしまうのは変わらないようなので注意が必要。<br/>
また、ベータ版の機能となるので、これに頼った実装はまだ早いと思われる。</p>

<h2>参考</h2>

<p><a href="https://blog.heroku.com/archives/2015/4/28/introducing_session_affinity">Heroku | Introducing Session Affinity</a><br/>
<a href="https://devcenter.heroku.com/articles/session-affinity">Heroku Labs: Session Affinity | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Herokuアドオン]TransloaditでAWS S3にアップロード]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/24/heroku-transloadit-3/"/>
    <updated>2015-04-24T12:41:32+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/24/heroku-transloadit-3</id>
    <content type="html"><![CDATA[<p>アップロードした動画をS3にエクスポートしてみた。</p>

<!-- more -->


<h2>AWS</h2>

<h4>バケットを作る</h4>

<p>まずはawsにてバケットを作る。</p>

<p><code>movie-upload-sample</code>で作った。<br/>
(アンダースコアを入れると怒られた)</p>

<p><img src="/images/2015/04/aws01.png" alt="" /></p>

<p><img src="/images/2015/04/aws02.png" alt="" /></p>

<h4>アクセスキーとシークレットキー</h4>

<p><img src="/images/2015/04/aws03.png" alt="" /></p>

<p><code>s3upload</code>で、作成した。</p>

<p><img src="/images/2015/04/aws04.png" alt="" /></p>

<p>作成後、アクセスキーとシークレットキーを確認できる。<br/>
CSVでもダウンロード化。</p>

<p><img src="/images/2015/04/aws05.png" alt="" /></p>

<p>ただし、シークレットアクセスキーを確認できるのはこの状態が最後らしく、そのまま閉じようとしたら警告された。</p>

<p><img src="/images/2015/04/aws06.png" alt="" /></p>

<p>確かに作成したユーザー情報を見ても確認は出来なかった。<br/>
忘れてしまったりした場合は再度アクセスキーの作成が必要なよう。<br/>
(セキュリティ的にはある程度の頻度で変更することがオススメされている)</p>

<p>次に権限を付与。<br/>
作成したユーザーをクリックして、アクセス許可 &ndash;> ポリシーのアタッチ、をクリック。</p>

<p><img src="/images/2015/04/aws07.png" alt="" /></p>

<p><code>AmazonS3FullAccess</code>を選択して、ポリシーのアタッチ。</p>

<p><img src="/images/2015/04/aws08.png" alt="" /></p>

<p>アタッチされた。</p>

<p><img src="/images/2015/04/aws09.png" alt="" /></p>

<p>これでS3にアップロードする準備が整った。</p>

<h2>Transloaditテンプレート</h2>

<p>作成したバケットやIAMの情報をテンプレートに埋め込んでいく。<br/>
その時、アップするpathを選択できる。</p>

<h3>path</h3>

<p>ドキュメントを見ていると、以下のようにするのが推奨？されていた。<br/>
<code>${previous_step.name}/${unique_prefix}/${file.id}.${file.ext}</code><br/>
出力例：<code>video-step-name/a8/d3eeeb67479f11f8b091b04f6181ad.png</code></p>

<p>とりあえずこのままアップロードしてみた。<br/>
アップロードしたテンプレートは以下。</p>

<pre><code>'params' =&gt; [
    'steps' =&gt; [
        'encode_video' =&gt; [
            'use' =&gt; ':original',
            'robot' =&gt; '/video/encode',
            'preset' =&gt; 'android'
        ],
        'thumb' =&gt; [
            'user' =&gt; 'encode_video',
            'robot' =&gt; '/video/thumbs',
            'count' =&gt; 1,
            'offsets' =&gt; [1],
            'width'=&gt; 100,
            'height'=&gt; 100,
        ],
        'export' =&gt; [
            'use' =&gt; ['encode_video', 'thumb'],
            'robot' =&gt; '/s3/store',
            'bucket' =&gt; 'movie-upload-sample',
            'key' =&gt; 'アクセスキー',
            'secret' =&gt; 'シークレットキー',
            'path' =&gt; '${previous_step.name}/${unique_prefix}/${file.id}.${file.ext}'
        ]
    ],
    'redirect_url' =&gt; $redirectUrl,
]
</code></pre>

<p>awsを見ると以下のようにアップロードされていた。</p>

<p><strong>動画</strong><br/>
<img src="/images/2015/04/aws10.png" alt="" /><br/>
<strong>サムネイル</strong><br/>
<img src="/images/2015/04/aws11.png" alt="" /></p>

<p>ユニーク、なのだが、<code>${unique_prefix}</code>が戻り値にも含まれておらず、アップロード側から知ることが出来ないっぽい。<br/>
<code>file.id</code>は、UUIDになっているとのことなのでユニークなよう。<br/>
これを利用して以下のようにする。</p>

<pre><code>${previous_step.name}/${file.id}.${file.ext}
</code></pre>

<p>これで以下の様なURLで参照出来るようになる。</p>

<pre><code>https://{bucket}.s3.amazonaws.com/movie-upload-sample/encode_video/{id}.mp4
https://{bucket}.s3.amazonaws.com/movie-upload-sample/thumb/{id}.jpg
</code></pre>

<p>ちなみに、エクスポートを使用した場合は、<br/>
transloaditの管理画面から処理済のファイルへのアクセスも、指定したS3へのファイルが参照されるようになるよう。<br/>
(S3だけでなく、FTPなどでも同様)</p>

<h2>全コード</h2>

<pre><code>&lt;?php

require 'vendor/autoload.php';

use transloadit\Transloadit;
$transloadit = new Transloadit([
    'key' =&gt; getenv('TRANSLOADIT_AUTH_KEY'),
    'secret' =&gt; getenv('TRANSLOADIT_SECRET_KEY')
]);

$response = Transloadit::response();
if ($response) {
    echo '&lt;h1&gt;Assembly status:&lt;/h1&gt;';
    echo '&lt;pre&gt;';
    print_r($response);
    echo '&lt;/pre&gt;';
    exit;
}

$redirectUrl = sprintf(
    'http://%s%s',
    $_SERVER['HTTP_HOST'],
    $_SERVER['REQUEST_URI']
);

echo $transloadit-&gt;createAssemblyForm([
    'params' =&gt; [
        'steps' =&gt; [
            'encode_video' =&gt; [
                'use' =&gt; ':original',
                'robot' =&gt; '/video/encode',
                'preset' =&gt; 'android'
            ],
            'thumb' =&gt; [
                'user' =&gt; 'encode_video',
                'robot' =&gt; '/video/thumbs',
                'count' =&gt; 1,
                'offsets' =&gt; [1],
                'width'=&gt; 100,
                'height'=&gt; 100,
            ],
            'export' =&gt; [
                'use' =&gt; ['encode_video', 'thumb'],
                'robot' =&gt; '/s3/store',
                'bucket' =&gt; 'movie-upload-sample',
                'key' =&gt; 'アクセスキー',
                'secret' =&gt; 'シークレットキー',
                'path' =&gt; '${previous_step.name}/${file.id}.${file.ext}'
            ]
        ],
        'redirect_url' =&gt; $redirectUrl
    ]
]);
?&gt;

&lt;!DOCTYPE html&gt;
&lt;html lang="ja"&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="container"&gt;
    &lt;h1&gt;Pick a video to encode for iPhone / Android.&lt;/h1&gt;
    &lt;form&gt;
        &lt;div class="form-group"&gt;
            &lt;label for="exampleInputFile"&gt;File input&lt;/label&gt;
            &lt;input name="example_upload" id="exampleInputFile" type="file"&gt;
            &lt;p class="help-block"&gt;Upload video, NOW.&lt;/p&gt;
        &lt;/div&gt;
        &lt;input type="submit" class="btn btn-danger btn-lg" value="Upload"&gt;
    &lt;/form&gt;
&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>余談</h2>

<p>ちなみに、transloaditのエンコードタイプには、プリセットでiPhoneとアンドロイドどちらも用意されているけれど、<br/>
今回試してみたところではどちらも同じ内容のようだった。<br/>
<code>ffmpeg</code>で読み込ませてみた内容は以下。<br/>
(videoとaudioだけ抽出)</p>

<pre><code>Stream #0:0(und): Video: h264 (Constrained Baseline) (avc1 / 0x31637661), yuv420p, 480x320, 523 kb/s, 25 fps, 25 tbr, 25 tbn, 50 tbc (default)
Stream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, mono, fltp, 82 kb/s (default)
</code></pre>

<h2>参考</h2>

<p><a href="https://transloadit.com/demos/video-encode/encode-for-iphone">Encode a video for the iPhone and strip sound | Transloadit</a><br/>
<a href="https://transloadit.com/demos/video-encode/encode-for-android">Encode a video for Android | Transloadit</a><br/>
<a href="https://transloadit.com/demos/s3-store/store-encoding-and-thumbnails">Encode a video, extract 8 thumbnails and store everything in your S3 bucket | Transloadit</a><br/>
<a href="http://joppot.info/2014/06/14/1621">awsのs3を操作する為のaccess keyとsecret keyを取得する(IAM)</a><br/>
<a href="https://transloadit.com/docs/conversion-robots/#export-to-amazon-s3-with-the-s3store-bot">Export to Amazon S3 with the /s3/store bot | Transloadit</a><br/>
<a href="https://transloadit.com/docs/#assembly-variables">#Assembly variables | Integration | Transloadit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuをデプロイするためにgitに空でコミットする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/21/git-allow-empty/"/>
    <updated>2015-04-21T11:14:17+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/21/git-allow-empty</id>
    <content type="html"><![CDATA[<p>小ネタ。<br/>
タイトル通り。</p>

<!-- more -->


<p>herokuはgitにてpushした時にのみ、deployが走る。<br/>
しかし、アドオンを追加した時など、ファイルの変更はないけれどデプロイだけしたい場合がたまにある。<br/>
そんな時にはファイルを無駄に少しだけ触ったりしていたのだけれど、空でコミット出来る事が出来ると知ったので、メモ。</p>

<pre><code>$ git commit -m "for deploy heroku" --allow-empty
</code></pre>

<p>これでコミットしておいてpushすると無事、デプロイ出来る。</p>

<p>以下、検証。</p>

<pre><code>$ git push heroku master
Everything up-to-date
$ git commit -m "for deploy heroku" --allow-empty
[master 069260f] for deploy heroku
$ git push heroku master
Counting objects: 1, done.
Writing objects: 100% (1/1), 190 bytes | 0 bytes/s, done.
.....
  0022947..069260f  master -&gt; master
</code></pre>
]]></content>
  </entry>
  
</feed>
