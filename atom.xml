<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-02-16T22:30:10+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[htaccessによるリダイレクト設定]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/16/redirect-htaccess/"/>
    <updated>2015-02-16T22:16:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/16/redirect-htaccess</id>
    <content type="html"><![CDATA[<p><code>.htaccess</code>を使ったリダイレクトをやってみたメモです。</p>

<!-- more -->


<p>設定内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine on
</span><span class='line'>RewriteBase /
</span><span class='line'>RewriteRule .* リダイレクト先URL [R=301,L]</span></code></pre></td></tr></table></div></figure>


<p>これを設置した場所と、<code>RewriteBase</code>の有効な範囲なんかの関係がややこしかったです。</p>

<p>まず、<code>RewriteBase</code>は、参考サイトによると、<br/>
<strong>リダイレクト後のパスにのみ適用</strong>される、との事。<br/>
さらに、<strong>相対パスの時にしか適用されない</strong>。</p>

<p>それと、設置したディレクトリからの相対パスになるので、<br/>
上記の設定だと、設置したディレクトリ以下全てのURLがリダイレクトされます。<br/>
これをドキュメントルートに置くと全てのパスでリダイレクトされます。</p>

<p>htaccessはディレクトリ単位で個別に置けるため、特定のディレクトリだけに適応させる場合は、<br/>
上記の設定をすれば適応出来ます。</p>

<h3>参考</h3>

<p><a href="http://kana-lier.com/web/redirect/">.htaccessを使ったよく使うリダイレクトまとめ</a><br/>
<a href="http://www.cherrypieweb.com/weblog/technical/20131017121752.php">.htaccessによるリダイレクト徹底解説</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]githubから自動でherokuにデプロイ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/10/heroku-github-sync/"/>
    <updated>2015-02-10T17:50:51+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/10/heroku-github-sync</id>
    <content type="html"><![CDATA[<p>ベータ版だったherokuとgithubの同期が正式リリースされたようです。<br/>
<a href="https://blog.heroku.com/archives/2015/2/6/heroku_github_integration">Ship Code Faster: Announcing GitHub Integration GA</a></p>

<!-- more -->


<p>ベータ版の段階からあったかもなのですが、githubにプッシュしたら自動でherokuにデプロイ出来るようなので、試してみました。</p>

<h2>Githubにリポジトリを作成</h2>

<p>まずは同期させるためにリポジトリを作成します。<br/>
すでにherokuにあるアプリを同期させる場合は、同じファイルをgithubにアップしておく必要があります。</p>

<h2>Herokuでの設定</h2>

<p>同期させたいアプリを開いたら、<code>deploy</code>のページへアクセス<br/>
<img src="http://kayakuguri.github.io/images/2015/02/github-heroku01.jpg" alt="deployへ" /></p>

<p>Githubを選択<br/>
<img src="http://kayakuguri.github.io/images/2015/02/github-heroku02.jpg" alt="Github" /></p>

<p><code>Connect to Github</code>をクリック</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku03.jpg" alt="Connect to Github" /></p>

<p>許可を求められるので、許可。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku04.jpg" alt="認証" /></p>

<p>すると、リポジトリを選択出来るようになる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku05.jpg" alt="リポジトリ選択" /></p>

<p><code>heroku</code>で検索した結果。今回はサンプルで作った、<code>heroku-deploy-test</code>のリポジトリを選択。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku06.jpg" alt="リポジトリ検索" /></p>

<p>紐づくとこんな感じ。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku07.jpg" alt="連携済" /></p>

<p>連携済の表示の下に、自動でデプロイさせたいブランチを選択する画面と、<br/>
手動で特定のブランチをデプロイさせる画面があります。<br/>
今回は<code>master</code>ブランチを選択して自動デプロイを有効にしてみます。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku08.jpg" alt="automatic deploys" /></p>

<p>結果。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku09.jpg" alt="automatic deploys" /></p>

<h2>deploy</h2>

<p>で、実際にgithubの指定したリポジトリにpushしてみると、<br/>
裏っかわでheorkuにデプロイが走ります。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku10.jpg" alt="heroku deploy" /></p>

<p>しばらく待つと、デプロイが成功。見事連携されました。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku11.jpg" alt="deploy success" /></p>

<h2>その他</h2>

<p>CIツールを導入して、そのCIを通ったらherokuにデプロイ、という流れも出来るようで、<br/>
herokuがgitでのソース管理とはいえ、ソースの管理自体はやりにくかった点をgithub連携することでカバー出来そうです。</p>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/github-integration">ドキュメント</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]One-Off DynoでPHPをバックグラウンドで動作させる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/05/one-off-dyno-excute-php/"/>
    <updated>2015-02-05T15:04:19+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/05/one-off-dyno-excute-php</id>
    <content type="html"><![CDATA[<p>バッチ処理なんかを動作させるためにバックグラウンドでPHPを起動する方法を調べてみた。</p>

<!-- more -->


<h2>PHPをコマンドから実行</h2>

<p>PHPをコマンドラインから実行させるには以下。</p>

<pre><code>$ php hogehoge.php
</code></pre>

<h2>dynoについて</h2>

<p>dynoの種類なんかについては以下がすごくわかりやすかった。</p>

<p><a href="http://codezine.jp/article/detail/8344">構築・運用の必須知識！  Herokuアプリケーションの実行プラットフォーム「Dyno」を徹底的に理解する
（1/3）：CodeZine</a></p>

<h2>One-off dynoの起動</h2>

<p>今回使用するのは、One-off dyno。<br/>
これを起動させる方法は2種類あって、<br/>
一つは、<a href="https://addons.heroku.com/scheduler">Heroku Scheduler</a>のアドオンを入れて、<br/>
そこから定期的に実行させる方法。<br/>
実際にバッチ処理をさせる場合はここに登録する。<br/>
冒頭のPHPを起動させるコマンドをそのまま登録する。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/heroku_background02.jpg" alt="Heroku Scheduler" /></p>

<p>実行されたログは<a href="https://addons.heroku.com/papertrail">papertrail</a>上だと以下のような形となる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/heroku_background01.jpg" alt="papertrail" /></p>

<p>もう一つはコマンドラインからの実行。<br/>
これだと任意のタイミングですぐに実行出来るので待たなくてよい。<br/>
<code>heroku run</code>で、herokuでコマンドを実行出来る。<br/>
以下、コマンド。</p>

<pre><code>$ heroku run 'php hogehoge.php'
</code></pre>

<p>コマンドで実行した場合は、ターミナルに標準出力した結果や、<code>echo</code>された内容なんかがそのまま返ってくる。<br/>
(エラーが出てればわかる)</p>

<h2>メリット</h2>

<p>通常のWeb dynoの場合、リクエストしてからレスポンスがあるまでに30秒以上かかってしまうと、タイムアウトが発生し、<br/>
heroku側がエラーページを返してしまう。<br/>
この設定はこちら側ではどうやっても変更不可能なよう。<br/>
しかし、One-off dynoやworker dynoを使用してバックグラウンド実行させた場合はこの限りではなく、<br/>
処理によるタイムアウトはない。<br/>
なので、重いファイルや重い処理も可能。</p>

<p>後は、このアプリをバッチだけに限定して使用する場合、web dynoをゼロにしてしまえる。<br/>
ブラウザからのアクセスが出来なくなるが、バッチの性質上、不要。むしろアクセス出来ない方が都合がよい。<br/>
値段も安くすむ(もしくは無料)し。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/heroku_background03.jpg" alt="web dynoがゼロ" /></p>

<h2>参考</h2>

<p><a href="https://github.com/herokaijp/devcenter/wiki/one-off-dynos">one off dynos · herokaijp/devcenter Wiki · GitHub</a><br/>
<a href="http://pc-karuma.net/xampp-php-shell/">コマンドラインからPHPを実行 &ndash; XAMPPの使い方 &ndash; PC設定のカルマ</a><br/>
<a href="http://codezine.jp/article/detail/8344">構築・運用の必須知識！  Herokuアプリケーションの実行プラットフォーム「Dyno」を徹底的に理解する
（1/3）：CodeZine</a><br/>
<a href="http://bokukoko.hatenablog.com/entry/2014/09/25/Heroku_%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%81%9F_%26_%E7%BF%BB%E8%A8%B3">Heroku のタイムアウトについて調べた &amp; 翻訳 &ndash; ボクココ</a></p>

<h2>公式ドキュメント類</h2>

<p><a href="https://devcenter.heroku.com/articles/one-off-dynos">One-Off Dynos</a><br/>
<a href="https://devcenter.heroku.com/articles/procfile">Process Types and the Procfile</a><br/>
<a href="https://devcenter.heroku.com/articles/background-jobs-queueing">Worker Dynos, Background Jobs and Queueing</a><br/>
<a href="https://devcenter.heroku.com/articles/scheduler">Heroku Scheduler</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]PHPでpapertrailに標準出力で文字列を出力する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/05/papertrail-php-stdout/"/>
    <updated>2015-02-05T11:30:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/05/papertrail-php-stdout</id>
    <content type="html"><![CDATA[<p>herokuでログを見るには、papertrailが基本かと思います。<br/>
そのpapertrailにPHPから任意の文字列を出力するには標準出力を使う、との事で試してみました。</p>

<!-- more -->


<p>方法は以下の通り。</p>

<pre><code>$stdout= fopen( 'php://stdout', 'w' );
fwrite( $stdout, "hello world to stdout\n" );
</code></pre>

<p>結果はこんな感じ。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/php-stdout.jpg" alt="papertrail" /></p>

<p>PHP部分は参考サイトのママです。ありがとうございます。</p>

<p>あと、まとめて以下でも書けるよう。</p>

<pre><code>fputs(STDOUT, "hello world to stdout\n");

//エラーの場合
fputs(STDERR, "some error");
</code></pre>

<h3>参考</h3>

<p><a href="http://nanoappli.com/blog/archives/5212">[PHP]標準エラー出力、標準出力に文字列を出力する</a><br/>
<a href="http://php.net/manual/ja/function.fputs.php">fputs PHPマニュアル</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[slackにて入力中にエンターキーを押しても送信しないようにする方法]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/02/slack-sending-enterclick/"/>
    <updated>2015-02-02T11:53:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/02/slack-sending-enterclick</id>
    <content type="html"><![CDATA[<p><a href="https://slack.com/">slack</a>、便利ですよね。<br/>
ただし、入力中に改行を入れようとすると、(macの場合) <code>alt+Enter</code>を押さないといけません。<br/>
ミスるとたちまち送信されてしまいます。<br/>
変換の決定でエンターを押したつもりが、英語モードになっていて送信、ということはよくあります。<br/>
なので、エンターキーを押しても送信しないように出来るかを調べてみました。</p>

<!-- more -->


<p>結論から言うと、設定レベルでそういうのはなかったです。<br/>
ですが、なんとか代替になりそうなものはあったので紹介です。</p>

<p>マークダウン形式での記述でよくあるのですが、&#8220;`、と点？を３つ繋げると、それ以降はコードとして認識させる事が出来ます。<br/>
その中での記述はタグであってもそのまま表示されます。<br/>
slackでもそれが出来るようで、入力欄で点を３つ繋げて挟むとその中身はコードとして表示されます。<br/>
それを利用して、点３つの間はエンターキーで投稿させない、という設定があったので、<br/>
それを使って誤送信を防ぐ、というちょっと回りくどいやり方です。</p>

<p>設定は、左下の名前の横からメニューを出して、<code>Preferences</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/slack_enter03.jpg" alt="メニュー" /></p>

<p>その中の、<code>Advanced Optons</code>の、<code>When typing code……</code>のチェックを入れる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/slack_enter00.jpg" alt="Adovanced Options" /></p>

<p>これでエンターキーを押しても(コード記述中は)送信されなくなります。<br/>
具体的には、以下のように入力していれば、送信されません。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/slack_enter01.jpg" alt="入力例" /></p>

<p>これをもう一度点々を入力してエンターキーを押すと、以下のように投稿されてしまいます。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/slack_enter02.jpg" alt="コードとして投稿" /></p>

<p>なので、通常の文章であれば、先頭に点々をつけて書き出し、<br/>
投稿する文章が完成したら、先頭の点々を消して、エンターキー→投稿、とすればよいと思います。<br/>
ちょっと手間がかかりますが、誤送信するよりは、、、といったところでしょうか…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Herokuアドオン]PostgreSQL Studio]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/01/29/postgresql-studio/"/>
    <updated>2015-01-29T11:30:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/01/29/postgresql-studio</id>
    <content type="html"><![CDATA[<p>herokuのアドオン、「PostgreSQL Studio」を入れてみた。</p>

<!-- more -->


<p><img src="http://kayakuguri.github.io/images/2015/01/postgresqlStdio00.jpg" alt="postgresql studio" /></p>

<h2>概要</h2>

<p>自身のアカウントで管理しているアプリ内に導入されているPostgreSQLの情報を閲覧、管理出来るアドオン。</p>

<h2>インストール</h2>

<p>導入は無料で行えます。<br/>
というか、無料バージョンしか存在していません。</p>

<pre><code>$ heroku addons:add pgstudio
</code></pre>

<h2>承認</h2>

<p>herokuのアプリページでアドオンをクリックするとアドオンのトップページへ遷移出来る。<br/>
PostgreSQL Studioのトップへインストール後に遷移すると、以下のような承認画面が出る。</p>

<p><img src="http://kayakuguri.github.io/images/2015/01/postgresqlStdio01.jpg" alt="authorize" /></p>

<p>内容は、</p>

<blockquote><p>Read-only access to all of your apps and resources, excluding account information. Includes configuration variables, which may include runtime secrets.</p></blockquote>

<p>あなたのアカウント情報を除く全てのアプリに読み取り専用の権限を許可します。<br/>
そこには、設定情報やランタイム情報も含まれます。</p>

<p>と、アドオンを入れるのは一つのアプリなのに、<strong>全ての</strong>アプリへの接続許可を求められます。<br/>
この権現の編集は、自身のアカウントページから行えます。<br/>
<a href="https://dashboard.heroku.com/account">https://dashboard.heroku.com/account</a></p>

<p><img src="http://kayakuguri.github.io/images/2015/01/postgresqlStdio04.jpg" alt="承認設定" /></p>

<p>というのも、自身が管理しているアプリにインストールしている全てのPostgreSQLのデータをこれで管理出来るため、この権現が必要なようです。</p>

<h2>データ閲覧</h2>

<p>承認してアクセスすると、閲覧したいDBの選択画面になるので、任意のものを選択し、Loginします。</p>

<p><img src="http://kayakuguri.github.io/images/2015/01/postgresqlStdio02.jpg" alt="login" /></p>

<p>ログインすると、そのDBの情報を見たり、クエリを実行したり、などが出来ます。</p>

<p><img src="http://kayakuguri.github.io/images/2015/01/postgresqlStdio03.jpg" alt="db情報" /></p>

<p>テーブルの構造はそのままで見ることができるが、データの中身は、SQLを発行しないと見られないよう。</p>

<p><img src="http://kayakuguri.github.io/images/2015/01/postgresqlStdio05.jpg" alt="レコード内容" /></p>

<h2>まとめ</h2>

<p>ローカルにアプリをインストールしたり、自前でphpPGAdminを入れたりせずともアドオンさえ入れていればよいので、すごく楽。<br/>
ただし、全アプリへのアクセス権限が必要になる＝全てのアプリのデータが閲覧可能、というのは少し怖い。<br/>
アプリごとの承認ならいいのだけれど。<br/>
なので、実質は自分のアカウント内のどれかのアプリに一つだけ入れておけばよいことになる。<br/>
あと、ベータ版なので、動作の不具合や終了などがありえる。</p>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/pgstudio">公式ドキュメント</a><br/>
<a href="https://addons.heroku.com/pgstudio">アドオンページ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrantの起動時のシェルスクリプトのメモ。composerとpostgresql9.3]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/01/28/vagrant-shell-composer-postgresql/"/>
    <updated>2015-01-28T14:33:11+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/01/28/vagrant-shell-composer-postgresql</id>
    <content type="html"><![CDATA[<p>調べて組み込んだので具体的なコードをメモ。</p>

<!-- more -->


<h3>Composer</h3>

<pre><code># Composer
curl -sS https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/composer
</code></pre>

<h3>PostgreSQL 9.3</h3>

<p>centOS6に標準で入っているPostgreSQLは8.3。<br/>
なので、9.3を指定して入れる。</p>

<pre><code># postgresql
# 9.3
rpm -ivh http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-centos93-9.3-1.noarch.rpm
yum -y install postgresql93-server
if [ ! -f /var/lib/pgsql/9.3/data/postgresql.conf ]; then
    su postgres -c '/usr/pgsql-9.3/bin/initdb --no-locale -D /var/lib/pgsql/9.3/data'
    if [ -f /vagrant/postgresql.conf ]; then
        cp -a /vagrant/postgresql.conf /var/lib/pgsql/9.3/data/
    fi
fi
/sbin/service postgresql-9.3 restart
/sbin/chkconfig postgresql-9.3 on
</code></pre>

<h3>参考</h3>

<p><a href="http://www.slideshare.net/shin1x1/vagrant-php">Vagrant で作る PHP 開発環境 [実践編]</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitにて以降はこのファイルは変更に含めない指定]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/01/28/git-skip-worktree/"/>
    <updated>2015-01-28T14:27:07+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/01/28/git-skip-worktree</id>
    <content type="html"><![CDATA[<p>一度gitにてpushはしたけれど、それ以降は変更を無視する(ローカルとサーバーで内容が違うファイルをなる)設定。<br/>
いつも忘れるのでメモ。</p>

<!-- more -->


<p><code>gitignore</code>だと一度pushしてしまっているので効かない。<br/>
こんな時は、<code>skip-worktree</code>を使うそう。</p>

<pre><code>$ git update-index --skip-worktree スキップしたいファイル名
</code></pre>

<p>これを実行すると以降は指定したファイルの変更は検知されない(commitされない)<br/>
解除するには以下。</p>

<pre><code>$ git update-index --no-skip-worktree スキップしてたファイル名
</code></pre>

<h4>[参考]</h4>

<p><a href="http://qiita.com/usamik26/items/56d0d3ba7a1300625f92">既に git 管理しているファイルをあえて無視したい &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heroku Postgresデータベースのデータのバックアップをダウンロードする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/01/21/create-download-pgbackup/"/>
    <updated>2015-01-21T10:39:44+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/01/21/create-download-pgbackup</id>
    <content type="html"><![CDATA[<p>HerokuのPostgresデータベースのバックアップデータをダウンロードする方法。<br/>
いくつかコマンド叩くだけでした。</p>

<!-- more -->


<h3>アドオンのインストール</h3>

<p>何はともあれ、<code>PG Backup</code>のアドオンが必要です。<br/>
インストール方法は以下。</p>

<pre><code>$ heroku addons:add pgbackups
</code></pre>

<h3>バックアップの作成</h3>

<p>バックアップの作成は以下のコマンドで。</p>

<pre><code>$ heroku pgbackups:capture
</code></pre>

<p>現在保持しているバックアップの一覧は以下で確認出来ます。</p>

<pre><code>$ heroku pgbackups
ID   | Backup Time         | Size  | Database
-----+---------------------+-------+------------------------
a226 | 2012/02/22 20:02.19 | 5.3KB | DATABASE_URL
a227 | 2012/02/23 20:02.19 | 5.3KB | DATABASE_URL
b251 | 2012/02/24 16:08.02 | 5.3KB | HEROKU_POSTGRESQL_BLACK
b252 | 2012/02/24 16:08.53 | 5.3KB | HEROKU_POSTGRESQL_PINK
</code></pre>

<h3>バックアップURLの確認</h3>

<p>バックアップされているファイルのURLは以下で確認できます。</p>

<pre><code>$ heroku pgbackups:url
</code></pre>

<p>Amazon S3のURLが表示されます。<br/>
これは、直近のバックアップ分を参照しますが、過去分の場合はIDを指定します。</p>

<pre><code>$ heroku pgbackups:url ID
</code></pre>

<h3>ファイルのダウンロード</h3>

<p><code>curl</code>を使ってダウンロードします。(wgetでもいいです)</p>

<pre><code>$ curl -o latest.dump `URL`
</code></pre>

<h3>ダウンロードしたファイルをローカルのDBにインポート</h3>

<p>以下の<code>pg_restore</code>コマンドでインポート出来る。</p>

<pre><code>$ pg_restore --verbose --clean --no-acl --no-owner -h myhost -U myuser -d mydb b001.dump
</code></pre>

<p>ちなみに、herokuのPostgresは、9.x系のようで、8.x系でpg_restoreしようとすると、バージョン違いで怒られました。</p>

<blockquote><p>pg_restore: [アーカイバ] ファイルヘッダ内のバージョン(1.12)はサポートされていません</p></blockquote>

<h3>参考</h3>

<p><a href="https://devcenter.heroku.com/articles/heroku-postgres-import-export">Importing and Exporting Heroku Postgres Databases with PG Backups</a><br/>
<a href="https://devcenter.heroku.com/articles/pgbackups">PG Backups</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]メモ&添付ファイルに添付されたファイルのURLを取得する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/12/25/get-attachment-url/"/>
    <updated>2014-12-25T11:21:42+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/12/25/get-attachment-url</id>
    <content type="html"><![CDATA[<p>オブジェクトの、「メモ＆添付ファイル」で添付されたファイルを公開URLを使用してダウンロードリンクを作成したい。</p>

<!-- more -->


<p>添付ファイルの名前などはSOQLで取得できるが、そのファイルへのリンクURLそのものは取得出来ない。<br/>
けれど、以下のURLを組み立てる事で、ダウンロードは出来るよう。</p>

<pre><code>https://cs6.salesforce.com/servlet/servlet.FileDownload?file=FILE_ID
</code></pre>

<p>これさえわかれば後は公開URLに適用させてやればよい。<br/>
その際に参照権限を与えておかないといけない。<br/>
その方法は以前書いた画像の表示とほぼ同じ。<br/>
<a href="http://kayakuguri.github.io/blog/2014/10/16/forcecom-sites-profile/">[Salesforce]リッチテキストエリアに保存された画像を一般公開する</a></p>

<p>まずは、サイトの設定から、</p>

<p><img src="http://kayakuguri.github.io/images/2014/12/attach01.jpg" alt="" /></p>

<p>表示ラベルをクリックして詳細を表示し、</p>

<p><img src="http://kayakuguri.github.io/images/2014/12/attach02.jpg" alt="" /></p>

<p>公開アクセス設定から、</p>

<p><img src="http://kayakuguri.github.io/images/2014/12/attach03.jpg" alt="" /></p>

<p>プロファイルの編集を選んで、</p>

<p><img src="http://kayakuguri.github.io/images/2014/12/attach04.jpg" alt="" /></p>

<p>添付ファイルをダウンロードさせたいオブジェクトの権限に参照を与えてやる。</p>

<p><img src="http://kayakuguri.github.io/images/2014/12/attach05.jpg" alt="" /></p>

<p>後は、項目レベルセキュリティの設定で個別な参照権限の設定が必要かと思ったが、これだけでいけた。</p>

<p>設定後は以下のようなアドレスになる。</p>

<pre><code>http://yourdomain.cs6.force.com/yoursite/servlet/servlet.FileDownload?file=FILE-ID
</code></pre>

<h3>参考</h3>

<p><a href="https://developer.salesforce.com/forums/ForumsMain?id=906F0000000AURkIAO">Trigger to get download link/url from attachments in salesforce?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuからgitのアップグレードを促されたので対応する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/12/24/git-update-for-mac/"/>
    <updated>2014-12-24T11:56:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/12/24/git-update-for-mac</id>
    <content type="html"><![CDATA[<p>コマンドからherokuを使おうと思うと、以下のようなメッセージが。</p>

<blockquote><p>Your version of git is 2.1.2. <br/>
Which has serious security vulnerabilities.<br/>
More information here: <a href="https://blog.heroku.com/archives/2014/12/23/update_your_git_clients_on_windows_and_os_x">https://blog.heroku.com/archives/2014/12/23/update_your_git_clients_on_windows_and_os_x</a></p></blockquote>

<p><a href="https://blog.heroku.com/archives/2014/12/23/update_your_git_clients_on_windows_and_os_x">Update Git clients on Windows and OS X</a><br/>
どうやらgitが古いとセキュリティ的に危ないから最新にしてね、という事のよう。</p>

<!-- more -->


<h3>確認</h3>

<p>現行の状態を確認。</p>

<pre><code>$ git --version
git version 2.1.2
</code></pre>

<h3>homebrewで</h3>

<p><code>homebrew</code>でもアップグレード出来るよ、とあったので、コマンドをググって叩いてみた。</p>

<pre><code>$ brew upgrade git
Error: git-2.1.2 already installed
</code></pre>

<p>しかし、すでに最新が入っている、と起こられてしまう。<br/>
まだ対応していないのかな？</p>

<h3>パッケージでインストール</h3>

<p>仕方ないので、直接gitのページからインストーラーをダウンロードして、<br/>
道なりに(いい表現)インストール。</p>

<p><a href="http://sourceforge.net/projects/git-osx-installer/files/">http://sourceforge.net/projects/git-osx-installer/files/</a></p>

<p>しかし、変わらない。。</p>

<h3>パスを変更</h3>

<p>ググるとこんなパスが違う、とうい情報が。<br/>
<a href="http://qiita.com/d_nishiyama85/items/d63da1e50405abc0929c">OSX で Git をバージョンアップする</a></p>

<p>というわけで、heroku toolebeltのパスが記載されていた、<code>.bashrc</code>に以下を追記。</p>

<pre><code>export PATH="/usr/local/git/bin:$PATH"
</code></pre>

<p>で、読み込みなおす。</p>

<pre><code>$ source ~/.bashrc
</code></pre>

<p>バージョン確認。</p>

<pre><code>$ git --version
git version 2.2.1
</code></pre>

<p>無事、アップグレード完了。<br/>
herokuコマンドを叩いても注意は出なくなりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HerokuからPHPでFTPにファイルをアップしてみる]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/12/16/heroku-php-ftp/"/>
    <updated>2014-12-16T19:10:31+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/12/16/heroku-php-ftp</id>
    <content type="html"><![CDATA[<p>herokuのPHPから、FTPプロトコルで接続し、<br/>
同じディレクトリにあるファイルをアップロードしてみた。</p>

<!-- more -->


<p><code>ftp_put</code>を使用するば、接続後にアップロードが出来るよう。<br/>
<a href="http://php.net/manual/ja/function.ftp-put.php">http://php.net/manual/ja/function.ftp-put.php</a></p>

<p>以下のPHPを書いて、herokuにアップしてみた。</p>

<pre><code>ini_set( 'display_errors', 1 );

$ftp_server = 'ホスト名';
$ftp_user_name = 'ユーザー名';
$ftp_user_pass = 'パスワード';

$file = 'somefile.txt';
$remote_file = '/ディレクトリ/readme.txt';

// 接続を確立する
$conn_id = ftp_connect($ftp_server);

// ユーザー名とパスワードでログインする
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

//パッシブモードをオンにする
ftp_pasv($conn_id, true);

// ファイルをアップロードする
if (ftp_put($conn_id, $remote_file, $file, FTP_ASCII)) {
 echo "successfully uploaded $file\n";
} else {
 echo "There was a problem while uploading $file\n";
}       

// 接続を閉じる
ftp_close($conn_id);
</code></pre>

<p>ローカルではこれで動いていたのだが、herokuにアップすると、以下のエラーが出て動作しなかった。</p>

<blockquote><p>Fatal error: Call to undefined function ftp_connect() in /app/index.php on line 17</p></blockquote>

<p><code>phpinfo</code>で確認してみると、<code>FTP support</code>がなかったので、これでエラーが出ていたよう。<br/>
<a href="http://d.hatena.ne.jp/kasahi/20090206/1234198797">http://d.hatena.ne.jp/kasahi/20090206/1234198797</a></p>

<h3>追記</h3>

<p><code>FTP support</code>は、composerの設定で後から追加できた。<br/>
<code>composert.json</code>に以下を記述してdeployするとFTPサポートが追加される。</p>

<pre><code>{
    "require": {
        "ext-ftp":"*"
    }
}
</code></pre>

<p>composerで追加できるオプションは以下にある。<br/>
<a href="https://devcenter.heroku.com/articles/php-support#extensions">https://devcenter.heroku.com/articles/php-support#extensions</a></p>

<p>追加した上で、1つ目のPHPを試してみると、無事、アップロードできました。</p>

<hr />

<p>他に方法がないか探してみると、どうやら、<code>CURL</code>でも出来る、とのこと。<br/>
<a href="http://d.hatena.ne.jp/calpo/20110216/p1">PHPでPASV(passiveモード)なFTP</a></p>

<p>以下を書いてherokuにアップしてみたところ、無事、アップロードされた。</p>

<pre><code>$remote_file = 'ftp://ユーザー:パスワード@ホスト名/ディレクトリ/readme.txt';
$local_file = 'somefile.txt';

try{
    $fp = fopen($local_file, "r");
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_FTP_USE_EPSV, false);
    curl_setopt($ch, CURLOPT_UPLOAD, true);
    curl_setopt($ch, CURLOPT_URL, $remote_file);
    curl_setopt($ch, CURLOPT_INFILE, $fp);
    curl_setopt($ch, CURLOPT_INFILESIZE, filesize($local_file));
    curl_exec($ch);
    curl_close($ch);
    echo 'success';
} catch (Exception $e) {
    var_dump($e);
}
</code></pre>

<h3>参考URL</h3>

<p><a href="http://loumo.jp/wp/archive/20090813164314/">PHP の cURL を使って FTP を行う。</a></p>

<p>ライブラリもあったけど、未検証<br/>
<a href="https://github.com/dg/ftp-php">FTP for PHP</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[selesforce]Chatter系プロファイルのレコードタイプを変更する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/12/12/disable-recode-type-chatteruser/"/>
    <updated>2014-12-12T16:58:54+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/12/12/disable-recode-type-chatteruser</id>
    <content type="html"><![CDATA[<p>レコードタイプの削除時に、chatter系のユーザープロファイルがデフォルトの設定になっているため、無効に出来ない。<br/>
その解決方法のキャンペーンメンバーオブジェクト版。</p>

<!-- more -->


<p>今回はちょっと特殊なキャンペーンメンバーオブジェクトでの説明。</p>

<p>以下のように無効にしようとしてもエラーが出てしまう。</p>

<p><img src="http://kayakuguri.github.io/images/2014/12/inactive_recodetype00.jpg" alt="エラー" /></p>

<p>各プロファイルのデフォルトのレコードタイプの選択はプロファイルの設定画面から編集が可能。</p>

<p><img src="http://kayakuguri.github.io/images/2014/12/inactive_recodetype01.jpg" alt="レコード選択" /></p>

<p>ただし、chatter系のユーザーは、そもそもこの画面へ遷移する方法がない。</p>

<p><img src="http://kayakuguri.github.io/images/2014/12/inactive_recodetype02.jpg" alt="chatter系プロファイル" /></p>

<p>じゃあ、どうするかというと、各プロファイルのレコードタイプの変更ページはURLの形式が決まっており、<br/>
そこでユーザーのIDの指定を変えてやれば直接遷移が可能だった。</p>

<p>キャンペーンメンバーのURLはコピペすると以下のようになっている。</p>

<blockquote><p><a href="https://cs5.salesforce.com/setup/ui/profilerecordtypeedit.jsp?id=">https://cs5.salesforce.com/setup/ui/profilerecordtypeedit.jsp?id=</a>[<strong>プロファイルのID</strong>]&amp;tid=CampaignMember&amp;pn=<br/>
02.%25E5%258A%2587%25E5%25A0%25B4%25E3%2582%25B9%25E3%2582%25BF<br/>
%25E3%2583%2583%25E3%2583%2595%25E7%2594%25A8<br/>
&amp;retURL=%2F00eO0000000DwhR</p></blockquote>

<p>ここで、<code>プロファイルのID</code>と書いた部分に、変更したいプロファイルのIDを直接書いてやればOK。<br/>
以下のように接続できる。</p>

<p><img src="http://kayakuguri.github.io/images/2014/12/inactive_recodetype03.jpg" alt="レコード選択" /></p>

<p>これで、変更してやればOK。<br/>
公式のヘルプページだと、カスタムオブジェクトでの説明だったので、ちょっとハマった。</p>

<h3>参考</h3>

<p><a href="https://help.salesforce.com/apex/HTViewSolution?id=000181693&amp;language=ja">レコードタイプの削除時に Chatter 関連プロファイルに指定されたレコードタイプを外す方法</a><br/>
<a href="http://tyoshikawa1106.hatenablog.com/entry/2014/01/30/004636">SFDC：レコードタイプを無効にする際にハマった話</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]標準画面でVFからポーリング処理をJSのリロードで実現する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/12/12/reload-vf-iframe/"/>
    <updated>2014-12-12T15:40:08+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/12/12/reload-vf-iframe</id>
    <content type="html"><![CDATA[<p>やりたかった事としては、カスタムオブジェクトの詳細画面に、VisualForceで地図を表示させ、<br/>
そのVF内のJSからリロード処理をsettimeoutとかで呼び出してポーリングさせるようにしたかった。</p>

<!-- more -->


<p>作成したVisualForceのページを詳細画面に埋め込む方法などは、以前に書いた記事を参考にどうぞ。</p>

<p><a href="http://kayakuguri.github.io/blog/2014/11/21/add-custom-vf-page/">[salesforce]オブジェクトの詳細ページに作成したVisualForceページを埋め込む</a></p>

<p>で、上記の方法でVisualForceに埋め込むわけだけれど、そのままそのVisualForce内からJSでリロード処理を書くと、上手く動作しない。<br/>
原因は、埋め込まれたVisualForceは標準画面から見るとiframeとなっており、しかもその中身は別のドメインとなっている。<br/>
なので、子ページが別ドメインの親ドメインをリロードしようとしてクロスドメインのエラーが発生していた、というわけ。</p>

<p>例えば、詳細ページのURLが以下のようになっている場合、</p>

<blockquote><p><a href="https://cs6.salesforce.com/xxxxIDxxxx">https://cs6.salesforce.com/xxxxIDxxxx</a></p></blockquote>

<p>読み込まれているVFページのURLは以下のようになっていた。</p>

<blockquote><p><a href="https://c.cs6.visual.force.com/servlet/servlet.Integration?lid=xxxxVFIDxxxx&amp;ic=1">https://c.cs6.visual.force.com/servlet/servlet.Integration?lid=xxxxVFIDxxxx&amp;ic=1</a></p></blockquote>

<p>これはJSの仕様でクロスドメイン(オリジン)がダメなので、根本的に回避する手立てはない。</p>

<p>しかし、バッドノウハウ的に対応するならば、以下のように、同じドメインからリロードをかけるようにしてやれば回避できるよう。</p>

<ol>
<li><strong>静的リソース</strong>に、リロードするためだけのJSを埋め込んだファイルをアップしておく</li>
<li>VFページ上に非表示にしたiframeタグを記述しておく</li>
<li>リロードするタイミングでそのiframeに、1のファイルを表示させる</li>
<li>静的リソース内からリロードが走り、無事リロードが行われる</li>
</ol>


<p>現状では、標準ページのドメインと静的リソースの表示ドメインは同じなので動作する。<br/>
標準ページから見れば、孫からリロードを要求される形。</p>

<p>1.の中身は以下のような内容</p>

<pre><code>&lt;html&gt;&lt;head&gt;&lt;script&gt;parent.parent.location.reload();&lt;/script&gt;&lt;/head&gt;&lt;/html&gt;
</code></pre>

<p>これを、<code>OpenerReload</code>として静的リソースに登録しておく。<br/>
VF側のJSはこんな内容</p>

<pre><code>setTimeout(reloadAndClose, 60000);
function reloadAndClose() {
  var iframe = document.getElementById('iframe');
  var urlbase = 'https://cs6.salesforce.com';
  iframe.src = urlbase + '{!URLFOR($Resource.OpenerReload)}';
}
</code></pre>

<p>埋め込むiframeのタグ</p>

<pre><code>&lt;iframe src="about:blank" id="iframe" style="display:none;"&gt;&lt;/iframe&gt;
</code></pre>

<p>静的リソースがいつまで同じドメインでアクセスできるかわからないので、あまりオススメは出来ないけれど、他に方法がなさそう。<br/>
仕事でやる場合には避ける方が無難かもしれない。</p>

<h3>参考</h3>

<p><a href="http://blog.livedoor.jp/minoaw/archives/1654198.html">[Salesforce]標準画面からクロスドメインなVisualforce画面を開き、自分を更新させる : minoawのブログ</a><br/>
ほぼこのまんまです。ありがとうございます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apexのテストで変数部分にテストが通ってくれない時]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/12/02/apex-json-class-test/"/>
    <updated>2014-12-02T18:41:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/12/02/apex-json-class-test</id>
    <content type="html"><![CDATA[<p>きっと基本を理解してないんだと思いますが、単純な話でした。</p>

<!-- more -->


<p>JsonをGETで引き渡して、それをApexクラスにしてapex内で使用するべく、<br/>
apex2Jsonとして以下のようなクラスを作成していた。</p>

<pre><code>public class Json2Apex{
    public String user_id;
    public String dummy;

    public static Json2Apex parse(String json){
        return (Json2Apex) System.JSON.deserialize(json, Json2Apex.class);
    }
}
</code></pre>

<p>ちゃんとJSONには、<code>user_id</code>と<code>dummy</code>の値を持たせて変換させ、<br/>
その変数にもきっちりアクセスした状態でも、テストを走らせてみると、<br/>
<code>parse</code>メソッド部分しか通ってない。<br/>
全体の行数が少ないので、パーセンテージとしては、<strong>50%</strong>。<br/>
これでは他のリリースに影響が大なので、調べてみると、単純な事で、<br/>
<code>{get; set;}</code>をつけろ、ってだけだった。<br/>
以下のようにつける。</p>

<pre><code>public String user_id{get; set;}
public String dummy{get; set;}
</code></pre>

<p>これだけでテストコードも変更することなく通り、無事、100%を達成できました。</p>

<p>参考：<a href="http://salesforce.stackexchange.com/questions/10018/testing-apex-classes-created-by-jsontoapex">http://salesforce.stackexchange.com/questions/10018/testing-apex-classes-created-by-jsontoapex</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文字列をDatetime型に変換する時の注意点]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/12/01/apex-datetime-gmt/"/>
    <updated>2014-12-01T12:53:59+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/12/01/apex-datetime-gmt</id>
    <content type="html"><![CDATA[<p>apexにて、文字列からDatetime型に変更した際の注意点。</p>

<!-- more -->


<p>例えば、日本で作業してる場合は、<code>GMT+9</code>となり、標準時より9時間プラス、となる。<br/>
文字列からdatetime型に変更する際にはいくつか方法があるが、<code>valueOf</code>が簡単。<br/>
しかし例えば以下のようにすると意図しない時間が帰って来てしまう</p>

<pre><code>String test_str = '2014-12-1 05:30:18';
Datetime test_dt = Datetime.valueOf(test_str);
System.debug(test_dt);

//出力
// 2014-11-30 20:30:18
</code></pre>

<p>特に顕著な例だけど、月が変わってしまっている。<br/>
なぜかというと、Datetime型に変換する際に、(なぜか)GMTが考慮されて、標準時に戻して出力されるよう。<br/>
日本は+9時間なので、標準時は-9時間。<br/>
なので、指定した時間よりも９時間マイナスされた日時が返却される仕様。<br/>
このため、日付が変わり、その結果、月も変わってしまったという現象が起こる。<br/>
それを回避するにはちゃんとメソッドが用意されていて、<code>valueOfGmt</code>を使う。<br/>
これだと、設定しているGMTを使って(要するに入力された時間そのまま)、Datetimeを作成してくれる。</p>

<pre><code>String test_str = '2014-12-1 05:30:18';
Datetime test_dt = Datetime.valueOfGmt(test_str);
System.debug(test_dt);

//出力
// 2014-12-1 05:30:18
</code></pre>

<p>月まで変わると結構クリティカルだと思うので、要注意。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuアプリとdropboxのファイル同期]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/11/21/heroku-dropbox-sync/"/>
    <updated>2014-11-21T20:11:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/11/21/heroku-dropbox-sync</id>
    <content type="html"><![CDATA[<p>herokuがdropboxとの同期サービスをベータ版ですが開始したようです。<br/>
記事：<a href="https://blog.heroku.com/archives/2014/11/19/announcing_beta_dropbox_sync">https://blog.heroku.com/archives/2014/11/19/announcing_beta_dropbox_sync</a><br/>
ドキュメント：<a href="https://devcenter.heroku.com/articles/dropbox-sync">https://devcenter.heroku.com/articles/dropbox-sync</a></p>

<!-- more -->


<p>で、実際に試してみました。</p>

<p>herokuで作成しているアプリの、<code>code</code>からdropboxへの接続が出来ます。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/dropbox-test1.jpg" alt="" /></p>

<p>少し下に、<code>Connect to Dropbox</code>があるので、クリック。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/dropbox-test2.jpg" alt="" /></p>

<p>ログインして認証。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/dropbox-test3.jpg" alt="" />
<img src="http://kayakuguri.github.io/images/2014/11/dropbox-test4.jpg" alt="" /></p>

<p>認証すると、接続したdropboxの中にフォルダが作成され、そこにアプリ上のソースが一式同期されます。<br/>
<code>Dropbox/Apps/heroku/アプリ名</code>のフォルダが作成されます。</p>

<p>で、ここにある通り、ここからdropbox内のファイルを使ってdeploy出来ます。<br/>
メッセージを書いて<code>deploy</code>をクリックすると、書いたメッセージで、<code>commit</code>、<code>push</code>、<code>deploy</code>が実行されます。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/dropbox-test5.jpg" alt="" /></p>

<p>実行中</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/dropbox-test6.jpg" alt="" /></p>

<p>完了</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/dropbox-test7.jpg" alt="" /></p>

<p>git上でもコミットメッセージが反映されています。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/dropbox-test8.jpg" alt="" /></p>

<p>シュチエーションとしては、dropboxで同期したディレクトリを他の人とコラボして、<br/>
その人が更新したファイルをブラウザ上からdeploy出来る、みたいな感じかと。<br/>
それだと、コラボ相手はgitがいらないので。</p>

<p>dropboxとの接続サービスはいっぱいあるので、他にも組み合わせれば色々出来そう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]オブジェクトの詳細ページに作成したVisualForceページを埋め込む]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/11/21/add-custom-vf-page/"/>
    <updated>2014-11-21T12:14:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/11/21/add-custom-vf-page</id>
    <content type="html"><![CDATA[<p>ページレイアウトで追加するのですが、作成しないと選択肢に出てこないので少し悩みました。</p>

<!-- more -->


<p>今回は、サンプルオブジェクト、というオブジェクトを作成しました。<br/>
今は名前が表示されているだけです。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/custom_vf01.jpg" alt="詳細画面" /></p>

<p>で、レイアウトの編集画面に行ってみても、VisualForceページの追加タブはありません。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/custom_vf02.jpg" alt="タブがない" /></p>

<p>なのでまずは、作成したいオブジェクトをコントローラーに指定したpageを作成します。<br/>
ここでは、<code>hoge__c</code>というオブジェクトにします。<br/>
<code>standardController="hoge__c"</code>がポイントです。<br/>
内容は新規で作成したものママです。</p>

<pre><code>&lt;apex:page standardController="hoge__c"&gt;
&lt;!-- Begin Default Content REMOVE THIS --&gt;
&lt;h1&gt;Congratulations&lt;/h1&gt;
This is your new Page
&lt;!-- End Default Content REMOVE THIS --&gt;
&lt;/apex:page&gt;
</code></pre>

<p><img src="http://kayakuguri.github.io/images/2014/11/custom_vf03.jpg" alt="VFページ作成" /></p>

<p>で、再度、サンプルオブジェクトのレイアウト編集画面を見てみると、<br/>
見事、Visualforceページ、というタブが追加されています。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/custom_vf04.jpg" alt="タブがある" /></p>

<p>選択すると、先程作成したpageの名前が出てきます。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/custom_vf05.jpg" alt="ページの選択" /></p>

<p>これを、任意の場所にドラッグ＆ドロップすると、以下のように追加され、ページとして表示できます。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/custom_vf06.jpg" alt="レイアウトに追加" /></p>

<p>保存して詳細画面を確認すると、見事作成した文章が表示されました。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/custom_vf07.jpg" alt="追加完了" /></p>

<p>後はVFpageの中身をカスタマイズすれば好きなものを出す事が出来ます。<br/>
googlemapなんかも思いのまま。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/custom_vf08.jpg" alt="地図の表示" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Force.com IDE for Eclipse plug-inをインストール]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/11/13/force-dot-com-ide-for-eclipse/"/>
    <updated>2014-11-13T17:35:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/11/13/force-dot-com-ide-for-eclipse</id>
    <content type="html"><![CDATA[<p>いつのまにやらForce.com IDEの<a href="http://salesforce.stackexchange.com/questions/47653/where-can-i-get-a-standalone-version-of-the-force-com-ide">スタンドアロン版が開発終了してしまっているらしく</a>(未確認)、<br/>
仕方がないので、Eclipseのインストールからしてみました。</p>

<!-- more -->


<p>環境は、macのmavericks(10.9)です。</p>

<h2>Javaのインストール</h2>

<p>まずは、JAVAのバージョンを確認。<br/>
ターミナルからコマンドで確認できる。</p>

<pre><code>$ java -version
java version "1.6.0_65"
Java(TM) SE Runtime Environment (build 1.6.0_65-b14-462-11M4609)
Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04-462, mixed mode)
</code></pre>

<p>Force.com IDEは、</p>

<blockquote><p>Java SE Runtime Environment 6 (v1.6) or later</p></blockquote>

<p>となっているんだけど、7以上でないとダメなよう。<br/>
<a href="https://developer.salesforce.com/forums/?id=906F0000000AbEjIAK">https://developer.salesforce.com/forums/?id=906F0000000AbEjIAK</a><br/>
なので、以下から7をダウンロード。<br/>
<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a></p>

<p><img src="http://kayakuguri.github.io/images/2014/11/java01.jpg" alt="java" /></p>

<p>中ほどにあるリンクページから、<code>jdk-7u71-macosx-x64.dmg</code>をダウンロード。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/java02.jpg" alt="java download" /></p>

<p>ダブルクリックしてインストール開始。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/java03.jpg" alt="java インストール" /></p>

<p>特筆すべき事はなく、次、次、でOK。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/java04.jpg" alt="java インストール中" /></p>

<p>完了。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/java05.jpg" alt="java インストール完了" /></p>

<p>再度バージョンを確認。</p>

<pre><code>$ java -version
java version "1.7.0_71"
Java(TM) SE Runtime Environment (build 1.7.0_71-b14)
Java HotSpot(TM) 64-Bit Server VM (build 24.71-b01, mixed mode)
</code></pre>

<h2>Eclipseのインストール</h2>

<p>ググったら出てくる公式の日本語ページ最下部からインストールの解説ページへ。<br/>
<a href="https://developer.salesforce.com/page/JP:Force.com_IDE">https://developer.salesforce.com/page/JP:Force.com_IDE</a></p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide01.jpg" alt="force.com ide 解説" /></p>

<p><a href="https://developer.salesforce.com/page/JP:Force.com_IDE_Installation">https://developer.salesforce.com/page/JP:Force.com_IDE_Installation</a><br/>
Eclipseのダウンロードページへ。4.2でも4.3でもいい、との事なので、今回は4.3で。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide02.jpg" alt="インストール方法" /></p>

<p>飛び先のページで、<code>Eclipse IDE for Java Developers</code>をダウンロード。<br/>
自分はmacなので、mac64bit版をダウンロード。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide03.jpg" alt="eclipse ダウンロード" /></p>

<p>次のページでダウンロード開始。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide04.jpg" alt="eclipse ダウンロード" /></p>

<p>ダウンロードは自動で始まる。<br/>
(寄付してね！画面が表示されるけど、eclipse自体は無料で使える)</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide05.jpg" alt="eclipse ダウンロード" /></p>

<p>ダウンロードしたファイル(今回は、<code>eclipse-java-kepler-R-macosx-cocoa-x86_64.tar.gz</code>)をダブルクリックして解凍。<br/>
macの場合はインストールはなく、解凍して出来たファルダごと、アプリケーションフォルダに突っ込めばOK。<br/>
(別に入れなくても大丈夫なはず)</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide06.jpg" alt="アプリケーションフォルダへ" /></p>

<p>で、起動。<br/>
ただし、自分の環境(Mavericks)では起動が出来ず、壊れているという表記。<br/>
これは、Mountain Lionから導入されたGateKeeperによってApp Store以外からインストールしようとした場合に表示される警告、のよう。<br/>
いきなり実行ファイルがゴミ箱に捨てられるってのがなんともすごい。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide07.jpg" alt="起動失敗" /></p>

<p>以下を参考に、実行を許可して、改めて起動。<br/>
<a href="http://park1.wakwak.com/~ima/macosx_eclipse0001.html">[OSX]Mountain Lion(10.8)でEclipse4.3(kepler)を日本語化して使う | ごった煮 &ndash; tips about programming and building a server</a></p>

<p>警告は出るけど無視。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide08.jpg" alt="接続警告" /></p>

<p>最初にワークスペースを設定しろ、と言われるので、とりあえずデフォルトのままで起動する。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide09.jpg" alt="ワークスペース" /></p>

<p>起動後、welcomeスクリーンが表示されるが、とりあえずこのまま放置して、<br/>
上部のメニューから、Help &ndash;> Install New Software を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide10.jpg" alt="Install New Software" /></p>

<p>ネットワークの接続を許可して…、<br/>
あとは上記公式の解説ページ(英語)と同じ手順となりますが、<br/>
<code>Add…</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide11.jpg" alt="Add" /></p>

<p>Nameは適当に。<br/>
Locationに、<code>http://media.developerforce.com/force-ide/eclipse42</code>と入力。<br/>
OKをクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide12.jpg" alt="Addリポジトリ" /></p>

<p>結果が表示されるので、リストに表示された、<code>Force.com IDE</code>にチェックを入れ、<br/>
<code>Next</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide13.jpg" alt="インストール" /></p>

<p>ダウンロードされ、インストール準備完了。  <br/>
<code>Next</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide14.jpg" alt="ダウンロード完了" /></p>

<p>ライセンス情報が表示されるので、一通り目を通してから(通してから…)、<br/>
<code>I accept the terms of license agreements</code>にチェックを入れて、<code>Finish</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide15.jpg" alt="ライセンス" /></p>

<p>で、インストールが始まる。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide16.jpg" alt="インストール開始" /></p>

<p>インストール後、再起動が必要、との事なので<code>Yes</code>をクリックして、eclipseを再起動。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide17.jpg" alt="再起動" /></p>

<p>これでインストールは完了したわけだけれども、ウインドウ構成など見た目をForce.com仕様に変更する。<br/>
上部メニューの、Window &ndash;> Open Perspective &ndash;> Other を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide18.jpg" alt="Perspective" /></p>

<p>Force.comを選択して、OK。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide19.jpg" alt="Force.com選択" /></p>

<p>これで、Force.com IDEのインストールは完了。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide20.jpg" alt="完了！" /></p>

<h2>プロジェクトの作成</h2>

<p>作成は、スタンドアロン版と同じだった。<br/>
上部メニューから、File &ndash;> New &ndash;> Force.com Project を選択</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide21.jpg" alt="プロジェクトの作成" /></p>

<p>プロジェクトの名前と、環境のユーザ名、パスワード、セキュリティトークン(必要なら)と、環境を選択し、Finish。</p>

<p><img src="http://kayakuguri.github.io/images/2014/11/ide22.jpg" alt="接続情報" /></p>

<p>これで開発環境が整った。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]apex Rest APIでPOSTでデータを送信する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/10/27/apex-rest-post/"/>
    <updated>2014-10-27T18:49:51+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/10/27/apex-rest-post</id>
    <content type="html"><![CDATA[<p>getでは送信したデータはすぐに取得できたのですが、<br/>
postでの送信方法とデータ取得方法がわからずに迷走しまいした。<br/>
結論は、送信側の話、だったのですが。</p>

<!-- more -->


<p>GETの場合は以下のコードで取得可能でした。<br/>
簡単。</p>

<p>送信データ</p>

<pre><code>?userid=123&amp;name=hoge
</code></pre>

<p>apex</p>

<pre><code>@RestResource(urlMapping='/GetDataSample/test')

global with sharing class GetDataSampleAPI {
    @HttpGet
    global static String doGet(){
        RestRequest req = RestContext.request;
        String userid = req.params.get('userid');
        String name = req.params.get('hoge');
    }
}
</code></pre>

<p>実は、POSTの場合も、apexのコードは全く同じで取得する事が出来ました。<br/>
以下、取得出来たコードです。</p>

<pre><code>@RestResource(urlMapping='/GetDataSample/test')

global with sharing class GetDataSampleAPI {
    @HttpPost
    global static String doPost(){
        RestRequest req = RestContext.request;
        String userid = req.params.get('userid');
        String name = req.params.get('hoge');
    }
}
</code></pre>

<p>ただし、送信する際にヘッダーを正しく指定してやったり、送信形式に注意してやる必要がありました。<br/>
PHPのcurlで実装していたのですが、大いに迷走していたのは、salesforce側の話ではなく、<br/>
PHPでの送信方法の問題でしたとさ…。</p>

<p>送信出来たコード<br/>
(<a href="https://github.com/nkjm/Force.com-OAuth-Toolkit-for-PHP">このライブラリ</a>を使用して送信する前提)</p>

<pre><code>$url = "$oauth-&gt;instance_url/services/apexrest/GetDataSample/test";
$curl = curl_init($url);

$POST_DATA = array(
    'userid' =&gt; '123',
    'hoge' =&gt; 'fugafuga'
);

curl_setopt($curl, CURLOPT_POST, TRUE);
curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($POST_DATA));
curl_setopt($curl, CURLOPT_HEADER, false);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-type: application/x-www-form-urlencoded;charset=UTF-8', "Authorization: OAuth " . $oauth-&gt;access_token));

$output= curl_exec($curl);
curl_close($curl);
</code></pre>

<p>ポイントは以下の２つです。</p>

<p>１）<br/>
<code>Content-type</code>を、<code>application/x-www-form-urlencoded</code>という、POSTでデータを送信する際の標準タイプを指定しています。<br/>
通常はデフォルトでこれなのですが、salesforceのAPIにPOSTする場合は明示的に指定してやる必要があるようです。(たぶん)<br/>
ちなみに、apex restは、<code>multipart/form-data</code>タイプはサポートしていないようです。</p>

<p>２）<br/>
１のタイプで指定してやると、送信するデータは<code>userid=123&amp;hoge=fugafuga</code>のように、GETと同じ形で取得できるようになるようです。<br/>
なので送信する際にそのような形に変換してやる必要があるようで、それが以下の記述となります。</p>

<pre><code>curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($POST_DATA));
</code></pre>

<h3>参考</h3>

<p><a href="http://qiita.com/khirose/items/870ffec6ce4562f54c9d">PHP小ネタ &ndash; PHPのcurlでPOST &ndash; Qiita</a></p>
]]></content>
  </entry>
  
</feed>
