<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: salesforce | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/salesforce/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2017-10-30T10:35:52+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Visualforce] 必須チェックのエラー文言をカスタマイズする]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/08/22/custom-vf-error/"/>
    <updated>2017-08-22T15:11:17+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/08/22/custom-vf-error</id>
    <content type="html"><![CDATA[<p>前記事の続きで、<code>apex:inputField</code> を使わない場合のバリデーションエラーの表示方法を調べたメモ。<br/>
結局標準の表示では対応してくれないようなので、自前で実装することになった。</p>

<!-- more -->


<p><a href="http://kayakuguri.github.io/blog/2017/08/18/custom-selectlist-req/">前回</a>までで作成した状態はこちら。</p>

<p>```
&lt;apex:pageBlockSectionItem >
  &lt;apex:outputLabel value=&ldquo;都道府県&rdquo; for=&ldquo;prefcbx&rdquo;/>
  &lt;apex:outputPanel styleClass=&ldquo;requiredInput&rdquo; layout=&ldquo;block&rdquo;></p>

<pre><code>  &lt;apex:outputPanel styleClass="requiredBlock" layout="block"/&gt;
  &lt;apex:selectList value="{!pref__c}" id="prefcbx" size="1" required="true"&gt;
      &lt;apex:selectOptions value="{!options}"/&gt;
  &lt;/apex:selectList&gt;
</code></pre>

<p>  &lt;/apex:outputPanel>
&lt;/apex:pageBlockSectionItem>
```</p>

<p><img src="/images/2017/08/custom_selectlist02.jpg" alt="" /></p>

<h1>apex:message</h1>

<p>このまま空で送信しても内部的にはエラーとなり送信出来ないのだが、エラーの内容が表示されない。<br/>
そこで、<code>&lt;apex:message&gt;</code>を追加するとエラーは出るようになった。</p>

<p><code>
&lt;apex:message for="prefcbx" styleClass="errorMsg" /&gt;
</code></p>

<p>表示は以下。</p>

<p><img src="/images/2017/08/custom_error01.jpg" alt="" /></p>

<p>問題点は以下。</p>

<ul>
<li>エラー文言が英語</li>
<li>選択リストのボックスがエラー表示になってない(赤枠がない）</li>
</ul>


<h1>required=true</h1>

<p>この英語のエラーをローカライズして表示させる方法がわからなかった。(<code>lang</code>オプションを設定しても違うようだった）<br/>
なので、apex内で指定したエラー文言を表示させてやることに。</p>

<p><code>&lt;apex:inputField&gt;</code>タグなどに、<code>required=true</code>をつけると必須のチェックを自動で行ってくれるようになるのだが、このチェックは<code>form</code>の<code>action</code>で指定したメソッドなどの送信処理が走る前にチェックがされてしまうよう。<br/>
そのため、入力が空だった場合にはこのエラー文言を表示する、などカスタマイズしようにもすることが出来なかった。</p>

<p>よって、<code>required</code>を外してやる。<br/>
そうすると、必須のエラーも自分で検知してやらないといけなくなる。</p>

<p>```
if(String.isBlank(pref__c)){</p>

<pre><code>//必須エラー
</code></pre>

<p>}
```</p>

<p>そして<code>required=true</code>を外してしまうと、必須の赤い線が<code>apex:inputField</code>タグで表示されなくなってしまうため、全ての項目の必須表示を自前で実装してやる必要がある。</p>

<h1>addError()</h1>

<p>ちなみに、sObjectに<code>addError()</code>メソッドでエラーを追加してやると追加した文言がエラーとして表示されるようになる。<br/>
ただしこれも上記<code>required=true</code>が入っているとapexの処理が通らないため、<code>required</code>オプションは外しておく。</p>

<p><code>
pref__c.addError('入力して下さい。');
</code></p>

<p>上記のように追加すると、以下のように表示がされる。</p>

<blockquote><p><strong>エラー:</strong> 入力して下さい。</p></blockquote>

<h1>apex:outputText</h1>

<p>よって、普通のテキスト表示である、<code>apex:outputText</code>を利用してエラーの有無で出し分けをしてやる。<br/>
さらに、選択リストの部分には、<code>error</code>クラスをつけてやることでエラー表示の赤枠を出してやることが出来るため、エラー時のみ、クラスを<code>error</code>としてやることにする。</p>

<p>```
public String errorMessage{get;set;}
public String errorClass{get;set;}</p>

<p>public PageReference save(){</p>

<pre><code>if(String.isBlank(town.addr1_1name__c)){
    errorMessage = '都道府県を入力して下さい';
    errorClass = 'error';
}
</code></pre>

<p>}
```</p>

<p>これでようやく以下のように目的通りの表示が出来た。</p>

<p><img src="/images/2017/08/custom_error02.jpg" alt="" /></p>

<h1>結果</h1>

<p>最終的に標準と全く同じように必須のエラーを表示してやるように調整した場合、以下のようになった。</p>

<h3>apex</h3>

<p>```
public with sharing class CusotmSelectList_Sample {</p>

<pre><code>public CustomObject__c object{get;set;}
public String errorMessage{get;set;}
public String errorClass{get;set;}

public CusotmSelectList_Sample(ApexPages.StandardController controller) {
    object = new CustomObject__c();
}

/**
 * カスタム設定から都道府県のリストを取得する
 * @type List&lt;SelectOption&gt;
 */
public List&lt;SelectOption&gt; getOptions() {
  Map&lt;String, Prefectures__c&gt; prefs = Prefectures__c.getAll();
  List&lt;SelectOption&gt; options = new List&lt;SelectOption&gt;();
  options.add(new SelectOption('', '--なし--'));
  for(String key : prefs.keySet()){
      Prefectures__c pref_obj = prefs.get(key);
      options.add(new SelectOption(pref_obj.Label__c, pref_obj.Label__c));
  }
  return options;
}

public PageReference save(){
    if(String.isBlank(object.pref__c)){
        errorMessage = '&lt;strong&gt;エラー:&lt;/strong&gt; 値を入力してください';
        errorClass = 'error';
        return null;
    }

    insert object; //エラーがなければ保存
    return null; //完了画面とかに遷移させる
}
</code></pre>

<p>}
```</p>

<h3>VF Page</h3>

<p>```
&lt;apex:page showHeader=&ldquo;true&rdquo; sidebar=&ldquo;true&rdquo; title=&ldquo;作成&rdquo; standardController=&ldquo;CustomObject__c&rdquo; extensions=&ldquo;CusotmSelectList_Sample&rdquo;></p>

<pre><code>&lt;apex:sectionHeader title="レコードの作成" /&gt;
&lt;apex:form&gt;
    &lt;apex:pageBlock title="" mode="edit"&gt;

        &lt;apex:pageBlockButtons&gt;
            &lt;apex:commandButton action="{!save}" value="保存"/&gt;
        &lt;/apex:pageBlockButtons&gt;

        &lt;apex:pageBlockSection title="内容" columns="1"&gt;
            &lt;apex:pageBlockSectionItem &gt;
            &lt;apex:outputLabel value="都道府県" for="prefcbx"/&gt;
            &lt;apex:outputPanel styleClass="requiredInput" layout="block"&gt;
                &lt;apex:outputPanel styleClass="requiredBlock" layout="block"/&gt;
                &lt;apex:selectList value="{!object.pref__c}" id="prefcbx" size="1" styleClass="{!errorClass}"&gt;
                &lt;apex:selectOptions value="{!options}"/&gt;
                &lt;/apex:selectList&gt;
                    &lt;br /&gt;
                    &lt;apex:outputText value="{!errorMessage}" styleClass="errorMsg" rendered="{!LEN(errorMessage)&gt;0}" escape="false"/&gt;
            &lt;/apex:outputPanel&gt;
            &lt;/apex:pageBlockSectionItem&gt;
        &lt;/apex:pageBlockSection&gt;

    &lt;/apex:pageBlock&gt;
&lt;/apex:form&gt;
</code></pre>

<p>&lt;/apex:page>
```</p>

<h1>結果</h1>

<p>とりあえずこれで一つの項目で、必須表示〜エラー表示まで実装してやることが出来た。<br/>
ただし、複数項目で実現するためには項目の数だけエラー表示用の変数が必要になるため、クラスにするなど何かしら工夫しないとコードが冗長になりそう。<br/>
また、バリデーション用のコードもヘルパークラスに分けるなどした方がよいかもしれない。</p>

<h1>参考</h1>

<ul>
<li><a href="https://developer.salesforce.com/forums/?id=906F0000000AhwaIAC">&#12456;&#12521;&#12540;&#12513;&#12483;&#12475;&#12540;&#12472;&#12395;&#12388;&#12356;&#12390; &ndash; Salesforce Developer Community</a></li>
<li><a href="https://blog.freedom-man.com/forcecom_apexmessage/">apex:Messageの挙動について調べてみる</a></li>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.pages.meta/pages/pages_compref_message.htm">apex:message</a></li>
<li><a href="https://help.salesforce.com/articleView?id=000006300&amp;language=ja&amp;type=1">Visualforce 上のテキストボックスの下に、カスタムエラーメッセージを表示する方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Visualforce] カスタム設定から選択肢を設定し必須表示する]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/08/18/custom-selectlist-req/"/>
    <updated>2017-08-18T18:25:33+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/08/18/custom-selectlist-req</id>
    <content type="html"><![CDATA[<p>Visualforceページにて、選択リストをカスタム設定のリストから取得し、必須の赤いバーを表示させる方法。</p>

<!-- more -->


<p>今回は都道府県の設定をカスタム設定で設定しているとする。</p>

<ul>
<li>カスタム設定のAPI参照名 : <code>Prefectures__c</code></li>
<li>都道府県名を保存している項目名 : <code>Label__c</code></li>
<li>入力先の項目名 : <code>pref__c</code></li>
</ul>


<h1>カスタム設定の取得</h1>

<p>これは別で記事を書いているのでそちらをどうぞ。</p>

<p><a href="http://kayakuguri.github.io/blog/2016/02/01/custom-setting/">カスタム設定を作成して取得してみる &ndash; KayaMemo</a></p>

<p>こんな感じ。<br/>
これでVFページからは、 <code>{!options}</code>で呼び出せる。</p>

<p>```
public List<SelectOption> getOptions() {</p>

<pre><code>Map&lt;String, Prefectures__c&gt; prefs = Prefectures__c.getAll();
List&lt;SelectOption&gt; options = new List&lt;SelectOption&gt;();
options.add(new SelectOption('', '--なし--'));
for(String key : prefs.keySet()){
    Prefectures__c pref_obj = prefs.get(key);
    options.add(new SelectOption(pref_obj.Label__c, pref_obj.Label__c));
}
return options;
</code></pre>

<p>}
```</p>

<h1>選択リストに任意の値を設定</h1>

<p><code>apex:inputField</code>を使うと楽だが、それではその項目に設定されている選択肢しか表示できない。<br/>
(そもそも選択リスト型でないと選択リストにならない)</p>

<p>よって、<code>apex:selectList</code>を使うと設定可能。</p>

<p>```
&lt;apex:selectList value=&ldquo;{!pref__c}&rdquo; size=&ldquo;1&rdquo; multiselect=&ldquo;false&rdquo; required=&ldquo;true&rdquo;></p>

<pre><code>&lt;apex:selectOptions value="{!options}"/&gt;
</code></pre>

<p>&lt;/apex:selectList>
```</p>

<p>表示は以下のようになる。</p>

<p><img src="/images/2017/08/custom_selectlist01.jpg" alt="" /></p>

<h1>必須の表示</h1>

<p>上記画像からわかるように、<code>required="true"</code>を指定しているにも関わらず、SF標準の赤い線が出てくれない。<br/>
これは、<code>apex:inputField</code>を利用している時にしか自動で表示してくれないため、自分で設定してやる必要がある。<br/>
以下のようになる。</p>

<p>```
&lt;apex:pageBlockSectionItem ></p>

<pre><code>&lt;apex:outputLabel value="都道府県" for="prefcbx"/&gt;
&lt;apex:outputPanel styleClass="requiredInput" layout="block"&gt;
    &lt;apex:outputPanel styleClass="requiredBlock" layout="block"/&gt;
    &lt;apex:selectList value="{!pref__c}" id="prefcbx" size="1" required="true"&gt;
        &lt;apex:selectOptions value="{!options}"/&gt;
    &lt;/apex:selectList&gt;
&lt;/apex:outputPanel&gt;
</code></pre>

<p>&lt;/apex:pageBlockSectionItem>
```</p>

<p>これで以下のような表示となる。</p>

<p><img src="/images/2017/08/custom_selectlist02.jpg" alt="" /></p>

<h1>エラー表示</h1>

<p>さらに同じく空だった場合のエラーの表示も自動で挿入してくれなくなるため、これも自分で表示してやる必要がある。<br/>
が、このエラー表示がかなり難航してるため、解決したら別ポストで。</p>

<p>以下に書きました。<br/>
↓↓<br/>
<a href="http://kayakuguri.github.io/blog/2017/08/22/custom-vf-error/">[Visualforce] 必須チェックのエラー文言をカスタマイズする</a></p>

<h1>参考</h1>

<ul>
<li><a href="http://vaindespair.blogspot.jp/2011/04/blog-post_733.html">memo: Force.com&#12288;&#65306;&#12288;任意の選択リストを作成したい&#65339;Visualforceタグ&#65341;</a></li>
<li><a href="http://kayakuguri.github.io/blog/2016/02/01/custom-setting/">カスタム設定を作成して取得してみる &ndash; KayaMemo</a></li>
<li><a href="http://blog.jeffdouglas.com/2008/11/16/displaying-the-required-red-bar-for-a-control/">Displaying the Required Red Bar for a Control</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Visualforce] テキストエリア入力欄の表示]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/08/17/vf-textarea/"/>
    <updated>2017-08-17T15:16:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/08/17/vf-textarea</id>
    <content type="html"><![CDATA[<p>Visualforceページにて、テキストエリアの入力欄を表示する際に、大きさを指定したりした時の表示のされ方などのまとめ。</p>

<!-- more -->


<h2>apex:inputField</h2>

<p>一番基本となる、<code>apex:inputField</code>の場合。<br/>
<code>value</code>で指定した項目の型を読み取って自動で入力フォームのタイプを変更してくれるので、普通はこちらを使っておけばよい。</p>

<p>ただし、テキストエリア項目の場合は以下のように入力欄がすごく小さい。</p>

<p><code>
&lt;apex:inputField value="{!項目名}" required="true" label="inputFieldサンプル" /&gt;
</code></p>

<p><img src="/images/2017/08/vf_textarea01.jpg" alt="" /></p>

<p>なので、サイズを調整したいが、<code>apex:inputField</code>には<code>rows</code>や<code>cols</code>などのオプションがない。<br/>
よって、スタイスを直接書いてやるしかなさそう。</p>

<p><code>
&lt;apex:inputField value="{!項目名}" required="true" style="width:315px; height:70px;" label="inputFieldサンプル サイズ変更" /&gt;
</code></p>

<p><img src="/images/2017/08/vf_textarea02.jpg" alt="" /></p>

<p>これで、サイズを任意に変更しつつ必須表示にも対応。</p>

<h3>エラー</h3>

<p><code>apex:inputField</code>を使った場合はそのままエラーの表示にも対応している。</p>

<p><img src="/images/2017/08/vf_textarea06.jpg" alt="" /></p>

<h2>apex:inputtextArea</h2>

<p><code>apex:inputtextArea</code>を利用すると、<code>rows</code> <code>cols</code>でのサイズ指定が可能。<br/>
<code>apex:outputlabel</code>も使うと標準の表示を同じようにラベルを配置してやれる。</p>

<p>```
&lt;apex:pageblocksectionItem></p>

<pre><code>&lt;apex:outputlabel value = "outputlabelサンプル"/&gt;
&lt;apex:inputtextArea value = "{!項目名}" cols = "50" rows = "5" required="true" /&gt;
</code></pre>

<p>&lt;/apex:pageblocksectionItem>
```</p>

<p><img src="/images/2017/08/vf_textarea03.jpg" alt="" /></p>

<p>しかし、この場合だと <code>required="true"</code> を指定していても赤い線が表示されない。<br/>
その赤い線を再現してやるには、divでクラスをつけて構造を再現してやる必要があるよう。</p>

<p>```
&lt;apex:pageBlockSectionItem></p>

<pre><code>&lt;apex:outputlabel value = "outputlabelサンプル 必須再現"/&gt;
&lt;apex:outputPanel&gt;
    &lt;div class="requiredInput"&gt;
    &lt;div class="requiredBlock"&gt;&lt;/div&gt;
    &lt;apex:inputtextArea value="{!項目名}" cols = "50" rows = "5" required="true" /&gt;
&lt;/div&gt;
&lt;/apex:outputPanel&gt;
</code></pre>

<p>&lt;/apex:pageBlockSectionItem>
```</p>

<p><img src="/images/2017/08/vf_textarea04.jpg" alt="" /></p>

<p>これで任意のサイズを指定しつつ、必須表示も出来るようになった。</p>

<p>これらを並べてやると以下のような感じ。</p>

<p><img src="/images/2017/08/vf_textarea05.jpg" alt="" /></p>

<h3>エラー</h3>

<p>エラー表示はそのままだと対応していないため、以下のような方法で自前で実装してやる必要がある。</p>

<p><a href="https://developer.salesforce.com/forums/?id=906F0000000AhwaIAC">&#12456;&#12521;&#12540;&#12513;&#12483;&#12475;&#12540;&#12472;&#12395;&#12388;&#12356;&#12390; &ndash; Salesforce Developer Community</a></p>

<h2>参考</h2>

<ul>
<li><a href="https://developer.salesforce.com/forums/?id=906F000000095xFIAQ">How do I alter dimensions of inputField Text and TextArea fields ? &ndash; Salesforce Developer Community</a></li>
<li><a href="https://salesforce.stackexchange.com/questions/5462/required-field-mark-red-vertical-bar-not-coming">visualforce &ndash; Required field mark (Red Vertical Bar) not coming &ndash; Salesforce Stack Exchange</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce] レコードのデータを取得し、CSVにしてS3にアップロードする]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/04/10/put-s3-csv-file/"/>
    <updated>2017-04-10T12:31:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/04/10/put-s3-csv-file</id>
    <content type="html"><![CDATA[<p>AWSで利用する事を想定し、レコードの内容をCSVファイルにしてS3にアップロードしてみたメモ。</p>

<!-- more -->


<p>SF内にCSVを生成して、そのファイルをS3にアップロード、すればいいかと思っていたが、直接CSVの内容をBodyに入れて送ってしまうことで、直接CSVファイルをS3に送信してしまう事が出来た。</p>

<h1>参考コード</h1>

<p>参考、というか、以下のコードをそのまま利用させてもらった。</p>

<ul>
<li><a href="https://github.com/darshanfarswan/haymarketCode/blob/6207a11fc072fed6dd4463b1ca4ebbbe991a232f/src/classes/S3Storage.cls">haymarketCode/src/classes/S3Storage.cls</a></li>
</ul>


<h1>CSV送信</h1>

<p>上記サンプルはテキストファイルになるので、CSVを保存するように変更。<br/>
具体的には、Bodyの内容をカンマ区切りにし、ファイルの拡張子を<code>csv</code>にし、Content-Typeを<code>text/csv</code>にする、だけ。</p>

<p>```
public with sharing class SaveCSVSample {</p>

<pre><code>public SaveCSVSample() {
    String csv_body = 'テスト1,テスト2,テスト3\r\nサンプル1,サンプル2,サンプル3';

    String fileName = 'test.csv';

    String accessId = 'xxx';
    String secretKey = 'xxx';
    String bucketName = 'user';
    String S3_Domain = 's3-ap-northeast-1.amazonaws.com';

    String dateString = Datetime.now().formatGmt('EEE, dd MMM yyyy HH:mm:ss Z');
    String stringToSign = 'PUT\n\ntext/csv\n' + dateString +'\n/' + bucketName + '/' + fileName;
    Blob mac = Crypto.generateMac('hmacSHA1',  Blob.valueOf(stringToSign), Blob.valueOf(secretKey));
    String signature = EncodingUtil.base64Encode(mac);

    HttpRequest req = new HttpRequest();
    req.setEndPoint('https://' + bucketName + '.' + S3_Domain + '/' + fileName);
    req.setHeader('Content-Type', 'text/csv');
    req.setHeader('Content-Length', String.valueOf(csv_body.length()));
    req.setHeader('Host', bucketName + '.' + S3_Domain);
    req.setHeader('Date', dateString);
    req.setHeader('Authorization','AWS ' + accessId + ':' + signature);
    req.setBody(csv_body);
    req.setMethod('PUT');

    Http httpConnection = new Http();
    HTTPResponse res = httpConnection.send(req);

    System.debug(res);
}
</code></pre>

<p>}
```</p>

<p>アップされたCSVは、改行コード <code>\r\n</code> 、文字コードは、<code>UTF-8</code>となった。</p>

<p>これでS3側にCSVファイルを作成出来るので、あとはレコードをSOQLで取得し、Bodyをカンマ区切りで作成してやればよいだけ。</p>

<h2>環境情報</h2>

<p>この例では、アクセスキーなどはベタで書いてしまっているが、実際には<a href="https://kayakuguri.github.io/blog/2016/02/01/custom-setting/">カスタム設定などで作成し</a>取得するようにした方がよい。<br/>
それだと、sandboxと本番でS3の投げ先も変更出来る。</p>

<h2>エンドポイント</h2>

<p>送信先に設定している、<code>S3_Domain</code>は現状、日本リージョンのもの。<br/>
各サービスのリージョン別のエンドポイントは以下を参考。<br/>
<a href="http://docs.aws.amazon.com/ja_jp/general/latest/gr/rande.html#s3_region">http://docs.aws.amazon.com/ja_jp/general/latest/gr/rande.html#s3_region</a></p>

<h2>ガバナ制限</h2>

<blockquote><p>ファイルサイズが3MBを超えるとApexの実行時ガバナ制限に抵触する<br/>
<a href="http://www30304u.sakura.ne.jp/blog/?p=1808">http://www30304u.sakura.ne.jp/blog/?p=1808</a></p></blockquote>

<h1>参考</h1>

<ul>
<li><a href="http://www.nkjmkzk.net/?p=2638">CORSサポートを利用したAWS S3へのアップロード方法 – Force.comバージョン</a></li>
<li><a href="http://blog.livedoor.jp/volvic_beer/archives/52481242.html">【salesforce】【apex】【aws】apexでs3にアップロードでエラーがでたよ</a></li>
<li><a href="http://dev.classmethod.jp/cloud/aws/s3-cors-upload/">WebブラウザからAmazon S3に直接ファイルをアップロードする</a></li>
<li><a href="http://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/RESTAuthentication.html">REST リクエストの署名と認証</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[開発者コンソールで表示させるデバッグログのレベルを変更する]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/04/10/change-debug-log-level/"/>
    <updated>2017-04-10T11:45:42+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/04/10/change-debug-log-level</id>
    <content type="html"><![CDATA[<p>開発者コンソールを開いていると、ログインしているユーザーのデバッグログを直接参照する事が出来る。
このログは、ログレベルがデフォルトの設定になっているが、色んなログが大量に出てしまう。</p>

<!-- more -->


<p><code>Debug Only</code>にチェックをつければ自分で出力したログだけを表示してくれたり、<code>Filter</code>機能があるのでみたいログだけに絞って表示させることは比較的容易に出来る。<br/>
しかし、そもそもログの内容が多すぎて、出力出来る最大サイズを越えてしまうことがたまにある。<br/>
そんな時は余計なログは出力させないようにデバッグレベルを調整してやる必要がある。</p>

<p><img src="/images/2017/04/debug_log_level_01.jpg" alt="" /></p>

<p>(匿名実行のログを表示させたところ）</p>

<p>開発者コンソールじゃなくて、SFの設定からデバッグログを設定してやる場合はデバッグレベル名を必須で選択するので、レベルの調整が可能なことはわかっていたが、開発者コンソールでもこのデバッグレベルを変更出来た。</p>

<h1>デバッグレベル</h1>

<p>まず、予めデバッグレベルを作成しておく。<br/>
<code>設定 -&gt; ログ -&gt; デバッグレベル</code> にアクセス。</p>

<p>新規、から作成。</p>

<p>名前は適当に設定し、レベルは欲しい情報に絞ったりして調整する。<br/>
例えば、Apexで<code>System.debug()</code>で出力したものは、Apexコードで、レベルを <code>デバッグ</code> にしておけば出力される。<br/>
(それ以外のカテゴリはなし、で問題ない）</p>

<p><img src="/images/2017/04/debug_log_level_02.jpg" alt="" /></p>

<h1>ログレベルの変更</h1>

<p>開発者コンソールのメニューから、 <code>Debug -&gt; Change Log Levels</code> を選択。<br/>
<img src="/images/2017/04/debug_log_level_03.jpg" alt="" /></p>

<p>ログレベルの選択画面がモーダルで表示される。<br/>
一番上の、<code>General Trace Settings for You</code>が、開発者コンソールで表示されるログのレベルの設定となる。<br/>
現状は、デフォルトのレベルが設定されているはずなので、一番右の項目にある、 <code>Add/Change</code> をクリック。</p>

<p><img src="/images/2017/04/debug_log_level_04.jpg" alt="" /></p>

<p>デフォルトのレベルと、先ほど設定したレベルが表示されるので、設定したレベルを選択し、<code>Done</code>をクリック。</p>

<p><img src="/images/2017/04/debug_log_level_05.jpg" alt="" /></p>

<p>実は、予めレベルをSF側から作成しなくても、ここで、<code>Add</code>して作成する事も可能。<br/>
さらに、各カテゴリのレベルもここから変更する事も出来る。</p>

<p>これで設定は完了。先ほどの匿名実行と同じ内容でログを出力してみると、大幅に内容が減っているのが確認出来る。</p>

<p><img src="/images/2017/04/debug_log_level_07.jpg" alt="" /></p>

<p>また、実はSF側のデバッグログのページを確認すると、開発者コンソールを起動させた時点で設定したデバッグレベル・ログイン中のユーザーの状態で、デバッグログが自動的にセットされている。</p>

<p><img src="/images/2017/04/debug_log_level_06.jpg" alt="" /></p>

<p>以上。</p>
]]></content>
  </entry>
  
</feed>
