<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-02-10T18:33:37+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[heroku]githubから自動でherokuにデプロイ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/10/heroku-github-sync/"/>
    <updated>2015-02-10T17:50:51+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/10/heroku-github-sync</id>
    <content type="html"><![CDATA[<p>ベータ版だったherokuとgithubの同期が正式リリースされたようです。<br/>
<a href="https://blog.heroku.com/archives/2015/2/6/heroku_github_integration">Ship Code Faster: Announcing GitHub Integration GA</a></p>

<!-- more -->


<p>ベータ版の段階からあったかもなのですが、githubにプッシュしたら自動でherokuにデプロイ出来るようなので、試してみました。</p>

<h2>Githubにリポジトリを作成</h2>

<p>まずは同期させるためにリポジトリを作成します。<br/>
すでにherokuにあるアプリを同期させる場合は、同じファイルをgithubにアップしておく必要があります。</p>

<h2>Herokuでの設定</h2>

<p>同期させたいアプリを開いたら、<code>deploy</code>のページへアクセス<br/>
<img src="/images/2015/02/github-heroku01.jpg" alt="deployへ" /></p>

<p>Githubを選択<br/>
<img src="/images/2015/02/github-heroku02.jpg" alt="Github" /></p>

<p><code>Connect to Github</code>をクリック</p>

<p><img src="/images/2015/02/github-heroku03.jpg" alt="Connect to Github" /></p>

<p>許可を求められるので、許可。</p>

<p><img src="/images/2015/02/github-heroku04.jpg" alt="認証" /></p>

<p>すると、リポジトリを選択出来るようになる。</p>

<p><img src="/images/2015/02/github-heroku05.jpg" alt="リポジトリ選択" /></p>

<p><code>heroku</code>で検索した結果。今回はサンプルで作った、<code>heroku-deploy-test</code>のリポジトリを選択。</p>

<p><img src="/images/2015/02/github-heroku06.jpg" alt="リポジトリ検索" /></p>

<p>紐づくとこんな感じ。</p>

<p><img src="/images/2015/02/github-heroku07.jpg" alt="連携済" /></p>

<p>連携済の表示の下に、自動でデプロイさせたいブランチを選択する画面と、<br/>
手動で特定のブランチをデプロイさせる画面があります。<br/>
今回は<code>master</code>ブランチを選択して自動デプロイを有効にしてみます。</p>

<p><img src="/images/2015/02/github-heroku08.jpg" alt="automatic deploys" /></p>

<p>結果。</p>

<p><img src="/images/2015/02/github-heroku09.jpg" alt="automatic deploys" /></p>

<h2>deploy</h2>

<p>で、実際にgithubの指定したリポジトリにpushしてみると、<br/>
裏っかわでheorkuにデプロイが走ります。</p>

<p><img src="/images/2015/02/github-heroku10.jpg" alt="heroku deploy" /></p>

<p>しばらく待つと、デプロイが成功。見事連携されました。</p>

<p><img src="/images/2015/02/github-heroku11.jpg" alt="deploy success" /></p>

<h2>その他</h2>

<p>CIツールを導入して、そのCIを通ったらherokuにデプロイ、という流れも出来るようで、<br/>
herokuがgitでのソース管理とはいえ、ソースの管理自体はやりにくかった点をgithub連携することでカバー出来そうです。</p>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/github-integration">ドキュメント</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]One-Off DynoでPHPをバックグラウンドで動作させる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/05/one-off-dyno-excute-php/"/>
    <updated>2015-02-05T15:04:19+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/05/one-off-dyno-excute-php</id>
    <content type="html"><![CDATA[<p>バッチ処理なんかを動作させるためにバックグラウンドでPHPを起動する方法を調べてみた。</p>

<!-- more -->


<h2>PHPをコマンドから実行</h2>

<p>PHPをコマンドラインから実行させるには以下。</p>

<pre><code>$ php hogehoge.php
</code></pre>

<h2>dynoについて</h2>

<p>dynoの種類なんかについては以下がすごくわかりやすかった。</p>

<p><a href="http://codezine.jp/article/detail/8344">構築・運用の必須知識！  Herokuアプリケーションの実行プラットフォーム「Dyno」を徹底的に理解する
（1/3）：CodeZine</a></p>

<h2>One-off dynoの起動</h2>

<p>今回使用するのは、One-off dyno。<br/>
これを起動させる方法は2種類あって、<br/>
一つは、<a href="https://addons.heroku.com/scheduler">Heroku Scheduler</a>のアドオンを入れて、<br/>
そこから定期的に実行させる方法。<br/>
実際にバッチ処理をさせる場合はここに登録する。<br/>
冒頭のPHPを起動させるコマンドをそのまま登録する。</p>

<p><img src="/images/2015/02/heroku_background02.jpg" alt="Heroku Scheduler" /></p>

<p>実行されたログは<a href="https://addons.heroku.com/papertrail">papertrail</a>上だと以下のような形となる。</p>

<p><img src="/images/2015/02/heroku_background01.jpg" alt="papertrail" /></p>

<p>もう一つはコマンドラインからの実行。<br/>
これだと任意のタイミングですぐに実行出来るので待たなくてよい。<br/>
<code>heroku run</code>で、herokuでコマンドを実行出来る。<br/>
以下、コマンド。</p>

<pre><code>$ heroku run 'php hogehoge.php'
</code></pre>

<p>コマンドで実行した場合は、ターミナルに標準出力した結果や、<code>echo</code>された内容なんかがそのまま返ってくる。<br/>
(エラーが出てればわかる)</p>

<h2>メリット</h2>

<p>通常のWeb dynoの場合、リクエストしてからレスポンスがあるまでに30秒以上かかってしまうと、タイムアウトが発生し、<br/>
heroku側がエラーページを返してしまう。<br/>
この設定はこちら側ではどうやっても変更不可能なよう。<br/>
しかし、One-off dynoやworker dynoを使用してバックグラウンド実行させた場合はこの限りではなく、<br/>
処理によるタイムアウトはない。<br/>
なので、重いファイルや重い処理も可能。</p>

<p>後は、このアプリをバッチだけに限定して使用する場合、web dynoをゼロにしてしまえる。<br/>
ブラウザからのアクセスが出来なくなるが、バッチの性質上、不要。むしろアクセス出来ない方が都合がよい。<br/>
値段も安くすむ(もしくは無料)し。</p>

<p><img src="/images/2015/02/heroku_background03.jpg" alt="web dynoがゼロ" /></p>

<h2>参考</h2>

<p><a href="https://github.com/herokaijp/devcenter/wiki/one-off-dynos">one off dynos · herokaijp/devcenter Wiki · GitHub</a><br/>
<a href="http://pc-karuma.net/xampp-php-shell/">コマンドラインからPHPを実行 &ndash; XAMPPの使い方 &ndash; PC設定のカルマ</a><br/>
<a href="http://codezine.jp/article/detail/8344">構築・運用の必須知識！  Herokuアプリケーションの実行プラットフォーム「Dyno」を徹底的に理解する
（1/3）：CodeZine</a><br/>
<a href="http://bokukoko.hatenablog.com/entry/2014/09/25/Heroku_%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%81%9F_%26_%E7%BF%BB%E8%A8%B3">Heroku のタイムアウトについて調べた &amp; 翻訳 &ndash; ボクココ</a></p>

<h2>公式ドキュメント類</h2>

<p><a href="https://devcenter.heroku.com/articles/one-off-dynos">One-Off Dynos</a><br/>
<a href="https://devcenter.heroku.com/articles/procfile">Process Types and the Procfile</a><br/>
<a href="https://devcenter.heroku.com/articles/background-jobs-queueing">Worker Dynos, Background Jobs and Queueing</a><br/>
<a href="https://devcenter.heroku.com/articles/scheduler">Heroku Scheduler</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]PHPでpapertrailに標準出力で文字列を出力する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/05/papertrail-php-stdout/"/>
    <updated>2015-02-05T11:30:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/05/papertrail-php-stdout</id>
    <content type="html"><![CDATA[<p>herokuでログを見るには、papertrailが基本かと思います。<br/>
そのpapertrailにPHPから任意の文字列を出力するには標準出力を使う、との事で試してみました。</p>

<!-- more -->


<p>方法は以下の通り。</p>

<pre><code>$stdout= fopen( 'php://stdout', 'w' );
fwrite( $stdout, "hello world to stdout\n" );
</code></pre>

<p>結果はこんな感じ。</p>

<p><img src="/images/2015/02/php-stdout.jpg" alt="papertrail" /></p>

<p>PHP部分は参考サイトのママです。ありがとうございます。</p>

<h3>参考</h3>

<p><a href="http://nanoappli.com/blog/archives/5212">[PHP]標準エラー出力、標準出力に文字列を出力する</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Herokuアドオン]PostgreSQL Studio]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/01/29/postgresql-studio/"/>
    <updated>2015-01-29T11:30:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/01/29/postgresql-studio</id>
    <content type="html"><![CDATA[<p>herokuのアドオン、「PostgreSQL Studio」を入れてみた。</p>

<!-- more -->


<p><img src="/images/2015/01/postgresqlStdio00.jpg" alt="postgresql studio" /></p>

<h2>概要</h2>

<p>自身のアカウントで管理しているアプリ内に導入されているPostgreSQLの情報を閲覧、管理出来るアドオン。</p>

<h2>インストール</h2>

<p>導入は無料で行えます。<br/>
というか、無料バージョンしか存在していません。</p>

<pre><code>$ heroku addons:add pgstudio
</code></pre>

<h2>承認</h2>

<p>herokuのアプリページでアドオンをクリックするとアドオンのトップページへ遷移出来る。<br/>
PostgreSQL Studioのトップへインストール後に遷移すると、以下のような承認画面が出る。</p>

<p><img src="/images/2015/01/postgresqlStdio01.jpg" alt="authorize" /></p>

<p>内容は、</p>

<blockquote><p>Read-only access to all of your apps and resources, excluding account information. Includes configuration variables, which may include runtime secrets.</p></blockquote>

<p>あなたのアカウント情報を除く全てのアプリに読み取り専用の権限を許可します。<br/>
そこには、設定情報やランタイム情報も含まれます。</p>

<p>と、アドオンを入れるのは一つのアプリなのに、<strong>全ての</strong>アプリへの接続許可を求められます。<br/>
この権現の編集は、自身のアカウントページから行えます。<br/>
<a href="https://dashboard.heroku.com/account">https://dashboard.heroku.com/account</a></p>

<p><img src="/images/2015/01/postgresqlStdio04.jpg" alt="承認設定" /></p>

<p>というのも、自身が管理しているアプリにインストールしている全てのPostgreSQLのデータをこれで管理出来るため、この権現が必要なようです。</p>

<h2>データ閲覧</h2>

<p>承認してアクセスすると、閲覧したいDBの選択画面になるので、任意のものを選択し、Loginします。</p>

<p><img src="/images/2015/01/postgresqlStdio02.jpg" alt="login" /></p>

<p>ログインすると、そのDBの情報を見たり、クエリを実行したり、などが出来ます。</p>

<p><img src="/images/2015/01/postgresqlStdio03.jpg" alt="db情報" /></p>

<p>テーブルの構造はそのままで見ることができるが、データの中身は、SQLを発行しないと見られないよう。</p>

<p><img src="/images/2015/01/postgresqlStdio05.jpg" alt="レコード内容" /></p>

<h2>まとめ</h2>

<p>ローカルにアプリをインストールしたり、自前でphpPGAdminを入れたりせずともアドオンさえ入れていればよいので、すごく楽。<br/>
ただし、全アプリへのアクセス権限が必要になる＝全てのアプリのデータが閲覧可能、というのは少し怖い。<br/>
アプリごとの承認ならいいのだけれど。<br/>
なので、実質は自分のアカウント内のどれかのアプリに一つだけ入れておけばよいことになる。<br/>
あと、ベータ版なので、動作の不具合や終了などがありえる。</p>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/pgstudio">公式ドキュメント</a><br/>
<a href="https://addons.heroku.com/pgstudio">アドオンページ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heroku Postgresデータベースのデータのバックアップをダウンロードする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/01/21/create-download-pgbackup/"/>
    <updated>2015-01-21T10:39:44+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/01/21/create-download-pgbackup</id>
    <content type="html"><![CDATA[<p>HerokuのPostgresデータベースのバックアップデータをダウンロードする方法。<br/>
いくつかコマンド叩くだけでした。</p>

<!-- more -->


<h3>アドオンのインストール</h3>

<p>何はともあれ、<code>PG Backup</code>のアドオンが必要です。<br/>
インストール方法は以下。</p>

<pre><code>$ heroku addons:add pgbackups
</code></pre>

<h3>バックアップの作成</h3>

<p>バックアップの作成は以下のコマンドで。</p>

<pre><code>$ heroku pgbackups:capture
</code></pre>

<p>現在保持しているバックアップの一覧は以下で確認出来ます。</p>

<pre><code>$ heroku pgbackups
ID   | Backup Time         | Size  | Database
-----+---------------------+-------+------------------------
a226 | 2012/02/22 20:02.19 | 5.3KB | DATABASE_URL
a227 | 2012/02/23 20:02.19 | 5.3KB | DATABASE_URL
b251 | 2012/02/24 16:08.02 | 5.3KB | HEROKU_POSTGRESQL_BLACK
b252 | 2012/02/24 16:08.53 | 5.3KB | HEROKU_POSTGRESQL_PINK
</code></pre>

<h3>バックアップURLの確認</h3>

<p>バックアップされているファイルのURLは以下で確認できます。</p>

<pre><code>$ heroku pgbackups:url
</code></pre>

<p>Amazon S3のURLが表示されます。<br/>
これは、直近のバックアップ分を参照しますが、過去分の場合はIDを指定します。</p>

<pre><code>$ heroku pgbackups:url ID
</code></pre>

<h3>ファイルのダウンロード</h3>

<p><code>curl</code>を使ってダウンロードします。(wgetでもいいです)</p>

<pre><code>$ curl -o latest.dump `URL`
</code></pre>

<h3>ダウンロードしたファイルをローカルのDBにインポート</h3>

<p>以下の<code>pg_restore</code>コマンドでインポート出来る。</p>

<pre><code>$ pg_restore --verbose --clean --no-acl --no-owner -h myhost -U myuser -d mydb b001.dump
</code></pre>

<p>ちなみに、herokuのPostgresは、9.x系のようで、8.x系でpg_restoreしようとすると、バージョン違いで怒られました。</p>

<blockquote><p>pg_restore: [アーカイバ] ファイルヘッダ内のバージョン(1.12)はサポートされていません</p></blockquote>

<h3>参考</h3>

<p><a href="https://devcenter.heroku.com/articles/heroku-postgres-import-export">Importing and Exporting Heroku Postgres Databases with PG Backups</a><br/>
<a href="https://devcenter.heroku.com/articles/pgbackups">PG Backups</a></p>
]]></content>
  </entry>
  
</feed>
