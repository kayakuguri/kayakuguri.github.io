<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2016-05-23T20:23:24+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UbuntuでApacheの環境変数を設定する方法]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/04/22/ubuntu-env/"/>
    <updated>2016-04-22T16:21:16+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/04/22/ubuntu-env</id>
    <content type="html"><![CDATA[<p><a href="http://kayakuguri.github.io/blog/2015/05/26/vagrant-env/">以前に書いた環境変数の設定方法</a>は、centOS用だったので(後で知った）、ubuntuでの方法も書いておく。<br/>
といってもパスのメモだけど。</p>

<!-- more -->


<p>Ubuntuでの設定が必要になった理由としては、いつも愛用している<a href="https://box.scotch.io/">Scotchbox</a>がUbuntuのディストリビューションだったため。</p>

<h1>設定ファイルのパス</h1>

<p>以下。</p>

<p><code>
/etc/apache2/envvars
</code></p>

<p>このファイルの末尾などに、以下のように追記する。</p>

<p><code>
export HOGE=xxx
</code></p>

<h1>apatch再起動</h1>

<p><code>service</code>で再起動。</p>

<p><code>
$ sudo service apache2 restart
</code></p>

<p>以上で設定完了。</p>

<h1>取得</h1>

<p>取得は通常通り、<code>getenv</code>で可能。</p>

<p><code>
getenv('HOGE');
</code></p>

<h1>参考</h1>

<p><a href="http://www.yamamo10.jp/yamamoto/comp/home_server/ubuntu_server/apache/index.php">自宅サーバー(ubuntu server Apache)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cakephpのtransitionコンポーネントで送信ボタンを複数配置する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/02/29/cakephp-transition-multi-submit/"/>
    <updated>2016-02-29T18:07:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/02/29/cakephp-transition-multi-submit</id>
    <content type="html"><![CDATA[<p>cakephpのtransitionコンポーネント利用時に送信ボタンを複数配置し、どちらが押されたかを判定してみたメモ。</p>

<!-- more -->


<h1>ビュー</h1>

<p>以下のように <code>name</code> 属性でわけておく。<br/>
今回は、完了、と、一時保存、でわけた。</p>

<p><code>
&lt;?php echo $this-&gt;Form-&gt;submit('一時保存', array('name' =&gt; 'temp')); ?&gt;
&lt;?php echo $this-&gt;Form-&gt;submit('完了', array('name' =&gt; 'comp')); ?&gt;
</code></p>

<h1>コントローラ</h1>

<p>コントローラので受けた際に、以下のように取得する。</p>

<p>```
$all_data = $this->Transition->mergedData();</p>

<p>if(isset($all_data[&ldquo;comp&rdquo;]){</p>

<pre><code>//完了が押された時の処理
</code></pre>

<p>}else if(isset($all_data[&ldquo;temp&rdquo;])){</p>

<pre><code>//一時保存が押された時の処理
</code></pre>

<p>}
```</p>

<p><code>mergedData</code> の中には以下のように格納されている。<br/>
(<code>var_dump</code> した結果)</p>

<p>```
array(2) {
  [&ldquo;hoge_model&rdquo;]=>
  array(87) {</p>

<pre><code>["huga"]=&gt;
string(0) "test"
["foo"]=&gt;
string(0) "bar"
...
</code></pre>

<p>  }
  [&ldquo;temp&rdquo;]=>
  string(12) &ldquo;一時保存&rdquo;
}
```</p>

<p>これであるかどうかの判定で判別が出来るので、処理をそれぞれ変える事が出来た。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lumenのテーブル名を既存のものに合わせる]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/01/05/lumen-eloquent/"/>
    <updated>2016-01-05T17:37:23+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/01/05/lumen-eloquent</id>
    <content type="html"><![CDATA[<p>lumenやlaravelではモデル名が単数形で、DBのテーブル名はその複数形、が基本の仕様となっている。<br/>
なので、新規にテーブル名を作成する場合や、テーブル名が複数形であればとくに問題ないのだが、<br/>
既存のテーブル名を利用する際に単数形となってしまっている時には明示的に指定してやる必要がある。<br/>
指定は<code>Eloquent</code>を利用してやる。</p>

<!-- more -->


<blockquote><p>Eloquentとは、PHPフレームワークのLaravelに最初から含まれているORM（Object-relational mapping:オブジェクト関係マッピング）です。</p></blockquote>

<h2>lumenでの利用</h2>

<p>lumenではデフォルトではEloquentの利用がオフになっている。<br/>
なので、<code>bootstrap/app.php</code>内のコメントアウトを外して有効にしてやる。</p>

<pre><code>$app-&gt;withEloquent();
</code></pre>

<h2>モデルの作成</h2>

<p>モデルは、<code>app/</code>以下に作成する。<br/>
例えば、user、というテーブル名を利用したい場合は、<code>app/User.php</code>を作成してやる。<br/>
その中で、<code>protected $table</code>の箇所がテーブル名を指定している箇所となるので、ここで単数形のテーブル名を指定してやる。</p>

<p>```
&lt;?php namespace App;
use Illuminate\Database\Eloquent\Model;
class User extends Model {</p>

<pre><code>protected $table = ‘user’;
protected $fillable = [
    ‘name’,
    ‘username’,
    ‘password’
];
protected $hidden = [ ‘password’ ];
</code></pre>

<p>}
```</p>

<h2>利用</h2>

<p>マイグレーションは作成しなくても動作した。<br/>
(項目をDBとコードで同期させる時にartisanから利用するよう。lumenでも利用できる）</p>

<p>以下の様な形で取得できた。</p>

<pre><code>DB::table('user')-&gt;get();
</code></pre>

<h2>参考</h2>

<p><a href="http://laravel4.winroad.jp/2014/03/06/eloquent-orm%E3%81%AE%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E7%94%A8%E6%B3%95/">Eloquent ORMの基本的な使用法 | WinRoadのLaravel4初心者講座</a><br/>
<a href="https://medium.com/@petehouston/enable-eloquent-orm-in-laravel-lumen-micro-framework-7a4f2fbcaf5d#.pe3a4ibc8">Enable Eloquent ORM in Laravel Lumen micro-framework — Medium</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6.5にPHP5.4を入れる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/11/26/centos65-php54/"/>
    <updated>2015-11-26T17:50:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/11/26/centos65-php54</id>
    <content type="html"><![CDATA[<p>CentOS6.5の標準のPHPは5.3。<br/>
5.4環境が欲しかったので作ってみたメモ。</p>

<!-- more -->


<p>PHPは入ってない状態から始める。</p>

<pre><code>$ php -v
-bash: php: command not found
</code></pre>

<h2>rpmでレポジトリを追加</h2>

<p>あまり意味はわかってないですが、epelとremiレポジトリを追加。<br/>
<code>vagrant</code>にSSHで入ってからの作業。</p>

<p><code>
$ sudo rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
$ sudo rpm -Uvh http://dl.iuscommunity.org/pub/ius/stable/Redhat/6/x86_64/ius-release-1.0-11.ius.el6.noarch.rpm
$ sudo rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
</code></p>

<h2>PHPをインストール</h2>

<pre><code>$ sudo yum install php --enablerepo=remi
</code></pre>

<h2>確認</h2>

<pre><code>$ php -v
PHP 5.4.45 (cli) (built: Sep 30 2015 15:56:06) 
Copyright (c) 1997-2014 The PHP Group
Zend Engine v2.4.0, Copyright (c) 1998-2014 Zend Technologies
</code></pre>

<h2>参考</h2>

<p><a href="http://qiita.com/Chrowa3/items/6c045d952a191a1203b4">Vagrant chef/centos-6.5 に PHP 5.4 を突っ込む &ndash; Qiita</a><br/>
<a href="http://blog.ybbo.net/2014/01/22/%E3%80%90%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%80%91centos6%E3%81%ABphp5-4%E3%82%92yum%E3%81%A7%E7%B0%A1%E5%8D%98%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/">【シンプル】CentOS6にPHP5.4をyumで簡単にインストールする手順田舎に住みたいエンジニアの日記 | 田舎に住みたいエンジニアの日記</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuがcomposer.lock必須になったのでcomposerの入れ方をメモしておく]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/08/25/composer-lock-require/"/>
    <updated>2015-08-25T10:38:40+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/08/25/composer-lock-require</id>
    <content type="html"><![CDATA[<p>herokuにcomposerを使用したプロジェクトをデプロイする場合、今まではwarningは出ていたようだけど、composer.lockはなくてもデプロイ出来ていた。<br/>
それが、2015/8/21にPHPのランタイムがアップデートされ、composer.lockが必須になった、とのこと。<br/>
<a href="https://devcenter.heroku.com/changelog-items/704">PHP versions 5.5.28, 5.6.12, 7.0.0RC1 available; new composer.lock requirements | Heroku Dev Center</a></p>

<!-- more -->


<p>composer.lockがない場合は以下のようなエラーが出る。</p>

<blockquote><p>ERROR: Your &lsquo;composer.json&rsquo; lists dependencies inside &lsquo;require&rsquo;,but no &lsquo;composer.lock&rsquo; was found. Please run &lsquo;composer update&rsquo; to re-generate &lsquo;composer.lock&rsquo; if necessary, and commit it into your repository. For more information, please refer to the docs at <a href="https://devcenter.heroku.com/articles/php-support#activation">https://devcenter.heroku.com/articles/php-support#activation</a></p></blockquote>

<h2>composerのインストール</h2>

<p>環境はmacで、デフォルト等のPHPが入っている前提で。<br/>
以下のコマンドを適当なディレクトリで叩くだけ。</p>

<p><code>
$ curl -sS https://getcomposer.org/installer | php
$ mv composer.phar /usr/local/bin/composer
</code></p>

<p>ターミナルを再起動して、確認。</p>

<p><code>
$ composer -v
Composer version 1.0-dev (f1aa655e6113e0efa979b8b09d7951a762eaa04c) 2015-08-20 11:59:54
</code></p>

<h3>参考</h3>

<p><a href="http://mawatari.jp/archives/install-composer-in-mac">http://mawatari.jp/archives/install-composer-in-mac</a></p>

<h2>composer install</h2>

<p>この状態で、composer.jsonがあるディレクトリに移動し、<code>$ composer install</code>を叩いてみる。<br/>
これでインストール出来れば完了。<br/>
ただし、PCにインストールされているPHPによってはモジュールの関係でエラーが出る場合がある。<br/>
例）</p>

<blockquote><p>Problem 1<br/>
  &ndash; The requested PHP extension ext-mcrypt * is missing from your system.</p></blockquote>

<p>この場合は、全部入りのPHPを入れ直すのが早い。</p>

<h2>PHPのインストール</h2>

<p>以下のサイトに全部入りのものがまとまっているようなので、そこからインストール。<br/>
<a href="http://php-osx.liip.ch/">PHP for OS X as binary package</a></p>

<p>現時点で最新の5.6を入れる。</p>

<pre><code>$ curl -s http://php-osx.liip.ch/install.sh | bash -s 5.6
</code></pre>

<p>このままだと使用するようにはなってないのでパスを通す。<br/>
環境によって違うが、デフォルトでは、<code>.bash_profile</code>に記述すればよいよう。</p>

<p><code>~/</code>ディレクトリ以下の<code>.bash_profile</code>をエディタ等で開いて記述。<br/>
なければ作成する。<br/>
コマンドで実行する場合は、なければ新規作成としてくれる。<br/>
例えば、<code>vi</code>で開く場合は以下。<br/>
<code>sudo</code>をつけてルート権限で実行している。</p>

<pre><code>$ sudo vi ~/.bash_profile
</code></pre>

<p>以下を記述。</p>

<pre><code>export PATH=/usr/local/php5/bin:$PATH
</code></pre>

<p>保存して終了。<br/>
(viの場合は、<code>i</code>で入力モードに、<code>esc</code>で戻って、<code>:x</code>で保存して終了）<br/>
<a href="http://net-newbie.com/linux/commands/vi.html">ｖｉエディタの使い方</a></p>

<p>ターミナルを再起動してphpのバージョンを確認。</p>

<pre><code>$ php -v
PHP 5.6.11 (cli) (built: Jul 10 2015 21:46:48)
</code></pre>

<h2>composer install</h2>

<p>この状態で、<code>$ composer install</code>すれば完了。<br/>
実行後は実行したディレクトリ内に、<code>composer.lock</code>と<code>vendor/</code>が出来上がる。<br/>
<code>vendor</code>ディレクトリ以下はgitで共有しないように、<code>.gitignore</code>に追記しておくこと。</p>

<h2>.lockと.jsonの関係</h2>

<p><code>composer.json</code>には、必要なパッケージとインストールするバージョンの指定があれば記述する。<br/>
その状態で、<code>$ composer install</code>すると、パッケージがインストールされ、インストールされたパッケージのバージョン情報などが記述された、<code>composer.lock</code>ファイルが作成される。<br/>
この状態で、他環境などで同じく<code>$ composer install</code>すると、<code>composer.lock</code>に書かれたバージョンのパッケージがインストールされ、全く同じ環境が構築される。</p>

<p><code>$ copmoser update</code>をすると、再度<code>composer.json</code>の記述を元にパッケージがインストールされ、<code>composer.lock</code>が更新される。</p>

<h2>参考</h2>

<p><a href="http://qiita.com/nbkn/items/01a11392921119fa0153">MacでPATHを通す &ndash; Qiita</a></p>
]]></content>
  </entry>
  
</feed>
