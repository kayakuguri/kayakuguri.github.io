<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: salesforce | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/salesforce/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2014-05-15T15:47:05+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SOQLでルックアップ先データを取得する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/05/15/soql-relationship/"/>
    <updated>2014-05-15T15:34:57+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/05/15/soql-relationship</id>
    <content type="html"><![CDATA[<p>SalseforceでSOQLを使用してルックアップ先のデータを取得する方法。</p>

<!-- more -->


<p>単純に、ルックアップ先を指定している項目名を使用して指定する。<br/>
その際、通常カスタム項目の参照方法、<code>__c</code>ではなくて、<code>__r</code>を使用する。以上。</p>

<p>例：取引先(Account)で作成したカスタム項目、Companyに入っている先から取得する場合<br/>
(参照先のオブジェクト名は気にしない)</p>

<pre><code>SELECT id, name, Company__r.Name FROM Account
</code></pre>

<p>Accountのid、nameと、Companyに入っているオブジェクトのname項目を取得出来る。</p>

<p>これをapex上で使用して、Companyのname項目を取得したい場合は以下。</p>

<pre><code>List&lt;Account&gt; list= [select Name ,Company__r.Name from Account];
System.debug(list[0].Company__r.Name);
</code></pre>

<p>ちなみに、この場合は、<strong>参照関係</strong>と言うよう。<br/>
<a href="http://blog.flect.co.jp/salesforce/2010/07/post-2e88.html">参照関係と主従関係</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SalesForce]メールテンプレートの項目一覧]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/04/23/sf-mailtemplate/"/>
    <updated>2014-04-23T16:39:55+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/04/23/sf-mailtemplate</id>
    <content type="html"><![CDATA[<p>メールテンプレートは、<code>SOQL</code>を使用して、<code>EmailTemplate</code>でとってこれる。</p>

<!-- more -->


<p>参考：<a href="https://developer.salesforce.com/forums?id=906F00000009BOlIAM">https://developer.salesforce.com/forums?id=906F00000009BOlIAM</a></p>

<p>取得した<code>EmailTemplate</code>の一覧<br/>
(内容は間違っている可能性があります)</p>

<table>
<thead>
<tr>
<th>項目名 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>body </td>
<td> 本文</td>
</tr>
<tr>
<td>markup </td>
<td> </td>
</tr>
<tr>
<td>folderid </td>
<td> フォルダーのID</td>
</tr>
<tr>
<td>subject </td>
<td> 件名</td>
</tr>
<tr>
<td>developername </td>
<td> 作成者</td>
</tr>
<tr>
<td>timesused </td>
<td> 使用回数</td>
</tr>
<tr>
<td>createddate </td>
<td> 作成日</td>
</tr>
<tr>
<td>ownerid </td>
<td> オーナーのID</td>
</tr>
<tr>
<td>apiversion </td>
<td> </td>
</tr>
<tr>
<td>createdbyid </td>
<td> 作成者のID</td>
</tr>
<tr>
<td>lastmodifieddate </td>
<td> 更新日</td>
</tr>
<tr>
<td>id </td>
<td> ID</td>
</tr>
<tr>
<td>brandtemplateid </td>
<td> </td>
</tr>
<tr>
<td>lastuseddate </td>
<td> 最終使用日</td>
</tr>
<tr>
<td>templatestyle </td>
<td> </td>
</tr>
<tr>
<td>isactive </td>
<td> 有効か</td>
</tr>
<tr>
<td>namespaceprefix </td>
<td> </td>
</tr>
<tr>
<td>description </td>
<td> テンプレートの説明</td>
</tr>
<tr>
<td>name </td>
<td> テンプレートの一意の名前</td>
</tr>
<tr>
<td>templatetype </td>
<td> テンプレートのタイプ</td>
</tr>
<tr>
<td>encoding </td>
<td> 文字コード</td>
</tr>
<tr>
<td>systemmodstamp </td>
<td> </td>
</tr>
<tr>
<td>lastmodifiedbyid </td>
<td> 更新者のID</td>
</tr>
<tr>
<td>htmlvalue </td>
<td> HTMLテンプレートの場合の本文</td>
</tr>
</tbody>
</table>


<hr />

<p>以下の方法でオブジェクトの項目一覧を取得出来る。</p>

<p>参考：<br/>
<a href="http://techblog.appirio.co.jp/2012/07/forcecom-apexdescribe.html">http://techblog.appirio.co.jp/2012/07/forcecom-apexdescribe.html</a><br/>
<a href="http://www30304u.sakura.ne.jp/blog/?p=188">http://www30304u.sakura.ne.jp/blog/?p=188</a><br/>
<a href="http://vaindespair.blogspot.jp/2012/04/blog-post_04.html">http://vaindespair.blogspot.jp/2012/04/blog-post_04.html</a></p>

<p>実際に取得したapexコード</p>

<pre><code>public Pagereference getList() {
    sObject newObj = (sObject)Type.forName('EmailTemplate').newInstance();
    Schema.DescribeSObjectResult descResult = newObj.getsObjectType().getDescribe();
    String keys = concatSet(descResult.fields.getMap().keySet(), ', ');

    System.debug('***** EmailTemplate keys: ' + keys);
}

private static String concatSet(Set&lt;String&gt; strSet, String sep) {
    String retStr;
    for (String str : strSet) {
        retStr = retStr == null ? str : retStr + sep + str;
    }
    return retStr == null ? '' : retStr;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SaleseForce]匿名ブロックでの実行テスト]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/04/23/sf-anonymous-debug/"/>
    <updated>2014-04-23T16:17:04+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/04/23/sf-anonymous-debug</id>
    <content type="html"><![CDATA[<p>特定のメソッドを実行してデバッグ出力を確認したいときに、<br/>
そのメソッドだけ単発で実行させる方法として、<code>匿名ブロック</code>による実行というのがある。</p>

<!-- more -->


<p>参考：<a href="http://blog.livedoor.jp/rays4live/archives/67722528.html">Apexプログラミング～基本編２～</a></p>

<p>基本、上記参考サイトの通り。<br/>
Force.com IDE上でも匿名ブロック、<code>Execute Anonymous</code>での実行が出来る。</p>

<blockquote><p>Execute Anonymous」の機能を使います。この機能は、「匿名ブロック」と呼ばれていて、単発でメソッドの呼び出しなどを行うことができます。一種のコンソール的なものとイメージするといいかと思います。</p></blockquote>

<p>VisualForceのページから呼び出す用のクラスを実行する場合は、<br/>
テストクラスを書くときと同じ要領で、クラスをnewして実行させる。<br/>
例えば、そのページがLeadを標準のコントローラーとしている時は以下のように。<br/>
<code>testMethod</code>が実行したい関数だとする。
(別にページでLeadに指定していても他のオブジェクトを渡しても問題ない)</p>

<pre><code>Lead p = new Lead();
HogeController c = new HogeController(new ApexPages.StandardController(p));
c.testMethod();
</code></pre>

<p>で、<code>testMethod</code>内には以下のように書いていたとする。</p>

<pre><code>public Pagereference testMethod() {
    System.debug('Hello world!');
    return null;
}
</code></pre>

<p>実行後、ログが出力されて、目的のデバッグログも以下のような形で吐かれる。</p>

<pre><code>15:11:05.049 (49728000)|USER_DEBUG|[46]|DEBUG|Hello world!
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Forceでのブラウザバック対策]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/03/20/sf-browser-back/"/>
    <updated>2014-03-20T10:50:36+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/03/20/sf-browser-back</id>
    <content type="html"><![CDATA[<p>salseforceでフォームを作成している際、<br/>
完了画面を表示させた後にブラウザで戻るボタンを押すと、<br/>
フォームや確認画面に戻ってしまい、更に入力した内容が表示されてしまう。</p>

<p>このまま何も対策を取っていないと、二重送信されてしまうおそれがあるので、<br/>
対策を考えてみた。</p>

<!-- more -->


<p>基本的な考え方は以下の通り。</p>

<p><a href="http://piyopiyocs.blog115.fc2.com/blog-entry-6.html">セッションとhistory.back()とブラウザの戻るボタン。</a></p>

<p>まずは、上記と同じように、一度送信が完了した段階で、<br/>
それとわかるフラグを立てておきます。<br/>
再度入力画面を表示させようとすると、このフラグが立った状態だとエラー画面へ遷移するように設定しておきます。</p>

<p>しかし、salseforceでデフォルトの設定のまま(?)作業すると、<br/>
戻るボタンを押した際には、キャッシュされたページが表示されます。<br/>
(入力された値も含めて)</p>

<p>なので、キャッシュを無効にして、ページが無条件で表示されないようにします。<br/>
入力ページの冒頭に以下の設定を入れます。</p>

<pre><code>&lt;apex:page . . .  cache="false" &gt;
</code></pre>

<p>こうすると、完了画面に遷移後、この入力ページへ戻ってくると、<br/>
「フォーム内容を再送信して下さい。」のような画面が表示され、リロードせざる得なくなります。<br/>
そうすることで、フラグを判定してエラーページへ遷移させることが出来ました。</p>

<hr />

<p>この事を調査している時に知ったのですが、<br/>
(基本的な事のようですが、)<br/>
<code>setRedirect</code>を利用すると、値を引き継ぐか、URLを変更するか、が選べるようです。</p>

<blockquote><p>画面遷移する際にPageReferenceのsetRedirect(false)を使用することで変数の値を引き継ぐことができます。<br/>
&ndash; <a href="http://tyoshikawa1106.hatenablog.com/entry/2013/05/03/234647">SFDC：2つのVFページと同一コントローラ</a></p></blockquote>

<p>デフォルトではfalseに設定されているようです。<br/>
なので、確認画面への遷移などでは、URLは変わらず、同一コントローラー内の値も引き継がれます。<br/>
しかし、完了画面への遷移の際は値は必要なく、URLも変わって欲しいので、上記をtrueで遷移させた方が良さそうです。</p>

<pre><code>//apexクラスの関数内で
return Page.FormComplete.setRedirect(true);
</code></pre>

<p>しかしこれをしてしまうと、最初に書いた判定用のフラグの値も引き継がれないので、<br/>
逆に値がなければエラー、という流れで作ったほうがいいかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apexからPOSTでファイルを送信する 改訂版]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/27/submit-base64/"/>
    <updated>2014-02-27T13:41:16+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/27/submit-base64</id>
    <content type="html"><![CDATA[<p><a href="http://kayakuguri.github.io/blog/2014/02/26/submit-callout-with-multipart/">前回のファイル送信</a>の動作確認版。</p>

<!-- more -->


<p>まず、やりたいこととして、<br/>
saleseforceで作成したページからファイルをherokuで作成したapiに送信して、<br/>
herokuのapiからそのファイルを添付で送信したかった。</p>

<p>結論としては以下の手順で動作した。</p>

<ol>
<li>visualforceで<code>apex:inputFile</code>を使用してファイルをアプロード</li>
<li>apexでファイルを受け取り、そのファイルを<code>base64エンコード</code>。</li>
<li>base64エンコードした文字列をPOSTのパラメータとして送信</li>
<li>herokuにアップしているphpでPOSTデータを受け取る</li>
<li>受け取ったbase64データをデコードして保存(一時的)</li>
<li>保存されたファイルからQdmailを使用してメールを送信</li>
</ol>


<hr />

<p>1) visualforceで<code>apex:inputFile</code>を使用してファイルをアプロード<br/>
visualforceページでのinputの書き方</p>

<pre><code>&lt;apex:input value="{!Email}" /&gt;
&lt;apex:inputFile value="{!FileBody}" filename="{!FileName}"/&gt;
</code></pre>

<p>2) apexでファイルを受け取り、そのファイルを<code>base64エンコード</code>。<br/>
3) base64エンコードした文字列をPOSTのパラメータとして送信<br/>
apex側で受け取る</p>

<pre><code>public String FileName { get; set; }
public Blob FileBody { get; set; }
public String Email { get; set; }

public Pagereference submit() {
    HttpRequest request = new HttpRequest();
    request.setEndpoint('送信先のphp');
    request.setMethod('POST');
    request.setHeader('Accept-Language', 'ja');
    //パラメータ
    Map&lt;String, String&gt; params = new Map&lt;String, String&gt;();
    params.put('to', Email);  //送信先
    params.put('attachName', FileName); //ファイル名
    params.put('attach', EncodingUtil.base64Encode(FileBody)); //ファイル内容
    Set&lt;String&gt; keys = params.keySet();
    String r = '';
    for(String key : keys) {
        //body用にパラメータを整形 to=xx&amp;attach=xx のように
        String val = params.get(key);
        r += key + '=';
        if(val != null) r += val;
        r += '&amp;';
    }
    r = r.removeEnd('&amp;');
    request.setBody(r);

    //送信
    Http http = new Http();
    HttpResponse response = http.send(request);
    ResResult = response.getBody(); //結果を受け取る
}
</code></pre>

<p>4) herokuにアップしているphpでPOSTデータを受け取る<br/>
5) 受け取ったbase64データをデコードして保存(一時的)<br/>
6) 保存されたファイルからQdmailを使用してメールを送信</p>

<p><a href="http://kayakuguri.github.io/blog/2014/02/18/php-heroku-sendattachmail/">Qdmailでの送信方法は以前の投稿を参照。</a></p>

<pre><code>require_once('../lib/qdmail.php');
require_once('../lib/qdsmtp.php');

//送信内容
$to          = $_POST['to'];
$subject     = '件名';
$body        = '本文';
$fromname    = '送り先名';
$fromaddress = '送り先アドレス';
$attachname  = $_POST['attachName'];
$attach      = $_POST['attach'];

$mail = new Qdmail();
$mail -&gt; smtp(true);
$param = array(
    'host'=&gt; $_ENV['MAILGUN_SMTP_SERVER'],
    'port'=&gt; $_ENV['MAILGUN_SMTP_PORT'],
    'from'=&gt; $fromaddress,
    'protocol'=&gt;'SMTP_AUTH',
    'user'=&gt; $_ENV['MAILGUN_SMTP_LOGIN'],
    'pass' =&gt; $_ENV['MAILGUN_SMTP_PASSWORD']
);
$mail -&gt;smtpServer($param);
$mail -&gt;to($to);
$mail -&gt;subject($subject);
$mail -&gt;from($fromaddress,$fromname);
$mail -&gt;text($body);

//添付ファイル
$bin = base64_decode(str_replace(' ', '+', $_POST['attach'][0])); //注意
$fp = fopen( "./" . $_POST['attachName'][0], "w" );
fwrite( $fp, $bin );
fclose( $fp );
$attach = array();
$attach[] = array( "./" . $_POST['attachName'][0] , $_POST['attachName'][0] );

//送信
echo $mail -&gt;send(); //成功の場合は「1」が返ってくる
</code></pre>

<p>Base64デコードしてファイルに保存する方法は以下を参考にしました。<br/>
<a href="http://blog.nipx.jp/archives/4137">Flashからアップロードする方法いろいろ</a><br/>
ただし、そのままではエラーになることがあるよう。</p>

<blockquote><p>どうやら、POSTでデータを渡すと、Base64の「+」記号が勝手にスペースに変換されてしまうらしい。<br/>
<a href="http://pontago.hatenablog.com/entry/20091028/1256743421">http://pontago.hatenablog.com/entry/20091028/1256743421</a></p></blockquote>

<p>(ヘッダ分を差し引く、の部分は無視しても問題なかった)</p>
]]></content>
  </entry>
  
</feed>
