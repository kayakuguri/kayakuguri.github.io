<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-04-16T17:13:39+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ajaxzip3で、郵便番号から住所の自動入力をする際に、Shift-JISを使用する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/01/16/ajaxzip3-shiftjis/"/>
    <updated>2014-01-16T18:35:42+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/01/16/ajaxzip3-shiftjis</id>
    <content type="html"><![CDATA[<p>ajaxzip3を使って郵便番号から住所を自動入力させる際、<br/>
Shift-JISを使用したい場合、<a href="https://code.google.com/p/ajaxzip3/">ライブラリのページ</a>には以下のように書かれている。</p>

<!-- more -->


<pre><code>&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=Shift_JIS"&gt;
&lt;title&gt;サンプル&lt;/title&gt;
&lt;script src="http://ajaxzip3.googlecode.com/svn/trunk/ajaxzip3/ajaxzip3.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/head&gt;
</code></pre>

<p>しかし、これだと<strong>IEのみ</strong>文字化けしてしまう。</p>

<p>それを回避するには、<code>charset</code>を先に書くようにすればいい、らしい。</p>

<pre><code>&lt;script type="text/javascript" src="hoge.js" charset="UTF=8"&gt;&lt;/script&gt; 
↓
&lt;script type="text/javascript" charset="UTF=8" src="hoge.js"&gt;&lt;/script&gt; 
</code></pre>

<p>参考：<a href="http://ksk1015.hatenablog.com/entry/2012/02/21/120938">ajaxzip3のIEでの文字化け対策 &ndash; ksk1015のブログ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Migrate Pluginとか]]></title>
    <link href="http://kayakuguri.github.io/blog/2013/12/13/jquery-migrate/"/>
    <updated>2013-12-13T19:42:22+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2013/12/13/jquery-migrate</id>
    <content type="html"><![CDATA[<p><a href="http://b.hatena.ne.jp/hotentry">はてなブックマークのホッテントリ</a>を見てたら、<br/>
<a href="https://gist.github.com/mala/7939659">セキュリティについての記事</a>が入ってて、<br/>
それを読んでみると、どうやら、jQuery Migrate Pluginをディスる記事だったよう。</p>

<!-- more -->


<p>で、Migrate Pluginってのを知らなかったのでちょっと調べてみた。</p>

<p><a href="http://c-brains.jp/blog/wsg/13/11/14-142300.php">jQuery Migrate pluginを使ってみる。</a></p>

<p>要するに、アップデートされたjQueryを使用すると、今までのコードが動かなくなっちゃう問題に対して、<br/>
ここが互換性ないよと警告してくれたりとか、<br/>
最新版だとサポートされてないものを復活サポートしてくれたりするもの、らしい。</p>

<p>で、この<strong>復活</strong>が問題になっているよう。</p>

<p><a href="http://t-ashula.hateblo.jp/entry/2013/11/19/120903">jQuery Migrate Plugin なんてなかった件</a></p>

<blockquote><p>いくつかのサイトで実際に遭遇してますが，jQueyr 1.6.3 で解決( jQuery Bug #9521 )したはずの $(&ldquo;a[href=&rdquo; + hash + &ldquo;]&rdquo;) タイプの XSS が （ 2013/11/18 現在 1.2.1 を含む全ての） jQuery Migrate Plugin で復活します．</p></blockquote>

<p>これが、冒頭の記事の、</p>

<blockquote><p>紆余曲折を経て変更されたはずが何故かMigrate Pluginなどというもので復活してしまうことだ。jQueryやめろ。</p></blockquote>

<p>ということのよう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypescriptとかCoffeescriptとか]]></title>
    <link href="http://kayakuguri.github.io/blog/2013/12/04/typescript-coffeescript/"/>
    <updated>2013-12-04T10:47:06+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2013/12/04/typescript-coffeescript</id>
    <content type="html"><![CDATA[<h4>CoffeeScriptとTypeScriptについて</h4>

<p><a href="http://qiita.com/yuch_i/items/17e22b77ce4ad9d1b7e9">JavaScript上位言語の比較表</a><br/>
※コメントが参考になる</p>

<blockquote><p>機能の列挙にはあまり意味がありません。この串刺し比較では言語そのものの書き味や開発環境、再利用性の情報が欠損しています。</p></blockquote>

<p><a href="http://qiita.com/fnobi/items/8bd24c0994a2015ffbeb">Coffeeか、Typeか。 〜比較しながらの入門編〜</a><br/>
<a href="http://terurou.hateblo.jp/entry/2012/10/17/031013">Haxe使いから見たTypeScript雑感</a></p>

<blockquote><p>TypeScriptが世に出てきてしまった以上、CoffeeScriptは「型付けのできないTypeScriptの出来損ない」みたいな存在になってしまったかなぁと。<br/>
これからCoffeeScriptを学習するメリットはほぼゼロに近いと思います。</p></blockquote>

<p><strong>クラスで比較</strong></p>

<!-- more -->


<p>CoffeeScript</p>

<pre><code>class Human
    constructor: (@name) -&gt;

    hello: -&gt;
        console.log("My name is #{@name}.")
</code></pre>

<p>TypeScript</p>

<pre><code>class Human {
    name: string;

    constructor (name: string) {
        this.name = name;
    }

    hello () {
        console.log('My name is %s.', this.name);
    }
}
</code></pre>

<p>TypeScriptの方が圧倒的に見やすい。CoffeeScriptはphp的というか、癖がある感じ。<br/>
TypeScriptの方が後発でMicroSoftが出しているので、modern Appとか作るときの標準とかにしたいのかもしれない。</p>

<hr />

<h4>Haxe</h4>

<p>参考：<a href="http://jinjor-labo.hatenablog.com/entry/2013/05/24/211019">HaxeとTypeScriptを両方使ってみた感想</a></p>

<blockquote><p>JavaScriptターゲットで今から始めるならTypeScriptかなーという気がします。<br/>
特に、既にJavaScriptに慣れ親しんでいる人にとっては、今まで普通に出来ていたことは普通に出来て欲しいと思うので、Haxeは少々ストレスかなと。</p></blockquote>

<p>TypeScriptの方がよさげ？</p>

<p><a href="http://www.slideshare.net/bleistift/jsx-haxe-typescript">JSX / Haxe / TypeScript</a></p>

<hr />

<p><a href="http://www.atmarkit.co.jp/ait/articles/1301/18/news087.html">アンダース氏が設計した新言語による次世代JavaScript開発とは？ (1/3)</a><br/>
PhpStromだと標準でTypeScriptをサポートしているよう。(newでTypeScriptファイルの作成があった)</p>

<p><a href="http://448.jp/blog/article/1458/">WebStorm &amp; PhpStorm Blog日本語訳：WebStorm 6におけるTypeScriptのサポート</a><br/>
<a href="http://bulblub.com/tag/typescript/">TypeScript+PHPStorm+homebrewの設定</a></p>

<p>ブラウザ上でTypeScriptを書く<br/>
<a href="http://www.typescriptlang.org/Playground/">PlayGround</a></p>

<hr />

<h4>インストール</h4>

<p><a href="http://www.xn--web-k69dj4k.net/d/24/40266.html">WebStormでTypeScriptを使おう</a></p>

<pre><code>npm install -g typescript
</code></pre>

<p>npmがない。<br/>
<a href="http://d.hatena.ne.jp/replication/20120303/1331649269">Mac OS X Lionにnpm(Node Package Manager)をインストールする</a></p>

<pre><code>curl https://npmjs.org/install.sh | sudo sh
</code></pre>

<p>http<strong>s</strong>に変更になっていた。<br/>
実行すると、先にnode.jsをインストールしろって怒られた。</p>

<blockquote><p>npm cannot be installed without nodejs.<br/>
Install node first, and then try again.<br/>
　<br/>
Maybe node is installed, but not in the PATH?<br/>
Note that running as sudo can change envs.</p></blockquote>

<p>node.jsをインストールする。<br/>
<a href="http://sasaplus1.com/slide-first-time-node.js/">はじめてのnode.js</a></p>

<p>・nodebrewをインストール</p>

<pre><code>$ curl -L git.io/nodebrew | perl - setup

$ echo 'export PATH=$HOME/.nodebrew/current/bin:$PATH' &gt;&gt; \~/.bash_profile
$ source ~/.bash_profile
</code></pre>

<p>・node.jsとnpmをインストール</p>

<pre><code>$ nodebrew install-binary 0.10
$ nodebrew use 0.10
</code></pre>

<p>で、最初のTypeScriptをインストールする。</p>

<pre><code>$ npm install -g typescript
</code></pre>

<p>Programsのパスはnodeを入れた時に表示されるパスを入れる。<br/>
<a href="http://448.jp/blog/article/1459/">IntelliJ IDEAのFile Watchers機能でTypeScriptコンパイラ（tsc）にパスを通す方法</a></p>

<p>エラーが出た。</p>

<pre><code>env: node: No such file or directory
</code></pre>

<p>以下で解決した。</p>

<p><a href="http://bulblub.com/2013/06/21/typescript_setting_phpstorm_homebrew/">TypeScript+PHPStorm+homebrewの設定</a></p>

<p><code>$ env</code>で吐き出すPATHを全部突っ込んだらOKだった。</p>
]]></content>
  </entry>
  
</feed>
