<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: laravel | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/laravel/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2018-04-04T14:26:53+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel+mySQLでマイグレーションのやり直しのデータリストア]]></title>
    <link href="http://kayakuguri.github.io/blog/2018/03/26/laravel-mysql-refresh/"/>
    <updated>2018-03-26T12:29:45+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2018/03/26/laravel-mysql-refresh</id>
    <content type="html"><![CDATA[<p>Laravelで開発をしていて、途中でDBの項目が増えたりしてマイグレーションのやり直しが発生することがちょくちょくある。<br/>
直接<code>alter</code>してもいいけど、ちゃんとマイグレーションファイルも動くか確認したい。<br/>
けど、今あるデータは削除したくない、って場合。</p>

<!-- more -->


<p>パッケージでよしなにバックアップ取ったりしてくれるものはあるようだけど、postgreSQLのものが多かったり、そのためにパッケージインストールするのも、、と思ってしまう。</p>

<ul>
<li><a href="https://www.lancard.com/blog/2017/11/27/laravel-5-5-%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9dump%E3%82%92%E3%81%8A%E6%89%8B%E8%BB%BD%E3%81%AB%E3%81%A8%E3%81%A3%E3%81%9F%E3%82%8A%E3%82%82%E3%81%A9%E3%81%97%E3%81%9F/">Laravel 5.5 でデータベースdumpをお手軽にとったりもどしたり &laquo;  LANCARD.LAB｜ランカードコムのスタッフブログ</a></li>
</ul>


<p>それならコマンドで叩いたほうが早い、というわけで、備忘録。</p>

<h1>エクスポート</h1>

<p>テーブル情報を抜いたデータ情報のみをエクスポート。<br/>
（作業はvagrant内に入った状態で）</p>

<p><code>
mysqldump -uroot -proot -t DATABASE_NAME &gt; all.dump
</code></p>

<p>エクスポートされたデータから、<code>migrations</code>テーブルのインサート情報の部分だけは削除しておくこと。<br/>
(laravelのmigrateで自動作成されるので、インポート時にID重複のエラーが出る）</p>

<h2>```</h2>

<h2>&mdash; Dumping data for table <code>migrations</code></h2>

<p>(このセクションを削除)
```</p>

<h1>再マイグレーション</h1>

<p>Laravelに用意されている。</p>

<p><code>
$ php artisan migrate:fresh
</code></p>

<h1>インポート</h1>

<p>あとはインポートするだけ。</p>

<p><code>
$ mysql -uroot -proot DATABASE_NAME &lt; all.dump
</code></p>

<p>完了。</p>

<h1>参考</h1>

<ul>
<li><a href="https://qiita.com/rato303/items/2e614f23e5feee150ffc">MySQLのデータインポート・エクスポート &ndash; Qiita</a></li>
<li><a href="https://www.dbonline.jp/mysql/insert/index10.html">データの削除(DELETE文) &ndash; データの追加と削除 &ndash; MySQLの使い方</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LaravelのEloquentモデルでupdated_atがないテーブルを使う]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/12/13/eloquent-updated-at-null/"/>
    <updated>2017-12-13T11:37:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/12/13/eloquent-updated-at-null</id>
    <content type="html"><![CDATA[<p>Laravelのバージョンは5.5で確認。<br/>
Eloquentモデルは作成時に自動で<code>created_at</code>と<code>updated_at</code>を更新してくれる。<br/>
しかし、仕様の都合上、<code>updated_at</code>カラムがないテーブルを利用したかったのでその方法。</p>

<!-- more -->


<h1>定数でのカラム指定</h1>

<p>Eloquentモデル内で定数を使用することで明示的にカラム名を指定する事が可能。</p>

<p><code>
const CREATED_AT = 'date_created';
const UPDATED_AT = 'date_modified';
</code></p>

<ul>
<li><a href="https://www.larajapan.com/2016/11/26/laravel-5-3-%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%97%E3%81%AEdb%E9%A0%85%E7%9B%AE%E5%90%8D%E3%81%AE%E6%8C%87%E5%AE%9A/">Laravel 5.3 タイムスタンプのDB項目名の指定</a></li>
</ul>


<p>これを利用し、更新カラムはない事を指定してやればよい。</p>

<p><code>
const UPDATED_AT = null;
</code></p>

<p>これだけ。</p>

<h3>情報元</h3>

<ul>
<li><a href="https://www.neontsunami.com/posts/eloquent-model-without-updated_at-laravel-55">Eloquent model without updated_at (Laravel 5.5) &mdash; Neon Tsunami</a></li>
</ul>


<h2>無効化</h2>

<p>ちなみに、<code>created_at</code>、<code>updated_at</code>を自動で更新させたくない場合は以下のように指定してやればよいよう。<br/>
自動で更新しなくなるので、それらのカラムがないテーブルでもEloquentモデルを利用出来るようになる。</p>

<p><code>
public $timestamps = false;
</code></p>

<ul>
<li><a href="http://laravel.hatenablog.com/entry/2013/10/19/004831">timestampを無効にする場合 &ndash; ふたりはララベル （Laravel PHP Framework）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HerokuでLaravel-Mixを利用する際の環境変数]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/12/13/laravel-mix-heroku-env/"/>
    <updated>2017-12-13T11:08:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/12/13/laravel-mix-heroku-env</id>
    <content type="html"><![CDATA[<p>HerokuでLaravel Mixを使っている際に、ビルドに失敗する時があり調べた結果、環境変数を追加するだけで対策出来たのでメモ。</p>

<!-- more -->


<h1>症状</h1>

<p>Herokuのビルドパックには <code>heroku/nodejs</code>と<code>heroku/php</code>を入れておき、順番はnode.jsが先。</p>

<p><code>
$ heroku buildpacks -a app-name
=== app-name Buildpack URLs
1. heroku/nodejs
2. heroku/php
</code></p>

<p>この状態でpushしてデプロイするも、npmのインストールなどは走るがLaravel Mixのコンパイルが走らない状態(たぶん）。<br/>
ビルドログを見ると以下のようなエラーが出ている。</p>

<p><code>
Additional dependencies must be installed. This will only take a moment.
warning " &gt; browser-sync-webpack-plugin@1.2.0" has unmet peer dependency "webpack@^1 || ^2 || ^3".
Finished. Please run Mix again.
</code></p>

<p>依存関係が解消出来てないとかなんとか？</p>

<h1>解決策</h1>

<p>ググると以下の情報。</p>

<p>環境変数に、<code>YARN_PRODUCTION</code>を<code>false</code>で追加してやるだけ。</p>

<ul>
<li><a href="https://www.neontsunami.com/posts/using-laravel-mix-on-heroku">Using Laravel Mix on Heroku &mdash; Neon Tsunami</a></li>
</ul>


<p>環境変数を追加してやることで、<code>devDependencies</code>から依存関係を取得するように指示してやる事が出来るよう。</p>

<blockquote><p>First, set <code>YARN_PRODUCTION</code> to false using the following command. This tells Heroku to install the devDependencies in your package.json, but leaves NODE_ENV as production.</p></blockquote>

<p>Google翻訳</p>

<blockquote><p>まず、次のコマンドを使用して<code>YARN_PRODUCTION</code>をfalseに設定します。これは、あなたのpackage.jsonにdevDependenciesをインストールするようにHerokuに指示しますが、NODE_ENVをプロダクションとして残します。</p></blockquote>

<p>記事の通り、上手く行ってなかった環境に環境変数を追加してやると無事、コンパイルされるようになった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel5.5でajaxでPOST通信する時のCSRFトークン]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/12/06/laravel-ajax-csrf/"/>
    <updated>2017-12-06T20:46:06+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/12/06/laravel-ajax-csrf</id>
    <content type="html"><![CDATA[<p>Laravel5.5にて、ajaxでPOST通信する際にCSRFトークンも送る方法のメモ。</p>

<!-- more -->


<h1>概要</h1>

<p>LaravelではデフォルトではPOST通信には全てCSRFトークンをつけてやる必要がある。<br/>
ajaxでの通信でも例外ではない。<br/>
なので、そのまま何も考えずにajaxを使うとそこで引っかかってしまう。</p>

<h1>方法</h1>

<p>方法としては(主に)2つ。</p>

<ul>
<li>送信するURLはCSRFトークンの対象外としてやる</li>
<li>ajax通信の際にもCSRFトークンを送る</li>
</ul>


<p>もちろん後者の方が安全。</p>

<h1>CSRFトークンの追加</h1>

<p>HTMLのmetaタグにCSRFトークンをおいてやり、それを取得して送る。<br/>
POST送信の<code>_token</code>パラメータに入れてやるだけでよい。</p>

<ul>
<li><a href="https://laracasts.com/discuss/channels/requests/laravel-5-cant-use-ajax-post-request">Laravel 5 can&#039;t use ajax post request</a></li>
</ul>


<p>```
<meta name="csrf-token" content="" /></p>

<p>var CSRF_TOKEN = $(&lsquo;meta[name=&ldquo;csrf-token&rdquo;]&rsquo;).attr(&lsquo;content&rsquo;);</p>

<p>$.ajax({</p>

<pre><code>url: '/home/upload/',
type: 'POST',
data: {_token: CSRF_TOKEN},
dataType: 'JSON',
success: function (data) {
    console.log(data);
}
</code></pre>

<p>});
```</p>

<p>公式のドキュメントにも方法は載っているが、これは、Axios HTTPライブラリを使った方法？のよう。<br/>
上記でないと上手く動作しなかったが…やり方が悪いのかもしれない。</p>

<ul>
<li><a href="https://readouble.com/laravel/5.5/ja/csrf.html#csrf-x-csrf-token">X-CSRF-TOKEN | Laravel 5.5 CSRF保護</a></li>
</ul>


<h1>トークン対象外</h1>

<p>一応、トークンの対象外とする方法も。</p>

<p><code>app/http/Middleware/VerifyCsrfToken.php</code>内にて指定してやる。</p>

<p>```
protected $except = [</p>

<pre><code>'ajax/post/path/*',
</code></pre>

<p>];
```</p>

<ul>
<li><a href="https://readouble.com/laravel/5.5/ja/csrf.html#csrf-excluding-uris">URIの除外 | Laravel5.5 CSRF通信</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSVのテキストからLaravelのSeeder用コードを作る]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/10/30/larave-csv-seeder/"/>
    <updated>2017-10-30T10:26:29+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/10/30/larave-csv-seeder</id>
    <content type="html"><![CDATA[<p>CSVのテキストをLaravelのseeder、というか、クエリビルダに変換したかったのでツールを作った。</p>

<!-- more -->


<p><a href="https://laravel-csv-seeder.herokuapp.com/">Laravel CSV Seeder</a></p>

<h1>使い方</h1>

<p><code>Table name</code>にはテーブル名を入れる。<br/>
(何も入れなかった場合はダミーの文字が入る)</p>

<p><code>CSV Format Text</code>にはカンマと改行区切りのCSVフォーマットのテキストを入力する。</p>

<p><code>convert</code>ボタンを押すと、その下のテキストエリアに出力結果が表示される。</p>

<h2>CSVの仕様</h2>

<ul>
<li>項目ごとはカンマ区切り</li>
<li>行は改行区切り</li>
<li>行は以下の仕様

<ul>
<li>1行目 : 日本語項目名。変換後のコードには使用されません</li>
<li>2行目 : 項目名。キーとして使用されます</li>
<li>3行目以降 : インサートされる内容</li>
</ul>
</li>
</ul>


<h2>Github</h2>

<p>コードはGithubにあげた。</p>

<p><a href="https://github.com/k-usk/laravel-csv-seeder">https://github.com/k-usk/laravel-csv-seeder</a></p>

<p>無駄にHeroku Buttonも付けたので自分の環境で動かしたいという人がいたらどうぞ。</p>

<h1>説明</h1>

<p>CSVを読み込んで整形してるだけなんでたいしたことはしてない。<br/>
CSVの整形には以下のライブラリを使用した。</p>

<ul>
<li><a href="http://csv.thephpleague.com/">league/csv</a></li>
</ul>


<h2>その他</h2>

<p>同じようなツールがないか調べたりはしたのだが、CSVをそのままSeederとして使えるものはいくつかあった。</p>

<ul>
<li><a href="https://github.com/Flynsarmy/laravel-csv-seeder">Flynsarmy/laravel-csv-seeder</a></li>
<li><a href="https://github.com/andycrockett/laravel-csv-seeder">andycrockett/laravel-csv-seeder</a></li>
</ul>


<p>後は、エクセルファイルをLaravelで扱うための便利パッケージとか。<br/>
エクセルを作ったりそのまま読み込めたりするよう。これはこれでかなり有用そう。</p>

<ul>
<li><a href="https://github.com/Maatwebsite/Laravel-Excel/blob/2.1/README.md">Maatwebsite/Laravel-Excel</a></li>
<li><a href="https://blog.motimotilab.com/?p=68">Laravel Excelの紹介（Laravel：Excelファイル入出力ライブラリ）</a></li>
</ul>


<p>ただし今回はそこまでのツールではなく、また、アプリ本体にそういう機能は組み込みたくなかったため、別のツールとして作成した。</p>

<h1>参考</h1>

<ul>
<li><a href="https://readouble.com/laravel/5.5/ja/queries.html">Laravel 5.5 データベース：クエリビルダ</a></li>
<li><a href="http://csv.thephpleague.com/9.0/reader/">league/csv cocument</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
