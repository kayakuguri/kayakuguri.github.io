<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vagrant | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/vagrant/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-08-25T10:44:02+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrantを1.7.2にアップデートしたら起動しなくなったメモ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/07/01/update-vagrant/"/>
    <updated>2015-07-01T18:55:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/07/01/update-vagrant</id>
    <content type="html"><![CDATA[<p>Vagrantを1.3くらいから1.7.2にアップデートしたら起動しなくなった。<br/>
解決方法をメモ。</p>

<!-- more -->


<h2>対処方法</h2>

<p>以下のファイルを書き換えた。</p>

<p><code>~/.vagrant.d/setup_version</code><br/>
元は、<code>1.5</code>という文字列が入っていたが、それを、<br/>
<code>1.1</code>という文字に変更した。<br/>
追記ではなく、変更。</p>

<h2>実行</h2>

<p>で、任意のディレクトリで<code>vagrant up</code>すると以下の文言が。</p>

<blockquote><p>Vagrant is upgrading some internal state for the latest version.
Please do not quit Vagrant at this time. While upgrading, Vagrant
will need to copy all your boxes, so it will use a considerable
amount of disk space. After it is done upgrading, the temporary disk
space will be freed.</p>

<p>Press ctrl-c now to exit if you want to remove some boxes or free
up some disk space.</p>

<p>Press the Enter or Return key to continue.</p></blockquote>

<p>そのまま<code>Enter</code>キー叩く。<br/>
しばらく待つと何やら表示されるが、無事、起動。</p>

<pre><code>$ vagrant up
default                   running (virtualbox)
</code></pre>

<p>そもそもvagrantのアップデートやインストールがパッケージってのがめんどくさい。。</p>

<h2>参考</h2>

<p><a href="http://qiita.com/hgsk/items/520b4160804d7299eb34">Vagrant1.5.1へのアップグレード後にvagrant upに失敗する場合の直し方 &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerをvagrantに入れてwebサーバーを立ち上げるまで]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/09/my-first-docker/"/>
    <updated>2015-06-09T20:21:19+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/09/my-first-docker</id>
    <content type="html"><![CDATA[<p>dockerは話にはよく聞くけど全くわからなかったので、とりあえずインストールして動かすところまでやってみた。</p>

<!-- more -->


<h2>Ubuntu</h2>

<p>Dockerはlinux環境でのみ動作可能、ということで、Vagrantにlinux環境を作って、そこにdockerをインストールする。<br/>
さらに、dockerはUbuntuで開発されているとのことなので、同じくUbuntuにインストールしてやるのが一番無難っぽい。</p>

<h3>VagrantBoxの作成</h3>

<p>Ubuntu14の64bit版を使ってvagrantboxを作成する。<br/>
<a href="http://www.vagrantbox.es/">http://www.vagrantbox.es/</a><br/>
このページ内で、<code>trusty</code>で検索。<br/>
(Ubuntu14はtrustyと呼ばれているらしい)</p>

<p>その64bit版のURLをコピー。ちなみに以下のURL。</p>

<blockquote><p><a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box">https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box</a></p></blockquote>

<h3>VagratBoxの追加</h3>

<p>vagrantに追加する。</p>

<pre><code>$ vagrant box add trusty64 https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box
</code></pre>

<p><code>box add</code>で先程コピーしたURLから追加する。<br/>
<code>trusty64</code>としたところはboxの名前なので任意でよい。</p>

<p>10分くらい待つと完了した。</p>

<h3>初期化</h3>

<p>導入したいディレクトリに移動して、初期化する。</p>

<pre><code>$ vagrant init trusty64
</code></pre>

<p>先程指定したboxの名前を使用する。<br/>
ここでもしばらく待つと完了。<br/>
<code>Vagrantfile</code>というファイルが作成される。<br/>
特に編集する必要はないが、IPアドレスのみ変更した。</p>

<h3>起動</h3>

<p>で、起動。</p>

<pre><code>$ vagrant up
</code></pre>

<p>sshで入ってみる。</p>

<p><code>
$ vagrant ssh
Welcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-53-generic x86_64)
...
vagrant@vagrant-ubuntu-trusty-64:~$
</code></p>

<h2>Doker</h2>

<h3>インストール</h3>

<p>で、Dockerをインストール。<br/>
公式に沿って実行する。<br/>
<a href="https://docs.docker.com/installation/ubuntulinux/">https://docs.docker.com/installation/ubuntulinux/</a></p>

<p>まずは必要なパッケージをインストール。</p>

<p><code>
$ sudo apt-get update
$ sudo apt-get install linux-image-generic-lts-trusty
$ sudo reboot
</code></p>

<p>再起動後、dockerのインストール。<br/>
<code>wget</code>がインストールされているかを確認。<br/>
インストールされていたので、そのまま進む。</p>

<pre><code>$ which wget
/usr/bin/wget
</code></pre>

<p>で、dockerパッケージをダウンロードし、インストールする。</p>

<pre><code>$ wget -qO- https://get.docker.com/ | sh
</code></pre>

<p>しばらく待つと完了。</p>

<pre><code>$ docker --version
Docker version 1.6.2, build 7c8fca2
</code></pre>

<h2>Docker image</h2>

<h3>pull</h3>

<p><a href="https://registry.hub.docker.com/">https://registry.hub.docker.com/</a><br/>
上記サイトから任意のimageを引っ張ってくる。<br/>
<code>centos</code>のイメージを入れてみる。<br/>
<a href="https://registry.hub.docker.com/search?q=centos&amp;searchfield=">centosの検索結果</a></p>

<pre><code>$ sudo docker pull centos
</code></pre>

<p>入っているimageのリストは以下で確認できる。</p>

<pre><code>$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
centos              latest              fd44297e2ddb        6 weeks ago         215.7 MB
</code></pre>

<h3>Container</h3>

<p>で、落としてきたimageからcontainerを作成して、その上で簡単なコマンドを走らせてみる。</p>

<pre><code>$ sudo docker run centos echo "hello world!"
hello world!
</code></pre>

<p><code>docker run</code>で指定したimageからcontainerを作成。<br/>
その後に続くコマンドをそのcontainer上で実行している。</p>

<p>実行されたcontainerを確認スルには以下。<br/>
(<code>-a</code>のオプションを外すすと実行中のcontainerが表示される。)</p>

<pre><code>$ sudo docker ps -a
CONTAINER ID        IMAGE               COMMAND                CREATED              STATUS                          PORTS               NAMES
0a84f937b7c        centos:latest       "echo 'hello world!'   About a minute ago   Exited (0) About a minute ago                       agitated_banach
</code></pre>

<h2>Webサーバーの立ち上げ</h2>

<h3>dockerfile</h3>

<p>dockerfileを作る。</p>

<pre><code>$ vim Dockerfile
</code></pre>

<p>中身は簡単に以下のように。</p>

<p>```
FROM centos
MAINTAINER xxx</p>

<p>RUN yum install -y httpd
ADD ./index.html /var/www/html/
EXPOSE 80
CMD [&ldquo;/usr/sbin/httpd&rdquo;, &ldquo;-D&rdquo;, &ldquo;FOREGROUND&rdquo;]
```</p>

<p><code>MAINTAINER</code>は作成者の名前などを書いてやるのが習慣らしい。</p>

<p>index.htmlを適当に作成。</p>

<p><code>
&lt;html&gt;
&lt;body&gt;
hello docker world!
&lt;/body&gt;
&lt;/html&gt;
</code></p>

<h3>build</h3>

<p>で、ビルドする。<br/>
ビルドで、imageからdockerfile内のコマンドを使用してcontainerを作成し、さらにその結果を新しくimageに出力する、ところまでをやってくれるコマンドのよう。</p>

<pre><code>$ sudo docker build -t test/httpd .
</code></pre>

<p><code>test/httpd</code>はcontainerの名前。任意でよい。<br/>
最後の<code>.</code>は現在のディレクトリでビルド、ということ。</p>

<p>しばらく待って完了…と行きたいところだけど、どうやらエラーが出て止まってしまってるよう。</p>

<p><code>
Complete!
INFO[0012] The command [/bin/sh -c yum install -y httpd] returned a non-zero code: 1
</code></p>

<p>Complete!って出てるけど、その先のStepに進まない…。</p>

<h3>エラー回避</h3>

<p>ググってみると以下がヒット。<br/>
<a href="http://fujita222.hateblo.jp/entry/2015/03/10/163657">Dockerのcentosでapacheインストール失敗する。rpmがうんちゃらとか言われる</a></p>

<p>どうやらpullしてきたcentOSがあたらしすぎてダメだったよう。<br/>
なので、この記事どおりcentos6をpullして使う。</p>

<pre><code>$ sudo docker pull centos:centos6
$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
centos              centos6             b9aeeaeb5e17        6 weeks ago         202.6 MB
</code></pre>

<p>で、<code>Dockerfile</code>の中身をcentos6を使うように修正。</p>

<p>```
FROM centos:centos6
MAINTAINER xxx</p>

<p>RUN yum install -y httpd
ADD ./index.html /var/www/html/
EXPOSE 80
CMD [&ldquo;/usr/sbin/httpd&rdquo;, &ldquo;-D&rdquo;, &ldquo;FOREGROUND&rdquo;]
```</p>

<p>これで再度実行。</p>

<pre><code>$ sudo docker build -t test/httpd .
</code></pre>

<p>ようやく無事、完了。</p>

<pre><code>$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
test/httpd          latest              74ea9508c04c        52 seconds ago      271.2 MB
centos              centos6             b9aeeaeb5e17        6 weeks ago         202.6 MB
</code></pre>

<h3>run</h3>

<p>ポートを指定してバックグラウンドで実行。</p>

<pre><code>$ sudo docker run -p 8080:80 -d test/httpd
</code></pre>

<p>起動している。</p>

<pre><code>$ sudo docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                  NAMES
4aca4268ffa3        test/httpd:latest   "/usr/sbin/httpd -D    15 seconds ago      Up 15 seconds       0.0.0.0:8080-&gt;80/tcp   compassionate_poincare
</code></pre>

<p>Vagrantfileで指定したIPアドレスに8080のポートをつけてやればアクセスが出来る。</p>

<blockquote><p><a href="http://192.168.33.30:8080/">http://192.168.33.30:8080/</a></p></blockquote>

<p>アクセスすると、先程作成した<code>index.html</code>が表示された。</p>

<p>なんだかんだで大変だったけどとりあえず起動できた。</p>

<h2>参考</h2>

<p><a href="http://dotinstall.com/lessons/basic_docker">Docker入門 (全11回) &ndash; プログラミングならドットインストール</a><br/>
<a href="http://tech.lexues.co.jp/archives/1569">【社内勉強会】Docker入門してみました | LexTech</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant環境での環境変数の設定方法]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/26/vagrant-env/"/>
    <updated>2015-05-26T17:54:23+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/26/vagrant-env</id>
    <content type="html"><![CDATA[<p>vagrant環境で環境変数を使いたかったので調べてみたところ、<br/>
httpdファイルへの追記が必要とのことで試してみた。</p>

<!-- more -->


<h2>httpd</h2>

<p><code>/etc/sysconfig/httpd</code>このファイルへ必要な環境変数を記述し、<code>vagrant up</code>すればよい。</p>

<pre><code>export SET_VALUE=hoge
</code></pre>

<p>httpdの中身はデフォルトでは全てコメントアウトされているので、上記だけを記述したファイルに差し替えてもOK。</p>

<h2>再起動</h2>

<p><s>apacheの再起動ではだめで、vagrant自体の再起動が必要。</s><br/>
追記：apacheの再起動だけで大丈夫でした。</p>

<pre><code>$ vagrant reload
</code></pre>

<p>phpinfoで出力させてみると、無事、反映されていた。</p>

<p><img src="/images/2015/05/enviroment.jpg" alt="" /></p>

<h2>$_ENV</h2>

<p>これで反映はされたが、環境変数を取得するための、<code>$_ENV</code>が動作しなかった。<br/>
<code>getenv()</code>だと正しく取得出来る。</p>

<p>調べて見ると、<code>php.ini</code>の設定で<code>ENV</code>を使用するかを設定出来るよう。<br/>
デフォルトでは使用するようになっているようだが、なぜか使用しないようになっていた。</p>

<p>設定する場合は以下のように記述。<br/>
場所は、<code>/etc/php.ini</code>にあった。</p>

<pre><code>variables_order = "EGPCS"
</code></pre>

<p>EGPCSというのは以下のように頭文字となっている。</p>

<blockquote><p>EGPCS (Environment (環境変数)、 Get、Post、 Cookie (クッキー)、そして Server)<br/>
<a href="http://php.net/manual/ja/ini.core.php">http://php.net/manual/ja/ini.core.php</a></p></blockquote>

<p>これを反映して再起動。</p>

<h2>Vagrantでの反映</h2>

<p>ファイルは予め用意しておき、<code>vagrant up</code>だけで反映されるようにしてみる。<br/>
とはいえ、シェルでコピーしているだけだけど。</p>

<p>セットアップ用のシェルスクリプト内に以下を追記。<br/>
設定用の<code>httpd</code>ファイルはVagrantfileと同階層の<code>vagrant.config</code>ディレクトリ以下に設置しているものとする。</p>

<pre><code>cp /vagrant/vagrant.config/httpd /etc/sysconfig/httpd
</code></pre>

<p>この状態で、<code>vagrant up</code>すれば、<code>vagrant.config</code>内で設定したファイルがvagrant環境に反映される。</p>

<h2>参考</h2>

<p><a href="http://yukke.blog3.fc2.com/blog-entry-68.html">ブログ Apache＋PHPで環境変数を追加したい</a></p>

<p>この参考記事でわかったけれど、同じく<code>Apache Environment</code>と<code>environment</code>でハマってた。<br/>
以下のような関係になっているらしい。</p>

<table>
<thead>
<tr>
<th>方法 </th>
<th> 反映先 </th>
<th> 取得方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>httpd.conf </td>
<td> Apache Environment </td>
<td> $_SERVER</td>
</tr>
<tr>
<td>httpd </td>
<td> environment </td>
<td> $_ENV</td>
</tr>
</tbody>
</table>


<p><a href="http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q11102244256">phpで環境変数$_ENVを使用しようとしていますが使用できない状態です。&hellip; &ndash; Yahoo!知恵袋</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrantの起動時のシェルスクリプトのメモ。composerとpostgresql9.3]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/01/28/vagrant-shell-composer-postgresql/"/>
    <updated>2015-01-28T14:33:11+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/01/28/vagrant-shell-composer-postgresql</id>
    <content type="html"><![CDATA[<p>調べて組み込んだので具体的なコードをメモ。</p>

<!-- more -->


<h3>Composer</h3>

<pre><code># Composer
curl -sS https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/composer
</code></pre>

<h3>PostgreSQL 9.3</h3>

<p>centOS6に標準で入っているPostgreSQLは8.3。<br/>
なので、9.3を指定して入れる。</p>

<pre><code># postgresql
# 9.3
rpm -ivh http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-centos93-9.3-1.noarch.rpm
yum -y install postgresql93-server
if [ ! -f /var/lib/pgsql/9.3/data/postgresql.conf ]; then
    su postgres -c '/usr/pgsql-9.3/bin/initdb --no-locale -D /var/lib/pgsql/9.3/data'
    if [ -f /vagrant/postgresql.conf ]; then
        cp -a /vagrant/postgresql.conf /var/lib/pgsql/9.3/data/
    fi
fi
/sbin/service postgresql-9.3 restart
/sbin/chkconfig postgresql-9.3 on
</code></pre>

<h3>参考</h3>

<p><a href="http://www.slideshare.net/shin1x1/vagrant-php">Vagrant で作る PHP 開発環境 [実践編]</a></p>
]]></content>
  </entry>
  
</feed>
