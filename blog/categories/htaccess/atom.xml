<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: htaccess | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/htaccess/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2018-06-05T12:06:37+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apache2.4でアクセス制御の方法を調べた]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/12/14/htaccess-reuire-setting/"/>
    <updated>2017-12-14T12:59:05+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/12/14/htaccess-reuire-setting</id>
    <content type="html"><![CDATA[<p>Apache2.4からアクセス制御の方法が、<code>RequireAny</code>とかを使った方法になっているよう。<br/>
ちょっとよくわからなかったので調べて整理してみたメモ。</p>

<!-- more -->


<h1>基本</h1>

<p>基本は、以下の３つのタグで囲って条件付けしていく。</p>

<ul>
<li><code>RequireAny</code> &ndash; どれか一つでも当てはまれば許可</li>
<li><code>RequireAll</code> &ndash; 全てに当てはまれば許可</li>
<li><code>RequireNone</code> &ndash; どれか一つでも当てはまれば拒否</li>
</ul>


<p>デフォルト、何も囲わなければ <code>RequireAny</code> となるよう。</p>

<p>```
<RequireAny></p>

<pre><code>Require {判定する内容}
Require {判定する内容}
</code></pre>

<p></RequireAny>
```</p>

<h1>判定文基本</h1>

<p>```</p>

<h1>xxのとき許可</h1>

<p>Require xx</p>

<h1>xxでないとき許可</h1>

<p>Require not xx</p>

<h1>全て許可</h1>

<p>Require all granted</p>

<h1>全て拒否</h1>

<p>Require all denied
```</p>

<h1>env</h1>

<p><code>env</code>で変数的に値を設定出来る。<br/>
以下みたいな感じ。</p>

<blockquote><p>SetEnvIf {種類} {値} {変数名}</p></blockquote>

<p>```</p>

<h1>URI</h1>

<p>SetEnvIf Request_URI /hoge/ valid-url
SetEnvIf Request_URI &ldquo;^/hoge/*&rdquo; valid-url  #正規表現</p>

<h1>IP</h1>

<p>SetEnvIf REMOTE_ADDR 192.168.33.1 valid-ip
SetEnvIf X-Forwarded-For 000.00.000.000 valid-ip  #ロードバランサ使用時
```</p>

<h2>URI表記の揺れ</h2>

<p>正規表現を使わない場合は正しくかかないと無視されてしまう部分があった。<br/>
例えば、<code>/api/</code>以下のディレクトリを許可したい場合。<br/>
<code>SetEnvIf Request_URI xxx valid-url</code><br/>
ここの、<code>xxx</code>に入るものを色々変えてアクセスしてみた。<br/>
(<code>api/test.php</code>に対してのアクセス結果)</p>

<ul>
<li>◯ : <code>/api/*</code></li>
<li>◯ : <code>/api/</code></li>
<li>◯ : <code>/</code></li>
<li>◯ : <code>/a</code></li>
<li>× : <code>/test/</code></li>
<li>◯ : <code>/test</code></li>
<li>◯ : <code>/t</code></li>
<li>× : <code>/t/</code></li>
<li>◯ : <code>"^/api/*"</code></li>
<li>◯ : <code>"^/api"</code></li>
<li>◯ : <code>"^/a"</code></li>
<li>× : <code>"^/test/"</code></li>
<li>× : <code>"^/t"</code></li>
</ul>


<p>正規表現を利用すると意図した通り動いているが、正規表現を利用しない場合には、スラッシュの後の文字列は無視されているような挙動をしている。<code>/api</code>でも<code>/test</code>でも<code>/</code>と同じ。注意が必要。</p>

<h1>ベーシック認証</h1>

<p>ベーシック認証の設定などは以下。</p>

<p><code>
AuthType Basic
AuthName "Password Required"
AuthUserFile /var/www/.htpasswd
</code></p>

<p>で、認証されたユーザを許可、は以下を記述。</p>

<p><code>
Require valid-user
</code></p>

<h1>組み合わせ</h1>

<p>で、これらを組み合わせて設定した制御をかけていく。<br/>
例えば…<br/>
ベーシック認証をかけるが、特定のIPは許可。さらに特定のディレクトリは常に許可する、とかの場合</p>

<p>```</p>

<h1>Basic認証</h1>

<p>AuthType Basic
AuthName &ldquo;Password Required&rdquo;
AuthUserFile /var/www/.htpasswd</p>

<h1>env</h1>

<p>SetEnvIf REMOTE_ADDR 192.168.33.1 valid-ip
SetEnvIf Request_URI &ldquo;^/hoge/*&rdquo; valid-url</p>

<h1>条件</h1>

<p><RequireAny></p>

<pre><code>Require valid-user
Require env valid-ip
Require env valid-url
</code></pre>

<p></RequireAny>
```</p>

<p><code>RequireAny</code>の条件なのでいずれかに合致すればアクセスが許可される。<br/>
URIの指定は正規表現を使っておいた方が確実。</p>

<h1>Laravelの場合</h1>

<p>Laravelで同じようにURIを利用して制御したい場合は、制御対象のURIだけを許可してやるだけではダメだった。<br/>
理由はルーティングの仕組みにあって、Laravelの場合はアクセスされた際に一旦、<code>index.php</code>にリダイレクトさせてからLaravelを起動し、ルーティングをさせる仕組みになっている。<br/>
よって、<code>/index.php</code>を許可しておいてやらないと認証が通らなくなってしまう。</p>

<p>```
SetEnvIf Request_URI &ldquo;^/hoge/*&rdquo; valid-url
SetEnvIf Request_URI &ldquo;^/index.php&rdquo; laravel</p>

<p><RequireAny></p>

<pre><code>Require valid-user #ベーシック認証
Require env valid-url
Require env laravel
</code></pre>

<p></RequireAny>
```</p>

<p>ただしこの方法だと、<code>/index.php</code>への直接のアクセス(トップページ)は許可されてしまうので注意。<br/>
(とはいえ、読み込んでいる別ディレクトリのcssやjsや画像なんかは拒否される）<br/>
(<code>/</code>へのアクセスは拒否される。)</p>

<h1>参考</h1>

<ul>
<li><a href="http://www.nofuture.tv/diary/20130813.html">Apache 2.4のアクセス制御をもうちょっとマジメに見てみた &ndash; Days of Speed(2013-08-13)</a></li>
<li><a href="https://celeumu.com/articles/20171124001037">Apache2.4で一部のディレクトリのみBasic認証</a></li>
<li><a href="https://blog.e2info.co.jp/2016/09/04/aws_phpmyadmin_basic_ip_auth/">AWSに設置したphpMyAdminにBasic認証を設定/特定のIPアドレスによる制限 &ndash; ハマログ</a></li>
<li><a href="https://serverfault.com/questions/588096/apache-setenvif-failing-to-match-request-uri">Apache SetEnvIf failing to match Request_Uri</a></li>
<li><a href="http://3.1415.jp/kc47fh1k/">HTTPクライアントの接続元IPアドレスを知る</a></li>
</ul>


<p><code>SetEnvIf</code>で指定出来る要素は以下にドキュメントがあった。<br/>
<a href="https://httpd.apache.org/docs/2.4/ja/mod/mod_setenvif.html">mod_setenvif &ndash; Apache HTTP サーバ バージョン 2.4</a><br/>
<code>SetEnvIf ディレクティブ</code> のセクション</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[さくらのレンタルサーバでのhttps強制とベーシック認証]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/10/10/sakura-ssl/"/>
    <updated>2017-10-10T14:55:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/10/10/sakura-ssl</id>
    <content type="html"><![CDATA[<p>普段はheorkuを触っている事が多いのだが、今回はさくらのレンタルサーバを使用することになり、その環境でのhttps強制を設定しようとしたところ、リダイレクトループでハマったのでメモ。</p>

<!-- more -->


<h2>通常のリダイレクト</h2>

<p>どうやらさくらのサーバはかなりクセの強いことで有名らしく、以下のような普通の？https強制のコードだとリダイレクトループとなってしまう。</p>

<p><code>
RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
</code></p>

<h2>ロードバランサのリダイレクト</h2>

<p>ロードバランサを使っている場合は<code>HTTPS</code>が<code>on</code>にならないため、ずっとoffの状態になりリダイレクトループが起こる。<br/>
よって、以下のように書く。</p>

<p><code>
RewriteEngine On
RewriteCond %{HTTP:X-Forwarded-Proto} !https
RewriteRule ^(.*)?$ https://%{HTTP:Host}%{REQUEST_URI} [L,R=301]
</code></p>

<h2>さくらのリダイレクト</h2>

<p>しかしさくらの場合は特殊なようで、以下ような挙動になっているよう。</p>

<ul>
<li><code>%{SERVER_PORT}</code>には常に<code>80</code>が設定されている</li>
<li>SSLアクセス時には、<code>%{ENV:HTTPS}</code>には<code>ON</code>、<code>%{HTTP:X-Sakura-Forwarded-For}</code>にはリクエスト元のIPが設定される</li>
</ul>


<p>よってhttps<strong>でない</strong>判定の場合は、<code>%{ENV:HTTPS}</code>がonではない、<code>%{HTTP:X-Sakura-Forwarded-For}</code>は空、の場合はリダイレクト、という判定にすればよいよう。</p>

<p>よって以下となる。</p>

<p><code>
RewriteEngine On
RewriteCond %{ENV:HTTPS} !^on$
RewriteCond %{HTTP:X-SAKURA-FORWARDED-FOR} ^$
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
</code></p>

<h2>ベーシック認証</h2>

<p>ベーシックをかける際に、そのままベタで書いてしまうとhttpsへリダイレクトさせている関係上、httpでベーシック認証、httpsでベーシック認証、と2回聞かれることになってしまう。<br/>
これをhttpsでのアクセス時にのみ有効としたいので、上記のさくらサーバの特性を活かして、<code>%{HTTP:X-Sakura-Forwarded-For}</code>が空でない場合にのみ、ベーシックを有効とするようにした。<br/>
(<code>%{ENV:HTTPS}</code>は、ケースによっては<code>on</code>にならない場合もあるよう)</p>

<p><code>
&lt;If "%{HTTP:X-SAKURA-FORWARDED-FOR} != ''"&gt;
AuthType Basic
AuthName "Input your ID and Password."
AuthUserFile /your/password/path/.htpasswd
require valid-user
&lt;/If&gt;
</code></p>

<h2>参考</h2>

<ul>
<li><a href="https://qiita.com/foursue/items/58e74c4a8c946dd49e12">htaccessでHTTPSにリダイレクトする &ndash; Qiita</a></li>
<li><a href="https://qiita.com/kumita_ryusuke/items/377428f4d8219608bdbd">【AWS】ロードバランサー+ApacheでHTTPSリダイレクトをしてみる &ndash; Qiita</a></li>
<li><a href="https://qiita.com/kawaz/items/5e96dae9686e3ac402fe">httpsへ強制リダイレクトするコピペ用RewriteRule（ELBやCloudFront対応） &ndash; Qiita</a></li>
<li><a href="http://furyu.hatenablog.com/entry/20150410/1428674881">さくらのレンタルサーバ・共有SSLで .htaccess によりSSLのみのアクセス許可を設定する方法 &ndash; 風柳メモ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[サブディレクトリに別のベーシック認証をかける]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/13/htpasswd-subdir/"/>
    <updated>2016-09-13T17:58:10+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/13/htpasswd-subdir</id>
    <content type="html"><![CDATA[<p>サイト全体にベーシック認証をかけ、特定のサブディレクトリにのみ、違うベーシック認証をかけたかったのだが、ちょっと苦労したのでメモ。</p>

<!-- more -->


<h1>状況</h1>

<p>まず、状況。<br/>
ドキュメントルートは、<code>/app/public/</code>とする。<br/>
(htpasswdは適切な階層にそれぞれおかれているとする）</p>

<h3>全体のベーシック認証</h3>

<p>全体のベーシック認証は以下のようにかけていた。<br/>
<code>/app/public/.htaccess</code></p>

<p>```
<If "%{HTTP_HOST} != 'dev.example.com'"></p>

<pre><code>AuthUserFile /app/.htpasswd
AuthType Basic
AuthName "Restricted Access"
Require valid-user
</code></pre>

<p></If>
```</p>

<p>開発環境でのみベーシック認証をかけたかったため、<code>&lt;If&gt;</code>ディレクティブにてホスト名で切り分けている。</p>

<h3>サブディレクトリのベーシック認証</h3>

<p>サブディレクトリのベーシック認証の設定は以下。<br/>
<code>/app/public/subdir/.htaccess</code></p>

<p><code>
AuthUserFile /app/public/subdir/.htpasswd
AuthType Basic
AuthName "Restricted Access"
Require valid-user
</code></p>

<h2>結果</h2>

<p>サブディレクトリにアクセスすると、全体用のベーシック認証がかかった状態となってしまった。</p>

<h1>Ifディレクティブ</h1>

<p>色々試したり調べたりした結果、設定内容自体に間違いがあるわけではなく、実行順の問題ということがわかった。<br/>
全体のベーシック認証にて、Ifディレクティブを使用しているため特殊となっていた。</p>

<p>このIfディレクティブはapache2.4から使用可能になった機能となっている。<br/>
<a href="https://httpd.apache.org/docs/2.4/ja/mod/core.html#if">https://httpd.apache.org/docs/2.4/ja/mod/core.html#if</a></p>

<p>ドキュメントを読むと、以下のように書かれている。</p>

<blockquote><p><code>&lt;If&gt;</code> は <code>&lt;Files&gt;</code> と同じ処理順と用法になっています。</p></blockquote>

<p><code>&lt;Files&gt;</code>のドキュメントを参照してみると、以下の実行順となっていることが記載されていた。<br/>
<a href="https://httpd.apache.org/docs/2.4/ja/sections.html">https://httpd.apache.org/docs/2.4/ja/sections.html</a></p>

<ol>
<li><code>&lt;Directory&gt;</code> (正規表現無し) と <code>.htaccess</code> を同時に (<code>.htaccess</code> が許可されていれば、それが <Directory> を上書きします)</li>
<li><code>&lt;DirectoryMatch&gt;</code> (と <code>&lt;Directory ~&gt;</code></li>
<li><code>&lt;Files&gt;</code> と <code>&lt;FilesMatch&gt;</code> を同時に</li>
<li><code>&lt;Location&gt;</code> と <code>&lt;LocationMatch&gt;</code> を同時に</li>
</ol>


<p>ということで、<code>&lt;If&gt;</code>は3番目の実行順、となる。</p>

<p>よって、最初の設定での実行順を書き出してみると以下になっている事がわかる。</p>

<ol>
<li>全体の<code>.htaccess</code> → ベーシックの設定なし</li>
<li>サブディレクトリの <code>.htaccess</code> → ベーシック認証あり</li>
<li>全体の <code>.htaccess</code> 内の <code>&lt;If&gt;</code>ディレクティブ内 → ベーシック認証あり、上書き</li>
</ol>


<p>このように最後に<code>&lt;If&gt;</code>ディレクティブが実行されているため、ベーシック認証が全体のものに上書きされていたということがわかった。</p>

<h1>対応</h1>

<p>全体のベーシック認証で、<code>&lt;if&gt;</code>ディレクティブを外すことは出来ないので、サブディレクトリのベーシック認証の設定でも、<code>&lt;If&gt;</code>ディレクティブを(無理矢理)使うことで解決させた。</p>

<p>サブディレクトリのベーシック認証の設定は以下のようにした。</p>

<p>```
<If true></p>

<pre><code>AuthUserFile /app/public/subdir/.htpasswd
AuthType Basic
AuthName "Restricted Access"
Require valid-user
</code></pre>

<p></If>
```</p>

<p>プログラムとしては無駄なIfなのであまり綺麗な方法ではないかもしれないが…。<br/>
とりあえず、これで意図した動作をさせることが出来た。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[htaccessを使ったリダイレクトを学ぶ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/18/htaccess-redirect/"/>
    <updated>2015-04-18T00:30:30+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/18/htaccess-redirect</id>
    <content type="html"><![CDATA[<p>htaccessを使ったリダイレクトはたまに設定するけれど、いつもよくわからないままだったのでちょっと調べてみた。</p>

<!-- more -->


<h2>やりたかった事</h2>

<p>今回やりたかった事は、<br/>
特定のサブドメインにアクセスがあった場合に、別のサブドメインに転送する、というもの。<br/>
<code>hoge.sample.com</code>を、<code>redirect.sample.com</code>にリダイレクトするとする。</p>

<p>なので今回はこれを実現する部分のみの調査となってます。</p>

<h2>RewriteCond</h2>

<p>書式はこんな感じ。</p>

<pre><code>RewriteCond %変数名(テスト文字列) 条件パターン(正規表現) [フラグ]
</code></pre>

<p>変数名は、<code>{}</code>で囲んで記述する。<br/>
特定のサブドメインにアクセスがあったら、という条件なので、変数は、<br/>
<code>HTTP_HOST</code>を使用。<code>HTTP_HOST</code>はホスト名、<br/>
例えば、<code>http://test.example.com/test.html</code>というアドレスにアクセスがあった場合は、<code>test.example.com</code>のみを取得する。<br/>
変数を入れると以下。</p>

<pre><code>RewriteCond %{HTTP_HOST} 条件パターン(正規表現) [フラグ]
</code></pre>

<p>条件パターンはこの場合は特定のサブドメイン、というものだけなので、そのまま書けば良い。</p>

<pre><code>RewriteCond %{HTTP_HOST} ^hoge.sample.com$ [フラグ]
</code></pre>

<p>ただしそのままとは言っても全くそのままではなく、先頭と末尾の指定がいるよう。<br/>
<code>^</code>が行頭を表す記号。<code>$</code>が行末を表す記号。となる。</p>

<p>残ったフラグ、は、AND、OR、大文字小文字の区別、を記述する。<br/>
RewriteCondを複数行指定し、ここに条件を書くことになる。</p>

<pre><code>RewriteCond %{xx} ^条件1$ [OR]
RewriteCond %{oo} ^条件2$
</code></pre>

<p>こうすれば、条件１か条件２がヒットすれば、となる。</p>

<p>大文字小文字の区別は、<strong>区別しない場合に</strong><code>NC</code>と書く。<br/>
デフォルトでは区別する。<br/>
今回は区別するってことで指定なしで。</p>

<h2>RewriteRule</h2>

<p>書式はこんな感じ。</p>

<pre><code>RewriteRule URL書換＆転送の記述 [オプション]
</code></pre>

<p>今回はドキュメントルートにアクセスされたら、指定のサブドメインにリダイレクト、となるので、以下のように。</p>

<pre><code>RewriteRule ^/$ http://redirect.sample.com
</code></pre>

<p>行頭行末で<code>/</code>を囲んで、ドキュメントルートを指定。<br/>
リダイレクト先に別のサブドメインを指定。<br/>
ただし、ドキュメントルートの指定は<code>/</code>で始める場合と始めない場合があるよう。<br/>
<a href="http://weblabo.oscasierra.net/apache-rewrite-base/">ApacheのRewriteを設定する前に知っておくべきこと | WEB ARCH LABO</a></p>

<p>サーバー環境によって変わってくるって事はわかった。<br/>
今回はどうやら<code>/</code>は必要ないようだったのでなしで設定した。</p>

<p>あとはオプション。<br/>
リダイレクトの方法は今回は恒久的なリダイレクト、ってことで、<code>301</code>を指定。
<a href="https://www.suzukikenichi.com/blog/difference-between-301-redirect-and-302-redirect/">301リダイレクトと302リダイレクトの違い | 海外SEO情報ブログ</a><br/>
特に理由がない限りは301でよさそう。</p>

<p>もう一つ、オプションとして、<code>L</code>をつけておく。<br/>
<code>L</code>をつけておくとこのルールが適用された場合はこれ以降のルールは使用しない、という設定となる。<br/>
その他のオプションについては以下。<br/>
<a href="http://blog.dawgsdk.org/weblog/archives/411011">Apache : mod_rewriteリファレンス &ndash; dawgsdk.org</a></p>

<p>最終的なルールは以下。</p>

<pre><code>RewriteRule ^$ https://ssl.cp.4143.com [R=301,L]
</code></pre>

<p>今回は使用していないが、もし複数のルールが合った場合はどうなるかと言うと、条件に対しては一つしかルールは設定出来ないよう。</p>

<pre><code>RewriteCond 条件1
RewriteRule ルール1
RewriteRule ルール2
</code></pre>

<p>上記のような記述があった場合、条件1が満たされる場合はルール1が適応され、それ以外はルール2が適応される。<br/>
なので条件を指定する場合は、<code>RewriteCond</code>と<code>RewriteRule</code>をセットで書く必要がある。</p>

<h2>結果</h2>

<p>完成。</p>

<pre><code>RewriteCond %{HTTP_HOST} ^cp.4143.com$
RewriteRule ^$ https://ssl.cp.4143.com [R=301,L]
</code></pre>

<h2>最終的な記述</h2>

<pre><code>&lt;IfModule mod_rewrite.c&gt;
    RewriteEngine on
    RewriteBase /
    RewriteCond %{HTTP_HOST} ^cp.4143.com$
    RewriteRule ^$ https://ssl.cp.4143.com [R=301,L]
&lt;/IfModule&gt;
</code></pre>

<h2>参考</h2>

<p><a href="http://weblabo.oscasierra.net/apache-rewritecond-base/">Apache RewriteCond の基礎知識 | WEB ARCH LABO</a><br/>
<a href="http://www.ksknet.net/apache/rewritecond_rew.html">RewriteCond &ndash; RewriteRuleの条件を設定</a><br/>
<a href="http://noshirossi.blog.fc2.com/blog-entry-203.html">.htaccess　mod_rewriteで画像直リンク禁止 &ndash; 趣味を綴る日記</a><br/>
<a href="http://blog.livedoor.jp/tak_bon/archives/6508443.html">ステム覚書帳 : [Apache]RewriteCondとRewriteRuleは抱き合わせで</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[htaccessによるリダイレクト設定]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/16/redirect-htaccess/"/>
    <updated>2015-02-16T22:16:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/16/redirect-htaccess</id>
    <content type="html"><![CDATA[<p><code>.htaccess</code>を使ったリダイレクトをやってみたメモです。</p>

<!-- more -->


<p>設定内容</p>

<p><code>
RewriteEngine on
RewriteBase /
RewriteRule .* リダイレクト先URL [R=301,L]
</code></p>

<p>これを設置した場所と、<code>RewriteBase</code>の有効な範囲なんかの関係がややこしかったです。</p>

<p>まず、<code>RewriteBase</code>は、参考サイトによると、<br/>
<strong>リダイレクト後のパスにのみ適用</strong>される、との事。<br/>
さらに、<strong>相対パスの時にしか適用されない</strong>。</p>

<p>それと、設置したディレクトリからの相対パスになるので、<br/>
上記の設定だと、設置したディレクトリ以下全てのURLがリダイレクトされます。<br/>
これをドキュメントルートに置くと全てのパスでリダイレクトされます。</p>

<p>htaccessはディレクトリ単位で個別に置けるため、特定のディレクトリだけに適応させる場合は、<br/>
上記の設定をすれば適応出来ます。</p>

<h3>参考</h3>

<p><a href="http://kana-lier.com/web/redirect/">.htaccessを使ったよく使うリダイレクトまとめ</a><br/>
<a href="http://www.cherrypieweb.com/weblog/technical/20131017121752.php">.htaccessによるリダイレクト徹底解説</a></p>
]]></content>
  </entry>
  
</feed>
