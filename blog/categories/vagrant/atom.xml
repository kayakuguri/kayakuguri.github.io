<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vagrant | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/vagrant/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2016-11-17T14:06:53+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ScotchboxでWordPressのローカル環境をサクッと構築する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/11/15/scotchbox-wordpress/"/>
    <updated>2016-11-15T18:50:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/11/15/scotchbox-wordpress</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/flurinduerst/WPDistillery">WPDisillery</a>というScotch BoxのWordPress用キットを利用して簡単にローカルにWordPress環境を作る。</p>

<!-- more -->


<p>手順は以下のままで試してみた。</p>

<p><a href="https://box.scotch.io/">https://box.scotch.io/</a><br/>
[Installing WordPress]</p>

<h1>Setup</h1>

<p><code>WPDistillery</code>のリポジトリをクローンする。<br/>
実質、必要なものは、<code>config.yml</code>と<code>setup.sh</code>の2ファイルだけなので、それを引き上げて他は削除する。</p>

<p><code>
$ git clone git@github.com:flurinduerst/WPDistillery.git
$ mv WPDistillery/config.yml config.yml
$ mv WPDistillery/setup.sh setup.sh
$ rm -rf WPDistillery
</code></p>

<p><code>Scotch Box</code>をクローンする。<br/>
必要なものは<code>Vagrantfile</code>と<code>public</code>フォルダなので引き上げて、その他は削除する。</p>

<p><code>
$ git clone https://github.com/scotch-io/scotch-box.git
$ mv scotch-box/public public
$ mv scotch-box/Vagrantfile Vagrantfile
$ rm -rf scotch-box
</code></p>

<p>この時点で以下のような構造になっているはず。</p>

<p><code>
Vagrantfile
config.yml
public/
setup.sh
</code></p>

<p>ここまでをワンライナーで実行するコマンド。</p>

<p><code>
git clone https://github.com/scotch-io/scotch-box.git &amp;&amp; mv scotch-box/public public &amp;&amp; mv scotch-box/Vagrantfile Vagrantfile &amp;&amp; rm -rf scotch-box &amp;&amp; git clone --depth 1 https://github.com/flurinduerst/WPDistillery.git &amp;&amp; mv WPDistillery/config.yml config.yml &amp;&amp; mv WPDistillery/setup.sh setup.sh &amp;&amp; rm -rf WPDistillery
</code></p>

<h1>Config.yml</h1>

<p>WordPressの設定のために、<code>Config.yml</code>を編集する。</p>

<p>デフォルトでは以下のような内容になっている。<br/>
<a href="https://github.com/flurinduerst/WPDistillery/blob/master/config.yml">https://github.com/flurinduerst/WPDistillery/blob/master/config.yml</a></p>

<h2>言語とタイムゾーン</h2>

<p>デフォルトではアメリカになっているので日本に変更する。<br/>
localeは日本版の場合は、<code>ja</code>となる。(<code>ja_JP</code>ではない)</p>

<p>```</p>

<h1>language/timezone</h1>

<p>wplocale: ja
timezone: &ldquo;Asia/Tokyo&rdquo;
```</p>

<h2>ユーザ</h2>

<p>初期ユーザの設定。(ローカルだし)そのままでも構わない。
```</p>

<h1>admin user settings</h1>

<p>admin:
  user: admin
  password: admin
  email: <a href="&#109;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#109;&#97;&#x69;&#108;&#x40;&#100;&#x6f;&#x6d;&#97;&#105;&#x6e;&#x2e;&#x74;&#x6c;&#x64;">&#x6d;&#97;&#x69;&#108;&#64;&#100;&#111;&#109;&#97;&#x69;&#110;&#46;&#x74;&#x6c;&#x64;</a>
  first_name: &ldquo;&rdquo;
  last_name: &ldquo;&rdquo;
```</p>

<h2>サイトの設定</h2>

<p>サイトのタイトルや説明、パーマリンクの設定など、ブログ全般の設定関係。<br/>
<strong>urlだけ、ホスト名で指定したURLを記入する</strong>。<br/>
その他はそのままで問題なし。</p>

<p>```
wpsettings:
  url: scotchbox
  title: Example Title
  description: Example Description
  permalink_structure: &ldquo;/%postname%/&rdquo;
  thumbnail_width: 150
  thumbnail_height: 150
  medium_width: 300
  medium_height: 300
  large_width: 1024
  large_height: 1024
  # use page as frontpage
  page_on_front: true</p>

<pre><code>frontpage_name: Example Front Page
</code></pre>

<p>  # automatic conversion of smilies
  convert_smilies: false
```</p>

<h2>テーマ</h2>

<p>デフォルトでは、<code>WPSeed</code>というテーマが指定されている。<br/>
<a href="https://github.com/flurinduerst/WPSeed/">flurinduerst/WPSeed: WordPress starter Theme + sage Workflow</a></p>

<p>これはテーマ作成の元になるようなものを集めた、テーマのフレームワーク？みたいなもののよう。</p>

<p>```</p>

<h1>theme to install, choose new name in &lsquo;rename&rsquo; or leave empty</h1>

<p>theme:
  name: WPSeed
  rename: &ldquo;&rdquo;
  url: &ldquo;<a href="https://github.com/flurinduerst/WPSeed/archive/master.zip">https://github.com/flurinduerst/WPSeed/archive/master.zip</a>&rdquo;
  # add branch (e.g. master) or leave empty (&ldquo;&rdquo;) if theme is not downloaded from a git repository
  source_branch: master
```</p>

<p>デフォルトのプラグイン、Twenthsixteenはそのまま入っていた。</p>

<h2>プラグイン</h2>

<p>有効化するものと有効化しないで入れておくものをそれぞれ選択出来る。</p>

<p>インストールして有効化するものは以下。</p>

<p>```</p>

<h1>plugins to install &amp; activate</h1>

<p>plugins_active:
  &ndash; disable-comments
  &ndash; duplicate-post
  &ndash; enable-media-replace
  &ndash; favicon-by-realfavicongenerator
  &ndash; regenerate-thumbnails
  &ndash; simple-page-ordering
  &ndash; user-switching
  &ndash; google-sitemap-generator
```</p>

<p>インストールだけするものは以下。</p>

<p>```</p>

<h1>plugins to install</h1>

<p>plugins_inactive:
  #development
  &ndash; custom-post-type-ui
  &ndash; search-and-replace
  &ndash; capability-manager-enhanced
  #administration
  &ndash; adminimize
  &ndash; admin-menu-editor
  &ndash; admin-menu-reorder
  &ndash; wordpress-seo
  #security/backup
  &ndash; wp-security-audit-log
  &ndash; backwpup
```</p>

<p>好きなものを追加したい場合はここに正式な名前でリストに追加すればよさそう。<br/>
( <code>https://ja.wordpress.org/plugins/</code> の後ろに付くもの)</p>

<p>とりあえず、長くなるけどデフォルトで入っているものを調べてみる。</p>

<h3>有効化されるもの</h3>

<ul>
<li><a href="https://ja.wordpress.org/plugins/disable-comments/">disable-comments</a> &ndash; コメント停止用</li>
<li><a href="https://ja.wordpress.org/plugins/duplicate-post/">duplicate-post</a> &ndash; 記事を複製する</li>
<li><a href="https://ja.wordpress.org/plugins/enable-media-replace/">enable-media-replace</a> &ndash; アップされている画像の置換</li>
<li><a href="https://ja.wordpress.org/plugins/favicon-by-realfavicongenerator/">favicon-by-realfavicongenerator</a> &ndash; ファビコン設定用</li>
<li><a href="https://ja.wordpress.org/plugins/regenerate-thumbnails/">regenerate-thumbnails</a> &ndash; アップロード済みの画像のサムネイルを一括再生成</li>
<li><a href="https://ja.wordpress.org/plugins/simple-page-ordering/">simple-page-ordering</a> &ndash; ページ・カスタム投稿タイプの並び順を入れ替える</li>
<li><a href="https://ja.wordpress.org/plugins/user-switching/">user-switching</a> &ndash; ユーザー切り替え</li>
<li><a href="https://ja.wordpress.org/plugins/google-sitemap-generator/">google-sitemap-generator</a> &ndash; sitemapを自動で作成</li>
</ul>


<h3>インストールのみ</h3>

<ul>
<li><a href="https://ja.wordpress.org/plugins/custom-post-type-ui/">custom-post-type-ui</a> &ndash; カスタム投稿タイプを作成</li>
<li><a href="https://ja.wordpress.org/plugins/search-and-replace/">search-and-replace</a> &ndash; DB内のデータを検索・置換する</li>
<li><a href="https://ja.wordpress.org/plugins/capability-manager-enhanced/">capability-manager-enhanced</a> &ndash; ユーザ権限の管理</li>
<li><a href="https://ja.wordpress.org/plugins/adminimize/">adminimize</a> &ndash; ユーザ権限の管理</li>
<li><a href="https://ja.wordpress.org/plugins/admin-menu-editor/">admin-menu-editor</a> &ndash; 管理画面メニューのカスタマイズ</li>
<li><a href="https://ja.wordpress.org/plugins/admin-menu-reorder/">admin-menu-reorder</a> &ndash; 管理画面メニューの並び替え</li>
<li><a href="https://ja.wordpress.org/plugins/wordpress-seo/">wordpress-seo</a> &ndash; SEO管理</li>
<li><a href="https://ja.wordpress.org/plugins/wp-security-audit-log/">wp-security-audit-log</a> &ndash; 作業ログ管理</li>
<li><a href="https://ja.wordpress.org/plugins/backwpup/">backwpup</a> &ndash; バックアップ</li>
</ul>


<p>一部、重複していたり、更新が止まってたりするものもあるので、実際本番アップする際には精査した方がよさそう。</p>

<h3>設定をスキップする設定</h3>

<p>最後の <code># WPDISTILLERY SETUP</code> のセクションは、自動セットアップをするかどうかの設定。デフォルトでは全てオン(<code>true</code>)になっている。</p>

<p>```
setup:
  wp: true
  settings: true
  theme: true
  plugins: true
  cleanup: true</p>

<pre><code>comment: true
posts: true
files: true
themes: true
</code></pre>

<p>```</p>

<h1>ホスト</h1>

<p><code>Vagrantfile</code>にてホストの設定をする。<br/>
デフォルトでは以下のように、<code>192.168.33.10</code>のIPで、<code>scotchbox</code>というホスト名になっている。<br/>
これを必要ならば、任意のものに変更する。</p>

<p><code>
config.vm.network "private_network", ip: "192.168.33.10"
config.vm.hostname = "scotchbox"
</code></p>

<h1>Vagrantを起動</h1>

<p>ここまでで設定が完了したので、Vagrantを起動する。</p>

<p><code>
$ vagrant up
</code></p>

<h1>設定を実行</h1>

<p>Vagrantが起動したら、WordPressの自動設定を起動するためにVagrantにsshで入る。</p>

<p><code>
$ vagrant ssh
</code></p>

<p>自動設定の前に、<code>WP CLI</code>を最新版に更新し、その後、<code>setup.sh</code>のシェルスクリプトを起動する。</p>

<p>```
$ sudo wp cli update &mdash;allow-root
You have version 0.20.3. Would you like to update to 0.25.0? [y/n] y
Downloading from <a href="https://github.com/wp-cli/wp-cli/releases/download/v0.25.0/wp-cli-0.25.0.phar...">https://github.com/wp-cli/wp-cli/releases/download/v0.25.0/wp-cli-0.25.0.phar...</a>
New version works. Proceeding to replace.
Success: Updated WP-CLI to 0.25.0</p>

<p>$ cd ../../var/www/ &amp;&amp; bash setup.sh
========== WPDISTILLERY START ==========
&hellip;
Do you want to continue anyway? (y/n) y
&hellip;
&hellip;
========== WPDISTILLERY FINISHED ==========
```</p>

<h1>アクセス</h1>

<p>設定したホスト名かIPでアクセスすると、トップページが表示される。<br/>
<code>/wp-login.php</code>でログイン画面が開き、設定したユーザでログインが出来る。
これで無事、起動出来た。</p>

<h1>簡易インストール</h1>

<p>デフォルトのままだとプラグインやテーマが入ってかなり時間がかかるので、さくっと起動するために、ほとんどの設定をオフにしてインストールしてみる。</p>

<p>```
setup:
  wp: true
  settings: false
  theme: false
  plugins: false
  cleanup: false</p>

<pre><code>comment: false
posts: false
files: false
themes: false
</code></pre>

<p>```</p>

<p>これだと、サイトの名前やユーザの設定以外はデフォルトのまま起動できた。<br/>
デフォルトのフルの状態のものよりかなり早いのでこちらの方がよいかもしれない。</p>

<h1>参考</h1>

<ul>
<li><a href="https://box.scotch.io/">Scotch Box ♥ A Vagrant LAMP Stack That Just Works</a></li>
<li><a href="https://github.com/flurinduerst/WPDistillery#setup">flurinduerst/WPDistillery: WordPress Setup runner for Scotch Box</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant (Ubuntu) 環境でhttps接続する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/08/10/vagrant-ubuntu-ssl/"/>
    <updated>2016-08-10T15:18:45+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/08/10/vagrant-ubuntu-ssl</id>
    <content type="html"><![CDATA[<p>本番がhttpsの開発でローカル環境だけhttpで接続していると色々面倒があるため、ローカルのvagrant環境でもhttps接続出来るように調整してみたメモ。</p>

<!-- more -->


<h1>前提</h1>

<p>OSはubuntu。というか、いつものように、vagrantの環境はscotchbox。</p>

<p><a href="https://box.scotch.io/">https://box.scotch.io/</a></p>

<h1>参考</h1>

<p>主に以下を参考にそのまま作業した。ありがとうございます。</p>

<p><a href="http://hidex7777.hatenablog.com/entry/2014/03/18/220943">VagrantでUbuntuサーバ/Apache2のSSL(https) &ndash; orangeProse別館</a></p>

<h1>テスト用の証明書を作成</h1>

<p>まずはモジュールを有効に。</p>

<p><code>
$ sudo a2enmod ssl
$ sudo service apache2 reload
</code></p>

<p>で、テスト用の証明書を作成。</p>

<p><code>
$ sudo make-ssl-cert generate-default-snakeoil --force-ovarwrite
$ sudo make-ssl-cert /usr/share/ssl-cert/ssleay.cnf /etc/apache2/apache.pem
</code></p>

<p>二つ目を実行すると、コンソールの画面全体で設定画面が表示されて証明書の内容を聞かれる。
ひとつ目はコモンネーム。
hostsで指定しているURLを指定しておく。</p>

<p><img src="/images/2016/08/vagrant_ssl_01.jpg" alt="" /></p>

<p>二つ目は、 <code>Subject Alternative Names</code> (サブジェクトの別名)。<br/>
<a href="https://knowledge.geotrust.com/jp/support/knowledge-base/index?vproductcat=G&amp;vdomain=GEOTRUST_JP&amp;page=content&amp;id=SO24206&amp;actp=LIST&amp;viewlocale=ja_JP&amp;locale=ja_JP&amp;redirected=true">「Subject Alternative Names（サブジェクトの別名）」とは何ですか  | GeoTrust<br/>
</a></p>

<p>今回は特に使用しないので空白のままとしておく。</p>

<p><img src="/images/2016/08/vagrant_ssl_02.jpg" alt="" /></p>

<p>apacheを再起動。</p>

<h1>設定ファイル</h1>

<p>このままだとSSL用の設定ファイルがないようなので、<code>default-ssl.conf</code>というファイルをコピーして使用する。</p>

<p><code>
$ cd /etc/apache2/sites-available
$ sudo cp default-ssl.conf ssl.conf
$ sudo a2ensite ssl
$ sudo service apache2 reload
</code></p>

<p>参考サイトでは<code>.conf</code>の拡張子が指定されていなかったのだが、指定されていないとエラーとなってしまう。<br/>
<a href="http://qiita.com/mzmttks/items/85c69313693cb1df4949">Apache2 on ubuntu で a2ensite すると does not exist と言われるときの対処法 &ndash; Qiita</a></p>

<p>最後はapacheを再起動。</p>

<p>この状態で、httpsでアクセスをすると、プライバシーが保護されていない、というような警告が出るが、無視してアクセスすると無事、接続できた。</p>

<p><img src="/images/2016/08/vagrant_ssl_03.jpg" alt="" /></p>

<h1>ドキュメントルート</h1>

<p>しかしhttpでアクセスしていたファイルにアクセスが出来ない。
どうやら、httpsで指定されているドキュメントルートが違っているよう。
先程コピーした、<code>ssl.conf</code>ファイルを見てみる。</p>

<p>すると、以下のようにドキュメントルートが設定されている。</p>

<p><code>
DocumentRoot /var/www/html
</code></p>

<p>今回は、<code>public</code>をドキュメントルートとしているので、そちらに変更する。</p>

<p><code>
DocumentRoot /var/www/public
</code></p>

<p>例によって、apacheを再起動して接続確認。無事、接続出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="https://www.k4750.net/2013/10/13/self-signed-cert/">（正しい）オレオレ証明書の作り方 |  K4750.net</a></li>
<li><a href="http://takuya-1st.hatenablog.jp/entry/20100730/1280474385">超簡単・オレオレ証明書の作り方 &ndash; それマグで！</a></li>
<li><a href="http://blog.inouetakuya.info/entry/20110605/1307261417">それ etckeeper でできるよ &ndash; /etc 以下を Git で自動的にバージョン管理 &ndash; 彼女からは、おいちゃんと呼ばれています</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel HomesteadのPostgreSQLにPosticoから接続する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/06/09/homestead-postgres-via-homestead/"/>
    <updated>2016-06-09T14:56:23+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/06/09/homestead-postgres-via-homestead</id>
    <content type="html"><![CDATA[<p>まとまって情報がなかったのでメモ。</p>

<!-- more -->


<h1>SSH</h1>

<p>ssh接続する際のユーザー名・パスワードは、デフォルトでは、<code>vagrant/vagrant</code>のよう。
ユーザー名はホスト名とは別で、vagrantを立ち上げた状態で以下のコマンドで確認出来た。</p>

<p><code>
$ vagrant ssh-config
Host default
  HostName 127.0.0.1
  User vagrant
  Port 2222
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile /Users/USER_NAME/Vagrant/app_folder/.vagrant/machines/default/virtualbox/private_key
  IdentitiesOnly yes
  LogLevel FATAL
  ForwardAgent yes
</code></p>

<p>この中の、<code>User vagrant</code>という部分。</p>

<p>SSH Hostは、<code>Homestead.yaml</code>で指定したip。
デフォルトは、<code>192.168.10.10</code>だと思う。</p>

<p><code>
ip: "192.168.10.10"
</code></p>

<h1>Postgres</h1>

<p>Postgresはデフォルトでは以下の設定になっている。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">ホスト名 </td>
<td align="left"> localhost </td>
</tr>
<tr>
<td></td>
<td align="left"> DB名 </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> ユーザー名 </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> パスワード </td>
<td align="left"> secret </td>
</tr>
</tbody>
</table>


<h1>Postico</h1>

<p>Posticoから接続する際には、Optionsから、<code>Connect via SSH</code>を選択してSSH接続設定をしておく。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Nickname </td>
<td align="left"> (なんでも) </td>
</tr>
<tr>
<td></td>
<td align="left"> Host </td>
<td align="left"> localhost (デフォルト) </td>
</tr>
<tr>
<td></td>
<td align="left"> Port </td>
<td align="left"> 5432 (デフォルト) </td>
</tr>
<tr>
<td></td>
<td align="left"> User </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> Password </td>
<td align="left"> secret </td>
</tr>
<tr>
<td></td>
<td align="left"> Database </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> SSH Host </td>
<td align="left"> 192.168.10.10 </td>
</tr>
<tr>
<td></td>
<td align="left"> Port </td>
<td align="left"> 22 (デフォルト) </td>
</tr>
<tr>
<td></td>
<td align="left"> User </td>
<td align="left"> vagrant </td>
</tr>
<tr>
<td></td>
<td align="left"> Password </td>
<td align="left"> vagrant </td>
</tr>
<tr>
<td></td>
<td align="left"> Private Key </td>
<td align="left"> なし </td>
</tr>
</tbody>
</table>


<p><img src="/images/2016/06/postico_homestead.jpg" alt="" /></p>

<p>これで接続出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="https://laravel.com/docs/5.1/homestead">Laravel Homestead</a></li>
<li><a href="http://qiita.com/megane42/items/1d8ae7444d8c1b10bbd7">Vagrant で作った VM にやってはいけない2つのこと &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6.5にPHP5.4を入れる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/11/26/centos65-php54/"/>
    <updated>2015-11-26T17:50:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/11/26/centos65-php54</id>
    <content type="html"><![CDATA[<p>CentOS6.5の標準のPHPは5.3。<br/>
5.4環境が欲しかったので作ってみたメモ。</p>

<!-- more -->


<p>PHPは入ってない状態から始める。</p>

<pre><code>$ php -v
-bash: php: command not found
</code></pre>

<h2>rpmでレポジトリを追加</h2>

<p>あまり意味はわかってないですが、epelとremiレポジトリを追加。<br/>
<code>vagrant</code>にSSHで入ってからの作業。</p>

<p><code>
$ sudo rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
$ sudo rpm -Uvh http://dl.iuscommunity.org/pub/ius/stable/Redhat/6/x86_64/ius-release-1.0-11.ius.el6.noarch.rpm
$ sudo rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
</code></p>

<h2>PHPをインストール</h2>

<pre><code>$ sudo yum install php --enablerepo=remi
</code></pre>

<h2>確認</h2>

<pre><code>$ php -v
PHP 5.4.45 (cli) (built: Sep 30 2015 15:56:06) 
Copyright (c) 1997-2014 The PHP Group
Zend Engine v2.4.0, Copyright (c) 1998-2014 Zend Technologies
</code></pre>

<h2>参考</h2>

<p><a href="http://qiita.com/Chrowa3/items/6c045d952a191a1203b4">Vagrant chef/centos-6.5 に PHP 5.4 を突っ込む &ndash; Qiita</a><br/>
<a href="http://blog.ybbo.net/2014/01/22/%E3%80%90%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%80%91centos6%E3%81%ABphp5-4%E3%82%92yum%E3%81%A7%E7%B0%A1%E5%8D%98%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/">【シンプル】CentOS6にPHP5.4をyumで簡単にインストールする手順田舎に住みたいエンジニアの日記 | 田舎に住みたいエンジニアの日記</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant内でArtisanコマンドの実行とPostgreSQLの接続]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/10/13/vagrant-postgresql/"/>
    <updated>2015-10-13T18:48:30+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/10/13/vagrant-postgresql</id>
    <content type="html"><![CDATA[<p><a href="https://box.scotch.io/">Scotchbox</a>で立てたvagrant環境にてlaravelを使用している中で、<br/>
DB利用の際のartisanコマンドが実行出来なかったので調べてみた。</p>

<!-- more -->


<h2>artisan</h2>

<p>そのままvagrantを実行しているローカルのディレクトリ上でartisanコマンドを実行しても仮想環境のDBへの接続が出来ないため、エラーが出てしまう。</p>

<p>```
$ php artisan migrate
[PDOException]
  SQLSTATE[08006] [7] could not connect to server: Connection refused</p>

<pre><code>Is the server running on host "localhost" (::1) and accepting
TCP/IP connections on port 5432?
</code></pre>

<p>  could not connect to server: Connection refused</p>

<pre><code>Is the server running on host "localhost" (127.0.0.1) and accepting
TCP/IP connections on port 5432?
</code></pre>

<p>  could not connect to server: Connection refused</p>

<pre><code>Is the server running on host "localhost" (fe80::1) and accepting
TCP/IP connections on port 5432?
</code></pre>

<p>```</p>

<p>なので、vagrant内にSSHで入ってから実行する必要がある。<br/>
実行するディレクトリは、<code>/var/www</code>となる。</p>

<p><code>
$ vagrant ssh
vagrant@laravel-sample:~$ cd /var/www
vagrant@laravel-sample:/var/www$ php artisan
</code></p>

<p>これでvagrant内のpostgreSQLに対してartisanを実行してテーブルの作成が出来た。</p>

<h2>GUI接続</h2>

<p>ついでに、vagrant内のpostgreSQLをローカルのGUI環境から確認したい場合は、接続情報のSSHの項目も設定してやることで接続が可能。</p>

<p>利用しているソフトが<a href="https://eggerapps.at/postico/">Potico</a>なので、その設定内容のキャプチャ。<br/>
DBの設定内容は、Scotchboxの場合。<br/>
<a href="https://github.com/scotch-io/scotch-box#postgresql">https://github.com/scotch-io/scotch-box#postgresql</a></p>

<p><img src="/images/2015/10/postico.png" alt="" /></p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Host </td>
<td align="left"> localhost</td>
</tr>
<tr>
<td></td>
<td align="left"> User </td>
<td align="left"> root</td>
</tr>
<tr>
<td></td>
<td align="left"> Password </td>
<td align="left"> root</td>
</tr>
<tr>
<td></td>
<td align="left"> Database </td>
<td align="left"> scotchbox</td>
</tr>
<tr>
<td></td>
<td align="left"> SSH Host </td>
<td align="left"> 192.168.33.10</td>
</tr>
<tr>
<td></td>
<td align="left"> (SSH) User </td>
<td align="left"> vagrant</td>
</tr>
<tr>
<td></td>
<td align="left"> (SSH) Password </td>
<td align="left"> vagrant</td>
</tr>
</tbody>
</table>


<h2>参考</h2>

<p><a href="https://laravel10.wordpress.com/2015/02/21/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/">初めてのLaravel 5.1 : (6) データベースの環境設定 | ララ帳</a><br/>
<a href="http://laravel.io/forum/02-11-2014-artisan-error-on-migrate-using-vagrant">aravel.io &ndash; The Laravel Community Portal</a><br/>
<a href="https://snakeycode.wordpress.com/2015/01/02/vagrant-postgresql-and-pgadmin/">Vagrant, PostgreSQL and pgAdmin | Snakey Code</a></p>
]]></content>
  </entry>
  
</feed>
