<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-04-16T11:14:44+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Herokuアドオン]Transloaditアドオンを使ってPHPでファイルアップロード]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/16/heroku-transloadit-1/"/>
    <updated>2015-04-16T10:32:46+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/16/heroku-transloadit-1</id>
    <content type="html"><![CDATA[<p>動画をアップロード + エンコードしてくれるというTransloaditのherokuアドオンを使ってみた。</p>

<!-- more -->


<h2>herokuへのインストール</h2>

<p>無料プランがあるので、とりあえずそれで。</p>

<pre><code>$ heroku addons:add transloadit:sandbox
</code></pre>

<p>無料プランの場合は、Encoding Volumeが1GB、の制限がある。</p>

<p>transloaditの料金体系は少しややこしくなっているようで、<br/>
無料のsandboxプランだと、トータルで1GBになっているよう。</p>

<p><a href="https://addons.heroku.com/transloadit">Transloadit | Add-ons | Heroku</a><br/>
<img src="/images/2015/04/transloadit01.jpg" alt="heroku料金" /></p>

<p>herokuアドオンバージョンじゃない、通常？のプランだと値段が違う。</p>

<p><a href="https://transloadit.com/pricing/">Pricing &amp; Signup | Transloadit</a><br/>
<img src="/images/2015/04/transloadit01.jpg" alt="公式料金" /></p>

<p>この1GBとうのは何が含まれるかというと、公式で説明があった。<br/>
エンコードした場合、する前とした後と両方のサイズが合算されてカウントされるよう。</p>

<p>例えば、0.8MBの画像ファイルをエンコードして0.2MBしたとすれば、それで1MBを使用した事になる。<br/>
で、これを1024回繰り返すと、1GBになるので無料枠は終了。</p>

<p>ファイルの閲覧自体には加算されないよう。</p>

<h2>PHP SDKのインストール</h2>

<p>公式どおり、Composerでインストールする。</p>

<p>```
{
  &ldquo;require&rdquo;: {</p>

<pre><code>"transloadit/php-sdk": "dev-master"
</code></pre>

<p>  }
}
```</p>

<p>ローカルで<code>composer install</code>しておく。<br/>
この際、php5.6以上でないとインストール出来ないので注意。<br/>
(自分の環境ではphp5.4だったので、<a href="http://kayamemo.mrlittlebig.com/blog/2015/04/15/mac-update-php/">アップデートした</a>)</p>

<h2>ファイルのアップロード</h2>

<p>公式に載っていたママだけど、<br/>
アクセスするとheroku上の同じディレクトリに置いたファイルをアップロードするだけ、のサンプルを実行してみる。</p>

<p><strong>PHP全コード</strong></p>

<p>```
&lt;?php
require &lsquo;../vendor/autoload.php&rsquo;;</p>

<p>use transloadit\Transloadit;
$transloadit = new Transloadit(array(</p>

<pre><code>'key' =&gt; getenv('TRANSLOADIT_AUTH_KEY'),
'secret' =&gt; getenv('TRANSLOADIT_SECRET_KEY')
</code></pre>

<p>));</p>

<p>$response = $transloadit->createAssembly(array(</p>

<pre><code>'files' =&gt; array(dirname(__FILE__).'/160x160.png'),
'params' =&gt; array(
    'steps' =&gt; array(
        'resize' =&gt; array(
            'robot' =&gt; '/image/resize',
            'width' =&gt; 100,
            'height' =&gt; 100,
        )
    )
),
</code></pre>

<p>));</p>

<p>// Show the results of the assembly we spawned
echo &lsquo;<pre>&rsquo;;
print_r($response);
echo &lsquo;</pre>&rsquo;;
```</p>

<p><strong>レスポンス</strong></p>

<p>```
transloadit\TransloaditResponse Object
(</p>

<pre><code>[data] =&gt; Array
    (
        [ok] =&gt; ASSEMBLY_EXECUTING
        [message] =&gt; The assembly is currently being executed.
        [assembly_id] =&gt; id
        [parent_id] =&gt; 
        [account_id] =&gt; id
        [template_id] =&gt; 
        [instance] =&gt; xxx.transloadit.com
        [assembly_url] =&gt; http://api2.karima.transloadit.com/assemblies/xxx
        [assembly_ssl_url] =&gt; https://karima.transloadit.com/assemblies/xxx
        [bytes_received] =&gt; 1107
        [bytes_expected] =&gt; 1107
        [upload_duration] =&gt; 1.477
        [client_agent] =&gt; Transloadit PHP SDK v2.0.0
        [client_ip] =&gt; 10.166.13.48
        [client_referer] =&gt; 
        [start_date] =&gt; 2015/04/16 01:29:02 GMT
        [is_infinite] =&gt; 
        [has_dupe_jobs] =&gt; 
        [execution_start] =&gt; 2015/04/16 01:29:03 GMT
        [execution_duration] =&gt; 0.002
        [notify_start] =&gt; 
        [notify_url] =&gt; 
        [notify_status] =&gt; 
        [notify_response_code] =&gt; 
        [notify_duration] =&gt; 
        [last_job_completed] =&gt; 
        [fields] =&gt; Array
            (
            )

        [running_jobs] =&gt; Array
            (
            )

        [bytes_usage] =&gt; 0
        [executing_jobs] =&gt; Array
            (
                [0] =&gt; resize
            )

        [started_jobs] =&gt; Array
            (
                [0] =&gt; resize:::original
            )

        [parent_assembly_status] =&gt; 
        [params] =&gt; {"steps":{"resize":{"robot":"/image/resize","width":100,"height":100}},"auth":{"key":"****","expires":"2015/04/16 03:29:01+00:00"}}
        [template] =&gt; 
        [uploads] =&gt; Array
            (
                [0] =&gt; Array
                    (
                        [id] =&gt; xxx
                        [name] =&gt; 160x160.png
                        [basename] =&gt; 160x160
                        [ext] =&gt; png
                        [size] =&gt; 494
                        [mime] =&gt; image/png
                        [type] =&gt; image
                        [field] =&gt; file_1
                        [md5hash] =&gt; xxx
                        [original_id] =&gt; xxx
                        [original_basename] =&gt; 160x160
                        [original_md5hash] =&gt; xxx
                        [url] =&gt; http://tmp.transloadit.com.s3.amazonaws.com/xxx.png
                        [ssl_url] =&gt; https://s3.amazonaws.com/tmp.transloadit.com/xxx.png
                        [meta] =&gt; Array
                            (
                                [width] =&gt; 160
                                [height] =&gt; 160
                                [date_recorded] =&gt; 
                                [date_file_created] =&gt; 
                                [date_file_modified] =&gt; 2015/04/16 01:29:02 GMT
                                [title] =&gt; 
                                [description] =&gt; 
                                [location] =&gt; 
                                [aspect_ratio] =&gt; 1
                                [city] =&gt; 
                                [state] =&gt; 
                                [country] =&gt; 
                                [country_code] =&gt; 
                                [keywords] =&gt; 
                                [aperture] =&gt; 
                                [exposure_compensation] =&gt; 
                                [exposure_mode] =&gt; 
                                [exposure_time] =&gt; 
                                [flash] =&gt; 
                                [focal_length] =&gt; 
                                [f_number] =&gt; 
                                [iso] =&gt; 
                                [light_value] =&gt; 
                                [metering_mode] =&gt; 
                                [shutter_speed] =&gt; 
                                [white_balance] =&gt; 
                                [device_name] =&gt; 
                                [device_vendor] =&gt; 
                                [device_software] =&gt; 
                                [latitude] =&gt; 
                                [longitude] =&gt; 
                                [orientation] =&gt; 
                                [has_clipping_path] =&gt; 
                                [creator] =&gt; 
                                [author] =&gt; 
                                [copyright] =&gt; 
                                [copyright_notice] =&gt; 
                                [frame_count] =&gt; 1
                                [colorspace] =&gt; Gray
                                [average_color] =&gt; #686868
                            )

                    )

            )

        [results] =&gt; Array
            (
            )

    )

[curlInfo] =&gt; Array
    (
        [url] =&gt; https://karima.transloadit.com/assemblies
        [content_type] =&gt; application/json; charset=utf-8
        [http_code] =&gt; 200
        [header_size] =&gt; 371
        [request_size] =&gt; 220
        [filetime] =&gt; -1
        [ssl_verify_result] =&gt; 0
        [redirect_count] =&gt; 0
        [total_time] =&gt; 1.91859
        [namelookup_time] =&gt; 0.012709
        [connect_time] =&gt; 0.421413
        [pretransfer_time] =&gt; 0.435759
        [size_upload] =&gt; 1107
        [size_download] =&gt; 2527
        [speed_download] =&gt; 1317
        [speed_upload] =&gt; 576
        [download_content_length] =&gt; -1
        [upload_content_length] =&gt; 1107
        [starttransfer_time] =&gt; 0.43577
        [redirect_time] =&gt; 0
        [redirect_url] =&gt; 
        [primary_ip] =&gt; 10.234.41.26
        [certinfo] =&gt; Array
            (
            )

        [primary_port] =&gt; 443
        [local_ip] =&gt; 172.18.203.90
        [local_port] =&gt; 41591
    )

[curlErrorNumber] =&gt; 0
[curlErrorMessage] =&gt; 
</code></pre>

<p>)
```</p>

<p>画像のURLはレスポンスの、<code>data &gt; uploads &gt; url(ssl_url)</code>に入っている。</p>

<h2>結果</h2>

<p>herokuのアドオンからTransloadit上で確認すると以下のようにファイルがアップロードされていた。<br/>
<img src="/images/2015/04/transloadit03.jpg" alt="結果" /></p>

<p>ファイル名をクリックする事で詳細を確認出来る。<br/>
ファイルの確認やダウンロードもここから可能。<br/>
<img src="/images/2015/04/transloadit04.jpg" alt="詳細" /></p>

<h2>参考</h2>

<p><a href="https://addons.heroku.com/transloadit">Transloadit | Add-ons | Heroku</a><br/>
<a href="https://devcenter.heroku.com/articles/transloadit">Transloadit | Heroku Dev Center</a><br/>
<a href="https://transloadit.com/">File upload processing web service | Transloadit</a><br/>
<a href="https://github.com/transloadit/php-sdk">transloadit/php-sdk</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]ssl設定時のエラーについてのメモ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/09/ssl-error/"/>
    <updated>2015-04-09T13:03:29+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/09/ssl-error</id>
    <content type="html"><![CDATA[<p>簡単な事だったのですが、情報が見つけられなかったのでメモ。</p>

<!-- more -->


<p>herokuにsslを適用させる場合、証明書と秘密鍵をアドオンにアップロードします。<br/>
具体的には以下のコマンド。</p>

<pre><code>$ heroku certs:add 証明書 秘密鍵
</code></pre>

<p>その際に、以下のエラーが返って来た。</p>

<blockquote><p>Unable to parse certificate. Please ensure the certificate is in PEM format.</p></blockquote>

<p>内容は特に間違っているとは思えず、何度見返しても正しい。</p>

<p>結局原因は、有効期間前、というなんとも単純な事だった。<br/>
取得した時点ではまだ開始前の状態で、期限前。<br/>
あまり期限を先にして取得することってないのか、ググっても特に出てこず。<br/>
期限外だったらそう怒ってくれればいいのに、上記のエラー内容ではその事が特にわからなかったのもハマりポイントでした。</p>

<p>ちなみに有効期間の確認は以下。</p>

<pre><code>$ openssl x509 -in 証明書 -noout -dates
</code></pre>

<p>以下のような形で返ってくる。</p>

<pre><code>notBefore=Apr  8 15:00:00 2015 GMT
notAfter=Apr  8 14:59:59 2016 GMT
</code></pre>

<p>期間内だと問題なくアップ出来ました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]PG Backupsのアドオンが廃止されherokuコマンドに組み込まれる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/17/new-pg-backups/"/>
    <updated>2015-03-17T16:34:50+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/17/new-pg-backups</id>
    <content type="html"><![CDATA[<p>タイトルの通り。<br/>
今までアドオンとして提供されていたPG Backupsがアドオンとしての提供が廃止され、<br/>
標準のherokuコマンドに組み込まれた、とのこと。</p>

<!-- more -->


<p><a href="https://blog.heroku.com/archives/2015/3/11/pgbackups-levels-up">Heroku | PG Backups Levels Up</a></p>

<h2>スケジューリング</h2>

<p>今まではアドオンの種類で選んでいた定期バックアップですが、時間を指定しての定期バックアップが可能になったとのこと。<br/>
タイムゾーンも指定できる。</p>

<pre><code>heroku pg:backups schedule HEROKU_POSTGRESQL_GOLD --at="02:00 PDT" --app sushi
</code></pre>

<p>ちなみにデフォルトで１日に１回のバックアップが行われており、それをあえて止めるには、<code>heroku pg:backups unschedule DATABASE_URL --app sushi</code>とするとのこと。</p>

<h2>コマンド</h2>

<p>旧アドオン時に使用していたコマンドは使えなくなっており、新しく<code>pg:backups</code>が基本になったよう。  <br/>
以下、抜粋。</p>

<h3>バックアップの作成</h3>

<pre><code>//旧
$ heroku pgbackups:capture --app sushi

//新
$ heroku pg:backups capture --app sushi
</code></pre>

<h3>バックアップのダウンロード</h3>

<pre><code>//旧
$ heroku pgbackups:url

//新
$ heroku pg:backups public-url
</code></pre>

<p>その他は以下の対応ページにて。<br/>
<a href="https://devcenter.heroku.com/articles/mapping-pgbackups-commands">Converting PGBackups Add-on Commands | Heroku Dev Center</a></p>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/heroku-postgres-backups">Heroku PGBackups | Heroku Dev Center</a><br/>
<a href="https://devcenter.heroku.com/articles/heroku-postgresql">Heroku Postgres | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]herokuのPostgreSQLでバージョンを指定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/04/heroku-postgres-version/"/>
    <updated>2015-03-04T17:38:54+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/04/heroku-postgres-version</id>
    <content type="html"><![CDATA[<p>herokuのpostgreSQLを入れる際にバージョンの指定が出来たのでメモ。</p>

<!-- more -->


<p><a href="https://devcenter.heroku.com/articles/heroku-postgresql#version-support-and-legacy-infrastructure">Version Support and Legacy Infrastructure &ndash; Heroku Postgres</a></p>

<p>選べるバージョン配下。</p>

<ul>
<li>9.4(beta)</li>
<li>9.3(デフォルト)</li>
<li>9.2</li>
<li>9.1</li>
</ul>


<p>指定して入れるためにはブラウザ上ではなく、コマンドラインからバージョンを指定して入れてやる必要がある。</p>

<p>まずはそのままデフォルトで入れてみる。<br/>
アプリを作るところから</p>

<p>```
$ heroku create
Creating fierce-woodland-3392&hellip; done, stack is cedar-14</p>

<p>$ heroku addons:add heroku-postgresql &mdash;app fierce-woodland-3392
Adding heroku-postgresql on fierce-woodland-3392&hellip; done, v4 (free)
Attached as HEROKU_POSTGRESQL_CRIMSON_URL
Database has been created and is available
 ! This database is empty. If upgrading, you can transfer
 ! data from another database with pgbackups:restore.
Use <code>heroku addons:docs heroku-postgresql</code> to view documentation.</p>

<p>$ heroku pg:info &mdash;app fierce-woodland-3392
=== HEROKU_POSTGRESQL_CRIMSON_URL (DATABASE_URL)
Plan:        Hobby-dev
Status:      Available
Connections: 0/20
PG Version:  9.3.6
Created:     2015-03-04 08:43 UTC
Data Size:   6.4 MB
Tables:      0
Rows:        0/10000 (In compliance)
Fork/Follow: Unsupported
Rollback:    Unsupported
```</p>

<p>アプリを作って、postgresqlの無料版を指定なしで入れて、情報を確認している。<br/>
情報内にある通り、バージョンは、<code>9.3.6</code>。</p>

<p>次に指定ありで。</p>

<p>```
$ heroku create
Creating polar-dusk-1475&hellip; done, stack is cedar-14
<a href="https://polar-dusk-1475.herokuapp.com/">https://polar-dusk-1475.herokuapp.com/</a> | <a href="https://git.heroku.com/polar-dusk-1475.git">https://git.heroku.com/polar-dusk-1475.git</a></p>

<p>$ heroku addons:add heroku-postgresql &mdash;version=9.1 &mdash;app polar-dusk-1475
Adding heroku-postgresql on polar-dusk-1475&hellip; done, v4 (free)
Attached as HEROKU_POSTGRESQL_PURPLE_URL
Database has been created and is available
 ! This database is empty. If upgrading, you can transfer
 ! data from another database with pgbackups:restore.
Use <code>heroku addons:docs heroku-postgresql</code> to view documentation.</p>

<p>$ heroku pg:info &mdash;app polar-dusk-1475
=== HEROKU_POSTGRESQL_PURPLE_URL (DATABASE_URL)
Plan:        Hobby-dev
Status:      Available
Connections: 0/20
PG Version:  9.1.11
Created:     2015-03-04 08:45 UTC
Data Size:   5.9 MB
Tables:      0
Rows:        0/10000 (In compliance)
Fork/Follow: Unsupported
Rollback:    Unsupported
```</p>

<p>結果は見ての通り。<code>9.1.11</code>で入っている。</p>

<p>実際に指定している箇所は、addonの追加の後ろにオプションとして、<code>--version=9.1</code>を追加してやるだけ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]herokuでhttpでのアクセスをhttpsへリダイレクトさせる設定]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/03/heroku-force-https/"/>
    <updated>2015-03-03T02:05:27+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/03/heroku-force-https</id>
    <content type="html"><![CDATA[<p>htaccessを使用して、httpでのアクセスを全てhttpsへリダイレクトさせる設定を書いた際に、<br/>
少し悩んだのでメモ。</p>

<!-- more -->


<h2>通常のリダイレクト</h2>

<p>ググるなどして調べるとまず出てくるのがこの方法。<br/>
実際、vagrantなんかでのローカル環境だとこれで問題なくリダイレクト出来た。</p>

<p><code>
RewriteEngine On
RewriteCond %{SERVER_PORT} !^443$
RewriteRule ^.*$ https://%{SERVER_NAME}%{REQUEST_URI} [L,R]
</code></p>

<p>もしくはこれ。</p>

<p><code>
RewriteEngine on
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R,L]
</code></p>

<p><strong>参考サイト</strong><br/>
<a href="http://takuya-1st.hatenablog.jp/entry/20101217/1292579757">HTTPSを強制する簡単な設定(htaccess)</a><br/>
<a href="http://sachips.byeto.jp/server/htaccess_http_ssl.html">.htaccessファイルでHTTPアクセスをSSLにリダイレクトする方法とその逆も</a></p>

<p>しかし、全く同じファイルをherokuにアップするとリダイレクトループが発生し、動かなくなってしまった。</p>

<h2>heroku(aws)環境でのリダイレクト</h2>

<p>herokuはaws上で動いています。<br/>
で、awsなどで使われている負荷分散ための処理、ロードバランサが設定されていると？上記のエラーは起こってしまうようです。</p>

<p><strong>参考ページ</strong><br/>
<a href="http://qiita.com/tkosuga@github/items/ee51fcd6c047b19856be">apache(htaccess)でリバースプロキシー経由のHTTP/HTTPS転送</a><br/>
<a href="http://qa.atmarkit.co.jp/q/3221">一部のページでのSSLの設定に困っています</a><br/>
<a href="http://d.hatena.ne.jp/komiyak/20130807/1375845025">AWS Elastic Load Balancer と Apache を使って HTTPS(SSL) 通信を行うための設定方法</a></p>

<p>これを回避するには、上記参考サイトにもあるように、<code>HTTP:X-Forwarded-Proto</code>を見て転送をかけるかどうかを判断してやることでループしないように出来るみたい。</p>

<p>実際に設定した内容は以下。</p>

<p><code>
RewriteEngine on
RewriteCond %{HTTP:X-Forwarded-Proto} ^http$
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R,L]
</code></p>

<p>これで無事、動作しました。</p>
]]></content>
  </entry>
  
</feed>
