<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2014-02-27T16:18:30+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[apexからPOSTでファイルを送信する 改訂版]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/27/submit-base64/"/>
    <updated>2014-02-27T13:41:16+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/27/submit-base64</id>
    <content type="html"><![CDATA[<p><a href="http://kayakuguri.github.io/blog/2014/02/26/submit-callout-with-multipart/">前回のファイル送信</a>の動作確認版。</p>

<!-- more -->


<p>まず、やりたいこととして、<br/>
saleseforceで作成したページからファイルをherokuで作成したapiに送信して、<br/>
herokuのapiからそのファイルを添付で送信したかった。</p>

<p>結論としては以下の手順で動作した。</p>

<ol>
<li>visualforceで<code>apex:inputFile</code>を使用してファイルをアプロード</li>
<li>apexでファイルを受け取り、そのファイルを<code>base64エンコード</code>。</li>
<li>base64エンコードした文字列をPOSTのパラメータとして送信</li>
<li>herokuにアップしているphpでPOSTデータを受け取る</li>
<li>受け取ったbase64データをデコードして保存(一時的)</li>
<li>保存されたファイルからQdmailを使用してメールを送信</li>
</ol>


<hr />

<p>1) visualforceで<code>apex:inputFile</code>を使用してファイルをアプロード<br/>
visualforceページでのinputの書き方</p>

<pre><code>&lt;apex:input value="{!Email}" /&gt;
&lt;apex:inputFile value="{!FileBody}" filename="{!FileName}"/&gt;
</code></pre>

<p>2) apexでファイルを受け取り、そのファイルを<code>base64エンコード</code>。<br/>
3) base64エンコードした文字列をPOSTのパラメータとして送信<br/>
apex側で受け取る</p>

<pre><code>public String FileName { get; set; }
public Blob FileBody { get; set; }
public String Email { get; set; }

public Pagereference submit() {
    HttpRequest request = new HttpRequest();
    request.setEndpoint('送信先のphp');
    request.setMethod('POST');
    request.setHeader('Accept-Language', 'ja');
    //パラメータ
    Map&lt;String, String&gt; params = new Map&lt;String, String&gt;();
    params.put('to', Email);  //送信先
    params.put('attachName', FileName); //ファイル名
    params.put('attach', EncodingUtil.base64Encode(FileBody)); //ファイル内容
    Set&lt;String&gt; keys = params.keySet();
    String r = '';
    for(String key : keys) {
        //body用にパラメータを整形 to=xx&amp;attach=xx のように
        String val = params.get(key);
        r += key + '=';
        if(val != null) r += val;
        r += '&amp;';
    }
    r = r.removeEnd('&amp;');
    request.setBody(r);

    //送信
    Http http = new Http();
    HttpResponse response = http.send(request);
    ResResult = response.getBody(); //結果を受け取る
}
</code></pre>

<p>4) herokuにアップしているphpでPOSTデータを受け取る<br/>
5) 受け取ったbase64データをデコードして保存(一時的)<br/>
6) 保存されたファイルからQdmailを使用してメールを送信</p>

<p><a href="http://kayakuguri.github.io/blog/2014/02/18/php-heroku-sendattachmail/">Qdmailでの送信方法は以前の投稿を参照。</a></p>

<pre><code>require_once('../lib/qdmail.php');
require_once('../lib/qdsmtp.php');

//送信内容
$to          = $_POST['to'];
$subject     = '件名';
$body        = '本文';
$fromname    = '送り先名';
$fromaddress = '送り先アドレス';
$attachname  = $_POST['attachName'];
$attach      = $_POST['attach'];

$mail = new Qdmail();
$mail -&gt; smtp(true);
$param = array(
    'host'=&gt; $_ENV['MAILGUN_SMTP_SERVER'],
    'port'=&gt; $_ENV['MAILGUN_SMTP_PORT'],
    'from'=&gt; $fromaddress,
    'protocol'=&gt;'SMTP_AUTH',
    'user'=&gt; $_ENV['MAILGUN_SMTP_LOGIN'],
    'pass' =&gt; $_ENV['MAILGUN_SMTP_PASSWORD']
);
$mail -&gt;smtpServer($param);
$mail -&gt;to($to);
$mail -&gt;subject($subject);
$mail -&gt;from($fromaddress,$fromname);
$mail -&gt;text($body);

//添付ファイル
$bin = base64_decode(str_replace(' ', '+', $_POST['attach'][0])); //注意
$fp = fopen( "./" . $_POST['attachName'][0], "w" );
fwrite( $fp, $bin );
fclose( $fp );
$attach = array();
$attach[] = array( "./" . $_POST['attachName'][0] , $_POST['attachName'][0] );

//送信
echo $mail -&gt;send(); //成功の場合は「1」が返ってくる
</code></pre>

<p>Base64デコードしてファイルに保存する方法は以下を参考にしました。<br/>
<a href="http://blog.nipx.jp/archives/4137">Flashからアップロードする方法いろいろ</a><br/>
ただし、そのままではエラーになることがあるよう。</p>

<blockquote><p>どうやら、POSTでデータを渡すと、Base64の「+」記号が勝手にスペースに変換されてしまうらしい。<br/>
<a href="http://pontago.hatenablog.com/entry/20091028/1256743421">http://pontago.hatenablog.com/entry/20091028/1256743421</a></p></blockquote>

<p>(ヘッダ分を差し引く、の部分は無視しても問題なかった)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ApexからコールアウトでPOST送信する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/26/submit-callout-with-multipart/"/>
    <updated>2014-02-26T17:25:51+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/26/submit-callout-with-multipart</id>
    <content type="html"><![CDATA[<p>apexクラスからコールアウトを使って外部APIにPOST送信してみた。<br/>
ファイルも一緒に送信する。</p>

<!-- more -->


<p><strong>※追記</strong><br/>
実際にこの内容で送信してみると、壊れたファイルが送信されてしまいます。<br/>
原因を調査中です。<br/>
<strong>※追記 2/27</strong><br/>
<a href="http://kayakuguri.github.io/blog/2014/02/27/submit-base64/">動作したバージョンをアップしました。</a></p>

<h2>基本的なPOST送信の方法</h2>

<p>コールアウトで外部にHTTP送信する場合、<br/>
ヘッダーやボディの中身を順番に設定していき、送信、となる。<br/>
(この基本的な内容がわかっていなくて苦労した)</p>

<p>POSTやGETで送信されるデータの基本的な内容は以下。<br/>
<a href="http://www.yoheim.net/blog.php?q=20120611">[Web] HTTPリクエストの中身を学んでみた。GETやPOSTの違いなど</a></p>

<p>送信内容例はこんな感じ。(上記サイト内から引用)</p>

<pre><code>POST /www.hoge.com/test.php HTTP/1.1
Host: localhost:8080
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.54 Safari/536.5
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
Accept-Language: ja,en-us;q=0.7,en;q=0.3
Accept-Encoding: gzip,deflate
Accept-Charset: Shift_JIS,utf-8;q=0.7,*;q=0.7
Keep-Alive: 300
Connection: keep-alive
Content-Type: text/plain
Content-Length: 23

key1=value1&amp;key2=value2
</code></pre>

<p>apexからの基本的なPOST送信の方法は以下。<br/>
<a href="http://ameblo.jp/hayapu/entry-11431469756.html">[Salesforce][Force.com]外部サイトにHTTPアクセス（Callout）する</a><br/>
(上記サイトから引用、編集)</p>

<pre><code>HttpRequest request = new HttpRequest();
request.setEndpoint('http://****アクセスしたいAPIのURLだよ！****');
request.setMethod('POSTとかGETとか！');
request.setHeader('Accept','text/plain, */*');
request.setHeader('Accept-Charset','Shift_JIS,utf-8;q=0.7,*;q=0.3');
request.setHeader('Accept-Encoding','gzip,deflate,sdch');
request.setHeader('Accept-Language','ja,en-US;q=0.8,en;q=0.6');
request.setHeader('Connection','keep-alive');
request.setHeader('Content-Type','text/xml; charset=UTF-8 ');
String prams = 'key1=value1&amp;key2=value2';
request.setBody(prams);

Http http = new Http();
HttpResponse response = http.send(request);
String responseBody = response..getBody();
</code></pre>

<p>最初に上げた送信内容のボディ部分に、getパラメータのようにつなげて書かれている。<br/>
なので、そのようにボディ部分に書いてやればいい。<br/>
<a href="http://www.kokyakukanri.info/salesforce/blog/2010/12/apexpost.html">[Apex]WebコールアウトでPOST送信する場合のパラメータの設定方法は？</a></p>

<p>注意点としては、コールアウトするURLは事前にドメインを指定しておく必要があるよう。<br/>
指定してないと、<code>Unauthorized endpoint, please check Setup-&gt;Security-&gt;Remote site settings.</code>とエラーが出る。</p>

<pre><code>設定 -&gt; セキュリティのコントロール -&gt; リモートサイトの設定
</code></pre>

<p>さらに、接続するURLはSSLでないとエラーが返されてしまう。<br/>
<code>The requested URL could not be retrieved</code></p>

<p>ちなみに、配列で送信する場合は以下。</p>

<pre><code>params = 'hoge[]=huga&amp;hoge[]=fuge';
request.setBody(params);
</code></pre>

<h2>POSTでファイルを送信する</h2>

<p>参考：<a href="http://salesforceafondo.wordpress.com/2013/01/08/post-multipartform-data-out-of-salesforce-com-with-apex/">Post ‘multipart/form-data’ out of Salesforce.com with APEX</a><br/>
スペイン語なので読めないけど、コード部分は読める。</p>

<p>そのまま送信すると、送信先のPHP側で、<code>$_FILES</code>にデータが入っていた。</p>

<p>この方法で、ファイルと一緒にパラメータも送信するには、<br/>
POST送信する際のボディ内容を再現すればいいよう。</p>

<p><a href="http://d.hatena.ne.jp/satox/20110726/1311665904">いまさら聞けないHTTPマルチパートフォームデータ送信</a><br/>
(上記内容から引用)</p>

<pre><code>POST test.php HTTP/1.1\r\n
Host: satoxpochi.com\r\n
Content-Type: multipart/form-data; boundary=---------------------------102852708831426\r\n
Content-Length: 「ボディ部のサイズ」\r\n
\r\n
-----------------------------102852708831426\r\n
Content-Disposition: form-data; name="password"\r\n
\r\n
ponpoko\r\n
-----------------------------102852708831426\r\n
Content-Disposition: form-data; name="level"\r\n
\r\n
high\r\n
-----------------------------102852708831426\r\n
Content-Disposition: form-data; name="filename"; filename="text.txt"\r\n
Content-Type: application/octet-stream\r\n
Content-Transfer-Encoding: binary\r\n
\r\n
abcd
-----------------------------102852708831426--\r\n
</code></pre>

<p>このように、送りたい情報分だけ区切り線でつないでいけばいい。<br/>
(１つのパラメータで区切り１つ分！)</p>

<p>また、visualforceのinputでfileを送信するには以下のようにする。</p>

<pre><code>[apexクラス]
public String FileName { get; set; }
public Blob FileBody { get; set; }

[visualforceページ]
&lt;apex:inputFile value="{!FileBody}" filename="{!FileName}"/&gt;
</code></pre>

<p>これで、<code>FileName</code>にファイル名、<code>FileBody</code>にファイルが入る。</p>

<p>これらを踏まえて、最終的な送信部分のソースは以下。<br/>
POSTでデータとファイルをコールアウトで送信する。</p>

<p>[Visualforceページ]</p>

<pre><code>メールアドレス1:&lt;apex:input value="{!Email1}" /&gt;&lt;br /&gt;
メールアドレス2:&lt;apex:input value="{!Email2}" /&gt;&lt;br /&gt;
&lt;br /&gt;
添付ファイル : &lt;apex:inputFile value="{!FileBody}" filename="{!FileName}"/&gt;
</code></pre>

<p>[apexクラス]</p>

<pre><code>HttpRequest request = new HttpRequest();
request.setEndpoint('https://送信先アドレス.php');
request.setMethod('POST');
request.setHeader('Accept-Language', 'ja');

String boundary = String.valueOf(DateTime.now().getTime());
String body = '';
body+='------------' + boundary + '\r\n';
body+='Content-Disposition: form-data; name="to[]"\r\n';
body+='\r\n';
body+=Email1 + '\r\n';
body+='------------' + boundary + '\r\n';
body+='Content-Disposition: form-data; name="to[]"\r\n';
body+='\r\n';
body+=Email2 + '\r\n';
body+='------------' + boundary + '\r\n';
body+='Content-Disposition: form-data; name="data"; filename="' + FileName + '"\r\n';
body+='Content-Transfer-Encoding: base64\r\n';
String contentType = 'application/octet-stream';
body+='Content-Type: ' + contentType + '\r\n\r\n';
body+=EncodingUtil.base64Encode(FileBody);
body+='\r\n------------' + boundary + '--';
request.setHeader('Content-Type', 'multipart/form-data; boundary=----------' + boundary);
request.setHeader('Content-Length',String.valueof(body.length()));
request.setBody(body);

Http http = new Http();
HttpResponse response = http.send(request);
ResResult = response.getBody();
</code></pre>

<p>送信先のPHPでの受信内容は以下。</p>

<pre><code>($_POST)
array(1) { 
    ["to"]=&gt; array(2) { 
        [0]=&gt; string(14) "mail1@hoge.com" 
        [1]=&gt; string(14) "mail2@huga.com"
    }
}

($_FILES)
array(1) { 
    ["data"]=&gt; array(5) { 
        ["name"]=&gt; string(8) "test.txt" 
        ["type"]=&gt; string(24) "application/octet-stream" 
        ["tmp_name"]=&gt; string(14) "/tmp/phpcEwVr6" 
        ["error"]=&gt; int(0) 
        ["size"]=&gt; int(309276) 
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PHP][heroku]Mailgun APIを使って添付ファイルを送る]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/19/attachment-use-mailgunapi/"/>
    <updated>2014-02-19T17:37:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/19/attachment-use-mailgunapi</id>
    <content type="html"><![CDATA[<p>以前に、<a href="http://kayakuguri.github.io/blog/2014/02/18/php-heroku-sendattachmail/">mailgunで添付ファイル付きメールを送る方法</a>を書いたが、<br/>
そちらは、<code>SMTP</code>バージョンで、今回はそのMailgun APIバージョン。</p>

<!-- more -->


<p>以下のファイルをダウンロードして一式アップしておく。<br/>
(readmeファイルなどいらないものが大量にあるが、とりあえず全部あげておく)</p>

<p><a href="https://9f67cbbd1116d8afb399-7760483f5d1e5f28c2d253278a2a5045.ssl.cf2.rackcdn.com/mailgun-php-1.7.zip">Library Download</a> (zip直リンク)</p>

<p>基本の送信方法は以下。<br/>
<a href="http://documentation.mailgun.com/quickstart.html#sending-messages">Sending Messages</a></p>

<pre><code># Include the Autoloader (see "Libraries" for install instructions)
require 'vendor/autoload.php';
use Mailgun\Mailgun;

# Instantiate the client.
$mgClient = new Mailgun('key-3ax6xnjp29jd6fds4gc373sgvjxteol0');
$domain = "samples.mailgun.org";

# Make the call to the client.
$result = $mgClient-&gt;sendMessage("$domain",
              array('from'    =&gt; 'Excited User &lt;me@samples.mailgun.org&gt;',
                    'to'      =&gt; 'Baz &lt;baz@example.com&gt;',
                    'subject' =&gt; 'Hello',
                    'text'    =&gt; 'Testing some Mailgun awesomness!'));
</code></pre>

<p>添付ファイルを送る方法は、<code>attachment</code>を使って、その中にファイル名を書く。<br/>
ファイル名を指定する方法が紹介されていた。<br/>
<a href="https://github.com/mailgun/mailgun-php/issues/35">https://github.com/mailgun/mailgun-php/issues/35</a></p>

<pre><code>array(
    'attachment' =&gt; array(
        'filePath' =&gt; './' . $attach['name'],
        'remoteName' =&gt; $attach['name']
    )
)
</code></pre>

<p>この方法で実装したところ、一時ファイルから添付ファイルにしての送信、が出来なかった。<br/>
(ファイルがないと怒られる)</p>

<p>試しに、heroku内で<code>move_uploaded_file</code>を使ってみると、エラーもなく保存出来た。<br/>
そのままそのファイルを添付して送ったところ、無事、送信完了。<br/>
ただしファイル自体は直接アクセスしようとすると<code>404</code>が表示されるので、<br/>
そのスクリプト内でのみ有効、のよう。</p>

<p>あと、上記の添付例のまま送信すると、2つ添付された。<br/>
どうやらファイル名を指定する箇所が効いておらず、書かれているファイル名が添付されたよう。<br/>
試しに、<code>'remoteName' =&gt; $attach['name']</code>の行を削除しても送信出来た。</p>

<p>その部分を考慮して、最終的に出来たコードが以下。</p>

<p>・1ファイルを1つの宛先に送信する場合<br/>
・送信先や内容などはPOSTで受け取る想定</p>

<pre><code>require '../vendor/autoload.php';
use Mailgun\Mailgun;
$mgClient = new Mailgun('key-xxx');
$domain = "appxxx.mailgun.org";

$attach = $_FILES["attach"]; //添付ファイル

//ファイル保存
try{
    $result = move_uploaded_file($attach['tmp_name'], './'.$attach['name']);
} catch (Exception $e) {
    var_dump($e-&gt;getMessage());
}

//メール送信
try {
    $result = $mgClient-&gt;sendMessage("$domain",
        array(
            'from'    =&gt; $_POST['fromname'].' &lt;'.$_POST['fromaddress'].'&gt;',
            'to'      =&gt; $_POST['toname'].' &lt;'.$_POST['to'].'&gt;',
            'subject' =&gt; $_POST['subject'],
            'text'    =&gt; $_POST['body']
        ),
        array(
            'attachment' =&gt; array(
                './' . $attach['name']
            )
        )
    );
    var_dump($result);

} catch (Exception $e) {
    var_dump($e-&gt;getMessage());
}               
</code></pre>

<p>結局、一度保存してからの送信、となるので、SMTPを使った方が処理が速いかも。(未検証)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PHP][heroku]upload_max_filesizeを変更する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/18/change-max-filesize/"/>
    <updated>2014-02-18T17:02:20+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/18/change-max-filesize</id>
    <content type="html"><![CDATA[<p>herokuにて、<code>upload_max_filesize</code>を変更してみた。</p>

<!-- more -->


<p>初め、<code>ini_set</code>で変更しようとしてみたところ、<br/>
変更出来なかった。</p>

<pre><code>ini_set('upload_max_filesize', '6M');
</code></pre>

<p>参考：<a href="http://d.hatena.ne.jp/knowledgetree/20110217/1297939617">php.iniの設定を変えてもファイルをアップロードできないケース</a></p>

<p>調べてみると、変更出来るもの、出来ないものがあるらしく、<br/>
<code>upload_max_filesize</code>は、<code>ini_set()</code>では変更出来ないよう。</p>

<p><code>upload_max_filesize</code>は、<code>PHP_INI_PERDIR</code>となっていて、<br/>
php.ini、.htaccess、httpd.conf あるいは .user.ini (PHP 5.3 以降の場合) で設定可能なエントリ<br/>
となっている。<br/>
<a href="http://jp2.php.net/manual/ja/configuration.changes.modes.php">http://jp2.php.net/manual/ja/configuration.changes.modes.php</a></p>

<p>参考：PHP/ini_set()で変更できない値<br/>
<a href="http://hodade.adam.ne.jp/itmemo/index.php?PHP%2Fini_set()%A4%C7%CA%D1%B9%B9%A4%C7%A4%AD%A4%CA%A4%A4%C3%CD">http://hodade.adam.ne.jp/itmemo/index.php?PHP%2Fini_set()%A4%C7%CA%D1%B9%B9%A4%C7%A4%AD%A4%CA%A4%A4%C3%CD</a></p>

<p>herokuでは(たぶん).htaccessが使えない。<br/>
代わりに、<code>.user.ini</code>を試してみるとそちらで変更出来た。</p>

<p><code>.user.ini</code>ファイルを作成して、アップロード。<br/>
<strong>設置したディレクトリ内でのみ</strong>、有効になる。</p>

<p>[内容]</p>

<pre><code>upload_max_filesize = 6M
</code></pre>

<p>参考：<a href="http://yamanxworld.blogspot.jp/2009/12/php-53-htaccess-userini.html">PHP 5.3 の新機能: .htaccess の代わりになる .user.ini</a></p>

<hr />

<p><strong>追記</strong></p>

<p>上記の方法を取ったけれど、pnp.iniの設定ファイルを読み込ませる方法があった。<br/>
今回herokuにインストールしたbuildpackは、confというディレクトリ以下に設定ファイルを置けば<br/>
自動で認識されるような作りになっていたようです。</p>

<p>なので、conf以下に<code>php.ini</code>ファイルを置けば、いちいち各ディレクトリに設定ファイルを置かないでも大丈夫。</p>

<p>さらに、このbuildpackの環境は以下になっています。</p>

<ul>
<li>PHP 5.4.9（mbstring, mysql, pgsql, phpredis, mcryptなどなど）</li>
<li>nginx + php-fpm</li>
</ul>


<p>この、<code>nginx</code>というphpサーバはデフォルトではPOST出来るサイズが<code>1MB</code>になっているよう。<br/>
ここも変更しておかないとエラーになってしまう。</p>

<p><a href="http://qiita.com/notanota/items/4816ad71b90a9967fa18">nginxで&#8221;client intended to send too large body&#8221;が発生した時の対策方法</a></p>

<p>このnginxの設定ファイルは、<code>nginx.conf.erb</code>になるので、これも置いておく。<br/>
デフォルトの設定ファイルはそれぞれ以下にある。</p>

<ul>
<li><a href="https://raw.github.com/iphoting/heroku-buildpack-php-tyler/master/conf/php.ini">php.ini</a></li>
<li><a href="https://raw.github.com/iphoting/heroku-buildpack-php-tyler/master/conf/nginx.conf.erb">nginx.conf.erb</a></li>
</ul>


<p>php.iniの設定</p>

<pre><code>post_max_size = 8M
upload_max_filesize = 8M
</code></pre>

<p>nginxの設定</p>

<pre><code>http {
    client_max_body_size 1048576; # default 1M

    server {
        client_max_body_size 8M;
    }
}
</code></pre>

<p>参考：<a href="http://tkyk.name/blog/2012/11/28/php-on-heroku/">Heroku上に最新のPHP5.4 + Nginx環境を30秒で構築する</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuでmb-string付きのPHP環境を作る]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/18/create-php-heroku-mbstring/"/>
    <updated>2014-02-18T10:57:30+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/18/create-php-heroku-mbstring</id>
    <content type="html"><![CDATA[<p>順番が前後しますが、mbstring付きのphp環境を作る方法をメモしておきます。</p>

<!-- more -->


<p>前提条件としては、heorkuのアカウントを持っていて、herokuコマンドが有効になっていて、<br/>
gitも使える状態、です。<br/>
<a href="http://devcenter.heroku.com/articles/heroku-command">Heroku Toolbelt</a>とかをインストールしておけば、herokuコマンドが使えるようになります。</p>

<p>参考：<a href="http://blog.infinity-dimensions.com/2012/01/heroku-toolbelt-install.html">Herokuコマンドを使えるようにするHeroku Toolbeltをインストール</a></p>

<hr />

<p>まずは、ディレクトリを作成しておき、そのディレクトリ内にgitを作成。<br/>
phpinfo()などだけ書いたテストのindex.phpを作成し、commitしておきます。</p>

<pre><code>$ mkdir myapp
$ cd myapp
$ git init
$ echo '&lt;?php phpinfo();' &gt; index.php
$ git add .
$ git commit -m 'initial commit'
</code></pre>

<p>で、herokuコマンドを使用して、phpをherokuで動かすためのプラグインである、&#8217;buildpack&#8217;をインストール。</p>

<pre><code>$ heroku create -s cedar -b git://github.com/iphoting/heroku-buildpack-php-tyler.git#php/5.4.9
</code></pre>

<p>ただし、このまま作成すると、heroku側で勝手に決められたアプリ名になってしまう。<br/>
後から名前を変更することは出来るが、リポジトリのURLを変更しないといけなかったりして、ちょっと面倒。<br/>
最初から名前を指定した上で作成するには、<code>heroku create myapp</code>とすればよい。<br/>
(名前は他のユーザーと被っているとダメ。また、アルファベットの大文字を使用しても怒られた。)<br/>
なので上記の分を名前指定で作成すると、以下。</p>

<pre><code>$ heroku create myapp -s cedar -b git://github.com/iphoting/heroku-buildpack-php-tyler.git#php/5.4.9
</code></pre>

<p>で、herokuにpush。<br/>
pushすると自動的にdeployもされるので、成功すればこれでmbstring付きのphp環境の作成は環境。</p>

<pre><code>$ git push heroku master
</code></pre>

<p>openするとページが表示される。</p>

<pre><code>$ heroku open
</code></pre>

<p>参考：<a href="http://d.hatena.ne.jp/hnw/20120603">HerokuのBuildpackを利用してmbstringが有効なPHPサーバを立ててみた</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PHP]herokuで添付ファイル付きメールを送る]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/18/php-heroku-sendattachmail/"/>
    <updated>2014-02-18T10:38:12+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/18/php-heroku-sendattachmail</id>
    <content type="html"><![CDATA[<p>herokuで、POSTされたファイルを添付してメールを送信してみた。</p>

<!-- more -->


<p>環境は、PHPのmbstring環境。<br/>
メールは、Mailgun。</p>

<p>SMTPメールを送るためのライブラリは、QBMailを使用。<br/>
<a href="http://qiita.com/tsunet111/items/0ba0e8fc61882c3905c0">php から確実にメール送信（Qdmail使用、SMTP経由）</a></p>

<p>POSTから送信されたファイルは、<code>$_FILES</code>に保存される。<br/>
herokuでは、<a href="http://gihyo.jp/dev/serial/01/heroku/0011">ファイルの保存が出来ない</a>ので、<br/>
一時ファイルから添付することで実現する。</p>

<p>送信された一時ファイル : <code>$_FILES['xxx']['tmp_name']</code><br/>
ファイル名 : <code>$_FILES['xxx']['name']</code></p>

<p>以下、送信部分のソース。</p>

<pre><code>[HTML]
&lt;input type="file" name="upfile" /&gt;

[PHP]
$mail = new Qdmail();
$mail -&gt; smtp(true);
$param = array(
    'host'=&gt; $_ENV['MAILGUN_SMTP_SERVER'],
    'port'=&gt; $_ENV['MAILGUN_SMTP_PORT'],
    'from'=&gt; 'test@hoge.jp',
    'protocol'=&gt;'SMTP_AUTH',
    'user'=&gt; $_ENV['MAILGUN_SMTP_LOGIN'],
    'pass' =&gt; $_ENV['MAILGUN_SMTP_PASSWORD'],
);
$mail -&gt;attach(array($_FILES["upfile"]["tmp_name"], $_FILES["upfile"]['name'])); //添付ファイル
$mail -&gt;smtpServer($param);
$mail -&gt;to('送信先アドレス');
$mail -&gt;subject('件名');
$mail -&gt;from('送信元アドレス','送信元名');
$mail -&gt;text('本文');
$mail -&gt;send();
</code></pre>

<p>参考：<a href="http://hal456.net/qdmail/oopattach"> 添付ファイルの指定(OOP)</a></p>

<hr />

<p>　
　</p>

<p>以下、余談。</p>

<p>ファイルを送信する場合は、htmlのformタグに、<code>enctype="multipart/form-data"</code>をつけないといけない。</p>

<pre><code>&lt;form method="post" action="example.php" enctype="multipart/form-data"&gt;
</code></pre>

<p>jqueryを使ってajaxで実現したい場合は、enctypeは必要なく、<code>FormData</code>でまとめたデータを送信するようにし、<br/>
<code>contentType</code>と<code>processData</code>を<code>false</code>にする必要がある。</p>

<pre><code>var $form = $("form");
var fd = new FormData($form[0]);
// 送信
$.ajax({
    url: $form.attr('action'),
    type: $form.attr('method'),
    data: fd,
    contentType : false,
    processData : false,
    success: function(result) {
        console.log(result);
    },
    error: function(xhr, textStatus, error) {}
}
</code></pre>

<p>参考：<br/>
<a href="http://ginpen.com/2013/05/07/jquery-ajax-form/">jQueryでフォームをAjax送信する際の基本パターンのチュートリアル。二重送信の防御とか。</a><br/>
<a href="http://yokano-jp.blogspot.jp/2013/07/jqueryajax.html">jQuery.ajax() でファイルを送る</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPでMailgunを使ってherokuでメール送信する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/17/send-mail-from-heroku-with-mailgun/"/>
    <updated>2014-02-17T11:31:07+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/17/send-mail-from-heroku-with-mailgun</id>
    <content type="html"><![CDATA[<p>herokuのphp環境でMailgunを使ってメール送信をしてみました。<br/>
ただし、日本語環境は入れなかったので、英語環境のみ。</p>

<!-- more -->


<p>まず、herokuにプラグインをインストールするためには、<br/>
クレジットカードの登録が必要なので、登録しておく。<br/>
(無料範囲内でのみでの利用でも必要)</p>

<p><a href="https://addons.heroku.com/#email-sms">Mail/SNSアドオン一覧</a></p>

<p>Mailgunの場合は、無料だと<code>300通/日</code>送れるよう。</p>

<p><a href="https://addons.heroku.com/mailgun">Mailgun</a></p>

<p>で、インストールすると、環境変数にSMTP情報が格納されるので、<br/>
そちらを利用して、メールを送れるようになる。<br/>
(<code>sendmail</code>関数は使えない。)</p>

<pre><code>$_ENV['MAILGUN_SMTP_SERVER'] = host
$_ENV['MAILGUN_SMTP_PORT'] = port
$_ENV['MAILGUN_SMTP_LOGIN'] = user
$_ENV['MAILGUN_SMTP_PASSWORD'] = password

$_ENV['MAILGUN_API_KEY'] = key
</code></pre>

<p>日本語環境だと、<code>Qdmail</code>というものが有名だそう。</p>

<p>参考：<a href="http://qiita.com/tsunet111/items/0ba0e8fc61882c3905c0">php から確実にメール送信（Qdmail使用、SMTP経由）</a></p>

<p>ただし、今回は<code>mbstring</code>環境を入れてないので、エラーが出てしまった。<br/>
なので、英語の解説ページを参考に、<code>phpmailer</code>を使ってみた。</p>

<pre><code>$mail = new PHPMailer;
$mail-&gt;isSMTP();
$mail-&gt;Host = $_ENV['MAILGUN_SMTP_SERVER'];
$mail-&gt;SMTPAuth = true;
$mail-&gt;Username = $_ENV['MAILGUN_SMTP_LOGIN'];
$mail-&gt;Password = $_ENV['MAILGUN_SMTP_PASSWORD'];
$mail-&gt;Port     = $_ENV['MAILGUN_SMTP_PORT'];
$mail-&gt;SMTPSecure = 'tls';
$mail-&gt;From = MAIL_FROM;
$mail-&gt;FromName = MAIL_FROM_NAME;

$mail-&gt;addAddress("hoge@exsample.jp");
$mail-&gt;addAddress("huga@exsample.com");

$mail-&gt;Subject = MAIL_SUBJECT;
$mail-&gt;Body    = MAIL_MSG1 . $body . MAIL_MSG2;
if(!$mail-&gt;send()){
    //falseが返ってくる場合はエラー。
    //送信完了の場合は、1が返ってくる。
}
</code></pre>

<p>ただし、もちろんだけど、日本語で送信すると文字化けする。<br/>
(Gmailの場合はなぜか本文は正しく表示出来た。件名は文字化けする)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Forceでの送信ボタン2度押し防止策]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/12/vf-doubleclick-check/"/>
    <updated>2014-02-12T19:47:53+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/12/vf-doubleclick-check</id>
    <content type="html"><![CDATA[<p>salesforceでvisualforceの<code>commandButton</code>で、ボタンを連打すると、<br/>
送信が完了してページが遷移するまでに何度でもデータが送信されてしまう。</p>

<p>単純に、apexクラス内で２度目はinsertしない、とかにしてればいいのだけど、<br/>
それをvisualforceで完結させることが出来たので、メモ。</p>

<!-- more -->


<p><code>apex:commandButton</code>内で、<code>onclick</code>を使って、JSを呼んで、<br/>
１度目だと<code>true</code>、2度目だと<code>false</code>を返すようにする。<br/>
<code>true</code>が返って来た時だけ、<code>action</code>内の関数が実行される。</p>

<pre><code>//JS
&lt;script type="text/javascript"&gt;
var isSave = false;
function check(){
    if (!isSave) {
        isSave = true;
        return true;
    }
    return false;
}
&lt;/script&gt;

//HTML
&lt;apex:commandButton action="{!save}" onclick="return check();" image="{!URLFOR($Resource.remind, 'images/btn_send.gif')}" alt="OK" /&gt;
</code></pre>

<p>これで、連打しても大丈夫。</p>

<p>参考：<a href="http://blog.livedoor.jp/volvic_beer/archives/52301425.html">http://blog.livedoor.jp/volvic_beer/archives/52301425.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualforceページでカスタムコントローラーを指定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/06/apex-page/"/>
    <updated>2014-02-06T13:00:31+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/06/apex-page</id>
    <content type="html"><![CDATA[<p>タイトルの通りだけのメモ。</p>

<!-- more -->


<p>visualforceのページ内の冒頭、<code>&lt;apex:page&gt;</code>内で、<br/>
<code>extensions="RemindController"</code>という風に指定する。</p>

<pre><code>&lt;apex:page standardController="Lead" extensions="CustomController" &gt;
</code></pre>

<p>この指定をしておくことで、<code>action</code>内で参照する関数は、指定したクラス内から呼び出されるようになる。</p>

<p>また、VisualForce内の冒頭、<code>apex:page</code>タグ内で、<code>action</code>を指定して、そこで関数を実行するようにする。<br/>
すると、ページアクセス時にまず呼び出されるようになる。</p>

<p>[VisualForce]</p>

<pre><code>&lt;apex:page standardController="Lead" action="{!checkKey}" &gt;
</code></pre>

<p>[apexクラス]</p>

<pre><code>public Pagereference checkKey(){
    if(/*処理*/){
        reutrn Page.xx;
    }else{
        return null;
    }
}
</code></pre>

<p>参考：<a href="http://www.kokyakukanri.info/salesforce/blog/2010/11/urlkey.html">ページを開いた段階でURLに含まれるKeyなどが不足している場合に、 別ページに遷移させる方法。</a></p>

<p>注意点としては、エラーページに遷移しなくていい場合には、<br/>
自身のページを指定してしまうと、無限ループに入って、内部サーバーエラー、となってしまう。<br/>
なので、遷移しなくていい場合は、<code>null</code>を返しておくと大丈夫なよう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CodenvyとherokuでブラウザのみでRailsアプリを作成する その2]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/04/railsapp-on-codenvy-and-heroku-2/"/>
    <updated>2014-02-04T11:40:08+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/04/railsapp-on-codenvy-and-heroku-2</id>
    <content type="html"><![CDATA[<p>まずはそのままの状態でherokuにcommit、pushしてみる。</p>

<!-- more -->


<p>コミットして、、</p>

<p><img src="http://kayakuguri.github.io/images/2014/02/IDE1.jpg" alt="commit" /><br/>
<img src="http://kayakuguri.github.io/images/2014/02/IDE2.jpg" alt="commit" /></p>

<p>プッシュして。</p>

<p><img src="http://kayakuguri.github.io/images/2014/02/IDE3.jpg" alt="push" /><br/>
<img src="http://kayakuguri.github.io/images/2014/02/IDE4.jpg" alt="push" /></p>

<p>プッシュ先とユーザー名は複数ある場合は選べる。<br/>
現状は一つしかないので、そのまま。</p>

<p>少し待つと成功したので、heroku側でログを確認。<br/>
すると以下のような表示。</p>

<p><img src="http://kayakuguri.github.io/images/2014/02/heroku1.jpg" alt="heroku log" /></p>

<p>rubyアプリを使う準備がプッシュしたことによって構築されたみたい。<br/>
トップでの表示はこんな感じ。</p>

<p><img src="http://kayakuguri.github.io/images/2014/02/heroku2.jpg" alt="heroku top" /></p>

<p>現状、ページにアクセスすると以下のような表示になっている。</p>

<p><img src="http://kayakuguri.github.io/images/2014/02/ruby_site.jpg" alt="heroku page" /></p>

<blockquote><p>ただし、デフォルトではこれらのものはすべてセットで用意しないと動きません。<br/>
Controllerだけ作ればいいや、とはいかないのです。全部を用意して動かすのがRailsの基本なのです。<br/>
<a href="http://libro.tuyano.com/index3?id=790003">http://libro.tuyano.com/index3?id=790003</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenFLをインストールしてみる]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/01/31/install-openfl/"/>
    <updated>2014-01-31T11:23:47+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/01/31/install-openfl</id>
    <content type="html"><![CDATA[<p>インストールした環境は、<code>MaxOS X 10.8.5</code></p>

<!-- more -->


<p>一つ前の記事で紹介した<a href="http://ics-web.jp/lab/archives/1329">参考記事</a>に<a href="https://plus.google.com/102594170131511973965/posts">池田さん</a>がアップしてくれているインストール方法の動画があるので、<br/>
基本それを見ればわかるのだけれど、一応、実際に作業してみたメモ。<br/>
デモ画面を起動するところまでやってみる。</p>

<hr />

<h4>Hexeをインストール</h4>

<p><a href="http://haxe.org/">Haxe(公式サイト)</a></p>

<p>ダウンロードページは以下。<br/>
<a href="http://haxe.org/download">ダウンロード</a><br/>
2014/1/31時点でのバージョンは、<code>3.0.1</code></p>

<p><img src="http://kayakuguri.github.io/images/2014/01/openfl1.jpg" alt="Download haxe" /></p>

<p>インストーラーでインストール。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/openfl2.jpg" alt="install haxe" /></p>

<p>後は、OpenFLのページに書いてある手順に従って、ターミナルからコマンドを打ち込んでいく。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/openfl3.jpg" alt="Download openfl" /></p>

<h4>Limeをインストール</h4>

<p>OpenFLはLimeで動作しているので、Limeをまずはインストールする、との事。<br/>
以下のコマンドからインストール。</p>

<pre><code>$ haxelib install lime
</code></pre>

<p>うえの、install limeを実行すると、以下のように怒られた。</p>

<pre><code>This is the first time you are runing haxelib. Please run `haxelib setup` first
</code></pre>

<p>まずは、setupから実行しろ、と。<br/>
言われたとおりに実行。</p>

<p>すると、haxeのpathの入力を求められた。</p>

<pre><code>Please enter haxelib repository path with write access
Hit enter for default (/usr/lib/haxe/lib)
Path :
</code></pre>

<p>pathがわからないので一旦置いておく。<br/>
調べると、haxelibのセットアップはhaxeの公式ページに手順が載っていた。</p>

<p><a href="http://haxe.org/com/haxelib/setup">haxelib setup</a></p>

<p>ここでの手順をまずは試してみる。</p>

<pre><code>$ sudo mkdir -p /usr/lib/haxe/lib
$ sudo chown -R myusername /usr/lib/haxe
</code></pre>

<p>※パスはデフォルトでは、<code>/usr/lib/haxe/lib</code>。もし違ったらそのパスを入力。<br/>
また、<code>myusername</code>はPCのユーザー名を記入。</p>

<p>で、上記のsetupを実行。</p>

<pre><code>$ haxelib setup
</code></pre>

<p>pathには、先ほど作成したlibディレクトリを指定。</p>

<pre><code>/usr/lib/haxe/lib/
</code></pre>

<p><code>haxelib repository is now /usr/lib/haxe/lib/</code>と出れば大丈夫のよう。</p>

<p>ようやく冒頭のLimeのインストールへ戻る。</p>

<pre><code>$ haxelib install lime
</code></pre>

<p><img src="http://kayakuguri.github.io/images/2014/01/openfl4.jpg" alt="install lime" /></p>

<p>で、セットアップを実行</p>

<pre><code>$ haxelib run lime setup
</code></pre>

<p>lime commandをインストールするか聞かれる。<br/>
たぶん、必要っぽいので、<code>y</code>で。</p>

<pre><code>Do you want to install the "lime" command? [y/n/a] ? y
</code></pre>

<h4>OpenFLをインストール</h4>

<p>で、ようやっとOpenFLのインストール。</p>

<pre><code>$ lime install openfl
</code></pre>

<p>つらつらと色んなものが展開されて、無事、インストール成功。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/openfl5.jpg" alt="install openfl" /></p>

<h4>各デバイス用セットアップ(オプション)</h4>

<p>それぞれのデバイス用のセットアップがオプションで用意されているよう。</p>

<pre><code>lime setup windows
lime setup android
lime setup blackberry
lime setup tizen
</code></pre>

<p>blackberryとtizenはいらないとしても、androidは入れとこうか。<br/>
windowsは、、微妙。<br/>
iOSはセットアップの必要はないけれど、Xcodeのインストールが必要、とのこと。</p>

<blockquote><p>Apple platforms don&rsquo;t require setup, but need Xcode to be installed.</p></blockquote>

<h5>Android用セットアップ</h5>

<p>とりあえず、androidのセットアップを実行。<br/>
SDKを入れるか、聞かれるので、yesで。</p>

<pre><code>$ lime setup android
Download and install the Android SDK? [y/n/a] ? y
</code></pre>

<p>アウトプットするディレクトリを聞かれたので、とりあえずデフォルト？のものを指定しておいた。<br/>
けど、そのディレクトリがないので事前に作成しておく。<br/>
作成は、haxeのセットアップ時を参考にして、ディレクトリ作成後、オーナーの変更もしておいた。<br/>
(必要ないかもしれないけれど)</p>

<pre><code>$ sudo mkdir -p /opt/android-sdk
$ sudo chown -R myusername /opt/android-sdk
</code></pre>

<p>で、改めて、アウトプットのディレクトリを指定。</p>

<pre><code>Output directory [/opt/android-sdk]: /opt/android-sdk
</code></pre>

<p>すると、<code>Android SDK Manager</code>なるものが立ち上がる。<br/>
つらつらと処理が進み、準備が整うと、パッケージをインストールするような待ちに入ったため、そのままインストール。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/openfl6.jpg" alt="install android sdk" /></p>

<p>各ライセンスに同意が必要なため、<s>気にせず</s>目を通してから同意。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/openfl7.jpg" alt="agree android sdk" /></p>

<p>次に、<code>android-ndk</code>をインストールしますか？と出た。<br/>
インストールしようとすると、ここでもディレクトリが必要。。。</p>

<pre><code>Download and install the Android NDK? [y/n/a] ? y
Output directory [/opt/android-ndk]: /opt/android-ndk
</code></pre>

<p>もちろんないので、再度、作成して、インストール。</p>

<p>参考：<a href="http://www.dm-android.com/column/ndk.html">コラム：Android NDKとは？Android NDKを学ぶメリット</a></p>

<p>次は、<code>Apatch Ant</code>。同じようにディレクリ作成。<br/>
(事前にこれだけいる、と言ってくれたらいいのに。。。)</p>

<pre><code>Download and install the apache ant? [y/n/a] ? y
Output directory [/opt/apache-ant]: /opt/apache-ant
</code></pre>

<p>参考：<a href="http://ja.wikipedia.org/wiki/Apache_Ant">Apache Ant &ndash; Wikipedia</a></p>

<p>で、Android SDKとNDKのパスを聞かれる。変更してないので、例のまま。</p>

<pre><code>Path to Android SDK [/opt/android-sdk]:/opt/android-sdk
Path to Android NDK [/opt/android-ndk]: /opt/android-ndk
</code></pre>

<p>これでようやっと終了(たぶん)。</p>

<h4>サンプルを実行</h4>

<p>ここからは、実行後にファイルが作成されるので、適当なディレクトリに移動してから実行する。<br/>
(デスクトップとか)</p>

<pre><code>$ lime create openfl:DisplayingABitmap
$ cd DisplayingABitmap
$ lime test neko
</code></pre>

<p>(<code>neko</code>とはmacのアプリのこと?)<br/>
サンプルどおり、nekoを起動させてみた状態は以下。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/openfl8.jpg" alt="sample neko" /></p>

<p>このプログラムのまま、様々なプラットフォームで出力可能。<br/>
例えば、flashの場合は以下。</p>

<pre><code>$ lime test flash
</code></pre>

<p><img src="http://kayakuguri.github.io/images/2014/01/openfl9.jpg" alt="sample flash" /></p>

<p>最後に、ちょっと見栄えのするサンプルを実行させてみる。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/openfl10.jpg" alt="HerokuShaders" /></p>

<p>DOCUMENTATION &ndash;> Samples &ndash;> HerokuShaders</p>

<pre><code>$ openfl create HerokuShaders
</code></pre>

<p>ページの通り、上記を実行すると、openflっていうコメンドがない、と言われたので、<br/>
上記の<code>lime</code>で、実行してみる。</p>

<pre><code>$ lime create openfl:HerokuShaders
$ cd HerokuShaders
$ lime test neko
</code></pre>

<p><img src="http://kayakuguri.github.io/images/2014/01/openfl11.jpg" alt="HerokuShaders" /></p>

<p>これもそれぞれ、flash、HTML5などで実行してみる。</p>

<pre><code>$ lime test flash
$ lime test html5
</code></pre>

<p>flashはエラーで実行できなかった。<br/>
何か必要なライブラリ？が入ってなかったよう。</p>

<pre><code>Error: Could not find sample "HerokuShaders" in project ""
</code></pre>

<p>HTML5はそのまま実行出来た。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/openfl12.jpg" alt="HerokuShaders in HTML5" /></p>

<p>ちょっと重かったけど、そのまま動いたのはすごい。<br/>
てか、このサンプルは何を使ってるんだろう？</p>

<h4>参考</h4>

<p>冒頭で上げた<a href="https://plus.google.com/102594170131511973965/pos]ts">池田さん</a>のインストール動画は以下。</p>

<iframe width="100%" height="315" src="http://kayakuguri.github.io//www.youtube.com/embed/MYHFJICUzzI" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenFL？]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/01/31/openfl-search/"/>
    <updated>2014-01-31T10:39:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/01/31/openfl-search</id>
    <content type="html"><![CDATA[<p><strong><a href="http://www.openfl.org/">OpenFL</a></strong></p>

<p>OpenFLの記事が話題になっており、今回初めて知ったので、<br/>
ツイートベースに検索したメモ。</p>

<!-- more -->


<p>元は、<code>NME</code>という名前だったものが<code>OpenFL</code>に名前を変えたよう。<br/>
結構前からあるっぽい。<br/>
Haxe自体がワンソース・マルチユース的なものなのに、<br/>
そのHaxeを使ってOpenFLで開発、ってのはどいうこと？？<br/>
さらに便利に拡張したもの、とかなのかしら。</p>

<p><s>違う、Haxeライクな言語、であって、Haxeとは別ものっぽい。<br/>
とはいえ、Haxeのインストールも必要、っぽい。</s></p>

<p>下記、参考サイトにあった。</p>

<blockquote><p>OpenFLはプログラミング言語Haxeを使って開発する</p></blockquote>

<hr />

<h4>参考サイト</h4>

<p><a href="http://ics-web.jp/lab/archives/1329">クロスプラットフォーム開発の大本命!? HTML5もアプリもFlashも開発できる「OpenFL」とは？</a></p>

<p><a href="http://www.dango-itimi.com/blog/archives/2013/001188.html">Haxe OpenFL 調査</a></p>

<p><a href="http://d.hatena.ne.jp/wordi/20131107/p1">OpenFLで使えるGUIライブラリ</a></p>

<p><a href="http://bao-bao.info/blog/archive/2013/08/28/openfl_install/">OpenFLインストール</a></p>

<hr />

<h4>気になったツイートまとめ</h4>

<blockquote class="twitter-tweet" lang="ja"><p>Haxe（とOpenFL）は結局のところ、ワンソース・マルチユースではなく、ワンスタディ・マルチクリエイト、みたいなものなので、本当に厳密なところでは同一挙動でなくてもいいと思っているのではないかなー。</p>&mdash; 尾野（しっぽ） (@tail_y) <a href="https://twitter.com/tail_y/statuses/428926391619313664">2014, 1月 30</a></blockquote>


<script async src="http://kayakuguri.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>FlashCCを使い素材管理し、JSFL経由でHaxeからOpenFLとCreateJSをを切り替えて利用するという、とんでもないワークフローは既に白玉さんが確立しているのです <a href="https://t.co/speVyDSv9x">https://t.co/speVyDSv9x</a> <a href="http://t.co/FG3dgktJB0">pic.twitter.com/FG3dgktJB0</a></p>&mdash; 尾野（しっぽ） (@tail_y) <a href="https://twitter.com/tail_y/statuses/428930765254979584">2014, 1月 30</a></blockquote>


<script async src="http://kayakuguri.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>OpenFL の SWF Library(Free)ドキュメントページを閲覧するには Add cart にて支払い設定(住所入力)等を行う必要あり。ユーザ登録だけでは認証に弾かれます。 <a href="http://t.co/xYhqayB6CG">http://t.co/xYhqayB6CG</a></p>&mdash; siratama (@dango_itimi) <a href="https://twitter.com/dango_itimi/statuses/426696977712050177">2014, 1月 24</a></blockquote>


<script async src="http://kayakuguri.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>あとOpenFLも低レベル層がLimeというのに分離してたり、h3dもHeapsという名前に変わる？とかいろいろ複雑ｗ　落ちついたら面白そう。</p>&mdash; こりん (@k0rin) <a href="https://twitter.com/k0rin/statuses/426576961721233408">2014, 1月 24</a></blockquote>


<script async src="http://kayakuguri.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>OpenFL、人に勧めるにはまだ早い感してる。特にHTML5のバックエンドがDOMベースで速度出ないので。Haxe作者のh3d（Evolandに使われてる）に期待かなあ。</p>&mdash; こりん (@k0rin) <a href="https://twitter.com/k0rin/statuses/426574886643855361">2014, 1月 24</a></blockquote>


<script async src="http://kayakuguri.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>OpenFLの続き。ちなみにWindowsネイティブアプリの出力にすると最もパフォーマンスが良い感じ。FlashやHTML5の6倍ほどのパフォーマンスが出ています。ちなみにNekoもなかなかパフォーマンスが良いです。 <a href="https://twitter.com/search?q=%23Haxe&amp;src=hash">#Haxe</a> <a href="http://t.co/x5wnV7BhZp">http://t.co/x5wnV7BhZp</a></p>&mdash; 池田 泰延 Yasunobu Ikeda (@clockmaker) <a href="https://twitter.com/clockmaker/statuses/425673916028170240">2014, 1月 21</a></blockquote>


<script async src="http://kayakuguri.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/iphone_dev_jp">@iphone_dev_jp</a> Haxe OpenFL(NME)を使って落ち物パズルゲームを作りました <a href="http://t.co/YjY12G6JY8">http://t.co/YjY12G6JY8</a></p>&mdash; Androwk (@Androwk) <a href="https://twitter.com/Androwk/statuses/362866716004454400">2013, 8月 1</a></blockquote>


<script async src="http://kayakuguri.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>この間 OpenFL を試したら TextField を BitmapData に draw するところで何も描画されないって問題があった。詳しくは調べてない</p>&mdash; 馬鹿全903 (@bkzen) <a href="https://twitter.com/bkzen/statuses/353097125619437568">2013, 7月 5</a></blockquote>


<script async src="http://kayakuguri.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CodenvyとherokuでブラウザのみでRailsアプリを作成する その1]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/01/29/railsapp-on-codenvy-and-heroku/"/>
    <updated>2014-01-29T16:33:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/01/29/railsapp-on-codenvy-and-heroku</id>
    <content type="html"><![CDATA[<p>herokuがRailsを全面サポートしている事や、phpは公式にはサポートしていないこともあって、<br/>
Ruby、Railsを勉強してみよう、と思い立つ。</p>

<p>開発環境はローカルに構築するつもり(というか当然そうなると思っていた)のだけれど、<br/>
すこし調べてみると今はクラウド開発環境なるものがある、とのことで、どうせならそちらを使用してみることにする。<br/>
(そちらのほうが楽そうだし)<br/>
というわけでそれらのメモ。</p>

<!-- more -->


<p>参考にさせてもらったページ<br/>
<a href="http://libro.tuyano.com/index3?id=780003&amp;page=6">Herokuではじめる 初心者のためのRuby on Rails3入門</a></p>

<p>クラウド開発環境は有名どころでは、<a href="https://c9.io/">cloud9</a>と、<a href="https://codenvy.com/">Codenvy</a>があるようだけれど、<br/>
標準でherokuに対応している、という点で、Codenvyをチョイス。</p>

<p>セットアップしていく。</p>

<h4>herokuのアカウント作成</h4>

<p><a href="https://www.heroku.com">heroku</a></p>

<p>まずは、<code>Sing up for free</code>からアカウント作成。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/heroku01.jpg" alt="Sing up for free" /></p>

<p>開いた先でメールアドレスを入れて、メールを待つ。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/heroku02.jpg" alt="Sing up for free" /></p>

<p>メール内に記載されているアドレスをクリックして、パスワードを設定。<br/>
以上でアカウントの作成は終了。</p>

<h4>Codenvyのアカウント作成</h4>

<p><a href="https://codenvy.com/">Codenvy</a></p>

<p>まずは、<code>FREE SIGN UP</code>からアカウントを作成。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/codenvy01.jpg" alt="FREE SIGN UP" /></p>

<p>開いたモーダルウインドウで、メールとユーザー名(ワークスペースネーム)を入力して<code>GO</code>。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/codenvy02.jpg" alt="FREE SIGN UP" /></p>

<p>メール確認してね、と出るので、メールをチェック。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/codenvy03.jpg" alt="THANK YOU SINGING UP" /></p>

<p>メール本文中の、<code>confirm</code>をクリック、するとアカウントが作成、、されると思ったら以下の画面が。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/codenvy04.jpg" alt="unable to account" /></p>

<p>どうやらユーザー名が不適切(被ってるとかおかしいとか)でエラーが出ているよう。<br/>
メール送る前に事前に言ってくれないのね。。。</p>

<p>気を取り直して、再度違う名前で送信。<br/>
無事、作成出来ました。</p>

<p>パスワードを設定し、ログインするとプロジェクト作成の画面に。<br/>
サービスはもちろん、<code>Ruby on Rails</code>で<code>Heroku</code>を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/codenvy06.jpg" alt="create project" /></p>

<p><code>next</code>をクリックして進むと、heroku側のプロジェクト名？を入力するダイアログが出てくる。<br/>
(多分、その前にherokuのアカウントを聞かれた気がするけど、どのタイミングで聞かれたか忘れてしまった。<br/>
聞かれたら、メールアドレスとパスワードを入力して連携させておく。)</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/codenvy07.jpg" alt="deploy heroku project" /></p>

<p>今回はCodenvy側でプロジェクト名を<code>RubyProject001</code>とつけていたので、herokuのプロジェクト名も同じにしておいた。<br/>
すると、１文字目は小文字にしなさい、と怒られてしまった。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/codenvy08.jpg" alt="warning" /></p>

<p>とにかく、これでプロジェクトが作成出来た。<br/>
IDEはこのような画面が表示された。<br/>
左側はファイルツリーで、右側がエディタ、とおなじみの構成。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/codenvy05.jpg" alt="warning" /></p>

<p>heroku側はどうなっているかというと、上記の小文字エラーが出たからなのか、<br/>
プロジェクト名は連番のような形になってしまっていた。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/heroku03.jpg" alt="myproject" /></p>

<p>このプロジェクト名を、<code>testrubyproject1</code>で、作成してみると、herokuのアプリ名も同じ名前で作成された。</p>

<p><img src="http://kayakuguri.github.io/images/2014/01/codenvy09.jpg" alt="myproject" /></p>

<p>これで開発環境は整った。と思われる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FLVPlaybackのスムージング]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/01/24/flvplayback-smoothing/"/>
    <updated>2014-01-24T16:47:11+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/01/24/flvplayback-smoothing</id>
    <content type="html"><![CDATA[<p>Videoクラスにはそのものズバリの名前の、<code>sommthing</code>プロパティがあるのだけれど、<br/>
FLVPlaybackにはない。<br/>
なので、スムージングはかけられないのかと思っていたけれど、あった。</p>

<!-- more -->


<pre><code>player.getVideoPlayer(player.activeVideoPlayerIndex).smoothing = true;
</code></pre>

<p>これでいい、らしい。<br/>
知らなかったのでメモメモ。</p>

<p>情報：<a href="http://un-q.net/2008/06/flvplayback_smoothing_video_as3.html">http://un-q.net/2008/06/flvplayback_smoothing_video_as3.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flashのみで表示中のページの読み込み状況を取得したい]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/01/20/jsloadedcheck-on-flash/"/>
    <updated>2014-01-20T15:46:08+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/01/20/jsloadedcheck-on-flash</id>
    <content type="html"><![CDATA[<p>HTML側にJSなどを埋め込んだりせずに<br/>
Flash側のみでHTMLページ全体の読み込み状況を知りたい、となって、<br/>
調べてみたところ、以下の方法が使用できた。</p>

<!-- more -->


<p><a href="http://hakuhin.jp/js/document.html#DOCUMENT_03">現在のページの読み込み状況を取得する &ndash; JavaScriptプログラミング講座</a></p>

<blockquote><p>現在閲覧中のページの読み込み状況を調べるには、document.readyState プロパティを使用します。<br/>
以下の文字列が得られます。</p></blockquote>

<ul>
<li>uninitialized &ndash; 初期化されていません。ロードが開始されていません。</li>
<li>loading &ndash; ロード中です。</li>
<li>interactive &ndash; DOM オブジェクトの構築は完了しています。画像データなどの読み込みはまだ完了していません。</li>
<li>complete &ndash; すべての読み込みが完了しています。</li>
</ul>


<p>なので、Flash側からこのプロパティを呼び出せばわかる、となります。</p>

<p>しかし<code>ExternalInterface</code>は関数を呼び出すものなので、<br/>
プロパティを直接呼び出すことはできません。なので、関数にくるんで返すようにします。</p>

<pre><code>var state:String = ExternalInterface.call("function(){return document.readyState;}");
</code></pre>

<p>これでFlash側からHTMLの読み込み状況を（ある程度）知る事ができます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ajaxzip3で、郵便番号から住所の自動入力をする際に、Shift-JISを使用する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/01/16/ajaxzip3-shiftjis/"/>
    <updated>2014-01-16T18:35:42+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/01/16/ajaxzip3-shiftjis</id>
    <content type="html"><![CDATA[<p>ajaxzip3を使って郵便番号から住所を自動入力させる際、<br/>
Shift-JISを使用したい場合、<a href="https://code.google.com/p/ajaxzip3/">ライブラリのページ</a>には以下のように書かれている。</p>

<!-- more -->


<pre><code>&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=Shift_JIS"&gt;
&lt;title&gt;サンプル&lt;/title&gt;
&lt;script src="http://ajaxzip3.googlecode.com/svn/trunk/ajaxzip3/ajaxzip3.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/head&gt;
</code></pre>

<p>しかし、これだと<strong>IEのみ</strong>文字化けしてしまう。</p>

<p>それを回避するには、<code>charset</code>を先に書くようにすればいい、らしい。</p>

<pre><code>&lt;script type="text/javascript" src="hoge.js" charset="UTF=8"&gt;&lt;/script&gt; 
↓
&lt;script type="text/javascript" charset="UTF=8" src="hoge.js"&gt;&lt;/script&gt; 
</code></pre>

<p>参考：<a href="http://ksk1015.hatenablog.com/entry/2012/02/21/120938">ajaxzip3のIEでの文字化け対策 &ndash; ksk1015のブログ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tera Termでのテンキーの利用]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/01/08/teraterm/"/>
    <updated>2014-01-08T17:19:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/01/08/teraterm</id>
    <content type="html"><![CDATA[<p>Tera Termでssh接続をしていて、viでファイルを編集中に、いつものくせでテンキーのエンターキーを押して改行をしていると、<br/>
何故か<code>M</code>と入力されてしまっていた。<br/>
それに気付かず保存してしまってえらい目にあったことがある。</p>

<!-- more -->


<p>これはテンキーが使えないのか、viがおかしいのか、と思ってググってみると、TeraTerm側の問題だったよう。</p>

<p><a href="http://server-setting.info/blog/teraterm-tenkey.html">TeraTermでテンキー(数値キーパッド)(/,*,&ndash;,+)の動きが変なので対応してみた</a></p>

<p><code>M</code>の件は書いてないけど、デフォルトの対応表によれば、<code>6</code>が<code>M</code>っぽい。間違って押したかな。<br/>
今後おかしくなると困るので、正常に動くようにしておいた。</p>

<pre><code>[VT numeric keypad]
Num0=off
Num1=off
Num2=off
Num3=off
Num4=off
Num5=off
Num6=off
Num7=off
Num8=off
Num9=off
NumMinus=off
NumComma=off
NumPeriod=off
NumEnter=off
PF1=off
PF2=off
PF3=off
PF4=off
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSPについて]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/01/08/jsp/"/>
    <updated>2014-01-08T14:34:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/01/08/jsp</id>
    <content type="html"><![CDATA[<p>JSP、というファイル形式を初めて知った。<br/>
<strong>Java サーバー ページ</strong>の、略、らしい。</p>

<!-- more -->


<p>SSIのようにインクルード目的で使用する、のかと思ったけど、<br/>
どちらかというと、CGIの代わり、のよう。</p>

<p>参考：<a href="http://homepage2.nifty.com/takaaki024/tips/programs/java/jsp.html">http://homepage2.nifty.com/takaaki024/tips/programs/java/jsp.html</a></p>

<blockquote><p>CGIとJSPの違い<br/>
　・CGIはアクセスがあるたびにサーバが新しいプロセスを起動する<br/>
　　オーバーヘッドとリソースの消費によるパフォーマンスの低下が避けられない<br/>
　・JSPはJSPコンテナと呼ばれるJSP実行プログラムが一度起動されていれば、<br/>
　　その内部で実行されるので、リソースの消費が少なく効率的だ</p></blockquote>

<p>インクルードの方法は２つ。</p>

<pre><code>&lt;%@ include file="date_disp3.jsp" %&gt;
&lt;jsp:include page="date_disp3.jsp" flush="true" /&gt;
</code></pre>

<p>ただし、実行にはサーバーの設定が必要?<br/>
この辺？ <a href="http://www.atmarkit.co.jp/ait/articles/0105/30/news002.html">http://www.atmarkit.co.jp/ait/articles/0105/30/news002.html</a></p>

<p>参考：<br/>
<a href="http://mail2.nara-edu.ac.jp/~asait/java/j2ee/part3.htm">http://mail2.nara-edu.ac.jp/~asait/java/j2ee/part3.htm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AS3にて全画面で動画を再生させる際の注意点]]></title>
    <link href="http://kayakuguri.github.io/blog/2013/12/27/as3-fullscreen-video/"/>
    <updated>2013-12-27T17:06:04+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2013/12/27/as3-fullscreen-video</id>
    <content type="html"><![CDATA[<p>Flashでフルスクリーンで動画を表示したい場合、<br/>
動画の再生に、<code>FLVPlayback</code>を使っているか<code>Video</code>を使っているか、によって挙動が変わってくるようです。</p>

<h3>■まず、<code>FLVPlayback</code>を使っている場合、</h3>

<!-- more -->


<p>ステージに表示している動画は問答無用で画面にフィットしたフルスクリーンで表示されます。<br/>
一応、<code>stage</code>のプロパティである、<code>stageFocusRect</code>を使うことで表示する位置を調整できたりしますが、<br/>
動画のサイズは強制的にモニタのサイズになってしまうようなので、まず使い物にならないです。</p>

<p>で、画面いっぱいに動画が表示されてしまうと、その他のコンテンツは動画の下に隠れてしまいます。<br/>
なので、自前で再生バーなどをつけていても見えなくなってしまいます。</p>

<p>というわけで、この場合は標準のスキンを使用する必要があります。<br/>
<code>FLVPlayback</code>のプロパティで<code>skin</code>があるので、それを使って、</p>

<pre><code>video.skin = "MinimaFlatCustomColorPlayBackSeekCounterVolMuteFull.swf";
</code></pre>

<p>などと指定します。<br/>
すると、フルスクリーンになっても、その動画の下にコントローラーがくっつく形となります。</p>

<p>この拡大は、<code>stage</code>の<code>scaleMode</code>プロパティは関係なく、<br/>
また、<code>FLVPlayback</code>の<code>scaleMode</code>プロパティも関係ありません。<br/>
(<code>FLVPlayback</code>の<code>scaleMode</code>プロパティは、動画枠内で実際の動画を拡大縮小するか、を決めるもの）</p>

<h3>■次に、<code>Video</code>の場合。</h3>

<p>こちらの場合は、動画部分はその他の部分と同じように拡大縮小されます。<br/>
拡大するかどうかは、<code>stage</code>の<code>scaleMode</code>のプロパティで指定した仕様に準じます。</p>

<p>この場合、コントローラーは標準のものは使用できないので、自前で用意する必要があります。</p>

<h3>■まとめ</h3>

<p>単純に動画だけを大きくしたいのであれば、<code>FLVPlayback</code>を使ったほうが楽だと思われます。<br/>
ですが、コントローラーをカスタマイズしたい、など、自由度が高いものは、<code>Video</code>になります。</p>

<p>今回使用した検証コードは以下です。</p>

<p><code>FLVPlayback</code></p>

<pre><code>var video:FLVPlayback = new FLVPlayback();
video.skin = "MinimaFlatCustomColorPlayBackSeekCounterVolMuteFull.swf";
video.width = 480;
video.height = 270;
this.addChild(video);
</code></pre>

<p><code>Video</code></p>

<pre><code>private var _connect :NetConnection;
private function setVideo():void{
  _connect = new NetConnection();
  _connect.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
  _connect.connect(null);
}
private function netStatusHandler(e:NetStatusEvent):void {
  var stream:NetStream = new NetStream(_connect);
  var video:Video = new Video();
  video.width = 480;
  video.height = 270;
  video.attachNetStream(stream);
  stream.play("sample.f4v");
  this.addChild(video);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[INNER JOINとLEFT JOIN]]></title>
    <link href="http://kayakuguri.github.io/blog/2013/12/20/inner-left-join/"/>
    <updated>2013-12-20T18:19:51+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2013/12/20/inner-left-join</id>
    <content type="html"><![CDATA[<p><a href="http://okwave.jp/qa/q746515.html">http://okwave.jp/qa/q746515.html</a></p>

<blockquote><p>対応させるべきはinner joinとouter joinなんですけど、<br/>
left join は left outer join と同等です。</p></blockquote>

<!-- more -->


<p>実際に実行して確認していたけれど、<br/>
<code>INNER JOIN</code>の場合、比較したテーブルそれぞれに値がある場合のみ、<br/>
結果を返してくれる。条件としても使えそう。<br/>
(そのテーブル同士で同じIDを持つものだけを抽出、的な)</p>

<p>で、<code>OUTER JOIN</code>は、比較した際に値がなければ、<code>NULL</code>で返す。<br/>
要するに、値がなくても結果を返してくれる。</p>

<p>値が必須かどうか、みたいな感じぽい。</p>

<blockquote><p>innter joinは結合する相手のテーブルに対応するデータが<br/>
ある場合のみ結果を返しますが、outer joinは相手の<br/>
テーブルに対応するデータが無い場合、そのカラムを<br/>
NULLとして返します。</p></blockquote>

<p><code>OUTER JOIN</code>には、</p>

<pre><code>*  LEFT OUTER JOIN
*  RIGHT OUTER JOIN
*  FULL OUTER JOIN
</code></pre>

<p>の３つがあるよう。</p>

<blockquote><p>LEFT JOINではFROMの後に書かれたテーブルのデータだけを取得します。RIGHT JOINではJOINの後に書かれたテーブルのデータだけを取得します。<br/>
<a href="http://www.dbonline.jp/mysql/select/index15.html">http://www.dbonline.jp/mysql/select/index15.html</a></p></blockquote>

<p>実際に試してみると、<br/>
<code>LEFT JOIN</code>の場合は、<code>FROM</code>の後に書かれたテーブルを基準に返す。<br/>
<code>RIGHT JOIN</code>の場合は、<code>JOIN</code>の後に書かれたテーブルを基準に返す。</p>

<p>あと、<code>USING</code>を使えば少し短く出来る。</p>

<blockquote><p>結合するカラムの名前が同じ場合にはONの代わりにUSINGを使用して次のように記述することもできます。<br/>
「USING (col_name)」というのは「ON tbl_name1.col_name = tbl_name2.col_name」と同じことです。<br/>
<a href="http://www.dbonline.jp/mysql/select/index15.html">http://www.dbonline.jp/mysql/select/index15.html</a></p></blockquote>
]]></content>
  </entry>
  
</feed>
