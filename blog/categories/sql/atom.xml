<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sql | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/sql/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-04-15T20:24:21+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[INNER JOINとLEFT JOIN]]></title>
    <link href="http://kayakuguri.github.io/blog/2013/12/20/inner-left-join/"/>
    <updated>2013-12-20T18:19:51+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2013/12/20/inner-left-join</id>
    <content type="html"><![CDATA[<p><a href="http://okwave.jp/qa/q746515.html">http://okwave.jp/qa/q746515.html</a></p>

<blockquote><p>対応させるべきはinner joinとouter joinなんですけど、<br/>
left join は left outer join と同等です。</p></blockquote>

<!-- more -->


<p>実際に実行して確認していたけれど、<br/>
<code>INNER JOIN</code>の場合、比較したテーブルそれぞれに値がある場合のみ、<br/>
結果を返してくれる。条件としても使えそう。<br/>
(そのテーブル同士で同じIDを持つものだけを抽出、的な)</p>

<p>で、<code>OUTER JOIN</code>は、比較した際に値がなければ、<code>NULL</code>で返す。<br/>
要するに、値がなくても結果を返してくれる。</p>

<p>値が必須かどうか、みたいな感じぽい。</p>

<blockquote><p>innter joinは結合する相手のテーブルに対応するデータが<br/>
ある場合のみ結果を返しますが、outer joinは相手の<br/>
テーブルに対応するデータが無い場合、そのカラムを<br/>
NULLとして返します。</p></blockquote>

<p><code>OUTER JOIN</code>には、</p>

<pre><code>*  LEFT OUTER JOIN
*  RIGHT OUTER JOIN
*  FULL OUTER JOIN
</code></pre>

<p>の３つがあるよう。</p>

<blockquote><p>LEFT JOINではFROMの後に書かれたテーブルのデータだけを取得します。RIGHT JOINではJOINの後に書かれたテーブルのデータだけを取得します。<br/>
<a href="http://www.dbonline.jp/mysql/select/index15.html">http://www.dbonline.jp/mysql/select/index15.html</a></p></blockquote>

<p>実際に試してみると、<br/>
<code>LEFT JOIN</code>の場合は、<code>FROM</code>の後に書かれたテーブルを基準に返す。<br/>
<code>RIGHT JOIN</code>の場合は、<code>JOIN</code>の後に書かれたテーブルを基準に返す。</p>

<p>あと、<code>USING</code>を使えば少し短く出来る。</p>

<blockquote><p>結合するカラムの名前が同じ場合にはONの代わりにUSINGを使用して次のように記述することもできます。<br/>
「USING (col_name)」というのは「ON tbl_name1.col_name = tbl_name2.col_name」と同じことです。<br/>
<a href="http://www.dbonline.jp/mysql/select/index15.html">http://www.dbonline.jp/mysql/select/index15.html</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phpPgAdminでのテーブルやカラムの操作メモ]]></title>
    <link href="http://kayakuguri.github.io/blog/2013/12/18/phppgadmin-memo/"/>
    <updated>2013-12-18T20:24:38+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2013/12/18/phppgadmin-memo</id>
    <content type="html"><![CDATA[<p>phpPgAdminを使用してDBにテーブルやカラムを作る際にわからない事だらけだったのでメモ。</p>

<p>■<strong>オプション（WITHOUT OIDS)</strong></p>

<!-- more -->


<p>参考：<a href="http://www.mikawaban.com/tera/070430003807.html">PostgreSQLについて</a></p>

<blockquote><p>CREATE TABLEでは，デフォルトではOIDが作成されます．OIDを生成しない<br/>
テーブルを作るには，キーワード &ldquo;WITHOUT OIDS&rdquo; を使用します．</p></blockquote>

<p>OIDって？</p>

<blockquote><p>オブジェクト識別子(OID)はPostgreSQLの内部で様々なシステムテーブルの
プライマリキーとして使用されます。また、テーブルの作成時にWITHOUT OIDS
が指定されていない場合やdefault_with_oids設定変数が偽に設定されている
場合を除き、OIDシステム列がユーザ作成のテーブルに追加されます。
oidデータ型は現在、符号無し4バイト整数として実装されています。
これは、大規模なデータベースの全体にわたって一意とするには十分では
ありません。
大規模な個別のテーブル内においても十分ではないかもしれません。
そのため、ユーザ作成テーブルのOID列をプライマリキーとして使用するのは
お勧めできません。
OIDの使用は、システムテーブルへの参照の場合にのみ推奨されます。</p></blockquote>

<p>つまり、</p>

<blockquote><p>小規模DB内で識別する為に「OID」を使用しても良いという位の意味</p></blockquote>

<p>らしい。<br/>
普段は、使わない、でいいのかな。</p>

<p>参考サイト内にあったまとめ。</p>

<blockquote><p>■テーブル作成方法<br/>
１）phpPgAdminにて「テーブル作成」を選択<br/>
２）テーブル名（英数字）を入力<br/>
３）フィールド数を入力<br/>
４）次画面へ移り、各フィールド入力（英数字）</p>

<p>※フィールドの属性以外は、後からでも変更可能<br/>
※フィールドの追加・挿入・削除も可能</p>

<p>■PostgreSQLへの接続　→　pg_connect命令<br/>
■SQL文の実行　→　pg_exec　又は　pg_query命令</p></blockquote>

<p>■<strong>プライマリキー</strong></p>

<p><a href="http://e-words.jp/w/E4B8BBE382ADE383BC.html">主キー 【 primary key 】 プライマリキー</a></p>

<blockquote><p>データベースの中から、ある一組のデータセット(レコード)を一意に識別するための情報。<br/>
主キーは必ずしも一つの項目とは限らず、複数の項目を組み合わせて主キーとして用いる場合もある。<br/>
一般的には個々の要素に通し番号などを割り振ってこれを主キーに設定する場合が多い。</p></blockquote>

<p>■<strong>データ型</strong></p>

<p><a href="http://www.postgresql.jp/document/9.1/html/datatype.html">データ型一覧</a></p>

<p>■<strong>列の型で配列</strong></p>

<p>各型で配列を作る事が出来るよう。<br/>
phpPgAdminでは、<code>データ型</code>の横のセレクトボックスで、<code>[]</code>を選択しておけば配列になるもよう。<br/>
ただし、配列にするとちょっと面倒があるよう。<br/>
使わない方が無難？</p>

<blockquote><p>ただ、配列に入れるために中カッコでくくったカンマ区切りの文字列を作らないといけないので、若干面倒です。また、バージョン7.4から配列の要素内にある特定の値を検索する事ができるようにはなりましたが、LIKE句が使えなかったりと、色々不便な所があります。 <br/>
<a href="http://software.aufheben.info/kouza/senior/kouza_pg.html">http://software.aufheben.info/kouza/senior/kouza_pg.html</a></p></blockquote>

<p>■<strong>intかbigintか</strong></p>

<p>整数型や連番型、ともに、bigがある。</p>

<p><code>integer</code> : 4バイト符号付き整数<br/>
<code>bigint</code> : 8バイト符号付き整数</p>

<p>どう違う？どっちを使うべき？<br/>
参考：<a href="http://hamamuratakuo.blog61.fc2.com/blog-entry-648.html">時代はBIGINT</a></p>

<blockquote><p>MySQLのINT型の最小値と最大値は、-2147483648～2147483647です。<br/>
「2147483647」は、「２１億」<br/>
インド人と中国人の全員が会員登録しようとすると、INT型では足りないということです。</p></blockquote>

<p>しかし、</p>

<blockquote><p>オートインクリメントのカラムだけのテーブルで、限界までデータを詰め込むと、<br/>
・INT型 → 約43ギガバイト<br/>
・BIGINT型 → 約326エクサバイト</p></blockquote>

<p>よっぽどの事がない限り、int型でよさそう。</p>

<p>■<strong>テーブルの破棄</strong></p>

<p>テーブルを破棄しようとすると、<br/>
<code>カスケード</code>なるチェックボックスが。</p>

<blockquote><p>カスケード規則は、データベースがある操作が起こることを許可し、ほかのテーブルまたは行を最初の操作と同期をとるように変更することによって RI を確実にする規則です。たとえば、カスケード削除規則が定義されていると、主キー テーブルでのレコードの削除により、データベースは削除された行の主キーと同じ値の外部キーを持つデータベース中のすべての行を検索して削除します。<br/>
<a href="http://www.agtech.co.jp/html/v9manuals/advops/advops-07-2.html">http://www.agtech.co.jp/html/v9manuals/advops/advops-07-2.html</a></p></blockquote>

<p>要は、プライマリキーに設定された値と同じ外部キーを持つデータ、をまとめて削除してくれる、<br/>
関連データも一緒に消していい？というチェックボックスのよう。たぶん。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQLでプレースホルダーを使ってSELECT文を発行する方法]]></title>
    <link href="http://kayakuguri.github.io/blog/2013/12/17/postgresql-select/"/>
    <updated>2013-12-17T17:25:36+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2013/12/17/postgresql-select</id>
    <content type="html"><![CDATA[<p>接続の参考：PostgreSQLへ接続](<a href="http://www.phpbook.jp/tutorial/postgresql/index3.html">http://www.phpbook.jp/tutorial/postgresql/index3.html</a>)</p>

<p>プレースホルダーでの発行は以下を参考<br/>
<a href="http://lets.postgresql.jp/documents/tutorial/with_php/against_sql_injection/placeholder">PHPでのSQLインジェクション対策 &ndash; プレースホルダ編</a><br/>
<a href="http://php.net/manual/ja/function.pg-execute.php">pg_execute</a></p>

<!-- more -->


<p>SELECT文の例</p>

<pre><code>$dbconn = pg_connect("host=".DB_SERVER." dbname=".DB." user=".DB_USER." password=".DB_PW);
$result = pg_prepare($dbconn, "", 'SELECT * FROM dtb_order WHERE order_id = $1');
$result = pg_execute($dbconn, "", array($oid));
</code></pre>

<p>こうすると、$resultには、resource型の値が入ってくる。<br/>
そこから実際のデータを取得するためには、<code>pg_fetch_array</code>を使用する。</p>

<p>第３引数に<code>PGSQL_NUM</code>を指定すると、数字の配列で、<br/>
<code>PGSQL_ASSOC</code>を指定すると、連想配列の形式で取得出来る。</p>

<p>そして、全ての行にアクセスするには、<code>pg_num_rows</code>を使用して何行返ってきたかを取得する。<br/>
その数字をカウントとして使用して、for文で回すことで全件取得する事が出来る。</p>

<pre><code>for ($i = 0 ; $i &lt; pg_num_rows($result) ; $i++){
    $rows = pg_fetch_array($result, NULL, PGSQL_ASSOC);
    var_dump($rows);
}
</code></pre>

<p>接続の切断は以下。</p>

<pre><code>$close_flag = pg_close($dbconn);
if($close_flag) echo "切断成功";
</code></pre>

<p>参考：<a href="http://www.phpbook.jp/tutorial/postgresql/index5.html">データの取得(SELECT)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[メモ]mySQL 文字列処理など]]></title>
    <link href="http://kayakuguri.github.io/blog/2013/11/29/sql-memo/"/>
    <updated>2013-11-29T14:34:00+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2013/11/29/sql-memo</id>
    <content type="html"><![CDATA[<p>参考:<a href="http://homepage2.nifty.com/sak/w_sak3/doc/sysbrd/sq_kj07_2.htm">http://homepage2.nifty.com/sak/w_sak3/doc/sysbrd/sq_kj07_2.htm</a></p>

<p><strong>文字列連結</strong></p>

<p>concat(&ldquo;a&rdquo;,&ldquo;b&rdquo;)で文字列連結。</p>

<p><strong>0埋め</strong></p>

<!-- more -->


<p>lpad()で左側の0埋めが出来る。</p>

<p>例：
1 →01 としたい時
param=1とする。
[クエリ]
lpad(param,2,&lsquo;0&rsquo;)
[結果]
01</p>

<p><strong>文字列を数値に変換</strong>
to_number()がSQLにはあるけれど、mySQLにはない</p>

<p>以下の方法でいける。
[クエリ]
cast(&ldquo;001&rdquo; as SIGNED)
[結果]
1</p>

<p>参考:<a href="http://hetare-engineer.blogspot.jp/2011/03/mysql.html">http://hetare-engineer.blogspot.jp/2011/03/mysql.html</a></p>
]]></content>
  </entry>
  
</feed>
