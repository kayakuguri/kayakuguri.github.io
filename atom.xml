<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2016-09-01T19:57:42+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[heroku] confファイルでのリダイレクトを設定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/01/heroku-cgi-bin-redirect/"/>
    <updated>2016-09-01T19:51:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/01/heroku-cgi-bin-redirect</id>
    <content type="html"><![CDATA[<p>herokuで構築したサイトで、ドキュメントルートにある、 <code>/cgi-bin/</code> 以下にある特定のファイルへのアクセスがあった場合に、別のディレクトリへリダイレクトさせて欲しい、という要件があった。<br/>
普通に設定しようと思ったらかなり深い話になったので備忘録。</p>

<!-- more -->


<p><code>/cgi-bin/hoge/hoge.php</code> を、<br/>
<code>/abc/hoge/hoge.php</code> へリダイレクトするとする。<br/>
(cgi-binディレクトリからabcディレクトリへリダイレクト)</p>

<h1>htacessでリダイレクト</h1>

<p>まずは何も考えずに <code>.htaccess</code> を利用してのリダイレクトを設定する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine on
</span><span class='line'>RewriteRule ^cgi-bin/hoge/hoge.php$ /abc/hoge/hoge.php [R=301,L]</span></code></pre></td></tr></table></div></figure>


<p>これでアクセスしてみるも、 Not Found の表示。</p>

<p>試しに、<code>/cgi-bin/</code> のディレクトリを作り、その中にファイルを設置してアクセスしてみるも、同じくNot Found。<br/>
リダイレクト以前に、<code>/cgi-bin/</code> ディレクトリ自体にアクセスが出来ていない。</p>

<h1>cgi-bin</h1>

<p>apacheのデフォルト設定では、 <code>/cgi-bin/</code> ディレクトリは別のディレクトリへエイリアスが貼られている事が多いような記述があった。<br/>
セキュリティ的にドキュメントルートのcgi-binには直接アクセスさせないようになっているらしい。</p>

<p><a href="http://www.adminweb.jp/apache/cgi/index1.html">CGI用エイリアスの設定(ScriptAlias) &ndash; CGIの利用 &ndash; Apache入門</a></p>

<p>Herokuもこの設定が行われているらしく、PHP環境のherokuのconfファイルを確認すると、以下のような設定が書かれている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ScriptAlias /cgi-bin/ "/app/.heroku/php//share/apache2/cgi-bin/"</span></code></pre></td></tr></table></div></figure>


<p>そのため、ドキュメントルート以下のcgi-binディレクトリにファイルをおいても、上記ディレクトリには該当のファイルがなく、not foundとなっていたよう。</p>

<p>さらに、htaccessよりも、confファイルの方が早く呼ばれるため、htaccessでのリダイレクトが効く前に上記にエイリアスで飛ばされ、htaccessによるリダイレクトも効かなかった事が原因だった。</p>

<h1>confファイル</h1>

<p>herokuのPHPのビルドパックでは、Procfileにて任意のconfファイルを読みこませる事が出来るよう。
そこで、そのconfファイルにてリダイレクト設定を書くことで対応する。</p>

<h2>Procfile</h2>

<p>Procfileでの設定内容のオプションなどは、PHPのビルドパックのソース内に書かれている。</p>

<p><a href="https://github.com/heroku/heroku-buildpack-php/blob/master/bin/heroku-php-apache2#L46">https://github.com/heroku/heroku-buildpack-php/blob/master/bin/heroku-php-apache2#L46</a></p>

<p>このヘルプの通り、以下の書式で記述することが可能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>web: vendor/bin/heroku-php-apache2 [options] [&lt;DOCUMENT_ROOT&gt;]</span></code></pre></td></tr></table></div></figure>


<h2>confファイルの読み込み</h2>

<p>任意のconfファイルを読みこませるには、2つのオプションがある。<br/>
一つは、全く新しいconfファイルを読みこませる方法。これには、小文字のcを使用する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-c &lt;httpd.conf&gt;</span></code></pre></td></tr></table></div></figure>


<p>これは既存の設定を全て上書きするため、正しく設定出来ていない場合はアプリケーションの起動に失敗するので注意が必要。<br/>
デフォルトで読み込まれているconfファイルは以下となる。</p>

<p><a href="https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/heroku.conf">https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/heroku.conf</a></p>

<p>これはあまり指定することはないと思われる。</p>

<p>もう一つは、既存のconfファイルに追加するもの。<br/>
こちらは、大文字のCを使う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-C &lt;httpd.inc.conf&gt;</span></code></pre></td></tr></table></div></figure>


<p>デフォルトで読み込まれているファイルは以下となる。
<a href="https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/default_include.conf">https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/default_include.conf</a></p>

<p>このファイルではディレクトリインデックスの設定のみが書かれている状態。
このように、設定したい内容を記述したファイルを作成し、大文字のCオプションで読み込ませることで既存の設定に追加で反映が出来る。</p>

<h2>Procfileでの設定</h2>

<p>アプリのルートに、 <code>my_app.conf</code> ファイルを作成し読み込ませるとする。<br/>
また、ドキュメントルートは <code>htdocs</code> で設定したい場合は、以下の様な内容となる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>web: vendor/bin/heroku-php-apache2 -C ./my_app.conf htdocs</span></code></pre></td></tr></table></div></figure>


<p>ファイルのパスは、 <code>/app</code> からの相対パスでの指定となる。<br/>
これでアプリの起動時に、 <code>my_app.conf</code> ファイルが読み込まれることとなる。</p>

<h2>confファイルでのリダイレクト</h2>

<p>そういうわけで、confファイル内に直接リダイレクトの設定を記述する。<br/>
１点注意点としては、 <code>htaccess</code>による設定の場合は、相対パスで記述する場合は先頭の <code>/</code> が必要ないのだが、<br/>
confファイルによる設定の場合は、先頭に <code>/</code> が必要となる。</p>

<p><a href="http://ysklog.net/mod-rewrite/related05.html">【mod_rewrite】「.htaccess」と「httpd.conf」での設定による違い &#8211; mod rewrite</a></p>

<p>よって、以下のように記述する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine on
</span><span class='line'>RewriteRule ^/cgi-bin/hoge/hoge.php$ /abc/hoge/hoge.php [R=301,L]</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、デフォルトで読み込まれているファイルに記述されている、ディレクトリインデックスの設定を記述せずに読み込ませると、その設定が消えてしまい、<code>/</code> でアクセスした場合には、 <code>index.html</code> が最初に呼び出されるようになってしまう。<br/>
よって、ディレクトリインデックスの設定も合わせて書いておくと挙動が変わらずに設定できる。
一応、全文は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DirectoryIndex index.php index.html index.htm
</span><span class='line'>
</span><span class='line'>RewriteEngine on
</span><span class='line'>RewriteRule ^/cgi-bin/hoge/hoge.php$ /abc/hoge/hoge.php [R=301,L]</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://ysklog.net/mod-rewrite/related02.html">【mod_rewrite】「httpd.conf」での設定方法 &#8211; mod rewrite</a></li>
<li><a href="https://devcenter.heroku.com/articles/custom-php-settings#apache">Customizing Web Server and Runtime Settings for PHP | Heroku Dev Center</a></li>
</ul>


<h1>まとめ</h1>

<p>cgi-binディレクトリからリダイレクト、というのは実際の要件としてはめったにあることではないけれど、herokuのPHPの設定として、confファイルをカスタマイズしたい要件はあると思う。<br/>
実際、htaccessでのリダイレクトより、confファイルでのリダイレクトのほうが早いようなので出来るならそっちの方がよかったりするだろうし。<br/>
herokuは簡単に利用出来る反面、設定が触れずガチガチだと思われガチだけど、結構設定はいじれたりする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku] タイムゾーンの設定各種]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/01/heroku-timezone/"/>
    <updated>2016-09-01T10:02:04+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/01/heroku-timezone</id>
    <content type="html"><![CDATA[<p>heroku環境でタイムゾーンの設定が色々あったのでまとめ。</p>

<!-- more -->


<h1>サーバー時間</h1>

<p>まずは、herokuのサーバー時間のタイムゾーン設定。<br/>
これは簡単で、環境変数に入れてやるだけ。</p>

<blockquote><p>TZ : Asia/Tokyo</p></blockquote>

<p>コマンドで入れる場合は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku config:add TZ=Asia/Tokyo -a APP_NAME</span></code></pre></td></tr></table></div></figure>


<p>きちんと反映されているかどうかは下記コマンドから参照可能。<br/>
意図した時間が返ってきてればOK。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku run date -a APP_NAME
</span><span class='line'>Running date on ⬢ APP_NAME... up, run.1198
</span><span class='line'>Thu Sep  1 10:06:57 JST 2016</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://blog.skktmlab.info/blog/2015_03_02_2">Herokuでホスティングしているブログのタイムゾーンを設定する</a></li>
</ul>


<h1>PHP</h1>

<p>PHPの設定でタイムゾーンを指定する場合。<br/>
通常は、 <code>php.ini</code> で設定するが、herokuの場合は、 <code>.user.ini</code> ファイルを使う。</p>

<p>ドキュメントルート直下に <code>.user.ini</code> ファイルを設置。<br/>
中に以下を記述。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>date.timezone = "Asia/Tokyo"</span></code></pre></td></tr></table></div></figure>


<p>この設定ではその他にはアップロードの最大容量なんかを指定する場合が多い。<br/>
参考 : <a href="http://kayakuguri.github.io/blog/2014/02/18/change-max-filesize/">[PHP][heroku]upload_max_filesizeを変更する &ndash; KayaMemo</a></p>

<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/hiro_y/items/bc631a27c9701f81a4f9#runtime-settings">HerokuでPHPを使うときに気を付けるところ &ndash; Qiita</a></li>
<li><a href="https://devcenter.heroku.com/articles/custom-php-settings#php-runtime-settings-ini-settings">Customizing Web Server and Runtime Settings for PHP | Heroku Dev Center</a></li>
</ul>


<h1>WordPress</h1>

<p>最後はherokuと直接は関係ないけれど、wordpressのタイムゾーン。<br/>
WordPressのタイムゾーンはデフォルトで標準時になるようにしてある、とのこと。<br/>
しかしこれは設定で変更するものではなく、取得する際に調整するもののよう。</p>

<p>一番簡易なものとしては、 <code>date</code> 関数で取得していた箇所をWordPress関数である、 <code>date_i18n</code> を利用して取得するようにする、というもの。<br/>
これだけで、日本時間で取得できるようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>date_i18n('Y-m-d H:i:s');</span></code></pre></td></tr></table></div></figure>


<p>その他では、 <code>datetime</code> クラスを使用してタイムゾーンを指定する方法もあり。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$now = new DateTime('', new DateTimeZone('Asia/Tokyo'));
</span><span class='line'>$now-&gt;format('Y-m-d H:i:s');</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/yousan/items/a385f794a9bb433aecbb">WordPressで現在時刻を利用すると9時間ずれてしまう問題 &ndash; Qiita</a></li>
</ul>


<h1>まとめ</h1>

<p>WordPressはともかく、herokuとPHPのタイムゾーン設定はherokuでPHPを使うのなら、デフォルトで設定しておいた方が後々間違いがなさそう。<br/>
環境構築の際にまず設定しておくとよさげ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant (Ubuntu) 環境でhttps接続する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/08/10/vagrant-ubuntu-ssl/"/>
    <updated>2016-08-10T15:18:45+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/08/10/vagrant-ubuntu-ssl</id>
    <content type="html"><![CDATA[<p>本番がhttpsの開発でローカル環境だけhttpで接続していると色々面倒があるため、ローカルのvagrant環境でもhttps接続出来るように調整してみたメモ。</p>

<!-- more -->


<h1>前提</h1>

<p>OSはubuntu。というか、いつものように、vagrantの環境はscotchbox。</p>

<p><a href="https://box.scotch.io/">https://box.scotch.io/</a></p>

<h1>参考</h1>

<p>主に以下を参考にそのまま作業した。ありがとうございます。</p>

<p><a href="http://hidex7777.hatenablog.com/entry/2014/03/18/220943">VagrantでUbuntuサーバ/Apache2のSSL(https) &ndash; orangeProse別館</a></p>

<h1>テスト用の証明書を作成</h1>

<p>まずはモジュールを有効に。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo a2enmod ssl
</span><span class='line'>$ sudo service apache2 reload</span></code></pre></td></tr></table></div></figure>


<p>で、テスト用の証明書を作成。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo make-ssl-cert generate-default-snakeoil --force-ovarwrite
</span><span class='line'>$ sudo make-ssl-cert /usr/share/ssl-cert/ssleay.cnf /etc/apache2/apache.pem</span></code></pre></td></tr></table></div></figure>


<p>二つ目を実行すると、コンソールの画面全体で設定画面が表示されて証明書の内容を聞かれる。
ひとつ目はコモンネーム。
hostsで指定しているURLを指定しておく。</p>

<p><img src="http://kayakuguri.github.io/images/2016/08/vagrant_ssl_01.jpg" alt="" /></p>

<p>二つ目は、 <code>Subject Alternative Names</code> (サブジェクトの別名)。<br/>
<a href="https://knowledge.geotrust.com/jp/support/knowledge-base/index?vproductcat=G&amp;vdomain=GEOTRUST_JP&amp;page=content&amp;id=SO24206&amp;actp=LIST&amp;viewlocale=ja_JP&amp;locale=ja_JP&amp;redirected=true">「Subject Alternative Names（サブジェクトの別名）」とは何ですか  | GeoTrust<br/>
</a></p>

<p>今回は特に使用しないので空白のままとしておく。</p>

<p><img src="http://kayakuguri.github.io/images/2016/08/vagrant_ssl_02.jpg" alt="" /></p>

<p>apacheを再起動。</p>

<h1>設定ファイル</h1>

<p>このままだとSSL用の設定ファイルがないようなので、<code>default-ssl.conf</code>というファイルをコピーして使用する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /etc/apache2/sites-available
</span><span class='line'>$ sudo cp default-ssl.conf ssl.conf
</span><span class='line'>$ sudo a2ensite ssl
</span><span class='line'>$ sudo service apache2 reload</span></code></pre></td></tr></table></div></figure>


<p>参考サイトでは<code>.conf</code>の拡張子が指定されていなかったのだが、指定されていないとエラーとなってしまう。<br/>
<a href="http://qiita.com/mzmttks/items/85c69313693cb1df4949">Apache2 on ubuntu で a2ensite すると does not exist と言われるときの対処法 &ndash; Qiita</a></p>

<p>最後はapacheを再起動。</p>

<p>この状態で、httpsでアクセスをすると、プライバシーが保護されていない、というような警告が出るが、無視してアクセスすると無事、接続できた。</p>

<p><img src="http://kayakuguri.github.io/images/2016/08/vagrant_ssl_03.jpg" alt="" /></p>

<h1>ドキュメントルート</h1>

<p>しかしhttpでアクセスしていたファイルにアクセスが出来ない。
どうやら、httpsで指定されているドキュメントルートが違っているよう。
先程コピーした、<code>ssl.conf</code>ファイルを見てみる。</p>

<p>すると、以下のようにドキュメントルートが設定されている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DocumentRoot /var/www/html</span></code></pre></td></tr></table></div></figure>


<p>今回は、<code>public</code>をドキュメントルートとしているので、そちらに変更する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DocumentRoot /var/www/public</span></code></pre></td></tr></table></div></figure>


<p>例によって、apacheを再起動して接続確認。無事、接続出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="https://www.k4750.net/2013/10/13/self-signed-cert/">（正しい）オレオレ証明書の作り方 |  K4750.net</a></li>
<li><a href="http://takuya-1st.hatenablog.jp/entry/20100730/1280474385">超簡単・オレオレ証明書の作り方 &ndash; それマグで！</a></li>
<li><a href="http://blog.inouetakuya.info/entry/20110605/1307261417">それ etckeeper でできるよ &ndash; /etc 以下を Git で自動的にバージョン管理 &ndash; 彼女からは、おいちゃんと呼ばれています</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Salesforce] Let’s Encryptの証明書ではSFからのコールアウトを受けられない]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/08/10/sf-lets-encrypt/"/>
    <updated>2016-08-10T11:49:42+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/08/10/sf-lets-encrypt</id>
    <content type="html"><![CDATA[<p>Let’s Encryptで取得した証明書を適用させたサイトへコールアウトしたところエラーが発生し接続出来なかったので、調査してみた。</p>

<!-- more -->


<h1>エラー内容</h1>

<p>エラーは下記の内容。</p>

<blockquote><p>System.CalloutException: sun.security.validator.ValidatorException: <br/>
PKIX path building failed: <br/>
sun.security.provider.certpath.SunCertPathBuilderException: <br/>
unable to find valid certification path to requested target</p></blockquote>

<p>エラー内容で調べてみると、自己証明書、ではSFからのアクセスが出来ない、という情報があり、その中で紹介されているエラーが上記内容と酷似していることがわかった。</p>

<p><a href="http://appirio.co.jp/category/tech-blog/2013/05/apex%E3%82%B3%E3%83%BC%E3%83%AB%E3%82%A2%E3%82%A6%E3%83%88%E3%81%AE%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9part-2/">Apexコールアウトのベストプラクティス:Part 2 &ndash; Appirio Japan</a></p>

<p>しかし、Let’s Encryptは自己証明書ではない…。</p>

<h1>SFが許可するCA</h1>

<p>引き続き調べてみると、どうやらsalesforceは接続出来る認証局 (CA) をホワイトリスト方式で設定しているよう。</p>

<p><a href="https://help.salesforce.com/HTViewSolution?id=000007225&amp;language=en_US">Salesforce.com SSL certificates Salesforce supports</a></p>

<p>以下が許可されている認証局のリスト。</p>

<p><a href="https://developer.salesforce.com/page/Outbound_Messaging_SSL_CA_Certificates">Outbound Messaging SSL CA Certificates &ndash; developer.force.com</a></p>

<p>このリストには、Let’s Encryptがない。<br/>
というわけで、SFがLet’s Encrypt認証局が作成した証明書を適用したサイトへの接続は許可していない、ということになり、冒頭のエラーが発生していた、ということになる。</p>

<p>ちなみに、Let’s Encryptの認証局をリストに加えてほしい、という要望は結構前から上がっているよう。</p>

<p><a href="https://success.salesforce.com/ideaView?id=08730000000E28LAAS">Support Let&rsquo;s Encrypt CA Certificate &ndash; Ideas &ndash; Salesforce Success Community</a></p>

<p>対応する気はないのか、まだ手が回ってないだけなのか…。</p>

<h1>参考</h1>

<ul>
<li><a href="https://jp.globalsign.com/service/knowledge/ca/">認証局 （CA：Certification Authority）とは？ | SSL・電子証明書ならGMOグローバルサイン</a></li>
<li><a href="http://qiita.com/kawaz/items/f90810b9ea823b6556a8">認証局を立ててぼろもうけしたいんですが＞無理な理由を理解しよう &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgresqlのシーケンス番号]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/07/19/postgresql-seqence/"/>
    <updated>2016-07-19T17:10:47+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/07/19/postgresql-seqence</id>
    <content type="html"><![CDATA[<p>PostgresqlのDBで、レコードをインサートしようとしたところエラーが出たので原因を調査したメモ。</p>

<!-- more -->


<h1>エラー内容</h1>

<p>エラーは以下のような内容。</p>

<blockquote><p>duplicate key value violates unique constraint &ldquo;table_pkey&rdquo;</p></blockquote>

<p><code>table_pkey</code>は、テーブル名+pkeyとなる。<br/>
文字通り受け取るなら、ユニークでないといけない項目が被ってるよ、というもの。</p>

<p>しかし投げたレコードは特に被っている項目もなく、ユニークな項目もIDだけだった。</p>

<h1>原因</h1>

<p>値をシークエンスに設定したint型の項目は、インサートした順番に自動発番してくれるのだが、その発番する番号はシーケンス番号、として内部的に保持しているよう。
それが、内容を別DBからコピーなどすると上手く更新されない事があるらしい。たぶん。</p>

<h1>シーケンス番号</h1>

<h2>確認</h2>

<p>現在のシーケンス番号が何番になっているかを確認するためには以下のSQLを発行してやるとよい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT last_value FROM シーケンス名</span></code></pre></td></tr></table></div></figure>


<p>シーケンス名は、デフォルトでは、<code>テーブル名_項目名_seq</code>となっていると思われる。
Posticoで確認する場合は、<code>Navigate -&gt; Go to Terminal</code>でターミナルが開くので、そこでSQLを発行して確認する事が出来る。</p>

<p><img src="http://kayakuguri.github.io/images/2016/07/seq_01.jpg" alt="" /></p>

<p><img src="http://kayakuguri.github.io/images/2016/07/seq_02.jpg" alt="" /></p>

<p>今回発行してみると、<code>9</code>が返ってきた。</p>

<p><img src="http://kayakuguri.github.io/images/2016/07/seq_03.jpg" alt="" /></p>

<p>しかし実際のレコードは12まであり、保持されているシーケンス番号の次の番号から発番されるため、<code>10</code>が発番され重複エラーとなっていたよう。</p>

<h2>設定</h2>

<p>なので、このシーケンス番号を設定し直してやる。<br/>
シーケンス番号を設定するには以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT setval('シーケンス名', 数値); </span></code></pre></td></tr></table></div></figure>


<p>シーケンス番号はさきほどと同じ。数値はここでは12を設定してやる。</p>

<p>Posticoで実行すると以下のようになる。</p>

<p><img src="http://kayakuguri.github.io/images/2016/07/seq_05.jpg" alt="" /></p>

<p>これで12にセットされたため、インサートを実行すると13から発番されるので重複エラーが解消された。</p>

<h1>参考</h1>

<ul>
<li><a href="http://pirlo21.hatenablog.com/entry/2013/11/11/sql_%E9%87%8D%E8%A4%87%E3%82%92%E8%AA%8D%E3%82%81%E3%81%AA%E3%81%84%E3%82%A8%E3%83%A9%E3%83%BC_duplicate_key_value_violates_unique_constraint_">sql 重複を認めないエラー　duplicate key value violates unique constraint  &ndash; エンジニア　北欧日記</a></li>
<li><a href="http://programp.com/sql/441/">PostgreSQLでシーケンスの現在値を取得する | Program Program</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WP REST API v2にてカスタムエンドポイントを追加するまとめ]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/07/12/wp-rest-api-custom-endpoint/"/>
    <updated>2016-07-12T19:15:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/07/12/wp-rest-api-custom-endpoint</id>
    <content type="html"><![CDATA[<p>カスタムエンドポイントの作り方全般をまとめてみた。</p>

<!-- more -->


<h1>環境など</h1>

<ul>
<li>PHP 5.6</li>
<li>WordPress ver.4.5.3

<ul>
<li>WP REST API ver.2.0-beta13.1</li>
</ul>
</li>
<li>ドメイン : <code>http://wprest.local</code></li>
</ul>


<h1>GET</h1>

<p>まずは基本的な追加方法として<code>GET</code>メソッドのエンドポイントを追加する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>add_action( 'rest_api_init', 'add_custom_endpoint' );
</span><span class='line'>function add_custom_endpoint() {
</span><span class='line'>  register_rest_route( 'custom/v0', '/show', array(
</span><span class='line'>      'methods' =&gt; 'GET',
</span><span class='line'>      'callback' =&gt; 'create_item'
</span><span class='line'>  ) );
</span><span class='line'>}
</span><span class='line'>function show_item(){
</span><span class='line'>  //何かしらの処理
</span><span class='line'>  $data = ['apple'=&gt;'りんご', 'peach'=&gt;'もも', 'pear'=&gt;'なし'];
</span><span class='line'>
</span><span class='line'>  $response = new WP_REST_Response($data);
</span><span class='line'>  $response-&gt;set_status(200);
</span><span class='line'>  $domain = (empty($_SERVER["HTTPS"]) ? "http://" : "https://") . $_SERVER["HTTP_HOST"];
</span><span class='line'>  $response-&gt;header( 'Location', $domain );
</span><span class='line'>  return $response;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>rest_api_init</code>のフックでREST APIが初期化されたタイミングで追加する。<br/>
呼びだされた<code>add_custom_endpoint</code>関数内でAPIのエンドポイントを追加している。<br/>
エンドポイントを追加するには、<code>register_rest_route</code>を利用する。</p>

<ul>
<li>第一引数 : 名前空間</li>
<li>第二引数 : エンドポイント</li>
<li>第三引数 : メソッドなどの設定配列</li>
</ul>


<p>第一引数と第二引数を合わせたものがエンドポイントとなる。<br/>
エンドポイントは(デフォルトでは) <code>/wp-json/</code>がルートとなるのでこの指定はそれ以下の分、となる。</p>

<p>なので、このエンドポイントへのアクセスは以下のURLのようになる。<br/>
<code>http://wprest.local/wp-json/custom/v0/show</code></p>

<p>第三引数の<code>callback</code>で指定した関数がAPIアクセス時に呼び出される。<br/>
返却する内容は実はなんでも構わないが、<code>WP_REST_Response</code>クラスを利用することでヘッダーなどの設定が出来るよう。<br/>
ここでは、ステータス200、ヘッダーにドメインをロケーションで追加、などしている。</p>

<p>返ってくる内容は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "apple": "りんご",
</span><span class='line'>  "peach": "もも",
</span><span class='line'>  "pear": "なし"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>パラメータの追加</h2>

<p>REST APIらしく、URLにIDなどのパラメータを含める事ができる。<br/>
<code>register_rest_route</code>でエンドポイントを指定する時に以下のようにする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>register_rest_route( 'custom/v0', '/show/(?P&lt;id&gt;\d+)', array(
</span><span class='line'>  'methods' =&gt; 'GET',
</span><span class='line'>  'callback' =&gt; 'show_item_id'
</span><span class='line'>) );</span></code></pre></td></tr></table></div></figure>


<p>受け取る際は、コールバックの関数内で以下のようにする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function show_item_id($data){
</span><span class='line'>  $posts = get_posts( array(
</span><span class='line'>      'author' =&gt; $data['id'],
</span><span class='line'>  ) );
</span><span class='line'>//(後略)</span></code></pre></td></tr></table></div></figure>


<h1>メソッドの指定方法</h1>

<p>メソッドの指定方法は<code>GET</code>や<code>POST</code>など文字列での指定も可能だが、<code>WP_REST_Server</code>クラスを指定して複数いっぺんに指定が出来たりもする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>register_rest_route( 'custom/v0', '/show', array(
</span><span class='line'>  'methods' =&gt; WP_REST_Server::READABLE,
</span><span class='line'>  'callback' =&gt; 'show_item'
</span><span class='line'>) );</span></code></pre></td></tr></table></div></figure>


<ul>
<li>READABLE = &lsquo;GET&rsquo;</li>
<li>CREATABLE = &lsquo;POST&rsquo;</li>
<li>EDITABLE = &lsquo;POST, PUT, PATCH&rsquo;</li>
<li>DELETABLE = &lsquo;DELETE&rsquo;</li>
<li>ALLMETHODS = &lsquo;GET, POST, PUT, PATCH, DELETE&rsquo;</li>
</ul>


<h1>エラーの追加</h1>

<p>指定されたIDの投稿がないなど、エラーを返したい場合は以下のようにする。<br/>
(404エラーの場合の例）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function show_item_id($data){
</span><span class='line'>  if($data['id'] == 0){
</span><span class='line'>      return new WP_Error( 'awesome_no_author', 'Invalid author', array( 'status' =&gt; 404 ) );
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>/custom/v0/show/0</code>でアクセスすると以下のように返ってくる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  code: "awesome_no_author",
</span><span class='line'>  message: "Invalid author",
</span><span class='line'>  data: {
</span><span class='line'>      status: 404
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>POST</h1>

<p>ポストでの送信、データ取得は以下。ほぼ、GETの時と変わらない。<br/>
送られたデータはどうやって取得するのかすごく悩んだのだが、単純に<code>$_POST</code>で取得、でよかった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>add_action( 'rest_api_init', 'add_custom_endpoint' );
</span><span class='line'>function add_custom_endpoint() {
</span><span class='line'>  register_rest_route( 'custom/v0', '/create', array(
</span><span class='line'>      'methods' =&gt; 'POST',
</span><span class='line'>      'callback' =&gt; 'create_item'
</span><span class='line'>  ) );
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function create_item() {
</span><span class='line'>  $data = $_POST;
</span><span class='line'>  $response = new WP_REST_Response( $data );
</span><span class='line'>  $response-&gt;set_status( 201 );
</span><span class='line'>  $domain = (empty($_SERVER["HTTPS"]) ? "http://" : "https://") . $_SERVER["HTTP_HOST"];
</span><span class='line'>  $response-&gt;header( 'Location', $domain );
</span><span class='line'>
</span><span class='line'>  return $response;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>送った内容を表示させているだけ、の内容。<br/>
bodyで、<code>id=2</code>, <code>body=test</code>の２つを送ってみると、返ってくる値は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "id": "2",
</span><span class='line'>  "body": "test"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>権限</h1>

<p>特にPOSTなどは実行するには認証を必要としたい場合が多いと思う。<br/>
そういう時には、実行前に権限をチェックする関数を呼び出すものとして、<code>permission_callback</code>が用意されている。<br/>
<code>register_rest_route</code>の第三引数の中で以下のように指定する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>register_rest_route( 'custom/v0', '/create', array(
</span><span class='line'>  'methods' =&gt; 'POST',
</span><span class='line'>  'permission_callback' =&gt; 'create_permissions_check',
</span><span class='line'>  'callback' =&gt; 'create_item'
</span><span class='line'>) );</span></code></pre></td></tr></table></div></figure>


<p>この呼びだされた関数で、<code>true</code>を返すと通り、<code>false</code>を返すとエラーとなる。<br/>
エラーは以下のように返却される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "code": "rest_forbidden",
</span><span class='line'>  "message": "この操作を行う権限がありません。",
</span><span class='line'>  "data": {
</span><span class='line'>    "status": 403
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>この権現の確認は、<code>current_user_can</code>関数で行う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function create_permissions_check(){
</span><span class='line'>  return current_user_can('publish_posts');
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>OAuthやアプリケーションパスワードを使った認証部分はこの手前で完了しているため、実際に接続しに来たユーザーの権限をここでチェックしてやるだけで良い。<br/>
権限は以下を参考に。</p>

<p>参考: <a href="http://elearn.jp/wpman/function/current_user_can.html">current_user_can:WordPress私的マニュアル</a></p>

<h1>参考</h1>

<ul>
<li><a href="http://ja.wp-api.org/extending/adding/">Adding Custom Endpoints | WP REST API v2 Documentation</a></li>
<li><a href="http://ginzanomama.hatenablog.com/entry/2016/02/04/212826">WordPress REST API v2にendpointを追加する &ndash; みんなのちからになりたい</a></li>
<li><a href="https://wpshout.com/using-custom-rest-routes-wordpress-4-4-beyond/">Making Custom REST Routes In WordPress 4.4 and Beyond | WPShout</a></li>
<li><a href="http://qiita.com/kuck1u/items/c879271aa280da62c573">WordPress 4.4 で追加された REST API の停止やエンドポイントの変更など</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Salesforce]関連リストのインライン編集をVFで作成する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/07/11/vf-inline-edit/"/>
    <updated>2016-07-11T17:56:11+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/07/11/vf-inline-edit</id>
    <content type="html"><![CDATA[<p>オブジェクトの詳細で表示される関連リスト部分、要するにそのレコードを参照しているレコード、を一覧表示からインライン編集出来るようにしたかったので、インライン編集の基本的な部分から調べてみた。</p>

<!-- more -->


<h1>参考</h1>

<ul>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.pages.meta/pages/pages_quick_start_inline_editing.htm">インライン編集の有効化 Visualforce開発者ガイド</a></li>
</ul>


<h1>詳細レコード</h1>

<p>該当のレコードの詳細を表示し、表示している項目をインライン編集出来るようにする。</p>

<p>作成しているVFページのURLにて、IDが指定されている + 指定されている<code>standardController</code>のオブジェクトであれば、Visualforceだけで表示させることが可能。</p>

<blockquote><p><a href="https://Salesforce_instance/apex/myPage?id=001x000xxx3Jsxb">https://Salesforce_instance/apex/myPage?id=001x000xxx3Jsxb</a></p></blockquote>

<p>この場合、IDが<code>001x000xxx3Jsxb</code>の取引先(<code>Account</code>)が表示される。<br/>
<code>apex:detail</code>タグを使うと、このレコードの詳細がそのまま表示される。<br/>
その際に、属性<code>inlineEdit</code>を<code>true</code>で指定するとインライン編集が可能となる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:page standardController="Account"&gt;
</span><span class='line'>        &lt;apex:detail subject="{!account.Id}" relatedList="false" inlineEdit="true"/&gt; 
</span><span class='line'>&lt;/apex:page&gt;</span></code></pre></td></tr></table></div></figure>


<p>特定のレコードの詳細をそのまま表示したい時とかには便利。</p>

<h1>一覧表示</h1>

<p>詳細ではなく、一覧表示で複数件いっぺんに編集したい場合。
<code>apex:page</code>の属性で、<code>recordSetVar</code>を指定してやれば、<code>standardController</code>で指定したオブジェクトのリストを表示出来る。</p>

<p><a href="http://qiita.com/tyoshikawa1106/items/4ef3b8e1998609f2c573">standardControllerとrecordSetVar &ndash; Qiita</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:page standardController="Account" recordSetVar="records" id="thePage"&gt; 
</span><span class='line'>    &lt;apex:form id="theForm"&gt; 
</span><span class='line'>        &lt;apex:pageBlock id="thePageBlock"&gt; 
</span><span class='line'>            &lt;apex:pageBlockTable value="{!records}" var="record" id="thePageBlockTable"&gt; 
</span><span class='line'>                &lt;apex:column &gt;
</span><span class='line'>                    &lt;apex:outputField value="{!record.Name}" id="AccountNameDOM" /&gt; 
</span><span class='line'>                    &lt;apex:facet name="header"&gt;Name&lt;/apex:facet&gt;
</span><span class='line'>                &lt;/apex:column&gt;
</span><span class='line'>                &lt;apex:column &gt;
</span><span class='line'>                    &lt;apex:outputField value="{!record.Type}" id="AccountTypeDOM" /&gt; 
</span><span class='line'>                    &lt;apex:facet name="header"&gt;Type&lt;/apex:facet&gt;
</span><span class='line'>                &lt;/apex:column&gt;
</span><span class='line'>                &lt;apex:column &gt;
</span><span class='line'>                    &lt;apex:outputField value="{!record.Industry}" 
</span><span class='line'>                        id="AccountIndustryDOM" /&gt;  
</span><span class='line'>                        &lt;apex:facet name="header"&gt;Industry&lt;/apex:facet&gt;
</span><span class='line'>                &lt;/apex:column&gt;
</span><span class='line'>                &lt;apex:inlineEditSupport event="ondblClick" 
</span><span class='line'>                        showOnEdit="saveButton,cancelButton" hideOnEdit="editButton" /&gt; 
</span><span class='line'>            &lt;/apex:pageBlockTable&gt; 
</span><span class='line'>            &lt;apex:pageBlockButtons &gt; 
</span><span class='line'>                &lt;apex:commandButton value="Edit" action="{!save}" id="editButton" /&gt;
</span><span class='line'>                &lt;apex:commandButton value="Save" action="{!save}" id="saveButton" /&gt;
</span><span class='line'>                &lt;apex:commandButton value="Cancel" action="{!cancel}" id="cancelButton" /&gt;
</span><span class='line'>            &lt;/apex:pageBlockButtons&gt; 
</span><span class='line'>        &lt;/apex:pageBlock&gt; 
</span><span class='line'>    &lt;/apex:form&gt;
</span><span class='line'>&lt;/apex:page&gt;</span></code></pre></td></tr></table></div></figure>


<p>コードは公式ドキュメントのママ。<br/>
formなど各タグ内のIDは別にあってもなくてもよさそう。</p>

<p>以下のように表示される。</p>

<p><img src="http://kayakuguri.github.io/images/2016/07/sf_inline01.jpg" alt="" /></p>

<p><code>apex:column</code>で囲まれてた部分が1つの項目になっており、<code>&lt;apex:facet name="header"&gt;</code>タグの内容がそれぞれの項目の見出しとなる。</p>

<p>このままページを表示してインライン編集後、saveボタンをクリックすると確かに更新はされるがホームへ遷移してしまう。
(キャンセルをクリックしても同様)</p>

<p>これを解消するために、カスタムコントローラーを割り当ててみた。<br/>
<code>recordSetVar</code>を使っていると、割り当てたカスタムコントローラ側で取得したレコードリストを使用するために、<code>StandardSetController</code>を使う必要がある、とのこと。</p>

<p><a href="http://tyoshikawa1106.hatenablog.com/entry/2013/09/03/232942">SFDC：recordSetVarとextensions &ndash; tyoshikawa1106のブログ</a></p>

<p>これを、<code>StandardController</code>をコントローラ側で使っていると下記のようなエラーがでる。
エラーメッセージだけでは非常にわかりにくそうなので注意。</p>

<blockquote><p>common.apex.runtime.bytecode.BytecodeApexObjectType cannot be cast to common.apex.runtime.impl.ApexType</p></blockquote>

<p>で、カスタムコントローラ内で、ボタンを押された際のアクションを作成し、<code>null</code>を返す事でページ遷移をしないようにする。<br/>
ただし、保存する<code>save</code>ボタンはこれをしてしまうと保存されなくなってしまったので、キャンセルボタンだけにしておいた。</p>

<p>VF</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:page standardController="Account" recordSetVar="records" extensions="VfInlineEditSample" id="thePage"&gt; </span></code></pre></td></tr></table></div></figure>


<p>apex (<code>VfInlineEditSample.apxc</code>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class VfInlineEditSample {
</span><span class='line'>    public VfInlineEditSample(ApexPages.StandardSetController stdController){
</span><span class='line'>        List&lt;Account&gt; lists = (List&lt;Account&gt;)stdController.getRecords();
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    public PageReference cancel(){
</span><span class='line'>        return null;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.developerforce.com/guides/fr/apex_fr/Content/apex_pages_standardsetcontroller.htm">Classe StandardSetController</a></p>

<h1>関連リスト</h1>

<p>とあるレコードの関連リストを一覧表示からインライン編集したい場合。<br/>
上記の一覧表示と同じようにすればインライン編集出来るテーブルを作る事は可能。</p>

<p>IDはVFページのパラメータから取得する。</p>

<p>例）<br/>
<code>VfInlineEditSamplePage.vfp</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:page standardController="Account" extensions="VfInlineEditSample" id="thePage"&gt; 
</span><span class='line'>    &lt;apex:form id="theForm"&gt; 
</span><span class='line'>        &lt;apex:pageBlock title="商談" &gt;
</span><span class='line'>            &lt;apex:pageBlockTable value="{!opp_records}" var="opp"&gt;
</span><span class='line'>                &lt;apex:column &gt;
</span><span class='line'>                    &lt;apex:outputField value="{!opp.Name}" /&gt; 
</span><span class='line'>                    &lt;apex:facet name="header"&gt;商談名&lt;/apex:facet&gt;
</span><span class='line'>                &lt;/apex:column&gt;
</span><span class='line'>                &lt;apex:column &gt;
</span><span class='line'>                    &lt;apex:outputField value="{!opp.Amount}" /&gt; 
</span><span class='line'>                    &lt;apex:facet name="header"&gt;金額&lt;/apex:facet&gt;
</span><span class='line'>                &lt;/apex:column&gt;
</span><span class='line'>                &lt;apex:column &gt;
</span><span class='line'>                    &lt;apex:outputField value="{!opp.StageName}" /&gt; 
</span><span class='line'>                    &lt;apex:facet name="header"&gt;フェーズ&lt;/apex:facet&gt;
</span><span class='line'>                &lt;/apex:column&gt;
</span><span class='line'>                &lt;apex:column &gt;
</span><span class='line'>                    &lt;apex:outputField value="{!opp.NextStep}" /&gt; 
</span><span class='line'>                    &lt;apex:facet name="header"&gt;次回アクション&lt;/apex:facet&gt;
</span><span class='line'>                &lt;/apex:column&gt;
</span><span class='line'>                &lt;apex:inlineEditSupport event="ondblClick" /&gt;
</span><span class='line'>            &lt;/apex:pageBlockTable&gt; 
</span><span class='line'>            &lt;apex:pageBlockButtons &gt; 
</span><span class='line'>                &lt;apex:commandButton value="Save" action="{!save}" /&gt;
</span><span class='line'>                &lt;apex:commandButton value="Cancel" action="{!cancel}" /&gt;
</span><span class='line'>            &lt;/apex:pageBlockButtons&gt; 
</span><span class='line'>        &lt;/apex:pageBlock&gt; 
</span><span class='line'>    &lt;/apex:form&gt;
</span><span class='line'>&lt;/apex:page&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>VfInlineEditSample.apxc</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class VfInlineEditSample {
</span><span class='line'>    
</span><span class='line'>    public List&lt;Opportunity&gt; opp_records{get; set;}
</span><span class='line'>    
</span><span class='line'>    public VfInlineEditSample(ApexPages.StandardController stdController){
</span><span class='line'>        Account acc = (Account)stdController.getRecord();
</span><span class='line'>        Id aid = acc.id;
</span><span class='line'>        Account record = [SELECT id, name, (SELECT id,name,StageName,NextStep,Amount FROM Opportunities) FROM Account WHERE id=:aid];
</span><span class='line'>        opp_records = record.Opportunities;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    public PageReference cancel(){
</span><span class='line'>        return null;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以下のようになる。</p>

<p><img src="http://kayakuguri.github.io/images/2016/07/sf_inline02.jpg" alt="" /></p>

<p>このままだとSaveをクリックしても保存はされない。<br/>
なので、cancelと同じようにカスタムコントローラ内でアクションを受け取り、編集した内容はVFへ引き渡している、 <code>opp_records</code>に入っているので、それをupdateすれば更新される。</p>

<p>apexクラスに以下を追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public PageReference save(){
</span><span class='line'>    update opp_records;
</span><span class='line'>    return null;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>しかしこうすると、編集されたされてないにかかわらず、関連リストに並んでいるオブジェクト(この場合は商談)のレコード全てが更新されてしまう。<br/>
ガバナ制限は、1万レコードまで大丈夫なので、問題になることは少ないと思うが、最終更新日付が全て更新されてしまうのが都合が悪いかもしれない。</p>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.salesforce_app_limits_cheatsheet.meta/salesforce_app_limits_cheatsheet/salesforce_app_limits_platform_apexgov.htm">Apex ガバナ制限</a></p>

<h2>更新対象を選ぶ</h2>

<p>ワークフローであれば、<code>ISCHANGED</code>を使えば、その項目が変更されたかどうかをチェック出来るが、apexではそのメソッドはない。<br/>
(機能追加が要望があがってたりする(トリガの機能としてだけど） <a href="https://success.salesforce.com/ideaview?id=087300000007LI2AAM">IsChanged function in Apex</a>)</p>

<p>なので、更新される項目を一つずつ比較して更新があるかどうかを確認する泥臭い方法を取ってみる。<br/>
(他にいいアイデアがあれば教えて欲しい…）</p>

<p>修正後のapex</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class VfInlineEditSample {
</span><span class='line'>    
</span><span class='line'>    public List&lt;Opportunity&gt; opp_records{get; set;}
</span><span class='line'>    private List&lt;Opportunity&gt; old_records;
</span><span class='line'>    
</span><span class='line'>    public VfInlineEditSample(ApexPages.StandardController stdController){
</span><span class='line'>        Account acc = (Account)stdController.getRecord();
</span><span class='line'>        Id aid = acc.id;
</span><span class='line'>        Account record = [SELECT id, name, (SELECT id,name,StageName,NextStep,Amount FROM Opportunities) FROM Account WHERE id=:aid];
</span><span class='line'>        opp_records = record.Opportunities;
</span><span class='line'>        old_records = opp_records.deepClone();
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    public PageReference cancel(){
</span><span class='line'>        return null;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    public PageReference save(){
</span><span class='line'>        List&lt;Opportunity&gt; update_lists = new List&lt;Opportunity&gt;();
</span><span class='line'>        for(Integer i = 0; i&lt; opp_records.size(); i++){
</span><span class='line'>            if(opp_records[i].name != old_records[i].name){
</span><span class='line'>                update_lists.add(opp_records[i]);
</span><span class='line'>                continue;
</span><span class='line'>            }else if(opp_records[i].StageName != old_records[i].StageName){
</span><span class='line'>                update_lists.add(opp_records[i]);
</span><span class='line'>                continue;
</span><span class='line'>            }else if(opp_records[i].NextStep != old_records[i].NextStep){
</span><span class='line'>                update_lists.add(opp_records[i]);
</span><span class='line'>                continue;
</span><span class='line'>            }else if(opp_records[i].Amount != old_records[i].Amount){
</span><span class='line'>                update_lists.add(opp_records[i]);
</span><span class='line'>                continue;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        if(update_lists.size() &gt; 0){
</span><span class='line'>            update update_lists;
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        return null;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>リストをコピーする際に、<code>deepClone</code>を使わないと<code>clone</code>では浅いコピーとなってしまい、参照しているものが同じになってしまうので注意。
(一方の値を更新するともう一方も同じ値になってしまう）</p>

<h2>汎用的にする</h2>

<p>上記だと、表示する項目を増やす度に比較の条件文を追加しないといけない。<br/>
なので、全項目から取得出来るものだけを比較するようにしてみた。</p>

<p>以下、関数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public List&lt;sObject&gt; isChanged(String object_name, List&lt;sObject&gt; new_records, List&lt;sObject&gt; old_records){
</span><span class='line'>    sObject obj = (sObject)Type.forName(object_name).newInstance();
</span><span class='line'>    Schema.DescribeSObjectResult descR = obj.getsObjectType().getDescribe();
</span><span class='line'>    Set&lt;String&gt; fields = descR.fields.getMap().keySet();
</span><span class='line'>    Map&lt;String, Schema.SObjectField&gt; fmap = descR.fields.getMap();
</span><span class='line'>    
</span><span class='line'>    List&lt;sObject&gt; update_records = new List&lt;sObject&gt;();
</span><span class='line'>    for(Integer i = 0; i&lt; new_records.size(); i++){
</span><span class='line'>        for(String field : fields){
</span><span class='line'>            try{
</span><span class='line'>                Schema.SObjectField f = fmap.get(field);
</span><span class='line'>                Schema.DescribeFieldResult fr = f.getDescribe();
</span><span class='line'>                if(!fr.isUpdateable()) continue; //更新出来ない項目は飛ばす
</span><span class='line'>                //比較
</span><span class='line'>                if(new_records[i].get(field) != old_records[i].get(field)){
</span><span class='line'>                    update_records.add(new_records[i]);
</span><span class='line'>                    continue;
</span><span class='line'>                }
</span><span class='line'>            }catch(SObjectException e){
</span><span class='line'>                //取得していない項目
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    return update_records;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>getDescribe()</code>で指定したオブジェクトの全項目名を取得出来る</li>
<li>取得した項目名を使ってオブジェクトから<code>get()</code>で取得。例外が発生したものはselectで取得していない項目、となる</li>
<li>更新可能かどうかは、<code>Describe</code>で取得出来る項目の情報内を見れば判定可能<br/>
<code>isUpdateable</code>がtrueなら更新が出来る項目となるので、これがtrueのもののみ比較している</li>
</ul>


<p>使用の際は、第一引数にオブジェクトの参照名、第二引数に更新後のレコードリスト、第三引数に更新前のレコードリストを指定してやる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;Opportunity&gt; update_lists = isChanged('Opportunity', opp_records, old_records);</span></code></pre></td></tr></table></div></figure>


<p>これで項目が増えても安心。</p>

<h3>参考</h3>

<ul>
<li><a href="http://kayakuguri.github.io/blog/2014/04/23/sf-mailtemplate/">[SalesForce]メールテンプレートの項目一覧 &ndash; KayaMemo</a></li>
<li><a href="http://appirio.co.jp/category/tech-blog/2012/07/force-com-apex%E3%81%AE%E3%80%8Cdescribe%E3%80%8D%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8%EF%BC%88%E3%81%9D%E3%81%AE%EF%BC%91%EF%BC%89/">Force.com Apexの「Describe」でできること（その１） &ndash; Appirio Japan</a></li>
<li><a href="http://appirio.co.jp/category/tech-blog/2012/09/force-com-apex%E3%81%AE%E3%80%8Cdescribe%E3%80%8D%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8%EF%BC%88%E3%81%9D%E3%81%AE%EF%BC%92%EF%BC%89/">Force.com Apexの「Describe」でできること（その２） &ndash; Appirio Japan</a></li>
<li><a href="http://vaindespair.blogspot.jp/2012/04/blog-post_04.html">memo: Force.com&#12288;&#65306;&#12288;Apex でオブジェクト及び項目の情報を取得する</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PHP]CurlでのSSL接続をOpenSSL方式に変更する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/07/07/curl-openssl-tls/"/>
    <updated>2016-07-07T17:50:07+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/07/07/curl-openssl-tls</id>
    <content type="html"><![CDATA[<p>curlでsslを接続する際に、opensslを利用した接続になっていなかったために接続出来ない事例があったのだが、curlを入れ替えてopensslを利用するようにしたら接続出来たのでそのメモ。</p>

<!-- more -->


<h1>前提</h1>

<p>接続をしている環境は以下とする。</p>

<ul>
<li>CnetOS 5.6</li>
<li>PHP 5.3</li>
</ul>


<p>この環境で、SalesforceへRestAPIを利用して接続をする。<br/>
接続する際の認証は以下のクラスを利用している。</p>

<ul>
<li><a href="https://github.com/nkjm/Force.com-OAuth-Toolkit-for-PHP">nkjm/Force.com-OAuth-Toolkit-for-PHP: A toolkit to enable OAuth in external Web Services developed in php</a></li>
</ul>


<p>自作の <code>/sample/login</code>のエンドポイントへ接続するものとする。<br/>
接続に利用しているPHP。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require_once('oauth.php');
</span><span class='line'>
</span><span class='line'>define('CLIENT_ID', 'xxx');
</span><span class='line'>define('CLIENT_SECRET', 'xxx');
</span><span class='line'>define('CALLBACK_URL', 'http://localhost/');
</span><span class='line'>define('LOGIN_URL', 'https://test.salesforce.com');
</span><span class='line'>define('USERNAME', 'xxx');
</span><span class='line'>define('PASSWORD', 'xxx');
</span><span class='line'>
</span><span class='line'>$oauth = new oauth(CLIENT_ID, CLIENT_SECRET, CALLBACK_URL, LOGIN_URL);
</span><span class='line'>$oauth-&gt;auth_with_password(USERNAME, PASSWORD, 120);
</span><span class='line'>$url = "$oauth-&gt;instance_url/services/apexrest/sample/login";
</span><span class='line'>$curl = curl_init($url);
</span><span class='line'>$POST_DATA = array(
</span><span class='line'>    'email' =&gt; 'sample',
</span><span class='line'>    'passwd' =&gt; 'password'
</span><span class='line'>);
</span><span class='line'>
</span><span class='line'>curl_setopt($curl, CURLOPT_POST, TRUE);
</span><span class='line'>curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($POST_DATA));
</span><span class='line'>curl_setopt($curl, CURLOPT_HEADER, false);
</span><span class='line'>curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
</span><span class='line'>curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-type: application/x-www-form-urlencoded;charset=UTF-8', "Authorization: OAuth " . $oauth-&gt;access_token));
</span><span class='line'>$output= curl_exec($curl);
</span><span class='line'>curl_close($curl);
</span><span class='line'>$response = json_decode($output, true);
</span><span class='line'>
</span><span class='line'>echo $output;</span></code></pre></td></tr></table></div></figure>


<p>この辺詳しくは以下をどうぞ。<br/>
<a href="http://kayakuguri.github.io/blog/2014/10/27/apex-rest-post/">[Salesforce]apex Rest APIでPOSTでデータを送信する</a></p>

<h1>失敗する</h1>

<p>このまま送信をすると、以下のようなエラーが出て失敗する。<br/>
ちなみに、ログイン履歴には残っている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[
</span><span class='line'>  {
</span><span class='line'>      message: "この組織では TLS 1.0 が無効になりました。HTTPS を使用して Salesforce に接続するには、TLS 1.1 以降を使用してください。",
</span><span class='line'>      errorCode: "UNSUPPORTED_CLIENT"
</span><span class='line'>  }
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<h1>TLS</h1>

<p>ssl通信をする時の暗号化規格で、TLS1.0は暗号化のレベルが低い、とかで1.1以上が推奨されているよう。<br/>
<a href="http://www.intellilink.co.jp/article/pcidss/18.html">SSL/TLS 1.0 はいつまでに無効化しなければならないか？ | NTTデータ先端技術株式会社</a><br/>
それに伴って、Salesforceでは、TLS1.0での接続を無効に切り替えていっている。<br/>
変更内容など詳しくは公式で。</p>

<ul>
<li><a href="https://help.salesforce.com/apex/HTViewSolution?id=000221207&amp;language=ja">Salesforce による TLS 1.0 の無効化</a></li>
</ul>


<p>組織の設定から明示的に有効にする事も可能だが、強制的に切り替えが行われるタイミングは以下。</p>

<ul>
<li>Sandbox 組織 &ndash; 2016 年 6 月 25 日、午前 9:30 (太平洋夏時間) (16:30 UTC)</li>
<li>本番組織 &ndash; 2017 年 3 月 4 日、午前 9:30 (太平洋標準時) (17:30 UTC)</li>
</ul>


<p>今回は、Sandboxでの設定が適用されたために接続が出来なくなったよう。</p>

<p>ちなみにTLSについて調べていて、現状、SSLと呼んでいるものは全てTLSによる接続になっているらしい。</p>

<blockquote><p>SSLはバージョン1.0と2.0は既に脆弱性で消えていたが、2014(平成26)年10月14日、GoogleのセキュリティチームによりSSL 3.0の深刻な脆弱性「POODLE」が発見されたことでSSLは全バージョンに脆弱性が発覚、これをもってSSLは現役を退いた。<br/>
<a href="http://www.wdic.org/w/WDIC/TLS">http://www.wdic.org/w/WDIC/TLS</a></p></blockquote>

<h1>原因</h1>

<p>上記環境で原因を探ってみると、<code>curl</code>でエンドポイントへ投げる際に<code>NSS</code>という方式が使われている事が原因となっている事がわかった。</p>

<p><img src="http://kayakuguri.github.io/images/2016/07/tls01.jpg" alt="" /></p>

<p><a href="https://developer.mozilla.org/ja/docs/NSS_FAQ">NSS FAQ | MDN</a></p>

<p>NSSのバージョンは3.14だが、このバージョンでは一応TLS1.1には対応しているとリリースノートには書かれていたが…。詳細は不明。<br/>
<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_3.14_release_notes">NSS 3.14 release notes &ndash; Mozilla | MDN</a></p>

<h1>対処</h1>

<p>というわけで、これを<code>NSS</code>ではなく、<code>OpenSSL</code>方式で接続するように変更する。<br/>
といっても、設定変更で済むわけではなく、curlのインストールし直し、となる。</p>

<p>作業内容は以下のサイトをそのまま利用させてもらった。<br/>
<a href="http://www.apollo.jp/blog/?p=2382">wordpressの引っ越し | 紅い夕陽</a></p>

<h2>作業</h2>

<p>サーバー側での作業となる。<br/>
今回はvagrant環境で作業をしたので、<code>$ vagrant ssh</code>でsshログインして作業した。<br/>
また、ルートログインしておく。</p>

<p>・必要なモジュールをインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># yum install gcc
</span><span class='line'># yum -y install openssl-devel
</span><span class='line'># yum -y install wget
</span><span class='line'># yum -y install lbzip2</span></code></pre></td></tr></table></div></figure>


<p>・curlを取得して展開(curlは少し前のバージョン)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># wget http://curl.haxx.se/download/curl-7.37.0.tar.bz2
</span><span class='line'># tar xf curl-7.37.0.tar.bz2
</span><span class='line'># cd curl-7.37.0
</span><span class='line'># ./configure --enable-libcurl-option</span></code></pre></td></tr></table></div></figure>


<p>・コンパイルしてインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># make
</span><span class='line'># make install</span></code></pre></td></tr></table></div></figure>


<p>・ライブラリを登録</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vi /etc/ld.so.conf.d/curl-x86_64.conf</span></code></pre></td></tr></table></div></figure>


<p>内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/lib</span></code></pre></td></tr></table></div></figure>


<p>・ライブラリを更新</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ldconfig -v</span></code></pre></td></tr></table></div></figure>


<p>最後に、apacheを再起動しておく。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># service httpd restart</span></code></pre></td></tr></table></div></figure>


<p>これでOpensslを使うように変更できた。</p>

<p><img src="http://kayakuguri.github.io/images/2016/07/tls02.jpg" alt="" /></p>

<p>この状態で再度冒頭のPHPでアクセスすると、無事、接続することが出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="http://www.apollo.jp/blog/?p=2382">wordpressの引っ越し | 紅い夕陽</a></li>
<li><a href="http://blog.wnotes.net/blog/article/php_curl_error">PHPのcurlで&quot;SSL Connection Error.&quot;のエラーがどうしても出る時の対策 | ブログ :: Web notes.log</a></li>
<li><a href="http://www.wdic.org/w/WDIC/TLS">TLS ‐ 通信用語の基礎知識</a></li>
<li><a href="http://www.intellilink.co.jp/article/pcidss/18.html">SSL/TLS 1.0 はいつまでに無効化しなければならないか？ | NTTデータ先端技術株式会社</a></li>
<li><a href="http://tkengo.github.io/blog/2015/12/01/https-details/">理解してるつもりの SSL/TLS でも、もっと理解したら面白かった話 &middot; けんごのお屋敷</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSVデータをMySQLにインポートする]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/07/04/mysql-import-csv/"/>
    <updated>2016-07-04T16:32:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/07/04/mysql-import-csv</id>
    <content type="html"><![CDATA[<p>CSVのデータをMySQLにインポートしたので方法のメモ。</p>

<!-- more -->


<h1>環境</h1>

<ul>
<li>Vagrant : <a href="https://box.scotch.io/">Scotchbox</a>

<ul>
<li>Ubuntu 14.04 LTS</li>
<li>PHP 5.6</li>
</ul>
</li>
</ul>


<h1>準備</h1>

<p>MySQLにテーブルを作成する。
テーブルに作成した項目順にカンマ区切りで値を作成する。</p>

<p>エクセルでCSVファイルを作成した場合は、MySQLの文字コードをUTF-8としたので、テキストエディタなどでUTF-8に変更しておく
改行コードは、<code>CRLF</code>。</p>

<p>作成したCSVファイルは、vagrantの共有フォルダに保存しておく。</p>

<h1>インポート</h1>

<p><code>$ vagrant ssh</code>から、<code>$ mysql -u root</code>でmysqlにログインし、以下のコマンドでインポートする。
インポートするファイルは、<code>data.csv</code>とする。</p>

<p>インポートするファイルはパスで指定するが、scotchboxの場合、共有フォルダの階層はvagrant内から見た場合は、<code>/var/www/</code>となるので、それを指定してやる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; LOAD DATA LOCAL INFILE '/var/www/data.csv' INTO TABLE SUB_ListAll FIELDS TERMINATED BY ',' LINES TERMINATED BY '\r\n';</span></code></pre></td></tr></table></div></figure>


<h1>注意点</h1>

<h2>改行コード</h2>

<p>インポートする際に使用する、<code>DATA INFILE</code>コマンドでは、デフォルトの改行コードは<code>LF</code>になっているよう。
なので、明示的に改行コードを指定してやる必要がある。
それが以下の部分。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LINES TERMINATED BY '\r\n'</span></code></pre></td></tr></table></div></figure>


<h2>LOCAL INFILE</h2>

<p><code>local infile</code>を利用するには、設定で許可されている必要があるよう。
これが許可されていないと、以下のエラーが返ってくる。</p>

<blockquote><p>The used command is not allowed with this MySQL version</p></blockquote>

<p>デフォルトでは許可されていなかったので、mysqlへログインする際に許可してログインする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mysql --local-infile=1 -u root</span></code></pre></td></tr></table></div></figure>


<h1>まとめ</h1>

<p>ちょっとググっても色々と落とし穴があるようで、環境によってはその他の穴も空いてるかもしれない。
とりあえず、冒頭にあげた環境では上記でいけた。</p>

<p>ちなみに、ファイルはパーミッションを777に指定してやらなくてもそのままでいけた。</p>

<h1>参考</h1>

<ul>
<li><a href="http://www.infoscoop.org/blogjp/2014/07/23/about-load-data-infile/">MySQLのLOAD DATA INFILEで大はまりした話 | infoScoop開発者ブロ</a></li>
<li><a href="http://oshiete.goo.ne.jp/qa/1030943.html">CSVファイルのインポートについて &ndash; MySQL 解決済 | 教えて！goo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SalesforceからWP REST APIへOAuth認証を利用して投稿する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/06/30/sf-callout-wp-rest-api-oauth1/"/>
    <updated>2016-06-30T17:36:44+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/06/30/sf-callout-wp-rest-api-oauth1</id>
    <content type="html"><![CDATA[<p>salesforceからWP REST APIのエンドポイントへコールアウトして投稿する。<br/>
投稿の際には、OAuth認証を利用する。</p>

<!-- more -->


<h1>前提</h1>

<p>WordPress側にで、OAuth 1.0a Serverを導入してアプリケーションを作成しておく。<br/>
また、そのアプリケーションを使用して、アクセストークンまで取得しているものとする。</p>

<p>通常は承認のフローなどはユーザー側が行うため、アクセストークンまでもった状態からスタートすることはないと思うが、今回は最後の投稿部分だけに絞って試してみた。</p>

<p>WP REST APIでアクセストークンを取得するには、前回書いたこの記事を参考にどうぞ。<br/>
<a href="http://kayakuguri.github.io/blog/2016/06/30/wp-rest-oauth/">WordPress REST APIにOAuth1.0aで認証して投稿する &ndash; KayaMemo</a></p>

<h1>リモートサイトの登録</h1>

<p>コールアウトする先のドメインを事前に許可しておいてやる必要がある。<br/>
<code>設定 -&gt; セキュリティのコントロール -&gt; リモートサイトの設定</code> から、<code>新規リモートサイト</code>をクリック。</p>

<ul>
<li>リモートサイト名 : 適当な名前</li>
<li>リモートさサイトのURL : 接続先ドメイン</li>
<li>プロトコルセキュリティの無効化 : HTTPでも接続を許可するか</li>
<li>説明 : 適当な説明</li>
<li>有効 : オンに</li>
</ul>


<p>通常では当然だが、HTTPSでの通信が推奨されている。
しかし、リスクを承知、もしくはテストでの接続の場合など、HTTPでも接続させる場合はこの項目にチェックをつけると許可する事が可能。
今回はテストってことでオンにした。</p>

<p><img src="http://kayakuguri.github.io/images/2016/06/sf_wprest01.jpg" alt="" /></p>

<p>ちなみに、このリモートサイトへの登録をせずにコールアウトしようとすると、以下のようなエラーが出力される。</p>

<blockquote><p>Unauthorized endpoint, please check Setup->Security->Remote site settings. endpoint =xxx</p></blockquote>

<h1>OAuth1.0a認証</h1>

<p>今回は、WP REST API + OAuth 1.0a Server　の設定で投稿するため、OAuth1.0aでの認証になる。<br/>
OAuth 1.0a での認証をするためには、アクセストークンやシグネチャなどの情報をヘッダーに付与してやる必要がある。<br/>
参考: <a href="https://syncer.jp/how-to-make-signature-of-oauth-1">OAuth1.0の署名(Signature)を作成する方法</a></p>

<p>これらの処理をするためのクラスがあったのでこちらを参考にさせてもらった。</p>

<p><a href="https://gist.github.com/surjikal/7539745">Apex 2-legged OAuth 1.0</a></p>

<p>ただし、このままでは足りない情報があったため、アクセストークンなどを送信するように修正させてもらったものが以下となる。</p>

<p><a href="https://gist.github.com/k-usk/894760237c73e47ed4c7333c30ce0b91">k-usk/OAuth.cls</a></p>

<h1>コールアウトを実装</h1>

<p>上記のクラスを利用して実際にコールアウトしてやる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class PostWPCallout {
</span><span class='line'>    @Future(callout=true)
</span><span class='line'>    public static void wpCalloutOAuth(){
</span><span class='line'>      String WP_URL = 'http://example.com';
</span><span class='line'>        String client_key = 'IdZQC4OG1Ppi';
</span><span class='line'>        String client_secret = 'S14spr4ny50fN4mjlEfvoBl4d9dWmIyqobp60DvWAD6b0j5g';
</span><span class='line'>        String oauth_token = '1IRo5QV2itt7BSeVA9m14yMQ';
</span><span class='line'>        String oauth_token_secret = 'MPDAnRor5Ajxr7z1N7JF2EOr7vCZqqJE48iYjgolQ1cD0Jm9';
</span><span class='line'>        
</span><span class='line'>        //リクエストを作成
</span><span class='line'>        HttpRequest req = new HttpRequest();
</span><span class='line'>        req.setMethod('POST');
</span><span class='line'>        req.setEndpoint(WP_URL + '/wp-json/wp/v2/posts'); //新規投稿
</span><span class='line'>        req.setHeader('Content-Type','application/json');
</span><span class='line'>        Map&lt;String,String&gt; mapEmp = new Map&lt;String,String&gt;();
</span><span class='line'>        mapEmp.put('title','タイトル');
</span><span class='line'>        mapEmp.put('content', '本文');
</span><span class='line'>        String jsonString = JSON.serialize(mapEmp);
</span><span class='line'>        req.setBody(jsonString);
</span><span class='line'>        
</span><span class='line'>        //クラスを利用して、OAuth用のヘッダを作る
</span><span class='line'>        req = OAuth.signRequest(req, client_key, client_secret, oauth_token, oauth_token_secret);
</span><span class='line'>
</span><span class='line'>        //コールアウト
</span><span class='line'>        Http http = new Http();
</span><span class='line'>        try{
</span><span class='line'>            HttpResponse res = http.send(req);
</span><span class='line'>            
</span><span class='line'>            System.debug(Logginglevel.INFO, '*** BODY : ' + res.getBody());
</span><span class='line'>            System.debug(Logginglevel.INFO, '*** STATUS : ' + res.getStatus());
</span><span class='line'>            System.debug(Logginglevel.INFO, '*** STATUS_CODE : ' + res.getStatusCode());
</span><span class='line'>        }catch(System.CalloutException e){
</span><span class='line'>            System.debug(Logginglevel.INFO,'*** ERROR_MESSAGE : ' + e.getMessage());
</span><span class='line'>            System.debug(Logginglevel.INFO,'*** ERROR_LINE_NUMBER : ' + e.getLineNumber());
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>コールアウトしたレスポンスがJSONで返ってくるので、投稿した記事IDを取得したい場合はここから取得したりも出来る。<br/>
(JSONでの取得はややこしいので、パースすることになるが）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordPress REST APIにOAuth1.0aで認証して投稿する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/06/30/wp-rest-oauth/"/>
    <updated>2016-06-30T17:04:32+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/06/30/wp-rest-oauth</id>
    <content type="html"><![CDATA[<p>WordPress REST APIで投稿するには認証が必要となる。<br/>
認証には、クッキーベース、ベーシック認証ベース、OAuth認証ベース、の方法があるが、
その中でも一番セキュアな、OAuthでの認証を行ってみる。</p>

<!-- more -->


<h1>環境情報など</h1>

<p>試した環境など。</p>

<ul>
<li>PHP 5.6</li>
<li>WordPress ver.4.5.3

<ul>
<li>WP REST API ver.2.0-beta13.1</li>
<li>WP REST API &ndash; OAuth 1.0a Server  ver.0.2.1</li>
</ul>
</li>
<li>ドメイン : <code>http://wprest.local</code></li>
</ul>


<h1>WordPressのセットアップ</h1>

<h2>WP REST API</h2>

<p><a href="https://wordpress.org/plugins/rest-api/">WordPress REST API (Version 2) &mdash; WordPress Plugins</a><br/>
プラグインの新規追加から検索すれば出てくる。
そこからインストールして、有効化すればOK。</p>

<h2>WP REST API &ndash; OAuth 1.0a Server</h2>

<p><a href="https://github.com/WP-API/OAuth1">WP-API/OAuth1: OAuth server implementation for WP API</a><br/>
上記からzipをダウンロードし、<code>プラグイン-&gt;新規追加</code>からzipをアップロードし、その後有効化する。</p>

<p>ユーザー項目に、<code>Applicatons</code>が増えていれば正しく有効化出来ている。<br/>
また、WP REST APIを追加していれば、<code>/wp-json/</code>にアクセスした際にOAuth認証するためのURLが表示されるようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>authentication: {
</span><span class='line'>  oauth1: {
</span><span class='line'>    request: "http://wprest.local/oauth1/request",
</span><span class='line'>    authorize: "http://wprest.local/oauth1/authorize",
</span><span class='line'>    access: "http://wprest.local/oauth1/access",
</span><span class='line'>    version: "0.1"
</span><span class='line'>  }
</span><span class='line'>},</span></code></pre></td></tr></table></div></figure>


<h2>アプリケーションの追加</h2>

<p><code>ユーザー -&gt; Applications</code>を開き、<code>Add Application</code>をクリック。それぞれの項目を適当に入力する。
<code>Callback</code>の値は適当に<code>/test</code>などと入れておいた。<br/>
本来であれば、承認が行われた後にcallbackで指定されたURLへリダイレクトがかかるはずなのだが、不具合なのか動作しなかった。</p>

<p><code>Add Consumer</code>をクリックすると<code>Client Key</code>と<code>Client Secret</code>が生成される。</p>

<p><img src="http://kayakuguri.github.io/images/2016/06/wp_oauth01.jpg" alt="" /></p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Client Key </td>
<td align="left"> RY5OpVfznCzY </td>
</tr>
<tr>
<td></td>
<td align="left"> Client Secret </td>
<td align="left"> 8HHflSELMukNNE6NxFNFeJDAsoHA7Dhjkb6wXFoxduMykAwo </td>
</tr>
</tbody>
</table>


<h1>PHPで接続</h1>

<h2>環境変数</h2>

<p>環境変数に上記で取得したアプリケーションのキーなどを追加して使用することにする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WP_CLIENT_KEY=RY5OpVfznCzY
</span><span class='line'>WP_CLIENT_SECRET=8HHflSELMukNNE6NxFNFeJDAsoHA7Dhjkb6wXFoxduMykAwo</span></code></pre></td></tr></table></div></figure>


<h2>PECL oauth</h2>

<p><code>Oauth 1.0a</code>での認証を行うために、PECL oauthライブラリを使用する。<br/>
公式のマニュアル: <a href="http://php.net/manual/ja/book.oauth.php">PHP: OAuth &ndash; Manual</a></p>

<blockquote><p>PECL::OAuthは、OAuthコンシューマやプロバイダの機能をphpで手軽に実装できるようにする拡張モジュールです。
<a href="http://blog.flatlabs.net/20100611_062745/">http://blog.flatlabs.net/20100611_062745/</a></p></blockquote>

<p>HerokuでPHPの拡張モジュールを利用する場合には、composerで追加する事が出来る。
以下のコマンドで追加が可能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ composer require ext-oauth</span></code></pre></td></tr></table></div></figure>


<p>参考: <a href="https://devcenter.heroku.com/articles/php-support#extensions">Heroku PHP Support | Heroku Dev Center</a></p>

<p>ローカル環境などのサーバに追加する場合は、直接インストールしてやる必要がある。<br/>
参考: <a href="http://blog.unfindable.net/archives/5697">PECL/oauthの導入方法 | 配電盤</a></p>

<p>今回はローカル環境には、<a href="https://box.scotch.io/">Scotchbox</a>を利用しているので、Ubuntuにインストール方法をメモしておく。</p>

<h3>インストールと設定</h3>

<p>上記参考サイトの通りだが、そのまま<code>oauth</code>をインストールしようとするとバージョンでエラーが出る。
<code>oauth</code>の最新版では、PHP7.0以上のみサポートされているようなので、PHP5.6対応のバージョンを明示的に指定してやる必要がある。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install apache2 php5 php5-dev php-pear libpcre3-dev make
</span><span class='line'>$ sudo pecl install oauth-1.2.3</span></code></pre></td></tr></table></div></figure>


<p>最後に書かれている通り、<code>php.ini</code>に追記する。<br/>
<code>/etc/php5/apache2/php.ini</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>extension=oauth.so</span></code></pre></td></tr></table></div></figure>


<p>apache再起動。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo service apache2 restart</span></code></pre></td></tr></table></div></figure>


<p><code>phpinfo</code>でOAuthが有効と表示されていれば完了。</p>

<p><img src="http://kayakuguri.github.io/images/2016/06/wp_oauth02.jpg" alt="" /></p>

<h2>トークンの取得</h2>

<p>今回の承認などに必要なPHPファイルは全て同一ドメイン・同一階層に置くものとする。</p>

<p>OAuth1.0aの承認フローなどの動きは以下がとても参考になった。</p>

<p>参考: <a href="http://nskw-style.com/2016/wordpress/wp-api/oauth1.html">WP REST API の OAuth 認証の方法と何が起こっているのかとなぜそんなことをしているのか &#8211; Shinichi Nishikawa&#039;s</a></p>

<h2>コード</h2>

<p>参考 : <a href="http://qiita.com/newton/items/1114e443a90e204746ad">Tumblr API OAuth認証の方法（PHPサンプル付き） &ndash; Qiita</a></p>

<p>こちらのコードをほぼそのまま利用させてもらった。</p>

<p><code>login.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require_once './OAuthSample.php';
</span><span class='line'>
</span><span class='line'>$oauth_sample = new OAuthSample();
</span><span class='line'>try {
</span><span class='line'>    // リクエストトークンの取得とリダイレクト開始
</span><span class='line'>    $oauth_sample-&gt;goToAuthorize();
</span><span class='line'>} catch (\Exception $e) {
</span><span class='line'>    // エラー処理
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>OAuthSample.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>/**
</span><span class='line'> * Tumblr OAuth認証実装サンプル
</span><span class='line'> *
</span><span class='line'> * @author newton
</span><span class='line'> */
</span><span class='line'>class OAuthSample
</span><span class='line'>{
</span><span class='line'>    const REQUEST_TOKEN_URL  = 'http://wprest.local/oauth1/request';
</span><span class='line'>    const AUTHORIZE_URL      = 'http://wprest.local/oauth1/authorize';
</span><span class='line'>    const ACCESS_TOKEN_URL   = 'http://wprest.local/oauth1/access';
</span><span class='line'>
</span><span class='line'>    public $CONSUMER_KEY = '';
</span><span class='line'>    public $CONSUMER_SECRET = '';
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * コントストラク
</span><span class='line'>     * セッションの初期化をやる
</span><span class='line'>     */
</span><span class='line'>    public function __construct()
</span><span class='line'>    {
</span><span class='line'>        $this-&gt;CONSUMER_KEY = getenv('WP_CLIENT_KEY');
</span><span class='line'>        $this-&gt;CONSUMER_SECRET = getenv('WP_CLIENT_SECRET');
</span><span class='line'>
</span><span class='line'>        if (!isset($_SESSION)) {
</span><span class='line'>            session_start();
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * リクエストトークンの取得～リダイレクト
</span><span class='line'>     */
</span><span class='line'>    public function goToAuthorize()
</span><span class='line'>    {
</span><span class='line'>        $oauth = new \OAuth($this-&gt;CONSUMER_KEY, $this-&gt;CONSUMER_SECRET);
</span><span class='line'>        // リクエストトークン取得
</span><span class='line'>        $request_token = $oauth-&gt;getRequestToken(self::REQUEST_TOKEN_URL);
</span><span class='line'>
</span><span class='line'>        if (!$request_token) {
</span><span class='line'>            throw new Exception('リクエストトークンの取得に失敗');
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        // リクエストトークンをセッションに保存する
</span><span class='line'>        $_SESSION['request_token'] = $request_token['oauth_token'];
</span><span class='line'>        $_SESSION['request_token_secret'] = $request_token['oauth_token_secret'];
</span><span class='line'>
</span><span class='line'>        $params = ['oauth_token' =&gt; $request_token['oauth_token']];
</span><span class='line'>        $path = self::AUTHORIZE_URL . '?' . http_build_query($params);
</span><span class='line'>
</span><span class='line'>        $this-&gt;redirect($path);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * アクセストークンの取得
</span><span class='line'>     * コールバック後にコールされる用
</span><span class='line'>     *
</span><span class='line'>     * @return array アクセストークンのセットされたハッシュ
</span><span class='line'>     */
</span><span class='line'>    public function getAccessToken()
</span><span class='line'>    {
</span><span class='line'>        $oauth = new \OAuth(self::CONSUMER_KEY, self::CONSUMER_SECRET);
</span><span class='line'>        // アクセストークンの取得
</span><span class='line'>        $oauth-&gt;setToken($_SESSION['request_token'], $_SESSION['request_token_secret']);
</span><span class='line'>        $access_token = $oauth-&gt;getAccessToken(self::ACCESS_TOKEN_URL, $_GET['oauth_verifier']);
</span><span class='line'>
</span><span class='line'>        if (!$access_token) {
</span><span class='line'>            throw new \Exception('アクセストークンの取得に失敗');
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        return $access_token;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * リダイレクト
</span><span class='line'>     *
</span><span class='line'>     * @param string $path   リダイレクト先URL
</span><span class='line'>     * @param int    $status ステータスコード
</span><span class='line'>     */
</span><span class='line'>    private function redirect($path, $status = 302)
</span><span class='line'>    {
</span><span class='line'>        header('Cache-Control: no-store, no-cache, must-revalidate');
</span><span class='line'>        header('Expires: Thu, 01 Jan 1970 00:00:00 GMT');
</span><span class='line'>        header("Location: {$path}", true, $status);
</span><span class='line'>        exit;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>callback.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require_once './OAuthSample.php';
</span><span class='line'>
</span><span class='line'>$oauth_sample = new OAuthSample();
</span><span class='line'>try {
</span><span class='line'>    // アクセストークンの取得
</span><span class='line'>    $access_token = $oauth_sample-&gt;getAccessToken();
</span><span class='line'>    var_dump($access_token);
</span><span class='line'>} catch (\Exception $e) {
</span><span class='line'>    // エラー処理
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>承認</h2>

<p>作成した<code>login.php</code>へアクセスすると（ログインしていない場合はログイン画面が表示されログイン後に）承認のページが表示される。</p>

<p><img src="http://kayakuguri.github.io/images/2016/06/wp_oauth03.jpg" alt="" /></p>

<p><code>Authorize</code>をクリックすると、許可されて、承認コードが表示される。
(ここでコードが表示されるのではなく、コールバックURLへリダイレクトが行われるのが通常のフローだと思う）</p>

<p><img src="http://kayakuguri.github.io/images/2016/06/wp_oauth04.jpg" alt="" /></p>

<blockquote><p>Your verification token is j0lHiEOe07gOtUOkEA6J1q00</p></blockquote>

<h2>アクセストークンの取得</h2>

<p>コールバックが自動で行われないので、作成した<code>callback.php</code>へ直接アクセスしてやる。</p>

<blockquote><p><a href="http://wprest.local/callback.php?oauth_verifier=j0lHiEOe07gOtUOkEA6J1q00">http://wprest.local/callback.php?oauth_verifier=j0lHiEOe07gOtUOkEA6J1q00</a></p></blockquote>

<p>こうすることで、アクセストークンを取得できた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>array(2) {
</span><span class='line'>  ["oauth_token"]=&gt;
</span><span class='line'>  string(24) "UTriXsugNS1c0ddCc1UBuMPj"
</span><span class='line'>  ["oauth_token_secret"]=&gt;
</span><span class='line'>  string(48) "6GAHfovkjdSPm2LZbtf06vV3ouBML8WaqiwPIfCGsGY0jVHA"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>実際に投稿などをPOSTするには、アプリケーションのカスタマーキーなども合わせて必要になる。
まとめると以下となる。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Client Key </td>
<td align="left"> RY5OpVfznCzY </td>
</tr>
<tr>
<td></td>
<td align="left"> Client Secret </td>
<td align="left"> 8HHflSELMukNNE6NxFNFeJDAsoHA7Dhjkb6wXFoxduMykAwo </td>
</tr>
<tr>
<td></td>
<td align="left"> OAuth Token </td>
<td align="left"> UTriXsugNS1c0ddCc1UBuMPj </td>
</tr>
<tr>
<td></td>
<td align="left"> OAuth Token Secret </td>
<td align="left"> 6GAHfovkjdSPm2LZbtf06vV3ouBML8WaqiwPIfCGsGY0jVHA </td>
</tr>
</tbody>
</table>


<h1>投稿</h1>

<p>さて、ここまででアクセストークンなど投稿に必要なものが一通り揃ったので、ようやく新規投稿の準備が整った。
投稿は簡単で、今までと同じようにトークンなどをセットして指定のエンドポイントへパラメータを投げてやるだけでおｙい。<br/>
エンドポイントは、新規投稿となるので、<code>http://wprest.local/wp-json/wp/v2/posts</code>となる。<br/>
これも、先ほどのTumblerへの投稿を書いた記事を参考にさせてもらった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>
</span><span class='line'>$consumer_key = 'RY5OpVfznCzY';
</span><span class='line'>$consumer_secret = '8HHflSELMukNNE6NxFNFeJDAsoHA7Dhjkb6wXFoxduMykAwo';
</span><span class='line'>$oauth_token = 'UTriXsugNS1c0ddCc1UBuMPj';
</span><span class='line'>$oauth_token_secret = '6GAHfovkjdSPm2LZbtf06vV3ouBML8WaqiwPIfCGsGY0jVHA';
</span><span class='line'>$response = '';
</span><span class='line'>
</span><span class='line'>try {
</span><span class='line'>    $oauth = new \OAuth($consumer_key, $consumer_secret);
</span><span class='line'>    $oauth-&gt;setToken($oauth_token, $oauth_token_secret);
</span><span class='line'>    //POST
</span><span class='line'>    $params = ['title' =&gt; 'From PHP'];
</span><span class='line'>    $oauth-&gt;fetch('http://wprest.local/wp-json/wp/v2/posts', $params, OAUTH_HTTP_METHOD_POST);
</span><span class='line'>    $response_info = $oauth-&gt;getLastResponseInfo();
</span><span class='line'>    if ($response_info['http_code'] == 201) {
</span><span class='line'>        $response = json_decode($oauth-&gt;getLastResponse(), true);
</span><span class='line'>    }else{
</span><span class='line'>        throw new \Exception('記事の投稿に失敗');
</span><span class='line'>    }
</span><span class='line'>} catch (\Exception $e) {
</span><span class='line'>    // エラー処理
</span><span class='line'>    var_dump($e);
</span><span class='line'>}
</span><span class='line'>// 結果をダンプ
</span><span class='line'>var_dump($response);</span></code></pre></td></tr></table></div></figure>


<p>これでこのファイルへアクセスすると、無事、新規投稿が行われる。
以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Composerを使ってPEARのライブラリをインストールする]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/06/23/pear-composer-install/"/>
    <updated>2016-06-23T12:43:47+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/06/23/pear-composer-install</id>
    <content type="html"><![CDATA[<p>PEARのライブラリをComposer経由でインストールする方法。メモ。</p>

<!-- more -->


<p><code>PEAR::Log</code>をインストールする方法を例にする。</p>

<h1>Pearのリポジトリから取得する</h1>

<p><code>composer.json</code>に以下のように記述し、取得する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "repositories": [
</span><span class='line'>    {
</span><span class='line'>        "type": "pear",
</span><span class='line'>        "url": "http://pear.php.net"
</span><span class='line'>    }
</span><span class='line'>  ],
</span><span class='line'>  "require": {
</span><span class='line'>    "pear-pear.php.net/PEAR": "*@stable",
</span><span class='line'>    "pear-pear.php.net/Log": "*@stable"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>このまま <code>$ composer install</code>すると以下の様なWarningが出てインストールエラーとなる。</p>

<blockquote><p>PEAR repository from <a href="http://pear.php.net">http://pear.php.net</a> could not be loaded. Your configuration does not allow connections to <a href="http://pear.php.net/channel.xml.">http://pear.php.net/channel.xml.</a> See <a href="https://getcomposer.org/doc/06-config.md#secure-http">https://getcomposer.org/doc/06-config.md#secure-http</a> for details.</p></blockquote>

<h1>セキュアじゃないURLからも取得</h1>

<p>これは、取得先のURLが<code>http</code>になっているため。
デフォルトではセキュアなURL、<code>https</code>からしか取得をしない設定になっているよう。</p>

<p>そのため、これを解除して、<code>http</code>からも取得出来るようにしてやる。</p>

<p><a href="https://getcomposer.org/doc/06-config.md#secure-http">https://getcomposer.org/doc/06-config.md#secure-http</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"config": {
</span><span class='line'>  "secure-http": false
</span><span class='line'>},</span></code></pre></td></tr></table></div></figure>


<h1>Composer.json</h1>

<p>というわけで全文は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "config": {
</span><span class='line'>    "secure-http": false
</span><span class='line'>  },
</span><span class='line'>  "repositories": [
</span><span class='line'>    {
</span><span class='line'>        "type": "pear",
</span><span class='line'>        "url": "http://pear.php.net"
</span><span class='line'>    }
</span><span class='line'>  ],
</span><span class='line'>  "require": {
</span><span class='line'>    "pear-pear.php.net/PEAR": "*@stable",
</span><span class='line'>    "pear-pear.php.net/Log": "*@stable"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これで無事、インストール出来た。
使用の際はComposerのライブラリと同じく、<code>vendor/autoload.php</code>を読み込んで使う。</p>

<h1>参考</h1>

<ul>
<li><a href="https://www.softel.co.jp/blogs/tech/archives/4057">【php】PEARをインストールする（Composerで）   at softelメモ</a></li>
<li><a href="http://qiita.com/dozo/items/d892cc964bb28d7a95fc">composer:repositoriesでPEARパッケージをインストール &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel HomesteadのPostgreSQLにPosticoから接続する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/06/09/homestead-postgres-via-homestead/"/>
    <updated>2016-06-09T14:56:23+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/06/09/homestead-postgres-via-homestead</id>
    <content type="html"><![CDATA[<p>まとまって情報がなかったのでメモ。</p>

<!-- more -->


<h1>SSH</h1>

<p>ssh接続する際のユーザー名・パスワードは、デフォルトでは、<code>vagrant/vagrant</code>のよう。
ユーザー名はホスト名とは別で、vagrantを立ち上げた状態で以下のコマンドで確認出来た。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh-config
</span><span class='line'>Host default
</span><span class='line'>  HostName 127.0.0.1
</span><span class='line'>  User vagrant
</span><span class='line'>  Port 2222
</span><span class='line'>  UserKnownHostsFile /dev/null
</span><span class='line'>  StrictHostKeyChecking no
</span><span class='line'>  PasswordAuthentication no
</span><span class='line'>  IdentityFile /Users/USER_NAME/Vagrant/app_folder/.vagrant/machines/default/virtualbox/private_key
</span><span class='line'>  IdentitiesOnly yes
</span><span class='line'>  LogLevel FATAL
</span><span class='line'>  ForwardAgent yes</span></code></pre></td></tr></table></div></figure>


<p>この中の、<code>User vagrant</code>という部分。</p>

<p>SSH Hostは、<code>Homestead.yaml</code>で指定したip。
デフォルトは、<code>192.168.10.10</code>だと思う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ip: "192.168.10.10"</span></code></pre></td></tr></table></div></figure>


<h1>Postgres</h1>

<p>Postgresはデフォルトでは以下の設定になっている。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">ホスト名 </td>
<td align="left"> localhost </td>
</tr>
<tr>
<td></td>
<td align="left"> DB名 </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> ユーザー名 </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> パスワード </td>
<td align="left"> secret </td>
</tr>
</tbody>
</table>


<h1>Postico</h1>

<p>Posticoから接続する際には、Optionsから、<code>Connect via SSH</code>を選択してSSH接続設定をしておく。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Nickname </td>
<td align="left"> (なんでも) </td>
</tr>
<tr>
<td></td>
<td align="left"> Host </td>
<td align="left"> localhost (デフォルト) </td>
</tr>
<tr>
<td></td>
<td align="left"> Port </td>
<td align="left"> 5432 (デフォルト) </td>
</tr>
<tr>
<td></td>
<td align="left"> User </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> Password </td>
<td align="left"> secret </td>
</tr>
<tr>
<td></td>
<td align="left"> Database </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> SSH Host </td>
<td align="left"> 192.168.10.10 </td>
</tr>
<tr>
<td></td>
<td align="left"> Port </td>
<td align="left"> 22 (デフォルト) </td>
</tr>
<tr>
<td></td>
<td align="left"> User </td>
<td align="left"> vagrant </td>
</tr>
<tr>
<td></td>
<td align="left"> Password </td>
<td align="left"> vagrant </td>
</tr>
<tr>
<td></td>
<td align="left"> Private Key </td>
<td align="left"> なし </td>
</tr>
</tbody>
</table>


<p><img src="http://kayakuguri.github.io/images/2016/06/postico_homestead.jpg" alt="" /></p>

<p>これで接続出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="https://laravel.com/docs/5.1/homestead">Laravel Homestead</a></li>
<li><a href="http://qiita.com/megane42/items/1d8ae7444d8c1b10bbd7">Vagrant で作った VM にやってはいけない2つのこと &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[StroyBoardのNavigationBarのタイトルを変更する方法あれこれ]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/06/03/navigation-title-change/"/>
    <updated>2016-06-03T12:05:14+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/06/03/navigation-title-change</id>
    <content type="html"><![CDATA[<p>ナビゲーションバー上のタイトルの変更方法をメモ。</p>

<!-- more -->


<h1>前提</h1>

<p>作りの前提としては以下。</p>

<ul>
<li>Xcode7.3</li>
<li>Swift2.2</li>
<li>StoryBoard上でViewを配置し、メニューから<code>Navigation Controller</code>を配置</li>
<li>ページ間は、セグエ、で接続</li>
</ul>


<h1>次ページがある場合</h1>

<p>次ページがある場合は、ナビゲーションバーの部分をダブルクリックして変更すればそれが反映される。</p>

<p><img src="http://kayakuguri.github.io/images/2016/06/change_ttl01.jpg" alt="" /></p>

<h1>最後のページの場合</h1>

<p>次ページがなく、そのページが遷移先の行き止まりの場合は、そのViewのタイトルをプロパティから設定することで変更が可能。</p>

<p><img src="http://kayakuguri.github.io/images/2016/06/change_ttl02.jpg" alt="" /></p>

<h1>コードから変更</h1>

<p>コードからViewのタイトルを変更すれば動的にも変更可能。
これは遷移先あるなしには関係なし。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.title = "hoge"</span></code></pre></td></tr></table></div></figure>


<p>このタイトルの設定を、<code>viewWillAppear</code>に入れておけばページを表示するたびにタイトルを変更することが可能。</p>

<h1>参考</h1>

<ul>
<li><a href="http://grandbig.github.io/blog/2015/05/10/storyboard-navigationbar/">StoryboardでNavigationBarを表示する &ndash; Takahiro Octopress Blog</a></li>
<li><a href="http://blog.77jp.net/iphone%E9%96%8B%E7%99%BA-uiviewcontroller-%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB-viewdidload-viewwillappear-viewdidappear-viewwilldisappear-viewdiddisappear-ios-%E9%80%86">【iOS】UIViewController ライフサイクル viewDidLoad viewWillAppear viewDidAppear viewWillDisappear viewDidDisappear | iOS &amp; Android &amp; Linux Labs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[swift]alamofireとswiftyjsonを使ってAPIからデータを取得する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/05/26/alamofire-swiftyjson/"/>
    <updated>2016-05-26T18:39:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/05/26/alamofire-swiftyjson</id>
    <content type="html"><![CDATA[<p><a href="http://kayakuguri.github.io/blog/2016/05/23/swift-sf-restapi/">一つ前の投稿</a>でSalesforceへ接続出来たが、HTTP通信の部分とJSONへのパース部分はライブラリを使うのがデファクトスタンダードになりつつある、という情報を仕入れたので試してみる。</p>

<!-- more -->


<h1>インストール</h1>

<p>インストールするライブラリは以下の２つ。</p>

<ul>
<li>Alamofire</li>
<li>SwiftyJSON</li>
</ul>


<p><code>Alamofire-SwiftyJSON</code>というライブラリも同時に使用している紹介記事が多かったのだが、インストールしてみると以下の様な警告が出た。</p>

<blockquote><p>Alamofire-SwiftyJSON has been deprecated in favor of AlamofireSwiftyJSON</p></blockquote>

<p>気になって調べてみると、以下の様なページが。</p>

<ul>
<li><a href="https://github.com/pdutourgeerling/Alamofire-SwiftyJSON-Podspec">pdutourgeerling/Alamofire-SwiftyJSON-Podspec: Updated Podspec for Alamofire-SwiftyJSON</a></li>
</ul>


<p>機械翻訳にかけてみると、どうやらAlamofire-SwiftyJSONはAlamofireの古いバージョンである、1.3を使うようになっており、1.3はSwift2に対応していいない。なので、Alamofireの新しいバージョンをインストールするためには直接Githubのリポジトリを指定してやる必要がある、とのことのよう。</p>

<p>今回は特に使わなくても大丈夫だったのでインストールはしないでおいた。</p>

<p><code>Podfile</code>には以下を追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod 'Alamofire'
</span><span class='line'>pod 'SwiftyJSON'</span></code></pre></td></tr></table></div></figure>


<p><code>$ pod update</code>でインストールした。</p>

<h1>利用</h1>

<p>前回のアクセストークン取得の際のコードは以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let URL = NSURL(string: SF_LOGIN_URL + "/services/oauth2/token")
</span><span class='line'>let req = NSMutableURLRequest(URL: URL!)
</span><span class='line'>req.HTTPMethod = "POST"
</span><span class='line'>let paramString = "grant_type=password&client_id=" + SF_CLIENT_ID + "&client_secret=" + SF_CLIENT_SECRET + "&username=" + SF_USERNAME + "&password=" + SF_PASSWORD
</span><span class='line'>req.HTTPBody = paramString.dataUsingEncoding(NSUTF8StringEncoding)
</span><span class='line'>
</span><span class='line'>let configuration = NSURLSessionConfiguration.defaultSessionConfiguration()
</span><span class='line'>let session = NSURLSession(configuration: configuration, delegate: nil, delegateQueue: NSOperationQueue.mainQueue())
</span><span class='line'>
</span><span class='line'>let task = session.dataTaskWithRequest(req, completionHandler: {
</span><span class='line'>    (let data, let response, let error) -&gt; Void in
</span><span class='line'>    do{
</span><span class='line'>        let json = try NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments) as! NSDictionary
</span><span class='line'>        print(json)
</span><span class='line'>    }catch{
</span><span class='line'>        print("error")
</span><span class='line'>    }
</span><span class='line'>})
</span><span class='line'>task.resume()</span></code></pre></td></tr></table></div></figure>


<h2>import</h2>

<p>ライブラリを読み込むために、ファイルの冒頭に<code>import</code>を追加しておくこと。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import Alamofire
</span><span class='line'>import SwiftyJSON</span></code></pre></td></tr></table></div></figure>


<h2>HTTP通信</h2>

<p>通信は、<code>responseJSON</code>を使う。<br/>
少し前にAlamofireの仕様変更があったらしく、エラーハンドリングの方法が変わったよう。</p>

<ul>
<li>参考 &ndash; <a href="http://ja.stackoverflow.com/questions/16844/alamofire-3-0%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6json%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95">Alamofire 3.0を使用してJSONデータを取得する方法</a></li>
</ul>


<p>通信部分と結果だけ記述するとこんな感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Alamofire.request(.POST, URL!, parameters: parameters)
</span><span class='line'>    .responseJSON { response in
</span><span class='line'>          print(response.result)
</span><span class='line'>          //SUCCESS or FAILURE
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>エラーハンドリング用に分岐させるとこうなる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Alamofire.request(.POST, URL!, parameters: parameters)
</span><span class='line'>    .responseJSON { response in
</span><span class='line'>        switch response.result {
</span><span class='line'>        case .Success(let value):
</span><span class='line'>            print("value: \(value)")
</span><span class='line'>        case .Failure(let error):
</span><span class='line'>            print(error)
</span><span class='line'>        }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>返ってくるエラーは<code>ErrorType</code>の型になっており、前回の記事と同じ取扱で大丈夫だった。</p>

<h2>JSONへパース</h2>

<p>取得した値をJSONへパースするには、以下だけでいける。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let json = JSON(data)</span></code></pre></td></tr></table></div></figure>


<p>また、文字列への変換もプロパティで用意されている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let str:String = json["token"].string</span></code></pre></td></tr></table></div></figure>


<p>実に簡単。</p>

<h1>完成</h1>

<p>アクセストークンを取得する部分だけ書き換えたものコードは以下のようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let URL = SF_LOGIN_URL + "/services/oauth2/token"
</span><span class='line'>let parameters = [
</span><span class='line'>    "grant_type":"password",
</span><span class='line'>    "client_id":SF_CLIENT_ID,
</span><span class='line'>    "client_secret":SF_CLIENT_SECRET,
</span><span class='line'>    "username":SF_USERNAME,
</span><span class='line'>    "password":SF_PASSWORD
</span><span class='line'>]
</span><span class='line'>
</span><span class='line'>Alamofire.request(.POST, URL, parameters: parameters)
</span><span class='line'>    .responseJSON { response in
</span><span class='line'>        switch response.result {
</span><span class='line'>        case .Success(let value):
</span><span class='line'>            let json = JSON(value)
</span><span class='line'>            print(json)            
</span><span class='line'>            
</span><span class='line'>            //let access_token = json["access_token"].string
</span><span class='line'>            //let instance_url = json["instance_url"].string
</span><span class='line'>            //let token_type = json["token_type"].string
</span><span class='line'>            
</span><span class='line'>        case .Failure(let error):
</span><span class='line'>          print("error")
</span><span class='line'>        }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>ヘッダ</h2>

<p>ちなみにヘッダの指定は以下のようにしてアクセストークンを送れた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let headers = [
</span><span class='line'>    "Authorization": "\(self.token_type) \(self.access_token)"
</span><span class='line'>]
</span><span class='line'>Alamofire.request(.POST, URL, parameters: parameters, headers: headers)
</span><span class='line'>  .responseJSON { response in
</span><span class='line'>      (略)</span></code></pre></td></tr></table></div></figure>


<h1>まとめ</h1>

<p>コードはそこまで劇的に減るわけではないが、すっきりした。<br/>
なによりパラメータの指定や、JSONの取り扱いがかなり見やすく簡単になったと思う。<br/>
特に理由がなければライブラリを使えば良い気がする。</p>

<h1>参考</h1>

<ul>
<li><a href="http://cocoadocs.org/docsets/Alamofire/3.4.0/">Alamofire Reference</a></li>
<li><a href="http://qiita.com/yutat93/items/1b6dfe34fa8537cf3329">AlamofireとSwiftyJSONでAPIを叩くチュートリアル &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swiftからsalesforceへOAuth認証してRestAPIへ接続する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/05/23/swift-sf-restapi/"/>
    <updated>2016-05-23T20:18:58+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/05/23/swift-sf-restapi</id>
    <content type="html"><![CDATA[<p>iOSアプリからSalesforceとRestAPIで通信するためにOAuth認証してみた。</p>

<!-- more -->


<h1>認証方法の種類</h1>

<p>Salesforceへ接続するためにはいくつか方法があるが、</p>

<ul>
<li><a href="https://help.salesforce.com/apex/HTViewHelpDoc?id=remoteaccess_oauth_jwt_flow.htm&amp;language=ja">OAuth 2.0 JWT べアラートークンフロー</a></li>
<li><a href="https://help.salesforce.com/apex/HTViewHelpDoc?id=remoteaccess_oauth_SAML_bearer_flow.htm&amp;language=ja">OAuth 2.0 SAML ベアラーアサーションフロー</a></li>
<li><a href="https://help.salesforce.com/apex/HTViewHelpDoc?id=remoteaccess_oauth_web_server_flow.htm&amp;language=ja">OAuth 2.0 Web サーバ認証フロー</a></li>
<li><a href="https://help.salesforce.com/apex/HTViewHelpDoc?id=remoteaccess_oauth_username_password_flow.htm&amp;language=ja">OAuth 2.0 ユーザ名パスワードフロー</a></li>
</ul>


<p>今回はPHPでも利用したことがある、ユーザー名パスワードフロー、を利用してみる。
たぶん、パスワードの保持などが必要など、セキュリティとしては一番低いものっぽいので、JWTなどで認証した方がいいのかもしれない。</p>

<p>SwiftのライブラリとしてCocoapodsで提供されている認証用ライブラリがあるが、このライブラリではWebサーバ認証フローが使われており、不特定多数との接続には向いていない。
(Webサーバ認証フローは、Salesforceのアカウントを取得している前提となる。Facebookログイン、のようなイメージ）</p>

<h1>準備</h1>

<p>Salesforce側へ接続するために必要になる情報は以下。
接続アプリケーションは事前に作成しておく。</p>

<ul>
<li>ログインID</li>
<li>ログインパスワード</li>
<li>セキュリティトークン(IPアドレスを指定している場合は必要なし)</li>
<li>コンシューマ鍵 (クライアントID)</li>
<li>コンシューマの秘密 (クライアントシークレット)</li>
</ul>


<h1>環境変数</h1>

<p>開発中はSandboxへ、リリース時には本番環境へ、と接続先を切り替えたいので、環境変数へ上記の内容を保存する。</p>

<ul>
<li>参考: <a href="http://shibuya-3percent.hatenablog.com/entry/2016/01/18/024948">Swiftでの環境変数を使ってDebug/Releaseで定数を使い分ける</a></li>
</ul>


<p>まず、Build Settingsに値を追加する。</p>

<p><img src="http://kayakuguri.github.io/images/2016/05/sf-swift01.jpg" alt="" /></p>

<p>プロジェクトから、<code>TARGETS</code>ファイルを選択。
<code>Build Setting</code>を選んで、プラスマークをクリックして、<code>Add User-Defined Setting</code>を選ぶ。</p>

<p>左側には設定したい項目名をKeyとして登録。
自動的に、<code>Debug</code>と<code>Release</code>が表示されるので、それぞれの値を入れる。</p>

<p><img src="http://kayakuguri.github.io/images/2016/05/sf-swift02.jpg" alt="" /></p>

<p>次に、<code>Info.plist</code>に定義したキーを呼び出せるように設定する。
<code>Infomation Property List</code>の<code>+</code>をクリックして追加する。</p>

<p><code>Key</code>は実際にコードから呼び出す際に使用する名前となる。
<code>Type</code>は<code>String</code>とする。
<code>Value</code>は定義した値を呼び出すため、<code>${KEY}</code>というように記述する。</p>

<p><img src="http://kayakuguri.github.io/images/2016/05/sf-swift03.jpg" alt="" /></p>

<p>ここまでで設定は完了。
以下のコードで呼び出せる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let SF_LOGIN_URL = NSBundle.mainBundle().objectForInfoDictionaryKey("SF_LOGIN_URL") as! String</span></code></pre></td></tr></table></div></figure>


<h1>OAuth認証</h1>

<p>準備した値を使用してアクセストークンを要求する。
アクセストークンの要求は、指定のエンドポイントへPOSTで値を送信する事で行う。</p>

<p>エンドポイント</p>

<ul>
<li>本番 : <a href="https://login.salesforce.com/services/oauth2/token">https://login.salesforce.com/services/oauth2/token</a></li>
<li>sandbox : <a href="https://test.salesforce.com/services/oauth2/token">https://test.salesforce.com/services/oauth2/token</a></li>
</ul>


<p>送信する値</p>

<ul>
<li>grant_type — <code>password</code></li>
<li>client_id — 接続アプリケーション定義のコンシューマ鍵</li>
<li>client_secret — 接続アプリケーション定義のコンシューマの秘密</li>
<li>username — ユーザ名</li>
<li>password — パスワード (+セキュリティトークン)</li>
</ul>


<p>パスワードはIPを指定していない場合は、パスワードの後ろにセキュリティトークンを繋げてやる必要がある。</p>

<h2>POST送信</h2>

<p>追記：HTTP通信とJSONのパースについてはライブラリを使ったバージョンの方がいいかも。<br/>
<a href="http://kayakuguri.github.io/blog/2016/05/26/alamofire-swiftyjson/">[swift]alamofireとswiftyjsonを使ってAPIからデータを取得する</a></p>

<p>POST送信は、<code>NSURLConnection</code>がディスコンになったので、<code>NSURLSession</code>を使用する必要があるとのこと。
非同期での通信が基本になったよう。</p>

<ul>
<li>参考: <a href="http://qiita.com/fmtonakai/items/30d8b9bcc3dd2b8d228b">Sayonara NSURLConnection &ndash; Qiita</a></li>
</ul>


<p>送信し、返ってきた値をJSONに変換して受け取る。
以下を参考にしてコードを記述した。</p>

<ul>
<li><a href="http://swiftdeveloperblog.com/send-http-post-request-example-using-swift-and-php/">Send HTTP POST Request example using Swift and PHP &ndash; Swift Developer Blog</a></li>
<li><a href="http://ohtacky.blogspot.jp/2015/09/swiftios9json.html">&#12304;swift&#12305;iOS9におけるjsonの取得 sendAsynchronousRequestが使えない&#12290; ~ ネットショップの立ち上げから運営までの作業ログ</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let SF_LOGIN_URL = NSBundle.mainBundle().objectForInfoDictionaryKey("SF_LOGIN_URL") as! String
</span><span class='line'>let SF_CLIENT_ID = NSBundle.mainBundle().objectForInfoDictionaryKey("SF_CLIENT_ID") as! String
</span><span class='line'>let SF_CLIENT_SECRET = NSBundle.mainBundle().objectForInfoDictionaryKey("SF_CLIENT_SECRET") as! String
</span><span class='line'>let SF_USERNAME = NSBundle.mainBundle().objectForInfoDictionaryKey("SF_USERNAME") as! String
</span><span class='line'>let SF_PASSWORD = NSBundle.mainBundle().objectForInfoDictionaryKey("SF_PASSWORD") as! String
</span><span class='line'>
</span><span class='line'>let URL = NSURL(string: SF_LOGIN_URL + "/services/oauth2/token")
</span><span class='line'>let req = NSMutableURLRequest(URL: URL!)
</span><span class='line'>req.HTTPMethod = "POST"
</span><span class='line'>let paramString = "grant_type=password&client_id=" + SF_CLIENT_ID + "&client_secret=" + SF_CLIENT_SECRET + "&username=" + SF_USERNAME + "&password=" + SF_PASSWORD
</span><span class='line'>req.HTTPBody = paramString.dataUsingEncoding(NSUTF8StringEncoding)
</span><span class='line'>
</span><span class='line'>let configuration = NSURLSessionConfiguration.defaultSessionConfiguration()
</span><span class='line'>let session = NSURLSession(configuration: configuration, delegate: nil, delegateQueue: NSOperationQueue.mainQueue())
</span><span class='line'>
</span><span class='line'>let task = session.dataTaskWithRequest(req, completionHandler: {
</span><span class='line'>    (let data, let response, let error) -&gt; Void in
</span><span class='line'>    do{
</span><span class='line'>        let json = try NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments) as! NSDictionary
</span><span class='line'>        print(json)
</span><span class='line'>    }catch{
</span><span class='line'>        print("error")
</span><span class='line'>    }
</span><span class='line'>})
</span><span class='line'>task.resume()</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<ul>
<li><a href="http://qiita.com/sushichop/items/ac4ae99b905ce523c2fe">SwiftでHTTPリクエストする &ndash; Qiita</a></li>
<li><a href="http://www.kaleidosblog.com/nsurlsession-in-swift-get-and-post-data">NSURLSession in Swift: get and post data</a></li>
</ul>


<h2>ATS</h2>

<p>しかしこのまま送信するとエラーが返ってくる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2016-05-23 18:56:48.600 XXX-DEV[30024:28386036] CFNetwork SSLHandshake failed (-9824)
</span><span class='line'>2016-05-23 18:56:48.600 XXX-DEV[30024:28386036] NSURLSession/NSURLConnection HTTP load failed (kCFStreamErrorDomainSSL, -9824)</span></code></pre></td></tr></table></div></figure>


<p>これは、iOS9から導入されたATSという機能によるものらしい。
外部への送信はHTTPSかつセキュアな証明書を使用していないと接続しない、というセキュリティ強化のための機能のよう。
本来はサーバー側で証明書を変更するなどの対応が好ましいが、salesforce側の証明書を変更するのは不可能なため、例外ドメインを指定して通信を許可してやる。</p>

<p>通信したいドメインがATSに対応しているかどうかは、<code>nscurl</code>コマンドを使用すると調べる事ができるよう。</p>

<ul>
<li>参考: <a href="http://blog.kishikawakatsumi.com/entry/2015/10/19/121257">接続先がATS (App Transport Security)に対応しているか、または例外の設定をnscurlコマンドで簡単に調べる &ndash; 24/7 twenty-four seven</a></li>
</ul>


<p>このコマンドではATSの設定を変えながらしらみつぶしにチェックしてくれるコマンド、となっている。
なので、この結果をみながら接続がパスする設定を確認する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nscurl --ats-diagnostics https://test.salesforce.com/</span></code></pre></td></tr></table></div></figure>


<p><code>test.salesforce.com</code>の場合は、
<code>TLS</code>のバージョンを変更しただけでは通信が失敗しているが、
<code>Perfect Forward Secrecy</code>を<code>false</code>とした場合にはパスしていることがわかる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>================================================================================
</span><span class='line'>
</span><span class='line'>Configuring TLS exceptions for test.salesforce.com
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>TLSv1.2
</span><span class='line'>2016-05-23 19:06:14.743 nscurl[30351:28433837] CFNetwork SSLHandshake failed (-9824)
</span><span class='line'>2016-05-23 19:06:14.744 nscurl[30351:28433837] NSURLSession/NSURLConnection HTTP load failed (kCFStreamErrorDomainSSL, -9824)
</span><span class='line'>Result : FAIL
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>TLSv1.1
</span><span class='line'>2016-05-23 19:06:14.814 nscurl[30351:28433837] CFNetwork SSLHandshake failed (-9824)
</span><span class='line'>2016-05-23 19:06:14.815 nscurl[30351:28433837] NSURLSession/NSURLConnection HTTP load failed (kCFStreamErrorDomainSSL, -9824)
</span><span class='line'>Result : FAIL
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>TLSv1.0
</span><span class='line'>2016-05-23 19:06:14.883 nscurl[30351:28433837] CFNetwork SSLHandshake failed (-9824)
</span><span class='line'>2016-05-23 19:06:14.883 nscurl[30351:28433837] NSURLSession/NSURLConnection HTTP load failed (kCFStreamErrorDomainSSL, -9824)
</span><span class='line'>Result : FAIL
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>================================================================================
</span><span class='line'>
</span><span class='line'>Configuring PFS exceptions for test.salesforce.com
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>Disabling Perfect Forward Secrecy
</span><span class='line'>Result : PASS
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>コマンドで<code>--verbose</code>オプションをつけると設定の内容を具体的に表示させる事ができる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nscurl --ats-diagnostics --verbose https://test.salesforce.com/</span></code></pre></td></tr></table></div></figure>


<p>以下は失敗。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    NSExceptionDomains =     {
</span><span class='line'>        "test.salesforce.com" =         {
</span><span class='line'>            NSExceptionMinimumTLSVersion = "TLSv1.2";
</span><span class='line'>        };
</span><span class='line'>    };
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以下は成功。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    NSExceptionDomains =     {
</span><span class='line'>        "test.salesforce.com" =         {
</span><span class='line'>            NSExceptionRequiresForwardSecrecy = false;
</span><span class='line'>        };
</span><span class='line'>    };
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>この結果から<code>info.plist</code>に設定を追加していく。</p>

<ul>
<li><p>参考: <a href="http://shirakiya.hatenablog.com/entry/2015/10/03/234816">iOS9から導入されたATSとは？そして回避する方法は？ &ndash; Be a Engineer.</a></p></li>
<li><p>NSAppTransportSecurity (Dictionary)</p>

<ul>
<li>NSExceptionDomains (Dictionary)

<ul>
<li>test.salesforce.com (Dictionary)

<ul>
<li>NSExceptionRequiresForwardSecrecy (Boolean) &ndash; <code>NO</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><img src="http://kayakuguri.github.io/images/2016/05/sf-swift04.jpg" alt="" /></p>

<p>これでようやく通信に成功し、アクセストークンを取得することが出来た。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "access_token":"(ACCESS_TOKEN)",
</span><span class='line'>  "instance_url":"https://cs5.salesforce.com",
</span><span class='line'>  "id":"https://test.salesforce.com/id/xxx/xxx",
</span><span class='line'>  "token_type":"Bearer",
</span><span class='line'>  "issued_at":"1463998466487",
</span><span class='line'>  "signature":"(SIGNATURE)"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>APIへ接続</h1>

<p>今回は自作したApex Rest APIに接続してみる。
apexの作り方は割愛。エンドポイントはapex内で以下のように指定しているとする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@RestResource(urlMapping='/user/login')</span></code></pre></td></tr></table></div></figure>


<p>APIへの接続には、アクセストークンを取得した際に一緒に取得した<code>instance_url</code>へ接続する。
このURLは環境によって変わることがある。
しかしこのドメインもATSによって接続が失敗してしまう。
今回は簡易だが、ATSの機能自体をオフにすることで対応する。</p>

<p><code>NSAppTransportSecurity</code>の下に、<code>NSAllowsArbitraryLoads</code>を追加し、<code>true</code>にしてやることで機能自体をオフにすることができる。</p>

<p><img src="http://kayakuguri.github.io/images/2016/05/sf-swift05.jpg" alt="" /></p>

<p>APIへ接続する際には、ヘッダにさきほど取得したアクセストークンを入れてやる。</p>

<ul>
<li>参考: <a href="http://stackoverflow.com/questions/28526743/how-to-use-alamofire-with-custom-headers-for-post-request">swift &ndash; How to use Alamofire with custom headers for POST request &ndash; Stack Overflow</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>req.addValue("Bearer \(self.access_token)", forHTTPHeaderField: "Authorization")</span></code></pre></td></tr></table></div></figure>


<p>アクセストークンを取得した後からのコードは以下となる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//OAuth認証後に取得する
</span><span class='line'>var access_token = json["access_token"] as? String
</span><span class='line'>var instance_url = json["instance_url"] as? String
</span><span class='line'>var token_type = json["token_type"] as? String
</span><span class='line'>
</span><span class='line'>//APIへ接続
</span><span class='line'>let URL = NSURL(string: self.instance_url + "/services/apexrest/user/login")
</span><span class='line'>let req = NSMutableURLRequest(URL: URL!)
</span><span class='line'>
</span><span class='line'>req.addValue("\(self.token_type) \(self.access_token)", forHTTPHeaderField: "Authorization") //ヘッダ
</span><span class='line'>
</span><span class='line'>let user_email = "xxx@example.com"
</span><span class='line'>let user_pass = "xxx"
</span><span class='line'>
</span><span class='line'>req.HTTPMethod = "POST"
</span><span class='line'>let paramString = "email=\(user_email)&passwd=\(user_pass)"
</span><span class='line'>req.HTTPBody = paramString.dataUsingEncoding(NSUTF8StringEncoding)
</span><span class='line'>let configuration = NSURLSessionConfiguration.defaultSessionConfiguration()
</span><span class='line'>let session = NSURLSession(configuration: configuration, delegate: nil, delegateQueue: NSOperationQueue.mainQueue())
</span><span class='line'>
</span><span class='line'>let task = session.dataTaskWithRequest(req, completionHandler: {
</span><span class='line'>    (let data, let response, let error) -&gt; Void in
</span><span class='line'>    do{
</span><span class='line'>        let json = try NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments) as! NSDictionary
</span><span class='line'>        print(json)
</span><span class='line'>    }catch{
</span><span class='line'>        print("error")
</span><span class='line'>    }
</span><span class='line'>})
</span><span class='line'>task.resume()</span></code></pre></td></tr></table></div></figure>


<p>これで指定のエンドポイントへ接続が出来た。</p>

<h1>まとめ</h1>

<p>とりあえず、アクセストークンを取得してRest APIへ接続、まで一通り出来た。
後は必要であれば、認証方式をJWTにしたり出来るといいかもしれない。</p>

<p>もしSFへの接続でいいライブラリなどがあれば教えて下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[swift]リターンキーが押されたら次の入力欄へ移動する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/05/17/swift-textfield-change-forcus/"/>
    <updated>2016-05-17T15:48:08+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/05/17/swift-textfield-change-forcus</id>
    <content type="html"><![CDATA[<p>入力欄が複数ある画面で、リターンキーをタップして次の入力欄へ移動する処理を調べたのでメモ。</p>

<!-- more -->


<h1>入力欄の設定</h1>

<p>以下のように、入力欄が２つあり、メールアドレスの入力欄でリターンキーをタップすると、次のパスワード入力欄にフォーカスが移動するようにする。</p>

<p><img src="http://kayakuguri.github.io/images/2016/05/login01.jpg" alt="" /></p>

<p>設定したい入力欄(ログインIDの入力欄)を選択し、inspecotrから<code>tag</code>を設定する。</p>

<p><img src="http://kayakuguri.github.io/images/2016/05/login02.jpg" alt="" /></p>

<p>フォーカスさせる順番に、1,2,3と設定する。</p>

<h1>Delgate</h1>

<p>リターンキーが押されたイベントを検知するために、クラスに<code>UITextFieldDelegate</code>を追加する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ViewController: UIViewController, UITextFieldDelegate {
</span><span class='line'>  ...</span></code></pre></td></tr></table></div></figure>


<p>ロード時のコード内で判定するテキストフィールドの<code>delegate</code>を自身に設定する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>override func viewDidLoad() {
</span><span class='line'>  super.viewDidLoad()
</span><span class='line'>  login_txt.delegate = self
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ここまで設定すると、リターンキーが押された時に、<code>textFieldShouldReturn</code>の関数が自動で実行されるようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func textFieldShouldReturn(textField: UITextField) -&gt; Bool {
</span><span class='line'>  //リターンキーが押された時に実行される
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>フォーカスの移動</h1>

<p>これは以下の記事を使わせてもらった。<br/>
<a href="http://qiita.com/mm36/items/848e93d590ef5c41e43f">ios アプリのテキスト入力で次のテキストボックスにサクッと移動する方法</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func textFieldShouldReturn(textField: UITextField) -&gt; Bool {
</span><span class='line'>    // 今フォーカスが当たっているテキストボックスからフォーカスを外す
</span><span class='line'>    textField.resignFirstResponder()
</span><span class='line'>    // 次のTag番号を持っているテキストボックスがあれば、フォーカスする
</span><span class='line'>    let nextTag = textField.tag + 1
</span><span class='line'>    if let nextTextField = self.view.viewWithTag(nextTag) {
</span><span class='line'>        nextTextField.becomeFirstResponder()
</span><span class='line'>    }
</span><span class='line'>    return true
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>完成</h1>

<p>これでリターンキーが押された時に指定した入力欄にフォーカスが移動出来るように設定出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="http://anthrgrnwrld.hatenablog.com/entry/2015/06/26/204031">テキストフィールドにテキスト入力後、Returnでキーボードを隠す方法 [Swift1.2][UITextField] &ndash; MILLEN BOX</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Heroku] アドオンを共有機能を使って管理する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/05/16/heroku-addon-attach/"/>
    <updated>2016-05-16T16:51:59+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/05/16/heroku-addon-attach</id>
    <content type="html"><![CDATA[<p>herokuでPostgreSQLやRedisなどを他のアプリでも共有したい場合、環境変数をコピペして使っていたのだけれど、
それだとちょっとマズイ場合もあるらしく、attacheing add-on を使ってみた。</p>

<!-- more -->


<h1>共有する理由</h1>

<p>環境変数にパスワードなどをコピペするよりも確実、という理由もあるが、一番大きなところとしては、
メンテナンスなどでアドオンのDB名やユーザー名などの情報が変わってしまうことがあるよう。<br/>
その時に、直接入れているアプリの方では自動的に環境変数も書き換わるため支障はないが、
コピペで設定している他のアプリが合った場合には参照が出来なくなってしまう。
その時に共有設定していれば、設定しているアプリの環境変数も自動で書き換わるためメンテナンスの手間がなくなる。
なによりも突然アクセスできなくなる事がなくなる、というわけ。</p>

<p>コピペなんていう不確定な方法よりもherokuの公式機能に乗った方が確実に安全。</p>

<h1>アドオンの追加</h1>

<p>例えば今回は、<code>dog</code>、というアプリにheroku postgresを入れてみる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons:create heroku-postgresql:hobby-dev -a dog
</span><span class='line'>Creating postgresql-opaque-93277... done, (free)
</span><span class='line'>Adding postgresql-opaque-93277 to dog... done
</span><span class='line'>Setting DATABASE_URL and restarting dog... done, v10
</span><span class='line'>Database has been created and is available</span></code></pre></td></tr></table></div></figure>


<p><a href="https://devcenter.heroku.com/articles/heroku-postgresql">https://devcenter.heroku.com/articles/heroku-postgresql</a></p>

<p>DBの設定内容は、環境変数の<code>DATABASE_URL</code>に保存されている。</p>

<h1>アドオンの共有</h1>

<p>作ったアドオンを別のアプリでも利用してみる。<br/>
その際にアドオンの名前が必要になる。<br/>
上記作成時に名前が返ってきており、<code>postgresql-opaque-93277</code>が今回の名前になる。<br/>
後から確認するには、アプリの一覧を見ればわかる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons -a dog
</span><span class='line'>
</span><span class='line'>Add-on                                       Plan       Price
</span><span class='line'>───────────────────────────────────────────  ─────────  ─────
</span><span class='line'>heroku-postgresql (postgresql-opaque-93277)  hobby-dev  free
</span><span class='line'> └─ as DATABASE</span></code></pre></td></tr></table></div></figure>


<p>名前がわかったところで、この名前を利用して他のアプリと共有させる。<br/>
例えば今回は<code>cat</code> というアプリに共有させたとする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons:attach -a cat postgresql-opaque-93277
</span><span class='line'>Attaching postgresql-opaque-93277 to cat... done
</span><span class='line'>Setting DATABASE vars and restarting cat... done, v17</span></code></pre></td></tr></table></div></figure>


<p>ここでアドオンの名前を指定する。<br/>
アドオン一覧で確認すると<code>dog</code>アプリから共有されていることがわかる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons -a cat
</span><span class='line'>
</span><span class='line'>Add-on                                       Plan       Price
</span><span class='line'>───────────────────────────────────────────  ─────────  ────────────────────
</span><span class='line'>heroku-postgresql (postgresql-opaque-93277)  hobby-dev  (billed to dog app)
</span><span class='line'> ├─ as DATABASE
</span><span class='line'> └─ as DATABASE on dog app</span></code></pre></td></tr></table></div></figure>


<p>DBの設定内容は、環境変数の<code>DATABASE_URL</code>に保存されている。</p>

<p>heorkuのダッシュボード上では以下のように共有されている事がわかるようになっている。</p>

<p><img src="http://kayakuguri.github.io/images/2016/05/attach01.jpg" alt="" /></p>

<h1>アドオンの削除</h1>

<h2>共有の解除</h2>

<p>共有の解除は、<code>detach</code>を使う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons:detach -a cat postgresql-opaque-93277
</span><span class='line'>Removing DATABASE attachment to postgresql-opaque-93277 from cat... done
</span><span class='line'>Unsetting DATABASE vars and restarting cat... done, v18</span></code></pre></td></tr></table></div></figure>


<h2>削除</h2>

<p>削除には、<code>destroy</code>を使う。<br/>
共有をしている場合は、先に共有設定を全て解除しておく必要がある。<br/>
途中、確認のためにアプリ名の入力を求められるので入力する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons:destroy postgresql-opaque-93277
</span><span class='line'>
</span><span class='line'> !    WARNING: Destructive Action
</span><span class='line'> !    This command will affect the app: dog
</span><span class='line'> !    To proceed, type "dog" or re-run this command with --confirm dog
</span><span class='line'>
</span><span class='line'>&gt; dog
</span><span class='line'>Destroying postgresql-opaque-93277 on dog... done, (free)
</span><span class='line'>Removing vars for DATABASE from dog and restarting... done, v13</span></code></pre></td></tr></table></div></figure>


<h1>アドオン名の指定</h1>

<p>ここまでで一通りのアドオンの設定方法は終わりだけど、それぞれのアドオンを追加、共有する時に名前を変更できる。</p>

<h2>追加時</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons:create heroku-postgresql:hobby-dev -a dog --name dog-database --as DOG_DATABASE
</span><span class='line'>Creating dog-database... done, (free)
</span><span class='line'>Adding dog-database to dog... done
</span><span class='line'>Setting DOG_DATABASE_URL and restarting dog... done, v16
</span><span class='line'>Database has been created and is available</span></code></pre></td></tr></table></div></figure>


<p><code>--name</code>は、アドオンの名前を指定している。<br/>
<code>--as</code>は環境変数に追加する名前を指定している。<br/>
<code>as</code>で指定する名前は、アルファベットの大文字で、使用できる記号も決まっている。(<code>-</code>ハイフンは使用できない)</p>

<p>この場合、DBの設定内容は、環境変数の<code>DOG_DATABASE_URL</code>に保存されている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku config -a dog
</span><span class='line'>=== dog Config Vars
</span><span class='line'>DOG_DATABASE_URL: postgres://yo....</span></code></pre></td></tr></table></div></figure>


<h2>共有時</h2>

<p>共有時にはアドオンの名前は設定出来ない(元を参照するので)が、<code>as</code>の指定は可能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons:attach -a cat dog-database --as CAT_DATABASE
</span><span class='line'>Attaching dog-database as CAT_DATABASE to cat... done
</span><span class='line'>Setting CAT_DATABASE vars and restarting cat... done, v19</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<ul>
<li><a href="https://devcenter.heroku.com/articles/heroku-postgresql">Heroku Postgres | Heroku Dev Center</a></li>
<li><a href="https://devcenter.heroku.com/articles/managing-add-ons">Managing Add-ons | Heroku Dev Center</a></li>
<li><a href="http://blog.flect.co.jp/labo/2015/01/addon-a943.html">Addon のアプリ間共有 &ndash; フレクトのHeroku Lab</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce] エラーが出てもエラーレコード以外は更新させる]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/05/13/database-upsert/"/>
    <updated>2016-05-13T17:26:24+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/05/13/database-upsert</id>
    <content type="html"><![CDATA[<p>salesforceでインサート・アップデートする場合、ガバナ制限の関係から都度DMLを発行せずにある程度まとめてやる事が多い。<br/>
その際に、一件でもエラーが出てしまうと他もまきこまれてロールバックされてしまうので、エラー以外は更新させる方法。</p>

<!-- more -->


<h1>通常の方法</h1>

<p>通常の方法、というか、簡易な方法としては、以下のようにインサートする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;Lead&gt; lists = new List&lt;Lead&gt;();
</span><span class='line'>for(xx){
</span><span class='line'>  //Leadを作ってaddする処理
</span><span class='line'>}
</span><span class='line'>insert lists;</span></code></pre></td></tr></table></div></figure>


<p><code>for</code>文の中で<code>insert</code>せずに、リストにまとめておいて外で一回だけ<code>insert</code>する。<br/>
これで、DMLは一回だけ発行したことになるので、節約が可能。<br/>
ループの中ではSOQL、DMLはしない。これがapexの鉄則。</p>

<p>しかしこれだと例えば全部で200件インサートする予定があって、そのうち150件目に不備がありエラーが出た場合、
そこで処理がストップし、それまでにインサートした149件もすべてロールバックされインサート自体がなかったことになる。
要件によってはこの方がいい場合もあるが、エラーが出たレコード以外は全てインサートしたい場合もある。</p>

<h1>Database Class</h1>

<p>そんな時は、<code>Database</code>クラスを使う。<br/>
使い方は、<code>Database.insert()</code>とするだけ。</p>

<p>このメソッドの第1引数に、インサートするオブジェクトのリストを、
第２引数に、エラー時の挙動を入れる。</p>

<ul>
<li>trueの場合はエラー時には全てロールバック(上記の単純な<code>insert</code>と同じ)(デフォルト)</li>
<li>falseの場合はエラーレコード以外はインサートする</li>
</ul>


<p>上記の例を書き換えると、以下のようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;Lead&gt; lists = new List&lt;Lead&gt;();
</span><span class='line'>for(xx){
</span><span class='line'>  //Leadを作ってaddする処理
</span><span class='line'>}
</span><span class='line'>Database.insert(lists, false);</span></code></pre></td></tr></table></div></figure>


<p>これでエラーのレコード以外はインサートさせる事が出来た。<br/>
<code>updata</code>、<code>upsert</code>、<code>delete</code> についても同じ。</p>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.200.0.apexcode.meta/apexcode/apex_methods_system_database.htm">Database クラス</a></p>

<h1>Upsert</h1>

<p>upsertも上記と方法は同じだが、upsertでは外部IDの指定が可能になるが、その方法が少し簡易バージョンとは違った。</p>

<p>例えば、<code>Lead</code>オブジェクトの、カスタム項目、<code>UserID__c</code>を外部IDとして指定する場合。<br/>
簡易バージョンの場合は以下のようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;Lead&gt; lists = new List&lt;Lead&gt;();
</span><span class='line'>//処理中略
</span><span class='line'>upsert lists UserID__c;</span></code></pre></td></tr></table></div></figure>


<p>上記、<code>Database</code>を使ったパターンだと、ドキュメントには以下のように書かれている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>upsert(recordToUpsert, externalIdField, allOrNone)</span></code></pre></td></tr></table></div></figure>


<p>この第二引数の<code>externalIdField</code>が外部IDの指定箇所になるが、型は、<code>Schema.SObjectField</code>となっていて、
そのまま <code>Database.upsert(lists, UserID__c, false)</code>とやるとエラーが出る。</p>

<p>なので以下のようにして指定したい項目の<code>Schema.SObjectField</code>を取得して指定してやる必要がある。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;Lead&gt; lists = new List&lt;Lead&gt;();
</span><span class='line'>//処理中略
</span><span class='line'>Schema.DescribeFieldResult F = Lead. UserID__c.getDescribe();
</span><span class='line'>Schema.sObjectField T = F.getSObjectField();
</span><span class='line'>Database.upsert(lists, T, false);</span></code></pre></td></tr></table></div></figure>


<p>これで外部IDを指定したアップサートが可能となる。</p>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.200.0.apexcode.meta/apexcode/apex_class_Schema_SObjectField.htm">SObjectField クラス</a></p>

<h1>エラーハンドリング</h1>

<p>さて、DMLでエラーが発生した場合、その内容を取得するには、<code>try..catch</code>で例外を拾っていた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try{
</span><span class='line'>  insert lists;
</span><span class='line'>}catch(DmlException e){
</span><span class='line'>  System.debug(e.getMessage());
</span><span class='line'>  System.debug(e.getStackTraceString());
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.200.0.apexcode.meta/apexcode/apex_classes_exception_methods.htm">Exception クラスおよび組み込み例外</a></p>

<p>しかし、<code>Database</code>を使ってinsertなどをした場合は別の方法で取得する。<br/>
というか、エラーだけでなく、結果を一件ずつ取得することが出来るため、それらからエラー分を取得する、という形になる。</p>

<p><code>SaveResult</code>クラスを使用する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;Database.SaveResult&gt; res_lists = Database.insert(lists, false);</span></code></pre></td></tr></table></div></figure>


<p>取得した結果から、成功、失敗を取得し、内容を取得したりする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;Database.SaveResult&gt; res_lists = Database.insert(lists, false);
</span><span class='line'>for (Database.SaveResult res : res_lists) {
</span><span class='line'>  if(res.isSuccess()){
</span><span class='line'>      //成功時
</span><span class='line'>  }else{
</span><span class='line'>      //失敗時
</span><span class='line'>      for(Database.Error err : res.getErrors()) {
</span><span class='line'>          System.debug(err.getStatusCode());
</span><span class='line'>          System.debug(err.getMessage());
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>例えば出力内容は以下のような感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEBUG|REQUIRED_FIELD_MISSING
</span><span class='line'>値を入力してください: [LastName]</span></code></pre></td></tr></table></div></figure>


<p>この <code>SaveResult</code> は、インサート時の結果を取得するためのクラスで、
インサート、アップサート、アップサート、デリート、それぞれのクラスが別々に用意されている。</p>

<ul>
<li>insert &ndash; SaveResult</li>
<li>update &ndash; UndeleteResult</li>
<li>upsert &ndash; UpsertResult</li>
<li>delete &ndash; DeleteResult</li>
</ul>


<p>詳しくは、Apex 開発者ガイド、を参照。<br/>
(直接のリンクがなぜか貼れなかった）</p>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.apexcode.meta/apexcode/apex_namespace_Database.htm">Apex開発者ガイド &ndash; リファレンス &ndash; Database名前空間</a></p>

<h1>まとめ</h1>

<p>以上で一通り想定していた動作をさせることができた。<br/>
エラー時に他をロールバックするかどうかとかは、結構忘れがちになるけれど、結構難しい問題。<br/>
仕様策定時にきちんと考慮していきたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ターミナル録画サービスAsciinemaを使ってみてプロンプトも変更した]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/04/26/asciinema/"/>
    <updated>2016-04-26T13:36:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/04/26/asciinema</id>
    <content type="html"><![CDATA[<p>簡単にターミナルでの操作を録画してアップロード、シェア出来るサービス、Asciinema、を使ってみた。</p>

<p><a href="https://asciinema.org/">https://asciinema.org/</a></p>

<!-- more -->


<h1>インストール</h1>

<p>様々用意されている。<br/>
<a href="https://asciinema.org/docs/installation">https://asciinema.org/docs/installation</a></p>

<p>今回はHomebrewで入れてみた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install asciinema</span></code></pre></td></tr></table></div></figure>


<p>バージョン確認。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ asciinema --version
</span><span class='line'>asciinema 1.1.1</span></code></pre></td></tr></table></div></figure>


<h1>ユーザー登録</h1>

<p>ユーザー登録用のURLを表示させる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ asciinema auth
</span><span class='line'>Open the following URL in a browser to register your API token and assign any recorded asciicasts to your profile:
</span><span class='line'>https://asciinema.org/connect/1b327ae7-6fdd-4784-81a0-xxxxxxxx</span></code></pre></td></tr></table></div></figure>


<p>フォームからメールアドレスを入力して送信。</p>

<p><img src="http://kayakuguri.github.io/images/2016/04/asciinema01.jpg" alt="" /></p>

<p>メールに登録用フォームのURLが送信されるので、15分以内にリンクをクリックします。 <br/>
クリック後、任意のユーザー名を入力し、クリック。<br/>
（ここで一度何故かエラーのようなページに飛ばされたが、無事登録ができていた。)</p>

<p><img src="http://kayakuguri.github.io/images/2016/04/asciinema02.jpg" alt="" /></p>

<h1>録画開始</h1>

<p>以下のコマンドで録画が開始される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ asciinema rec
</span><span class='line'>~ Current terminal size is 150x50.
</span><span class='line'>~ It may be too big to be properly replayed on smaller screens.
</span><span class='line'>~ You can now resize it. Press &lt;Enter&gt; to start recording.
</span><span class='line'>
</span><span class='line'>~ Asciicast recording started.
</span><span class='line'>~ Hit Ctrl-D or type "exit" to finish.</span></code></pre></td></tr></table></div></figure>


<p>書いてある通り、<code>Ctrl-D</code>で録画終了。<br/>
そのままアップロードするかどうかを聞かれる。<br/>
アップロードを選択すると、完了後にURLが表示される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~ Asciicast recording finished.
</span><span class='line'>~ Press &lt;Enter&gt; to upload, &lt;Ctrl-C&gt; to cancel.
</span><span class='line'>
</span><span class='line'>https://asciinema.org/a/2l7dg8ov3eftv7v9xxxxxxx</span></code></pre></td></tr></table></div></figure>


<p>アップロードされたURLにアクセスすると、操作したものがそのまま録画されていることがわかる。<br/>
注意としては、録画が始まってからは操作していない時間も含めてそのまま録画されるため、考えたり調べたりしてしまうと動画上は何もしてない時間になってしまう。<br/>
予めメモっておくなどが必要そう。</p>

<h1>紐付け</h1>

<p>アップロードした動画を確認してみると、先程登録したユーザー名ではなく、ターミナルに表示されているコンピューター名のユーザーでアップロードされたことになっている。<br/>
登録したユーザーと紐付いてない状態。<br/>
このままでは動画を削除したり編集したりが出来ないため、紐付ける。</p>

<p>紐付けは簡単で、ターミナルで先程と同じく、<code>$ asciinema auth</code>とコマンドするだけ。<br/>
同じようにURLが表示されるのでそのURLにアクセスすると、すでにログインしている状態なので、アップした動画がさきほど登録したユーザーの動画として認識される。</p>

<p>これで動画を編集出来るようになった。</p>

<p><img src="http://kayakuguri.github.io/images/2016/04/asciinema03.jpg" alt="" /></p>

<p>ちなみにアップロードしたままだと動画はプライベートの設定になっている。<br/>
プライベート、といってもURLを知っていれば誰でも見られる状態。<br/>
これをpublicにすれば、公式のサイトから最近アップされたもの、として表示されたりするようになるみたい。</p>

<h1>ターミナルの名前表記(プロンプト)</h1>

<p>ターミナルの内容がそのまま録画されるため、<code>$</code>の左側もそのまま表示されます。<br/>
(この部分を、プロンプト、というよう）<br/>
自分の設定ではここに本名が表示されてしまっているのでこのままではちょっとイヤ。<br/>
(usernameの部分に名前が出てる）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>username@username ~/Desktop $</span></code></pre></td></tr></table></div></figure>


<p>（デフォルトでは、<code>hostname:Desktop</code>になっているそう）</p>

<p>これをカスタマイズする。</p>

<p>ターミナルはzshを入れているので、出力内容は、<code>PROMPT</code>で設定されているよう。<br/>
出力してみると以下のような内容。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo $PROMPT
</span><span class='line'>%F{135}%n%f@%F{166}%m%f %F{118}%~%f $git_info[prompt]$</span></code></pre></td></tr></table></div></figure>


<p><code>%F{135}</code>といのは色の指定。<code>%F</code>と<code>%f</code>で囲まれた範囲に色をつける。<br/>
<code>%n</code>はユーザー名。<br/>
<code>%m</code>はコンピューターのホスト名。<br/>
<code>%~</code>は、カレントディレクトリ。<br/>
<code>$git_info[prompt]</code>は、現在のGitリポジトリ表記。<br/>
(gitリポジトリ表記は色々バリエーションがある？）</p>

<p>この辺は凝りだすと沼っぽいので、とりあえず名前だけいらないと思ったので、カレントディレクトリとGitのリポジトリ名だけでにしておいた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PROMPT='%F{8}%~%f $git_info[prompt] $ '</span></code></pre></td></tr></table></div></figure>


<p>これをデフォルトの設定にするために、<code>~/.zshrc</code>に追記しておく。<br/>
これでユーザー名などが表記されなくなった。</p>

<h2>Rubyのバージョン表記</h2>

<p>いつのまにやらrubyのバージョンが右側に表示されるようになっている。<br/>
これはこれで便利なんだろうけれど、残念ながらruby使いではないので、これを非表示にしてみる。</p>

<p>右側に表示させるには、<code>RPROMPT</code>という環境変数を使うよう。<br/>
結局どこでこの設定をしているかがわからなかったので、同じく、<code>~/.zshrc</code>に設定し、上書きして対処した。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RPROMPT=</span></code></pre></td></tr></table></div></figure>


<h1>サンプル</h1>

<p>最後に、Asciinemaのバージョンを表記しただけの内容を録画してアップロードしてみたものを埋め込んでおく。</p>

<p><a href="https://asciinema.org/a/43594"><img src="https://asciinema.org/a/43594.png" alt="asciicast" /></a></p>

<h1>参考</h1>

<ul>
<li><a href="http://qiita.com/ka_/items/f1ebdde1e7fdf41c80a3">Asciinema の紹介 &ndash; Qiita</a></li>
<li><a href="http://rcmdnk.github.io/blog/2013/12/11/blog-asciinema/">ターミナル操作を録画して公開する: Asciinema</a></li>
<li><a href="https://asciinema.org/docs/usage">Usage &ndash; asciinema</a></li>
</ul>


<h2>プロンプト関連</h2>

<ul>
<li><a href="http://qiita.com/Cside/items/8f618409ac8cc368f6d1">いまのPROMPT &ndash; Qiita</a></li>
<li><a href="https://wiki.archlinuxjp.org/index.php/Zsh?rdfrom=https%3A%2F%2Fwiki.archlinux.org%2Findex.php%3Ftitle%3DZsh_%28%25E6%2597%25A5%25E6%259C%25AC%25E8%25AA%259E%29%26redirect%3Dno#.E3.83.97.E3.83.AD.E3.83.B3.E3.83.97.E3.83.88.E3.81.AE.E3.82.AB.E3.82.B9.E3.82.BF.E3.83.9E.E3.82.A4.E3.82.BA">Zsh &ndash; ArchWiki</a></li>
<li><a href="http://tegetegekibaru.blogspot.jp/2012/08/zsh_2.html">てげてげきばる日記: zsh 設定 &ndash; プロンプト &ndash;</a></li>
<li><a href="http://baqamore.hatenablog.com/entry/2014/05/26/221233">zsh のプロンプト &ndash; ばかもりだし</a></li>
<li><a href="http://qiita.com/iwazer/items/5f57a80b8aac0f4e9839">Bashのプロンプトを変える(OSX) &ndash; Qiita</a></li>
<li><a href="http://www.yoheim.net/blog.php?q=20140309">[Mac] ターミナルの$前の出力内容をカスタマイズする- YoheiM .NET</a></li>
<li><a href="http://news.mynavi.jp/column/zsh/002/">漢のzsh (2) 取りあえず、プロンプトを整えておく。カッコつけたいからね | マイナビニュース</a></li>
<li><a href="http://makimoto.hatenablog.com/entry/show-rbenv-version-on-zsh-prompt">zsh で rbenv の Ruby のバージョンをプロンプトに表示させる &ndash; Stats of the Rivers</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
