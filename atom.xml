<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2018-04-04T14:37:54+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel+mySQLでマイグレーションのやり直しのデータリストア]]></title>
    <link href="http://kayakuguri.github.io/blog/2018/03/26/laravel-mysql-refresh/"/>
    <updated>2018-03-26T12:29:45+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2018/03/26/laravel-mysql-refresh</id>
    <content type="html"><![CDATA[<p>Laravelで開発をしていて、途中でDBの項目が増えたりしてマイグレーションのやり直しが発生することがちょくちょくある。<br/>
直接<code>alter</code>してもいいけど、ちゃんとマイグレーションファイルも動くか確認したい。<br/>
けど、今あるデータは削除したくない、って場合。</p>

<!-- more -->


<p>パッケージでよしなにバックアップ取ったりしてくれるものはあるようだけど、postgreSQLのものが多かったり、そのためにパッケージインストールするのも、、と思ってしまう。</p>

<ul>
<li><a href="https://www.lancard.com/blog/2017/11/27/laravel-5-5-%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9dump%E3%82%92%E3%81%8A%E6%89%8B%E8%BB%BD%E3%81%AB%E3%81%A8%E3%81%A3%E3%81%9F%E3%82%8A%E3%82%82%E3%81%A9%E3%81%97%E3%81%9F/">Laravel 5.5 でデータベースdumpをお手軽にとったりもどしたり &laquo;  LANCARD.LAB｜ランカードコムのスタッフブログ</a></li>
</ul>


<p>それならコマンドで叩いたほうが早い、というわけで、備忘録。</p>

<h1>エクスポート</h1>

<p>テーブル情報を抜いたデータ情報のみをエクスポート。<br/>
（作業はvagrant内に入った状態で）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysqldump -uroot -proot -t DATABASE_NAME &gt; all.dump</span></code></pre></td></tr></table></div></figure>


<p>エクスポートされたデータから、<code>migrations</code>テーブルのインサート情報の部分だけは削除しておくこと。<br/>
(laravelのmigrateで自動作成されるので、インポート時にID重複のエラーが出る）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--
</span><span class='line'>-- Dumping data for table `migrations`
</span><span class='line'>--
</span><span class='line'>
</span><span class='line'>(このセクションを削除)</span></code></pre></td></tr></table></div></figure>


<h1>再マイグレーション</h1>

<p>Laravelに用意されている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php artisan migrate:fresh</span></code></pre></td></tr></table></div></figure>


<h1>インポート</h1>

<p>あとはインポートするだけ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mysql -uroot -proot DATABASE_NAME &lt; all.dump</span></code></pre></td></tr></table></div></figure>


<p>完了。</p>

<h1>参考</h1>

<ul>
<li><a href="https://qiita.com/rato303/items/2e614f23e5feee150ffc">MySQLのデータインポート・エクスポート &ndash; Qiita</a></li>
<li><a href="https://www.dbonline.jp/mysql/insert/index10.html">データの削除(DELETE文) &ndash; データの追加と削除 &ndash; MySQLの使い方</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apexでクッキーを扱う]]></title>
    <link href="http://kayakuguri.github.io/blog/2018/03/22/apex-cookie/"/>
    <updated>2018-03-22T16:34:03+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2018/03/22/apex-cookie</id>
    <content type="html"><![CDATA[<p>Apexでクッキーは、今まで扱ったことがなく、ちょっと詰まったのでメモ。</p>

<!-- more -->


<h1>セット</h1>

<p>クッキーをセットするには以下のようにする。<br/>
ページに対してクッキーを作成する形のよう？</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Cookie hoge_val = new Cookie('hoge', 'hogehoge', null, -1, true);
</span><span class='line'>ApexPages.currentPage().setCookies(new Cookie[]{hoge});</span></code></pre></td></tr></table></div></figure>


<p><code>Cookie</code>クラスのコンストラクタは以下の通り。</p>

<ol>
<li>クッキーの名前</li>
<li>セットしたい値</li>
<li>パス</li>
<li>保存期間(秒)</li>
<li>セキュアか</li>
</ol>


<p>第４引数の秒は、<code>-1</code>を指定するとブラウザうを閉じるまで、<br/>
<code>0</code>を指定すると削除、となる。</p>

<h1>削除</h1>

<p>よって、削除したい場合は以下のように同じ値で0病にセットするとよい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Cookie hoge_val = new Cookie('hoge', null, null, 0, true); 
</span><span class='line'>ApexPages.currentPage().setCookies(new Cookie[]{hoge_val});</span></code></pre></td></tr></table></div></figure>


<h1>取得</h1>

<p>取得は以下のように。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Cookie get_hoge = ApexPages.currentPage().getCookies().get('hoge');
</span><span class='line'>System.debug(get_hoge.getValue());</span></code></pre></td></tr></table></div></figure>


<p><code>getValue()</code>でセットされている値を取得することになる。</p>

<h1>参考</h1>

<ul>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.212.0.apexcode.meta/apexcode/apex_classes_sites_cookie.htm">Cookieクラス | Salesforce developers</a></li>
<li><a href="https://dev.classmethod.jp/cloud/salesforce_mfcloud_oauth/">【Salesforce】(Tips) APEXからCookieを使う／プライベートメソッドのテスト／OAuth2処理まわりの話題 ｜ Developers.IO</a></li>
<li><a href="https://salesforce.stackexchange.com/questions/4894/how-is-a-cookie-constructed">apex &ndash; How is a Cookie constructed? &ndash; Salesforce Stack Exchange</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache2.4でアクセス制御の方法を調べた]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/12/14/htaccess-reuire-setting/"/>
    <updated>2017-12-14T12:59:05+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/12/14/htaccess-reuire-setting</id>
    <content type="html"><![CDATA[<p>Apache2.4からアクセス制御の方法が、<code>RequireAny</code>とかを使った方法になっているよう。<br/>
ちょっとよくわからなかったので調べて整理してみたメモ。</p>

<!-- more -->


<h1>基本</h1>

<p>基本は、以下の３つのタグで囲って条件付けしていく。</p>

<ul>
<li><code>RequireAny</code> &ndash; どれか一つでも当てはまれば許可</li>
<li><code>RequireAll</code> &ndash; 全てに当てはまれば許可</li>
<li><code>RequireNone</code> &ndash; どれか一つでも当てはまれば拒否</li>
</ul>


<p>デフォルト、何も囲わなければ <code>RequireAny</code> となるよう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;RequireAny&gt;
</span><span class='line'>  Require {判定する内容}
</span><span class='line'>  Require {判定する内容}
</span><span class='line'>&lt;/RequireAny&gt;</span></code></pre></td></tr></table></div></figure>


<h1>判定文基本</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># xxのとき許可
</span><span class='line'>Require xx
</span><span class='line'>
</span><span class='line'># xxでないとき許可
</span><span class='line'>Require not xx
</span><span class='line'>
</span><span class='line'># 全て許可
</span><span class='line'>Require all granted
</span><span class='line'>
</span><span class='line'># 全て拒否
</span><span class='line'>Require all denied</span></code></pre></td></tr></table></div></figure>


<h1>env</h1>

<p><code>env</code>で変数的に値を設定出来る。<br/>
以下みたいな感じ。</p>

<blockquote><p>SetEnvIf {種類} {値} {変数名}</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># URI
</span><span class='line'>SetEnvIf Request_URI /hoge/ valid-url
</span><span class='line'>SetEnvIf Request_URI "^/hoge/*" valid-url  #正規表現
</span><span class='line'>
</span><span class='line'># IP
</span><span class='line'>SetEnvIf REMOTE_ADDR 192.168.33.1 valid-ip
</span><span class='line'>SetEnvIf X-Forwarded-For 000.00.000.000 valid-ip  #ロードバランサ使用時</span></code></pre></td></tr></table></div></figure>


<h2>URI表記の揺れ</h2>

<p>正規表現を使わない場合は正しくかかないと無視されてしまう部分があった。<br/>
例えば、<code>/api/</code>以下のディレクトリを許可したい場合。<br/>
<code>SetEnvIf Request_URI xxx valid-url</code><br/>
ここの、<code>xxx</code>に入るものを色々変えてアクセスしてみた。<br/>
(<code>api/test.php</code>に対してのアクセス結果)</p>

<ul>
<li>◯ : <code>/api/*</code></li>
<li>◯ : <code>/api/</code></li>
<li>◯ : <code>/</code></li>
<li>◯ : <code>/a</code></li>
<li>× : <code>/test/</code></li>
<li>◯ : <code>/test</code></li>
<li>◯ : <code>/t</code></li>
<li>× : <code>/t/</code></li>
<li>◯ : <code>"^/api/*"</code></li>
<li>◯ : <code>"^/api"</code></li>
<li>◯ : <code>"^/a"</code></li>
<li>× : <code>"^/test/"</code></li>
<li>× : <code>"^/t"</code></li>
</ul>


<p>正規表現を利用すると意図した通り動いているが、正規表現を利用しない場合には、スラッシュの後の文字列は無視されているような挙動をしている。<code>/api</code>でも<code>/test</code>でも<code>/</code>と同じ。注意が必要。</p>

<h1>ベーシック認証</h1>

<p>ベーシック認証の設定などは以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AuthType Basic
</span><span class='line'>AuthName "Password Required"
</span><span class='line'>AuthUserFile /var/www/.htpasswd</span></code></pre></td></tr></table></div></figure>


<p>で、認証されたユーザを許可、は以下を記述。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Require valid-user</span></code></pre></td></tr></table></div></figure>


<h1>組み合わせ</h1>

<p>で、これらを組み合わせて設定した制御をかけていく。<br/>
例えば…<br/>
ベーシック認証をかけるが、特定のIPは許可。さらに特定のディレクトリは常に許可する、とかの場合</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Basic認証
</span><span class='line'>AuthType Basic
</span><span class='line'>AuthName "Password Required"
</span><span class='line'>AuthUserFile /var/www/.htpasswd
</span><span class='line'>
</span><span class='line'># env
</span><span class='line'>SetEnvIf REMOTE_ADDR 192.168.33.1 valid-ip
</span><span class='line'>SetEnvIf Request_URI "^/hoge/*" valid-url
</span><span class='line'>
</span><span class='line'># 条件
</span><span class='line'>&lt;RequireAny&gt;
</span><span class='line'>  Require valid-user
</span><span class='line'>  Require env valid-ip
</span><span class='line'>  Require env valid-url
</span><span class='line'>&lt;/RequireAny&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>RequireAny</code>の条件なのでいずれかに合致すればアクセスが許可される。<br/>
URIの指定は正規表現を使っておいた方が確実。</p>

<h1>Laravelの場合</h1>

<p>Laravelで同じようにURIを利用して制御したい場合は、制御対象のURIだけを許可してやるだけではダメだった。<br/>
理由はルーティングの仕組みにあって、Laravelの場合はアクセスされた際に一旦、<code>index.php</code>にリダイレクトさせてからLaravelを起動し、ルーティングをさせる仕組みになっている。<br/>
よって、<code>/index.php</code>を許可しておいてやらないと認証が通らなくなってしまう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SetEnvIf Request_URI "^/hoge/*" valid-url
</span><span class='line'>SetEnvIf Request_URI "^/index.php" laravel
</span><span class='line'>
</span><span class='line'>&lt;RequireAny&gt;
</span><span class='line'>  Require valid-user #ベーシック認証
</span><span class='line'>  Require env valid-url
</span><span class='line'>  Require env laravel
</span><span class='line'>&lt;/RequireAny&gt;</span></code></pre></td></tr></table></div></figure>


<p>ただしこの方法だと、<code>/index.php</code>への直接のアクセス(トップページ)は許可されてしまうので注意。<br/>
(とはいえ、読み込んでいる別ディレクトリのcssやjsや画像なんかは拒否される）<br/>
(<code>/</code>へのアクセスは拒否される。)</p>

<h1>参考</h1>

<ul>
<li><a href="http://www.nofuture.tv/diary/20130813.html">Apache 2.4のアクセス制御をもうちょっとマジメに見てみた &ndash; Days of Speed(2013-08-13)</a></li>
<li><a href="https://celeumu.com/articles/20171124001037">Apache2.4で一部のディレクトリのみBasic認証</a></li>
<li><a href="https://blog.e2info.co.jp/2016/09/04/aws_phpmyadmin_basic_ip_auth/">AWSに設置したphpMyAdminにBasic認証を設定/特定のIPアドレスによる制限 &ndash; ハマログ</a></li>
<li><a href="https://serverfault.com/questions/588096/apache-setenvif-failing-to-match-request-uri">Apache SetEnvIf failing to match Request_Uri</a></li>
<li><a href="http://3.1415.jp/kc47fh1k/">HTTPクライアントの接続元IPアドレスを知る</a></li>
</ul>


<p><code>SetEnvIf</code>で指定出来る要素は以下にドキュメントがあった。<br/>
<a href="https://httpd.apache.org/docs/2.4/ja/mod/mod_setenvif.html">mod_setenvif &ndash; Apache HTTP サーバ バージョン 2.4</a><br/>
<code>SetEnvIf ディレクティブ</code> のセクション</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LaravelのEloquentモデルでupdated_atがないテーブルを使う]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/12/13/eloquent-updated-at-null/"/>
    <updated>2017-12-13T11:37:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/12/13/eloquent-updated-at-null</id>
    <content type="html"><![CDATA[<p>Laravelのバージョンは5.5で確認。<br/>
Eloquentモデルは作成時に自動で<code>created_at</code>と<code>updated_at</code>を更新してくれる。<br/>
しかし、仕様の都合上、<code>updated_at</code>カラムがないテーブルを利用したかったのでその方法。</p>

<!-- more -->


<h1>定数でのカラム指定</h1>

<p>Eloquentモデル内で定数を使用することで明示的にカラム名を指定する事が可能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const CREATED_AT = 'date_created';
</span><span class='line'>const UPDATED_AT = 'date_modified';</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://www.larajapan.com/2016/11/26/laravel-5-3-%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%97%E3%81%AEdb%E9%A0%85%E7%9B%AE%E5%90%8D%E3%81%AE%E6%8C%87%E5%AE%9A/">Laravel 5.3 タイムスタンプのDB項目名の指定</a></li>
</ul>


<p>これを利用し、更新カラムはない事を指定してやればよい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const UPDATED_AT = null;</span></code></pre></td></tr></table></div></figure>


<p>これだけ。</p>

<h3>情報元</h3>

<ul>
<li><a href="https://www.neontsunami.com/posts/eloquent-model-without-updated_at-laravel-55">Eloquent model without updated_at (Laravel 5.5) &mdash; Neon Tsunami</a></li>
</ul>


<h2>無効化</h2>

<p>ちなみに、<code>created_at</code>、<code>updated_at</code>を自動で更新させたくない場合は以下のように指定してやればよいよう。<br/>
自動で更新しなくなるので、それらのカラムがないテーブルでもEloquentモデルを利用出来るようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public $timestamps = false;</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://laravel.hatenablog.com/entry/2013/10/19/004831">timestampを無効にする場合 &ndash; ふたりはララベル （Laravel PHP Framework）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HerokuでLaravel-Mixを利用する際の環境変数]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/12/13/laravel-mix-heroku-env/"/>
    <updated>2017-12-13T11:08:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/12/13/laravel-mix-heroku-env</id>
    <content type="html"><![CDATA[<p>HerokuでLaravel Mixを使っている際に、ビルドに失敗する時があり調べた結果、環境変数を追加するだけで対策出来たのでメモ。</p>

<!-- more -->


<h1>症状</h1>

<p>Herokuのビルドパックには <code>heroku/nodejs</code>と<code>heroku/php</code>を入れておき、順番はnode.jsが先。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku buildpacks -a app-name
</span><span class='line'>=== app-name Buildpack URLs
</span><span class='line'>1. heroku/nodejs
</span><span class='line'>2. heroku/php</span></code></pre></td></tr></table></div></figure>


<p>この状態でpushしてデプロイするも、npmのインストールなどは走るがLaravel Mixのコンパイルが走らない状態(たぶん）。<br/>
ビルドログを見ると以下のようなエラーが出ている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Additional dependencies must be installed. This will only take a moment.
</span><span class='line'>warning " &gt; browser-sync-webpack-plugin@1.2.0" has unmet peer dependency "webpack@^1 || ^2 || ^3".
</span><span class='line'>Finished. Please run Mix again.</span></code></pre></td></tr></table></div></figure>


<p>依存関係が解消出来てないとかなんとか？</p>

<h1>解決策</h1>

<p>ググると以下の情報。</p>

<p>環境変数に、<code>YARN_PRODUCTION</code>を<code>false</code>で追加してやるだけ。</p>

<ul>
<li><a href="https://www.neontsunami.com/posts/using-laravel-mix-on-heroku">Using Laravel Mix on Heroku &mdash; Neon Tsunami</a></li>
</ul>


<p>環境変数を追加してやることで、<code>devDependencies</code>から依存関係を取得するように指示してやる事が出来るよう。</p>

<blockquote><p>First, set <code>YARN_PRODUCTION</code> to false using the following command. This tells Heroku to install the devDependencies in your package.json, but leaves NODE_ENV as production.</p></blockquote>

<p>Google翻訳</p>

<blockquote><p>まず、次のコマンドを使用して<code>YARN_PRODUCTION</code>をfalseに設定します。これは、あなたのpackage.jsonにdevDependenciesをインストールするようにHerokuに指示しますが、NODE_ENVをプロダクションとして残します。</p></blockquote>

<p>記事の通り、上手く行ってなかった環境に環境変数を追加してやると無事、コンパイルされるようになった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel5.5でajaxでPOST通信する時のCSRFトークン]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/12/06/laravel-ajax-csrf/"/>
    <updated>2017-12-06T20:46:06+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/12/06/laravel-ajax-csrf</id>
    <content type="html"><![CDATA[<p>Laravel5.5にて、ajaxでPOST通信する際にCSRFトークンも送る方法のメモ。</p>

<!-- more -->


<h1>概要</h1>

<p>LaravelではデフォルトではPOST通信には全てCSRFトークンをつけてやる必要がある。<br/>
ajaxでの通信でも例外ではない。<br/>
なので、そのまま何も考えずにajaxを使うとそこで引っかかってしまう。</p>

<h1>方法</h1>

<p>方法としては(主に)2つ。</p>

<ul>
<li>送信するURLはCSRFトークンの対象外としてやる</li>
<li>ajax通信の際にもCSRFトークンを送る</li>
</ul>


<p>もちろん後者の方が安全。</p>

<h1>CSRFトークンの追加</h1>

<p>HTMLのmetaタグにCSRFトークンをおいてやり、それを取得して送る。<br/>
POST送信の<code>_token</code>パラメータに入れてやるだけでよい。</p>

<ul>
<li><a href="https://laracasts.com/discuss/channels/requests/laravel-5-cant-use-ajax-post-request">Laravel 5 can&#039;t use ajax post request</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;meta name="csrf-token" content="" /&gt;
</span><span class='line'>
</span><span class='line'>var CSRF_TOKEN = $('meta[name="csrf-token"]').attr('content');
</span><span class='line'>
</span><span class='line'>$.ajax({
</span><span class='line'>    url: '/home/upload/',
</span><span class='line'>    type: 'POST',
</span><span class='line'>    data: {_token: CSRF_TOKEN},
</span><span class='line'>    dataType: 'JSON',
</span><span class='line'>    success: function (data) {
</span><span class='line'>        console.log(data);
</span><span class='line'>    }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>公式のドキュメントにも方法は載っているが、これは、Axios HTTPライブラリを使った方法？のよう。<br/>
上記でないと上手く動作しなかったが…やり方が悪いのかもしれない。</p>

<ul>
<li><a href="https://readouble.com/laravel/5.5/ja/csrf.html#csrf-x-csrf-token">X-CSRF-TOKEN | Laravel 5.5 CSRF保護</a></li>
</ul>


<h1>トークン対象外</h1>

<p>一応、トークンの対象外とする方法も。</p>

<p><code>app/http/Middleware/VerifyCsrfToken.php</code>内にて指定してやる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>protected $except = [
</span><span class='line'>    'ajax/post/path/*',
</span><span class='line'>];</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://readouble.com/laravel/5.5/ja/csrf.html#csrf-excluding-uris">URIの除外 | Laravel5.5 CSRF通信</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apex Rest APIで任意のステータスコードを返す]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/11/27/apex-rest-response/"/>
    <updated>2017-11-27T14:49:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/11/27/apex-rest-response</id>
    <content type="html"><![CDATA[<p>カスタムでApex Rest APIを作成する際にレスポンスにステータスコードを反映させる方法。</p>

<!-- more -->


<h1>概要</h1>

<p>今までは、返却用するJSON用のクラスを作成し、そのクラスを返却していたのだが、<br/>
そもそも返却の方法としてはそれが正しくなかった（お作法に則っていなかった）よう。</p>

<p><a href="https://kayakuguri.github.io/blog/2015/03/27/apex-rest-tips/">[salesforce]Apex REST作成時のtips</a><br/>
この辺の記事内で返却しているやり方。</p>

<p>実際には、<code>return</code>で結果を返す必要はなく、<code>RestResponse</code>クラスに追加してやるだけでよかった。</p>

<ul>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.apexcode.meta/apexcode/apex_methods_system_restresponse.htm">RestResponse クラス</a></li>
</ul>


<h1>RestResponse</h1>

<h2>ステータスコード</h2>

<p>ステータスコードの指定は以下のようにする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RestResponse res = RestContext.response;
</span><span class='line'>res.statusCode = 400;</span></code></pre></td></tr></table></div></figure>


<h2>ヘッダ情報</h2>

<p>デフォルトの情報だと、<code>Content-Type</code>が<code>application/octetstream</code>になっているようなので、<code>application/json</code>に変更したい。<br/>
ヘッダ情報の追加・変更は以下のようにする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RestResponse res = RestContext.response;
</span><span class='line'>res.addHeader('Content-Type', 'application/json');</span></code></pre></td></tr></table></div></figure>


<h2>レスポンス内容</h2>

<p>レスポンスの内容をJSONで返す場合、作成した返却用クラスをJSONにパースし、<code>Blob</code>にキャストして追加してやる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ResultData result = new ResultData();
</span><span class='line'>
</span><span class='line'>RestResponse res = RestContext.response;
</span><span class='line'>res.responseBody = Blob.valueOf(JSON.serialize(result));</span></code></pre></td></tr></table></div></figure>


<h2>コード</h2>

<p>上記をまとめると以下のような形になる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@RestResource(urlMapping='/your/api')
</span><span class='line'>global with sharing class Your_Apex_Class  {
</span><span class='line'>
</span><span class='line'>  @HttpPost
</span><span class='line'>  global static void something_method() {
</span><span class='line'>    ResultData result = new ResultData();
</span><span class='line'>    result.success = false;
</span><span class='line'>    ResultError error = new ResultError();
</span><span class='line'>    result.error = error;
</span><span class='line'>  
</span><span class='line'>    RestResponse res = RestContext.response;
</span><span class='line'>    res.addHeader('Content-Type', 'application/json');
</span><span class='line'>    // (中略)
</span><span class='line'>  
</span><span class='line'>    if(/* エラーの場合 */){
</span><span class='line'>      error.message = 'エラーメッセージ';
</span><span class='line'>      res.statusCode = 400;
</span><span class='line'>      res.responseBody = Blob.valueOf(JSON.serialize(result));
</span><span class='line'>      return;
</span><span class='line'>    }
</span><span class='line'>  
</span><span class='line'>    // (中略)
</span><span class='line'>    result.success = true;
</span><span class='line'>    res.statusCode = 200;
</span><span class='line'>    res.responseBody = Blob.valueOf(JSON.serialize(result));
</span><span class='line'>    return;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  global class ResultData{
</span><span class='line'>    global Boolean success;
</span><span class='line'>    global ResultError error;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  global class ResultError{
</span><span class='line'>    global String message;
</span><span class='line'>  }
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<p>エラー発生時にはステータスコードが<code>400</code>で以下のようなJSONが返却される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "success": false,
</span><span class='line'>  "error": {
</span><span class='line'>      "message": "エラーメッセージ"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>テスト</h1>

<p>テストクラスを書く際に、送信結果を取得する場合には以下のようにする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@isTest static void your_something_test() {
</span><span class='line'>  String json_str = '{ "YOUR" : "JSON_DATA" }';
</span><span class='line'>
</span><span class='line'>  //あらかじめ宣言が必要
</span><span class='line'>  RestRequest req = new RestRequest();
</span><span class='line'>  req.requestBody = Blob.valueof(json_str);
</span><span class='line'>  RestContext.request = req;
</span><span class='line'>  RestResponse res = new RestResponse();
</span><span class='line'>  RestContext.response = res;
</span><span class='line'>  
</span><span class='line'>  Your_Apex_Class.something_method(); //実行
</span><span class='line'>  
</span><span class='line'>  System.assertEquals(res.statusCode, 400); //ステータスコード
</span><span class='line'>  //返却されたJSON文字列をMapにキャストする
</span><span class='line'>  Map&lt;String, Object&gt; requestBody = (Map&lt;String, Object&gt;)JSON.deserializeUntyped(res.responseBody.ToString());
</span><span class='line'>  Map&lt;String, Object&gt; errorBody = (Map&lt;String, Object&gt;)requestBody.get('error');
</span><span class='line'>  System.assertEquals(errorBody.get('message'), 'エラーメッセージ'); //エラーメッセージ
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<ul>
<li><a href="https://salesforce.stackexchange.com/questions/54010/apexrest-controlling-http-error-codes-on-exceptions">apexrest: controlling HTTP error codes on exceptions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSVのテキストからLaravelのSeeder用コードを作る]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/10/30/larave-csv-seeder/"/>
    <updated>2017-10-30T10:26:29+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/10/30/larave-csv-seeder</id>
    <content type="html"><![CDATA[<p>CSVのテキストをLaravelのseeder、というか、クエリビルダに変換したかったのでツールを作った。</p>

<!-- more -->


<p><a href="https://laravel-csv-seeder.herokuapp.com/">Laravel CSV Seeder</a></p>

<h1>使い方</h1>

<p><code>Table name</code>にはテーブル名を入れる。<br/>
(何も入れなかった場合はダミーの文字が入る)</p>

<p><code>CSV Format Text</code>にはカンマと改行区切りのCSVフォーマットのテキストを入力する。</p>

<p><code>convert</code>ボタンを押すと、その下のテキストエリアに出力結果が表示される。</p>

<h2>CSVの仕様</h2>

<ul>
<li>項目ごとはカンマ区切り</li>
<li>行は改行区切り</li>
<li>行は以下の仕様

<ul>
<li>1行目 : 日本語項目名。変換後のコードには使用されません</li>
<li>2行目 : 項目名。キーとして使用されます</li>
<li>3行目以降 : インサートされる内容</li>
</ul>
</li>
</ul>


<h2>Github</h2>

<p>コードはGithubにあげた。</p>

<p><a href="https://github.com/k-usk/laravel-csv-seeder">https://github.com/k-usk/laravel-csv-seeder</a></p>

<p>無駄にHeroku Buttonも付けたので自分の環境で動かしたいという人がいたらどうぞ。</p>

<h1>説明</h1>

<p>CSVを読み込んで整形してるだけなんでたいしたことはしてない。<br/>
CSVの整形には以下のライブラリを使用した。</p>

<ul>
<li><a href="http://csv.thephpleague.com/">league/csv</a></li>
</ul>


<h2>その他</h2>

<p>同じようなツールがないか調べたりはしたのだが、CSVをそのままSeederとして使えるものはいくつかあった。</p>

<ul>
<li><a href="https://github.com/Flynsarmy/laravel-csv-seeder">Flynsarmy/laravel-csv-seeder</a></li>
<li><a href="https://github.com/andycrockett/laravel-csv-seeder">andycrockett/laravel-csv-seeder</a></li>
</ul>


<p>後は、エクセルファイルをLaravelで扱うための便利パッケージとか。<br/>
エクセルを作ったりそのまま読み込めたりするよう。これはこれでかなり有用そう。</p>

<ul>
<li><a href="https://github.com/Maatwebsite/Laravel-Excel/blob/2.1/README.md">Maatwebsite/Laravel-Excel</a></li>
<li><a href="https://blog.motimotilab.com/?p=68">Laravel Excelの紹介（Laravel：Excelファイル入出力ライブラリ）</a></li>
</ul>


<p>ただし今回はそこまでのツールではなく、また、アプリ本体にそういう機能は組み込みたくなかったため、別のツールとして作成した。</p>

<h1>参考</h1>

<ul>
<li><a href="https://readouble.com/laravel/5.5/ja/queries.html">Laravel 5.5 データベース：クエリビルダ</a></li>
<li><a href="http://csv.thephpleague.com/9.0/reader/">league/csv cocument</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravelでロードバランサを挟んだ時のisSecure判定を動作させる]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/10/27/laravel-https-loadbalancer/"/>
    <updated>2017-10-27T15:28:33+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/10/27/laravel-https-loadbalancer</id>
    <content type="html"><![CDATA[<p>Laravelの小ネタ。<br/>
ELBなどのロードバランサを挟むと <code>Request</code> の <code>isSecure</code> が正しく動作してくれなかったのでメモ。</p>

<!-- more -->


<p>ブレードでリンクを生成する時に、<code>`と記述して組み立てていたのだが、ローカル環境では正しく</code>https<code>のURLで絶対パスが指定されていたのに、herokuにアップした途端に</code>http`で生成されるようになってしまった。</p>

<p><code>Request</code>の<code>root()</code>がどうやって判定しているのかを辿っていくと、<code>getScheme()</code>というRequestの関数内で、以下のように判定して取得していた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public function getScheme()
</span><span class='line'>{
</span><span class='line'>    return $this-&gt;isSecure() ? 'https' : 'http';
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>よってこの、<code>isSecure</code>が正しく動作していないと思われる。<br/>
Herokuはロードバランサが標準で入っているため、その辺りだろうとググってみると公式ドキュメントがヒット。</p>

<blockquote><p>TLS／SSL証明を行うロードバランサの裏でアプリケーションが実行されている場合、アプリケーションが時々HTTPSリンクを生成しないことに、気づくでしょう。典型的な理由は、トラフィックがロードバランサにより８０番ポートへフォワーディングされるため、セキュアなリンクを生成すべきだと判断できないからです。</p></blockquote>

<ul>
<li><a href="https://readouble.com/laravel/5.5/ja/requests.html">Laravel 5.5 HTTPリクエスト</a> 最下部の、信用するプロキシの設定</li>
</ul>


<p>まさにこの通りで、<code>app/Http/Middleware/TrustProxies.php</code>で全てのプロキシを信用するようにしたところ、無事、<code>https</code>で生成されるようになった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>protected $proxies = '**';</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Amazon AWSや他の「クラウド」ロードバランサプロバイダを使用している場合は、実際のバランサのIPアドレスは分かりません。このような場合、全プロキシを信用するために、**を使います。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel Passportのクライアント認証を試してみる]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/10/20/laravel-passport-sample/"/>
    <updated>2017-10-20T14:01:59+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/10/20/laravel-passport-sample</id>
    <content type="html"><![CDATA[<p>Laravel Passportを使ってAPIからのアクセスにOAuth認証をかけたい。<br/>
一般に公開するものではなく、特定のクライアントからのアクセスのみを想定する。<br/>
そのため、ユーザデータは使用しない。</p>

<!-- more -->


<h2>インストール</h2>

<p>Laravel Passportをインストール。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ composer require laravel/passport</span></code></pre></td></tr></table></div></figure>


<p>Package Auto-Discovery に対応しているため、プロバイダに追加してやる作業は必要ない。</p>

<ul>
<li><a href="https://laravel-news.com/package-auto-discovery">Laravel Package Auto-Discovery &ndash; Laravel News</a></li>
</ul>


<h2>セットアップ</h2>

<p>DBに必要なテーブルを作成する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php artisan migrate</span></code></pre></td></tr></table></div></figure>


<p>OAuth用に以下のテーブルが作成される。</p>

<ul>
<li><code>oauth_access_tokens</code></li>
<li><code>oauth_auth_codes</code></li>
<li><code>oauth_clients</code></li>
<li><code>oauth_personal_access_clients</code></li>
<li><code>oauth_refresh_tokens</code></li>
</ul>


<p>トークン作成時に使用されるキーを生成する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php artisan passport:install</span></code></pre></td></tr></table></div></figure>


<p>キーは、<code>/storage/</code>以下に生成される。<br/>
デフォルトでは<code>.gitignore</code>で無視する設定となっているので注意。<br/>
また、公開リポジトリにアップしてはいけない。<br/>
対処法などは以下参考。</p>

<ul>
<li><a href="https://qiita.com/kawax/items/59fde47056816cec52ec">Laravel Passport keyファイルの扱い &ndash; Qiita</a></li>
</ul>


<p>また、キーの生成とともに、DBにクライアントが作成される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Encryption keys generated successfully.
</span><span class='line'>Personal access client created successfully.
</span><span class='line'>Client ID: 1
</span><span class='line'>Client Secret: tR7FSAHLQ8qw1xIgEWMKQ26QK2nKUxHahSHvY3RW
</span><span class='line'>Password grant client created successfully.
</span><span class='line'>Client ID: 2
</span><span class='line'>Client Secret: 6n4TGzdrJHYdEJwPoMsaYuCA9EaFpXiGFr4dMVc8</span></code></pre></td></tr></table></div></figure>


<p>一つ目が、 <code>Laravel Personal Access Client</code><br/>
二つ目が、<code>Laravel Password Grant Client</code></p>

<p>二つ目はユーザ名＋パスワードを利用したアクセストークンの発行に利用出来る。<br/>
(ユーザーとの紐付けは特に必要なし)<br/>
(必要なければ消しておいてもよい)</p>

<h3>コードに追加</h3>

<h4><code>AuthServiceProvider.php</code>に追加</h4>

<p><code>/app/Providers/AuthServiceProvider.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public function boot()
</span><span class='line'>{
</span><span class='line'>    $this-&gt;registerPolicies();
</span><span class='line'>
</span><span class='line'>    Passport::routes();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4><code>auth.php</code>のdriverをpassportに変更</h4>

<p><code>/config/auth.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'guards' =&gt; [
</span><span class='line'>    'web' =&gt; [
</span><span class='line'>        'driver' =&gt; 'session',
</span><span class='line'>        'provider' =&gt; 'users',
</span><span class='line'>    ],
</span><span class='line'>
</span><span class='line'>    'api' =&gt; [
</span><span class='line'>        'driver' =&gt; 'passport',
</span><span class='line'>        'provider' =&gt; 'users',
</span><span class='line'>    ],
</span><span class='line'>],</span></code></pre></td></tr></table></div></figure>


<h2>クライアント認証情報グラントトークン</h2>

<p>冒頭の趣旨を実現するために、マシン-マシン間の認証に最適、という認証方式を採用する。</p>

<h4><code>Kanel.php</code>に追加</h4>

<p><code>/app/Http/Kanel.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>protected $routeMiddleware = [
</span><span class='line'>  ...
</span><span class='line'>  'client' =&gt; CheckClientCredentials::class,
</span><span class='line'>];    </span></code></pre></td></tr></table></div></figure>


<h2>アクセストークンの取得</h2>

<p>以下にアクセスして取得出来る。</p>

<p>・リクエスト</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST : /oauth/token</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>grant_type</code> </td>
<td align="left"> <code>client_credentials</code> |</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>client_id</code> </td>
<td align="left"> 発行したクライアントのID(数字) |</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>client_secret</code> </td>
<td align="left"> 発行したクライアントのシークレット |</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>scope</code> </td>
<td align="left"> アクセスするスコープ |</td>
</tr>
</tbody>
</table>


<p>・レスポンス</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "token_type": "Bearer",
</span><span class='line'>  "expires_in": 31536000,
</span><span class='line'>  "access_token": "YOUR-ACCESS-TOKEN-HERE"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>発行されたトークンは、<code>oauth_access_tokens</code>テーブルに格納されていく。</p>

<h3>有効期限</h3>

<p>デフォルトではトークンの有効期限は１年間となっている。</p>

<p>変更するには、<code>AuthServiceProvider</code>の<code>boot</code>メソッドから変更可能。</p>

<p><code>/app/Providers/AuthServiceProvider.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public function boot()
</span><span class='line'>{
</span><span class='line'>    $this-&gt;registerPolicies();
</span><span class='line'>
</span><span class='line'>    Passport::routes();
</span><span class='line'>    Passport::tokensExpireIn(Carbon::now()-&gt;addMinute(60));
</span><span class='line'>    Passport::refreshTokensExpireIn(Carbon::now()-&gt;addHour(2));
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>APIへのアクセス</h2>

<p>上記トークンを使用してアクセス制限をかけたAPIへアクセスする。</p>

<h3>ルートに追加</h3>

<p>追加したミドルウェアを使用して、apiのルートにこの認証で使用するエンドポイントのリクエストを追加。</p>

<p><code>/routes/api.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Route::get('/hoge', function (){
</span><span class='line'>    return 'OK';
</span><span class='line'>})-&gt;middleware('client');</span></code></pre></td></tr></table></div></figure>


<h3>アクセス</h3>

<p>apiのルーティングは、<code>/api</code>以下に作成される。<br/>
よって、エンドポイントは以下になる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET : /api/hoge</span></code></pre></td></tr></table></div></figure>


<p>ヘッダにアクセストークンを付与してアクセスする。</p>

<ul>
<li>Authorization : <code>Bearer YOUR-ACCESS-TOKEN</code></li>
</ul>


<h4>エラー</h4>

<p>アクセストークンが間違っているなどの場合は、<code>InvalidArgumentException</code>が発生する。</p>

<h1>参考</h1>

<ul>
<li><a href="https://readouble.com/laravel/5.5/ja/passport.html">API認証(Passport) 5.5 Laravel</a></li>
<li><a href="https://qiita.com/niiyz/items/fffff94acb6061ecc9d4">Laravel5.5でAPI認証のパッケージ(Laravel Passport)を利用する &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Heroku] Guzzleを使用してProximo経由で接続する]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/10/12/heroku-guzzle-proximo/"/>
    <updated>2017-10-12T16:40:29+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/10/12/heroku-guzzle-proximo</id>
    <content type="html"><![CDATA[<p>Herokuにて、外部APIに接続する際に固定IPにて接続したいことはたまにある。<br/>
<a href="http://kayakuguri.github.io/blog/2014/09/26/static-ip-heroku/">以前、QuotaGuard Staticを使用してのやり方は書いた</a>けれど、今回はProximoを利用した際に少しハマったのでメモ。</p>

<!-- more -->


<h1>Proximo</h1>

<p>Proximoは一番下のプランでも$5/月かかる有料アドオンとなっている。</p>

<ul>
<li><a href="https://elements.heroku.com/addons/proximo">Proximo &ndash; Add-ons &ndash; Heroku Elements</a></li>
<li><a href="https://devcenter.heroku.com/articles/proximo">Proximo | Heroku Dev Center</a></li>
</ul>


<h1>Guzzle</h1>

<p>以前の記事ではCURLで接続していたが、今回はGuzzleを使って接続してみる。</p>

<ul>
<li><a href="https://github.com/guzzle/guzzle">Guzzle, PHP HTTP client</a></li>
<li><a href="http://docs.guzzlephp.org/en/stable/">Guzzle Documentation</a></li>
</ul>


<h1>proxy経由で接続</h1>

<p>ドキュメントを確認すると、以下の方法でプロキシを指定可能、とのこと。<br/>
<a href="http://docs.guzzlephp.org/en/stable/request-options.html#proxy">http://docs.guzzlephp.org/en/stable/request-options.html#proxy</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$client-&gt;request('GET', '/', ['proxy' =&gt; 'tcp://localhost:8125']);</span></code></pre></td></tr></table></div></figure>


<p>ProximoをHerokuに追加すると、環境変数に自動的にプロキシのURLが追加される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PROXIMO_URL=http://proxy:your-password-here@proxy-xx-xxx-x-xxx.proximo.io</span></code></pre></td></tr></table></div></figure>


<p>上記URL内の、<code>xx-xxx-x-xxx</code>の部分の数字が固定IPとなる。<br/>
(ダッシュボードからも確認可）</p>

<p>これをそのままproxyのURLとして指定してやればOK…だと思ったのだが、エラーが出てしまった。</p>

<blockquote><p>cURL error 56: Proxy CONNECT aborted</p></blockquote>

<p>QuotaGuard Staticのアドオンを追加した際に取得出来るURLを同じように指定してやったところ、問題なくアクセス出来たので、Guzzleは悪くなさそう。<br/>
ProximoだとURLをパースしたりとかが必要なのか…など悩んでいて、URLを見比べていると、ProximoのURLにはポート番号がついてないことに気付く。</p>

<p>改めてドキュメントを確認してみると、ポート番号は<code>80</code>で固定、とのこと。</p>

<blockquote><p>If you’d rather use Proximo as a standard HTTP proxy, use PROXIMO_URL on port 80.<br/>
<a href="https://devcenter.heroku.com/articles/proximo#using-the-proximo-http-proxy">https://devcenter.heroku.com/articles/proximo#using-the-proximo-http-proxy</a></p></blockquote>

<p>よって、環境変数に追加されたURLの最後に <code>:80</code> とポート番号を追加してやると、無事、アクセスすることが出来た。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$proxy_url = env('PROXIMO_URL') . ':80';
</span><span class='line'>$res = $client-&gt;request('GET', 'http://ip.jsontest.com/', [
</span><span class='line'>  'proxy' =&gt; $proxy_url
</span><span class='line'>]);
</span><span class='line'>$res_body = json_decode($res-&gt;getBody(), true);
</span><span class='line'>var_dump($res_body);</span></code></pre></td></tr></table></div></figure>


<p>Proximoの固定IPがJSON内に返ってきたらOK。</p>

<p>ポート番号がデフォルトでは入っていないため、少しハマってしまった。</p>

<h1>参考</h1>

<ul>
<li><a href="https://qiita.com/sho7650/items/872b5757e250d4b3eb95">[Heroku]外部接続時に固定IP化する2つの方法[Proximo] &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[さくらのレンタルサーバでのhttps強制とベーシック認証]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/10/10/sakura-ssl/"/>
    <updated>2017-10-10T14:55:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/10/10/sakura-ssl</id>
    <content type="html"><![CDATA[<p>普段はheorkuを触っている事が多いのだが、今回はさくらのレンタルサーバを使用することになり、その環境でのhttps強制を設定しようとしたところ、リダイレクトループでハマったのでメモ。</p>

<!-- more -->


<h2>通常のリダイレクト</h2>

<p>どうやらさくらのサーバはかなりクセの強いことで有名らしく、以下のような普通の？https強制のコードだとリダイレクトループとなってしまう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine On
</span><span class='line'>RewriteCond %{HTTPS} off
</span><span class='line'>RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]</span></code></pre></td></tr></table></div></figure>


<h2>ロードバランサのリダイレクト</h2>

<p>ロードバランサを使っている場合は<code>HTTPS</code>が<code>on</code>にならないため、ずっとoffの状態になりリダイレクトループが起こる。<br/>
よって、以下のように書く。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine On
</span><span class='line'>RewriteCond %{HTTP:X-Forwarded-Proto} !https
</span><span class='line'>RewriteRule ^(.*)?$ https://%{HTTP:Host}%{REQUEST_URI} [L,R=301]</span></code></pre></td></tr></table></div></figure>


<h2>さくらのリダイレクト</h2>

<p>しかしさくらの場合は特殊なようで、以下ような挙動になっているよう。</p>

<ul>
<li><code>%{SERVER_PORT}</code>には常に<code>80</code>が設定されている</li>
<li>SSLアクセス時には、<code>%{ENV:HTTPS}</code>には<code>ON</code>、<code>%{HTTP:X-Sakura-Forwarded-For}</code>にはリクエスト元のIPが設定される</li>
</ul>


<p>よってhttps<strong>でない</strong>判定の場合は、<code>%{ENV:HTTPS}</code>がonではない、<code>%{HTTP:X-Sakura-Forwarded-For}</code>は空、の場合はリダイレクト、という判定にすればよいよう。</p>

<p>よって以下となる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine On
</span><span class='line'>RewriteCond %{ENV:HTTPS} !^on$
</span><span class='line'>RewriteCond %{HTTP:X-SAKURA-FORWARDED-FOR} ^$
</span><span class='line'>RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]</span></code></pre></td></tr></table></div></figure>


<h2>ベーシック認証</h2>

<p>ベーシックをかける際に、そのままベタで書いてしまうとhttpsへリダイレクトさせている関係上、httpでベーシック認証、httpsでベーシック認証、と2回聞かれることになってしまう。<br/>
これをhttpsでのアクセス時にのみ有効としたいので、上記のさくらサーバの特性を活かして、<code>%{HTTP:X-Sakura-Forwarded-For}</code>が空でない場合にのみ、ベーシックを有効とするようにした。<br/>
(<code>%{ENV:HTTPS}</code>は、ケースによっては<code>on</code>にならない場合もあるよう)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;If "%{HTTP:X-SAKURA-FORWARDED-FOR} != ''"&gt;
</span><span class='line'>AuthType Basic
</span><span class='line'>AuthName "Input your ID and Password."
</span><span class='line'>AuthUserFile /your/password/path/.htpasswd
</span><span class='line'>require valid-user
</span><span class='line'>&lt;/If&gt;</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="https://qiita.com/foursue/items/58e74c4a8c946dd49e12">htaccessでHTTPSにリダイレクトする &ndash; Qiita</a></li>
<li><a href="https://qiita.com/kumita_ryusuke/items/377428f4d8219608bdbd">【AWS】ロードバランサー+ApacheでHTTPSリダイレクトをしてみる &ndash; Qiita</a></li>
<li><a href="https://qiita.com/kawaz/items/5e96dae9686e3ac402fe">httpsへ強制リダイレクトするコピペ用RewriteRule（ELBやCloudFront対応） &ndash; Qiita</a></li>
<li><a href="http://furyu.hatenablog.com/entry/20150410/1428674881">さくらのレンタルサーバ・共有SSLで .htaccess によりSSLのみのアクセス許可を設定する方法 &ndash; 風柳メモ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhpStormを使用してPHP UnitのテストをVagrantのリモート上で実行する]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/09/22/laravel-phpunit-vagrant-phpstorm/"/>
    <updated>2017-09-22T19:05:58+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/09/22/laravel-phpunit-vagrant-phpstorm</id>
    <content type="html"><![CDATA[<p>LaravelのUnitテストを実行すべく、ローカルのVagrant環境上でPHP Unitを実行するように設定してみた。</p>

<!-- more -->


<h1>環境</h1>

<ul>
<li>Vagrant

<ul>
<li><a href="https://box.scotch.io/">ScotchBox</a></li>
</ul>
</li>
<li>Laravel 5.5.7</li>
<li>PHP 7.0</li>
</ul>


<h1>PHP Unit</h1>

<p>PHP UnitはCompoerにてプロジェクトディレクトリにインストールする。<br/>
LaravelではデフォルトでComposerに入っているので特に設定はなし。<br/>
(Linuxに入れる必要はない)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"phpunit/phpunit": "~6.0"</span></code></pre></td></tr></table></div></figure>


<h1>PhpStorm</h1>

<p>PhpStormでの設定方法。<br/>
設定したいプロジェクトのルートディレクトリを開いた状態で設定する。</p>

<h2>PHP Interpreter</h2>

<p><code>Preference</code>を開く。<br/>
<code>Languages &amp; Frameworks -&gt; PHP -&gt; Test Frameworks</code>を選択。<br/>
<code>+</code>マークをクリックし、<code>PHPUnit by Remote Interpreter</code>を選択する。</p>

<p><img src="http://kayakuguri.github.io/images/2017/09/phpunit_01.jpg" alt="" /></p>

<p>Interpreterを選択するウインドウが開くが、interpreterがないので作成する。<br/>
右端の<code>...</code>をクリックする。</p>

<p><img src="http://kayakuguri.github.io/images/2017/09/phpunit_02.jpg" alt="" /></p>

<p>ウインドウが開くので、<code>+</code>をクリックし、<code>From Docker, Vagrant, VM, Remote...</code>を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2017/09/phpunit_03.jpg" alt="" /></p>

<p>開いたウインドウで、<code>Vagrant</code>を選択。すると自動で設定が読み込まれるのでそのままOKする。</p>

<p><img src="http://kayakuguri.github.io/images/2017/09/phpunit_04.jpg" alt="" /></p>

<p>OKをクリックすると、SSH接続が行われ情報が自動で読み込まれる。<br/>
そのままでOKなのでOKをクリックする。</p>

<p><img src="http://kayakuguri.github.io/images/2017/09/phpunit_05.jpg" alt="" /></p>

<p>Interpreterを選択する画面に戻るので、作成したInterpreterを選択し、OKをクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2017/09/phpunit_06.jpg" alt="" /></p>

<p>追加したInterpreterでPHPUnitのライブラリを指定するが、Composer経由でのロードになるので、デフォルトの<code>Use Composer autoloader</code>のままでよい。<br/>
Vagrant内でのautolodのパスを指定するので、<code>...</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2017/09/phpunit_07.jpg" alt="" /></p>

<p>Scothboxは<code>/var/www</code>がホストと共有しているディレクトリになるので、そこから<code>vendor/autoload.php</code>を選択する。</p>

<p><img src="http://kayakuguri.github.io/images/2017/09/phpunit_08.jpg" alt="" /></p>

<p>選択すると、追加されているPHPUnitのバージョンが表示される。</p>

<p><img src="http://kayakuguri.github.io/images/2017/09/phpunit_09.jpg" alt="" /></p>

<p>これでInterpreterの設定は完了。</p>

<h2>Run/Debug Configurations</h2>

<p>Configurationsの設定を行う。</p>

<p>メニューから、<code>Run -&gt; Edit Configurations</code>を選択。</p>

<p><code>+</code>をクリックし、<code>PHPUnit</code>のConfigurationを追加する。</p>

<p><img src="http://kayakuguri.github.io/images/2017/09/phpunit_10.jpg" alt="" /></p>

<p>Nameは適当に書く。<br/>
Test scopeはテストしたいディレクトリを選択する。<br/>
Laravelのtestsディレクトリを指定しておく。（どこでもよい）<br/>
この設定の下部に、Errorと出ているのでFixをクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2017/09/phpunit_11.jpg" alt="" /></p>

<p>PHPの設定ウインドウが開くので、<code>PHP language level</code>はVagrant環境に合わせて<code>7</code>を選択。<br/>
<code>CLI Interpreter</code>は設定したinterpreterを選択する。</p>

<p><img src="http://kayakuguri.github.io/images/2017/09/phpunit_12.jpg" alt="" /></p>

<p>OKで閉じる。</p>

<h2>実行</h2>

<p>右上のセレクトボックスが、先ほど作成したConfigurationが選択されている状態になっているはずなので、そのまま緑の三角をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2017/09/phpunit_13.jpg" alt="" /></p>

<p>すると、<code>tests</code>ディレクトリ以下のテストファイルが自動で起動し、テストが実行される。<br/>
デフォルトのサンプルテストは必ず成功するので、無事、テストが通ればOK。</p>

<p><img src="http://kayakuguri.github.io/images/2017/09/phpunit_14.jpg" alt="" /></p>

<p><code>ExampleTest.php</code>の<code>assertTrue</code>を<code>false</code>にしてみて失敗させてみる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public function testBasicTest()
</span><span class='line'>{
</span><span class='line'>    $this-&gt;assertTrue(false);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ファイルを選択して右クリックすれば、そのファイルのみをテスト実行する事も可能。<br/>
失敗すると以下のようになる。</p>

<p><img src="http://kayakuguri.github.io/images/2017/09/phpunit_15.jpg" alt="" /></p>

<p>これで無事、成功と失敗の動作が確認できた。</p>

<h1>参考</h1>

<ul>
<li><a href="https://confluence.jetbrains.com/display/PhpStorm/Running+PHPUnit+tests+over+SSH+on+a+remote+server+with+PhpStorm">Running PHPUnit tests over SSH on a remote server with PhpStorm &ndash; PhpStorm &ndash; Confluence</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Laravel]キューのdelayとsleepオプション]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/09/22/laravel-queue-delay-sleep/"/>
    <updated>2017-09-22T15:05:42+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/09/22/laravel-queue-delay-sleep</id>
    <content type="html"><![CDATA[<p>Laravelにてキューを実行させる際に、delayとsleepオプションの関係がちょっと変だったのでメモ。</p>

<!-- more -->


<h1>sleep</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--sleep[=SLEEP]      Number of seconds to sleep when no job is available [default: "3"]</span></code></pre></td></tr></table></div></figure>


<p>ジョブがない場合に次のジョブを取得するまでにスリープする秒数の設定。</p>

<h1>delay</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--delay[=DELAY]      The number of seconds to delay failed jobs [default: "0"]</span></code></pre></td></tr></table></div></figure>


<p>ジョブが失敗した場合に再試行するまでの遅延時間。</p>

<h1>delayとsleep</h1>

<p>両方設定した場合の動作が少し変な気がするのでそれぞれ試してみた。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> delay </th>
<th align="left"> sleep </th>
<th align="left"> 失敗時遅延 </th>
<th align="left"> 待機 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> なし </td>
<td align="left"> 30 </td>
<td align="left"> 0 </td>
<td align="left"> 30 </td>
</tr>
<tr>
<td></td>
<td align="left"> 30 </td>
<td align="left"> なし </td>
<td align="left"> 30 </td>
<td align="left"> 0 </td>
</tr>
<tr>
<td></td>
<td align="left"> 5 </td>
<td align="left"> 30 </td>
<td align="left"> 30 </td>
<td align="left"> 30 </td>
</tr>
<tr>
<td></td>
<td align="left"> 30 </td>
<td align="left"> 5 </td>
<td align="left"> 30 </td>
<td align="left"> 5 </td>
</tr>
</tbody>
</table>


<p>実行コマンドは以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php artisan queue:listen --sleep=xx --delay=xx</span></code></pre></td></tr></table></div></figure>


<p>結果は、3行目の<code>delay=5 sleep=30</code>の時だけ意図した動作と違っていた。<br/>
本来ならば<code>delay=5</code>なので失敗時の再試行までの遅延は5秒のはずなのに、sleepに設定している30秒が適用されているようだった。</p>

<h1>結論</h1>

<ul>
<li>delay > sleep の場合は意図通り動作する</li>
<li>delay &lt; sleep の場合はsleepに設定した時間がdelayにも適用される</li>
</ul>


<p>これはバグだろうか…。<br/>
本体のコードをちょっとだけ追ってみたけどよくわからなかったのでもし誰かわかればお願いします。</p>

<p><a href="https://github.com/laravel/framework">laravel/framework</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Laravel] キューのsleepとtimeoutの関係]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/09/22/laravel-queue-sleep-timeout/"/>
    <updated>2017-09-22T12:16:53+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/09/22/laravel-queue-sleep-timeout</id>
    <content type="html"><![CDATA[<p>Laravelのキューを実際に使ってみた際にちょっと変な挙動だと思ったメモ。</p>

<!-- more -->


<h1>sleep</h1>

<p>キューを実行するコマンドのオプションに<code>sleep</code>というものがある。<br/>
コマンドのヘルプの説明は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--sleep[=SLEEP]      Number of seconds to sleep when no job is available [default: "3"]</span></code></pre></td></tr></table></div></figure>


<p>ジョブがない場合に次のジョブを取得するまでにスリープする秒数の設定、とのこと。<br/>
例えばこれをゼロにすると、常にジョブを取得するためのポーリングが実行され続けるため、ジョブの保存先をキューイングサービスなどにしている場合に、ものすごい数のキュー取得リクエストが飛んでしまう。<br/>
なのでsleepを設定してやれば(ジョブがなくなった時に)、ポーリング間隔を空ける事が出来るので負荷が減ったりする。</p>

<h1>timeout</h1>

<p>処理の<code>timeout</code>オプション。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--timeout[=TIMEOUT]  The number of seconds a child process can run [default: "60"]</span></code></pre></td></tr></table></div></figure>


<p>処理に指定した時間以上の時間がかかった場合はタイムアウトとする設定。デフォルトは60秒。</p>

<h1>sleepとtimeoutの関係</h1>

<p>sleepの時間を長く設定すると、タイムアウトエラーが発生してしまう。<br/>
例えば以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php artisan queue:listen --sleep=120 --timeout=60</span></code></pre></td></tr></table></div></figure>


<p>というのも、次のキュー取得を実行するまでのスリープ時間もタイムアウトの対象の時間に含まれてしまう、よう。<br/>
なので必ずsleep時間よりもtimeoutの時間を多く設定してやらないといけない。<br/>
上記の場合だと<code>sleep</code>を120秒にしてるので、<code>timeout</code>を(少なくとも)120秒より大きく設定しないといけない。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php artisan queue:listen --sleep=120 --timeout=125</span></code></pre></td></tr></table></div></figure>


<p>これだと無事、動作する。<br/>
(処理内容に5秒以上かかると合計が125秒を越えてしまうのでタイムアウトになるが）</p>

<h1>疑問</h1>

<p>単にポーリングの待ち時間のはずなのに実行時間のタイムアウトの対象に含まれるのはおかしいのでは？という疑問はやはり出ていたようで、Githubのissueでやりとりがされていた。</p>

<p><a href="https://github.com/laravel/framework/issues/6206">queue:listen&#39;s sleep duration contributing towards timeout · Issue #6206 · laravel/framework</a></p>

<p>内容を読んでいくと、そもそものプロセスの処理に組み込まれてしまっているため、根本的な修正は難しく、timeoutの時間をsleep時間を足して設定してやる、とかしか無理じゃない？みたいなやり取りになっている。</p>

<p>そしてその後、5.1の時にtimeout時間をsleep時間よりも短く設定出来ないようにする制限が組み込まれたようだが、巨大な処理を行う場合にtimeoutをなしにするためにゼロ秒にセットしたいのに出来ない、という意見が出て結局削除されている。</p>

<p>結果、制約も入らず対処もされていないようなので、現状は前述のように、timeout時間をsleep時間より必ず大きく設定してやらないといけない、ということになっているよう。</p>

<h1>余談</h1>

<p>キューのサンプルを作っている時に事象に遭遇したのだけど、そのキューのサンプルはGitHubにあげてる。<br/>
HerokuButtonで起動できるようにしたりしてみたので、よかったらお試しあれ。</p>

<p><a href="https://github.com/k-usk/laravel-queue-sample">https://github.com/k-usk/laravel-queue-sample</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]PostgresとRedisの環境設定]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/09/21/heroku-postgres-redis/"/>
    <updated>2017-09-21T15:16:32+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/09/21/heroku-postgres-redis</id>
    <content type="html"><![CDATA[<p>LaravelをHerokuで使用する際に、Heroku PostgresとHeroku Redisの接続情報を環境変数から取得する設定のメモ。</p>

<!-- more -->


<h1>概要</h1>

<p>改めて。<br/>
Herokuでは標準のadd-onとして<a href="https://elements.heroku.com/addons/heroku-postgresql">Heroku Postgres</a>と<a href="https://elements.heroku.com/addons/heroku-redis">Heroku Redis</a>が用意されている。<br/>
クレジットカードさえ登録していれば無料で使えるので便利。</p>

<p>この接続情報はアドオンを登録した際に自動的に以下のような変数で登録がされる。</p>

<p><strong>Postgres</strong><br/>
<code>DATABASE_URL</code> = <code>postgres://username:password@hostname.amazonaws.com:5432/database</code></p>

<p><strong>Redis</strong><br/>
<code>REDIS_URL</code> = <code>redis://h:password@hostname.amazonaws.com:port_no</code></p>

<p>各種情報がURL形式で組み込まれているのだが、間違ってもこれを自分でバラしてそれぞれ個別に環境変数に入れる、などとしてはいけない。<br/>
というのも、この接続情報はPostgresやRedisにメンテナンスが入った際に前の接続情報は破棄され、新しい情報が同じ環境変数で設定されるため、<br/>
自前でバラして作ってしまうとその変更した情報に対応できなくなり、接続エラーとなってしまう。</p>

<p>よって、必ず自動でセットされる、<code>DATABASE_URL</code>や<code>REDIS_URL</code>を使うこと。<br/>
これはHerokuを使う際には常識として覚えておくこと。</p>

<h1>取得</h1>

<p>というわけで、それぞれの値を取得したURLからパースしてLaravel用に環境変数にセットする。<br/>
以下のように環境変数があればそれをパースして環境変数としてセットしてやるようにするのがスマートっぽい。<br/>
これだとローカルでは個別に<code>.env</code>ファイルで設定した値を使用してやることが出来る。</p>

<p><code>/config/database.php</code> の冒頭に書く。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//Postgres
</span><span class='line'>if (getenv('DATABASE_URL')) {
</span><span class='line'>    $url = parse_url(getenv('DATABASE_URL'));
</span><span class='line'>    putenv('DB_HOST='.$url['host']);
</span><span class='line'>    putenv('DB_PORT='.$url['port']);
</span><span class='line'>    putenv('DB_DATABASE='.substr($url["path"], 1));
</span><span class='line'>    putenv('DB_USERNAME='.$url["user"]);
</span><span class='line'>    putenv('DB_PASSWORD='.$url['pass']);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//Redis
</span><span class='line'>if (getenv('REDIS_URL')) {
</span><span class='line'>    $url = parse_url(getenv('REDIS_URL'));
</span><span class='line'>    putenv('REDIS_HOST='.$url['host']);
</span><span class='line'>    putenv('REDIS_PORT='.$url['port']);
</span><span class='line'>    putenv('REDIS_PASSWORD='.$url['pass']);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Visualforce] 必須チェックのエラー文言をカスタマイズする]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/08/22/custom-vf-error/"/>
    <updated>2017-08-22T15:11:17+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/08/22/custom-vf-error</id>
    <content type="html"><![CDATA[<p>前記事の続きで、<code>apex:inputField</code> を使わない場合のバリデーションエラーの表示方法を調べたメモ。<br/>
結局標準の表示では対応してくれないようなので、自前で実装することになった。</p>

<!-- more -->


<p><a href="http://kayakuguri.github.io/blog/2017/08/18/custom-selectlist-req/">前回</a>までで作成した状態はこちら。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:pageBlockSectionItem &gt;
</span><span class='line'>  &lt;apex:outputLabel value="都道府県" for="prefcbx"/&gt;
</span><span class='line'>  &lt;apex:outputPanel styleClass="requiredInput" layout="block"&gt;
</span><span class='line'>      &lt;apex:outputPanel styleClass="requiredBlock" layout="block"/&gt;
</span><span class='line'>      &lt;apex:selectList value="{!pref__c}" id="prefcbx" size="1" required="true"&gt;
</span><span class='line'>          &lt;apex:selectOptions value="{!options}"/&gt;
</span><span class='line'>      &lt;/apex:selectList&gt;
</span><span class='line'>  &lt;/apex:outputPanel&gt;
</span><span class='line'>&lt;/apex:pageBlockSectionItem&gt;</span></code></pre></td></tr></table></div></figure>


<p><img src="http://kayakuguri.github.io/images/2017/08/custom_selectlist02.jpg" alt="" /></p>

<h1>apex:message</h1>

<p>このまま空で送信しても内部的にはエラーとなり送信出来ないのだが、エラーの内容が表示されない。<br/>
そこで、<code>&lt;apex:message&gt;</code>を追加するとエラーは出るようになった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:message for="prefcbx" styleClass="errorMsg" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>表示は以下。</p>

<p><img src="http://kayakuguri.github.io/images/2017/08/custom_error01.jpg" alt="" /></p>

<p>問題点は以下。</p>

<ul>
<li>エラー文言が英語</li>
<li>選択リストのボックスがエラー表示になってない(赤枠がない）</li>
</ul>


<h1>required=true</h1>

<p>この英語のエラーをローカライズして表示させる方法がわからなかった。(<code>lang</code>オプションを設定しても違うようだった）<br/>
なので、apex内で指定したエラー文言を表示させてやることに。</p>

<p><code>&lt;apex:inputField&gt;</code>タグなどに、<code>required=true</code>をつけると必須のチェックを自動で行ってくれるようになるのだが、このチェックは<code>form</code>の<code>action</code>で指定したメソッドなどの送信処理が走る前にチェックがされてしまうよう。<br/>
そのため、入力が空だった場合にはこのエラー文言を表示する、などカスタマイズしようにもすることが出来なかった。</p>

<p>よって、<code>required</code>を外してやる。<br/>
そうすると、必須のエラーも自分で検知してやらないといけなくなる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if(String.isBlank(pref__c)){
</span><span class='line'>  //必須エラー
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>そして<code>required=true</code>を外してしまうと、必須の赤い線が<code>apex:inputField</code>タグで表示されなくなってしまうため、全ての項目の必須表示を自前で実装してやる必要がある。</p>

<h1>addError()</h1>

<p>ちなみに、sObjectに<code>addError()</code>メソッドでエラーを追加してやると追加した文言がエラーとして表示されるようになる。<br/>
ただしこれも上記<code>required=true</code>が入っているとapexの処理が通らないため、<code>required</code>オプションは外しておく。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pref__c.addError('入力して下さい。');</span></code></pre></td></tr></table></div></figure>


<p>上記のように追加すると、以下のように表示がされる。</p>

<blockquote><p><strong>エラー:</strong> 入力して下さい。</p></blockquote>

<h1>apex:outputText</h1>

<p>よって、普通のテキスト表示である、<code>apex:outputText</code>を利用してエラーの有無で出し分けをしてやる。<br/>
さらに、選択リストの部分には、<code>error</code>クラスをつけてやることでエラー表示の赤枠を出してやることが出来るため、エラー時のみ、クラスを<code>error</code>としてやることにする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public String errorMessage{get;set;}
</span><span class='line'>public String errorClass{get;set;}
</span><span class='line'>
</span><span class='line'>public PageReference save(){
</span><span class='line'>  if(String.isBlank(town.addr1_1name__c)){
</span><span class='line'>      errorMessage = '都道府県を入力して下さい';
</span><span class='line'>      errorClass = 'error';
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これでようやく以下のように目的通りの表示が出来た。</p>

<p><img src="http://kayakuguri.github.io/images/2017/08/custom_error02.jpg" alt="" /></p>

<h1>結果</h1>

<p>最終的に標準と全く同じように必須のエラーを表示してやるように調整した場合、以下のようになった。</p>

<h3>apex</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public with sharing class CusotmSelectList_Sample {
</span><span class='line'>  public CustomObject__c object{get;set;}
</span><span class='line'>  public String errorMessage{get;set;}
</span><span class='line'>  public String errorClass{get;set;}
</span><span class='line'>  
</span><span class='line'>  public CusotmSelectList_Sample(ApexPages.StandardController controller) {
</span><span class='line'>      object = new CustomObject__c();
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * カスタム設定から都道府県のリストを取得する
</span><span class='line'>   * @type List&lt;SelectOption&gt;
</span><span class='line'>   */
</span><span class='line'>  public List&lt;SelectOption&gt; getOptions() {
</span><span class='line'>    Map&lt;String, Prefectures__c&gt; prefs = Prefectures__c.getAll();
</span><span class='line'>    List&lt;SelectOption&gt; options = new List&lt;SelectOption&gt;();
</span><span class='line'>    options.add(new SelectOption('', '--なし--'));
</span><span class='line'>    for(String key : prefs.keySet()){
</span><span class='line'>        Prefectures__c pref_obj = prefs.get(key);
</span><span class='line'>        options.add(new SelectOption(pref_obj.Label__c, pref_obj.Label__c));
</span><span class='line'>    }
</span><span class='line'>    return options;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  public PageReference save(){
</span><span class='line'>      if(String.isBlank(object.pref__c)){
</span><span class='line'>          errorMessage = '&lt;strong&gt;エラー:&lt;/strong&gt; 値を入力してください';
</span><span class='line'>          errorClass = 'error';
</span><span class='line'>          return null;
</span><span class='line'>      }
</span><span class='line'>      
</span><span class='line'>      insert object; //エラーがなければ保存
</span><span class='line'>      return null; //完了画面とかに遷移させる
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>VF Page</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:page showHeader="true" sidebar="true" title="作成" standardController="CustomObject__c" extensions="CusotmSelectList_Sample"&gt;
</span><span class='line'>  &lt;apex:sectionHeader title="レコードの作成" /&gt;
</span><span class='line'>  &lt;apex:form&gt;
</span><span class='line'>      &lt;apex:pageBlock title="" mode="edit"&gt;
</span><span class='line'>      
</span><span class='line'>          &lt;apex:pageBlockButtons&gt;
</span><span class='line'>              &lt;apex:commandButton action="{!save}" value="保存"/&gt;
</span><span class='line'>          &lt;/apex:pageBlockButtons&gt;
</span><span class='line'>          
</span><span class='line'>          &lt;apex:pageBlockSection title="内容" columns="1"&gt;
</span><span class='line'>              &lt;apex:pageBlockSectionItem &gt;
</span><span class='line'>              &lt;apex:outputLabel value="都道府県" for="prefcbx"/&gt;
</span><span class='line'>              &lt;apex:outputPanel styleClass="requiredInput" layout="block"&gt;
</span><span class='line'>                  &lt;apex:outputPanel styleClass="requiredBlock" layout="block"/&gt;
</span><span class='line'>                  &lt;apex:selectList value="{!object.pref__c}" id="prefcbx" size="1" styleClass="{!errorClass}"&gt;
</span><span class='line'>                  &lt;apex:selectOptions value="{!options}"/&gt;
</span><span class='line'>                  &lt;/apex:selectList&gt;
</span><span class='line'>                      &lt;br /&gt;
</span><span class='line'>                      &lt;apex:outputText value="{!errorMessage}" styleClass="errorMsg" rendered="{!LEN(errorMessage)&gt;0}" escape="false"/&gt;
</span><span class='line'>              &lt;/apex:outputPanel&gt;
</span><span class='line'>              &lt;/apex:pageBlockSectionItem&gt;
</span><span class='line'>          &lt;/apex:pageBlockSection&gt;
</span><span class='line'>      
</span><span class='line'>      &lt;/apex:pageBlock&gt;
</span><span class='line'>  &lt;/apex:form&gt;
</span><span class='line'>&lt;/apex:page&gt;</span></code></pre></td></tr></table></div></figure>


<h1>結果</h1>

<p>とりあえずこれで一つの項目で、必須表示〜エラー表示まで実装してやることが出来た。<br/>
ただし、複数項目で実現するためには項目の数だけエラー表示用の変数が必要になるため、クラスにするなど何かしら工夫しないとコードが冗長になりそう。<br/>
また、バリデーション用のコードもヘルパークラスに分けるなどした方がよいかもしれない。</p>

<h1>参考</h1>

<ul>
<li><a href="https://developer.salesforce.com/forums/?id=906F0000000AhwaIAC">&#12456;&#12521;&#12540;&#12513;&#12483;&#12475;&#12540;&#12472;&#12395;&#12388;&#12356;&#12390; &ndash; Salesforce Developer Community</a></li>
<li><a href="https://blog.freedom-man.com/forcecom_apexmessage/">apex:Messageの挙動について調べてみる</a></li>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.pages.meta/pages/pages_compref_message.htm">apex:message</a></li>
<li><a href="https://help.salesforce.com/articleView?id=000006300&amp;language=ja&amp;type=1">Visualforce 上のテキストボックスの下に、カスタムエラーメッセージを表示する方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Visualforce] カスタム設定から選択肢を設定し必須表示する]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/08/18/custom-selectlist-req/"/>
    <updated>2017-08-18T18:25:33+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/08/18/custom-selectlist-req</id>
    <content type="html"><![CDATA[<p>Visualforceページにて、選択リストをカスタム設定のリストから取得し、必須の赤いバーを表示させる方法。</p>

<!-- more -->


<p>今回は都道府県の設定をカスタム設定で設定しているとする。</p>

<ul>
<li>カスタム設定のAPI参照名 : <code>Prefectures__c</code></li>
<li>都道府県名を保存している項目名 : <code>Label__c</code></li>
<li>入力先の項目名 : <code>pref__c</code></li>
</ul>


<h1>カスタム設定の取得</h1>

<p>これは別で記事を書いているのでそちらをどうぞ。</p>

<p><a href="http://kayakuguri.github.io/blog/2016/02/01/custom-setting/">カスタム設定を作成して取得してみる &ndash; KayaMemo</a></p>

<p>こんな感じ。<br/>
これでVFページからは、 <code>{!options}</code>で呼び出せる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public List&lt;SelectOption&gt; getOptions() {
</span><span class='line'>  Map&lt;String, Prefectures__c&gt; prefs = Prefectures__c.getAll();
</span><span class='line'>  List&lt;SelectOption&gt; options = new List&lt;SelectOption&gt;();
</span><span class='line'>  options.add(new SelectOption('', '--なし--'));
</span><span class='line'>  for(String key : prefs.keySet()){
</span><span class='line'>      Prefectures__c pref_obj = prefs.get(key);
</span><span class='line'>      options.add(new SelectOption(pref_obj.Label__c, pref_obj.Label__c));
</span><span class='line'>  }
</span><span class='line'>  return options;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>選択リストに任意の値を設定</h1>

<p><code>apex:inputField</code>を使うと楽だが、それではその項目に設定されている選択肢しか表示できない。<br/>
(そもそも選択リスト型でないと選択リストにならない)</p>

<p>よって、<code>apex:selectList</code>を使うと設定可能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:selectList value="{!pref__c}" size="1" multiselect="false" required="true"&gt;
</span><span class='line'>    &lt;apex:selectOptions value="{!options}"/&gt;
</span><span class='line'>&lt;/apex:selectList&gt;</span></code></pre></td></tr></table></div></figure>


<p>表示は以下のようになる。</p>

<p><img src="http://kayakuguri.github.io/images/2017/08/custom_selectlist01.jpg" alt="" /></p>

<h1>必須の表示</h1>

<p>上記画像からわかるように、<code>required="true"</code>を指定しているにも関わらず、SF標準の赤い線が出てくれない。<br/>
これは、<code>apex:inputField</code>を利用している時にしか自動で表示してくれないため、自分で設定してやる必要がある。<br/>
以下のようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:pageBlockSectionItem &gt;
</span><span class='line'>  &lt;apex:outputLabel value="都道府県" for="prefcbx"/&gt;
</span><span class='line'>  &lt;apex:outputPanel styleClass="requiredInput" layout="block"&gt;
</span><span class='line'>      &lt;apex:outputPanel styleClass="requiredBlock" layout="block"/&gt;
</span><span class='line'>      &lt;apex:selectList value="{!pref__c}" id="prefcbx" size="1" required="true"&gt;
</span><span class='line'>          &lt;apex:selectOptions value="{!options}"/&gt;
</span><span class='line'>      &lt;/apex:selectList&gt;
</span><span class='line'>  &lt;/apex:outputPanel&gt;
</span><span class='line'>&lt;/apex:pageBlockSectionItem&gt;</span></code></pre></td></tr></table></div></figure>


<p>これで以下のような表示となる。</p>

<p><img src="http://kayakuguri.github.io/images/2017/08/custom_selectlist02.jpg" alt="" /></p>

<h1>エラー表示</h1>

<p>さらに同じく空だった場合のエラーの表示も自動で挿入してくれなくなるため、これも自分で表示してやる必要がある。<br/>
が、このエラー表示がかなり難航してるため、解決したら別ポストで。</p>

<p>以下に書きました。<br/>
↓↓<br/>
<a href="http://kayakuguri.github.io/blog/2017/08/22/custom-vf-error/">[Visualforce] 必須チェックのエラー文言をカスタマイズする</a></p>

<h1>参考</h1>

<ul>
<li><a href="http://vaindespair.blogspot.jp/2011/04/blog-post_733.html">memo: Force.com&#12288;&#65306;&#12288;任意の選択リストを作成したい&#65339;Visualforceタグ&#65341;</a></li>
<li><a href="http://kayakuguri.github.io/blog/2016/02/01/custom-setting/">カスタム設定を作成して取得してみる &ndash; KayaMemo</a></li>
<li><a href="http://blog.jeffdouglas.com/2008/11/16/displaying-the-required-red-bar-for-a-control/">Displaying the Required Red Bar for a Control</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Visualforce] テキストエリア入力欄の表示]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/08/17/vf-textarea/"/>
    <updated>2017-08-17T15:16:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/08/17/vf-textarea</id>
    <content type="html"><![CDATA[<p>Visualforceページにて、テキストエリアの入力欄を表示する際に、大きさを指定したりした時の表示のされ方などのまとめ。</p>

<!-- more -->


<h2>apex:inputField</h2>

<p>一番基本となる、<code>apex:inputField</code>の場合。<br/>
<code>value</code>で指定した項目の型を読み取って自動で入力フォームのタイプを変更してくれるので、普通はこちらを使っておけばよい。</p>

<p>ただし、テキストエリア項目の場合は以下のように入力欄がすごく小さい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:inputField value="{!項目名}" required="true" label="inputFieldサンプル" /&gt;</span></code></pre></td></tr></table></div></figure>


<p><img src="http://kayakuguri.github.io/images/2017/08/vf_textarea01.jpg" alt="" /></p>

<p>なので、サイズを調整したいが、<code>apex:inputField</code>には<code>rows</code>や<code>cols</code>などのオプションがない。<br/>
よって、スタイスを直接書いてやるしかなさそう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:inputField value="{!項目名}" required="true" style="width:315px; height:70px;" label="inputFieldサンプル サイズ変更" /&gt;</span></code></pre></td></tr></table></div></figure>


<p><img src="http://kayakuguri.github.io/images/2017/08/vf_textarea02.jpg" alt="" /></p>

<p>これで、サイズを任意に変更しつつ必須表示にも対応。</p>

<h3>エラー</h3>

<p><code>apex:inputField</code>を使った場合はそのままエラーの表示にも対応している。</p>

<p><img src="http://kayakuguri.github.io/images/2017/08/vf_textarea06.jpg" alt="" /></p>

<h2>apex:inputtextArea</h2>

<p><code>apex:inputtextArea</code>を利用すると、<code>rows</code> <code>cols</code>でのサイズ指定が可能。<br/>
<code>apex:outputlabel</code>も使うと標準の表示を同じようにラベルを配置してやれる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:pageblocksectionItem&gt;
</span><span class='line'>  &lt;apex:outputlabel value = "outputlabelサンプル"/&gt;
</span><span class='line'>  &lt;apex:inputtextArea value = "{!項目名}" cols = "50" rows = "5" required="true" /&gt;
</span><span class='line'>&lt;/apex:pageblocksectionItem&gt;</span></code></pre></td></tr></table></div></figure>


<p><img src="http://kayakuguri.github.io/images/2017/08/vf_textarea03.jpg" alt="" /></p>

<p>しかし、この場合だと <code>required="true"</code> を指定していても赤い線が表示されない。<br/>
その赤い線を再現してやるには、divでクラスをつけて構造を再現してやる必要があるよう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:pageBlockSectionItem&gt;
</span><span class='line'>  &lt;apex:outputlabel value = "outputlabelサンプル 必須再現"/&gt;
</span><span class='line'>  &lt;apex:outputPanel&gt;
</span><span class='line'>      &lt;div class="requiredInput"&gt;
</span><span class='line'>      &lt;div class="requiredBlock"&gt;&lt;/div&gt;
</span><span class='line'>      &lt;apex:inputtextArea value="{!項目名}" cols = "50" rows = "5" required="true" /&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>  &lt;/apex:outputPanel&gt;
</span><span class='line'>&lt;/apex:pageBlockSectionItem&gt;</span></code></pre></td></tr></table></div></figure>


<p><img src="http://kayakuguri.github.io/images/2017/08/vf_textarea04.jpg" alt="" /></p>

<p>これで任意のサイズを指定しつつ、必須表示も出来るようになった。</p>

<p>これらを並べてやると以下のような感じ。</p>

<p><img src="http://kayakuguri.github.io/images/2017/08/vf_textarea05.jpg" alt="" /></p>

<h3>エラー</h3>

<p>エラー表示はそのままだと対応していないため、以下のような方法で自前で実装してやる必要がある。</p>

<p><a href="https://developer.salesforce.com/forums/?id=906F0000000AhwaIAC">&#12456;&#12521;&#12540;&#12513;&#12483;&#12475;&#12540;&#12472;&#12395;&#12388;&#12356;&#12390; &ndash; Salesforce Developer Community</a></p>

<h2>参考</h2>

<ul>
<li><a href="https://developer.salesforce.com/forums/?id=906F000000095xFIAQ">How do I alter dimensions of inputField Text and TextArea fields ? &ndash; Salesforce Developer Community</a></li>
<li><a href="https://salesforce.stackexchange.com/questions/5462/required-field-mark-red-vertical-bar-not-coming">visualforce &ndash; Required field mark (Red Vertical Bar) not coming &ndash; Salesforce Stack Exchange</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カスタムドメイン取得とLet's Encrypt証明書とHeroku SSLと]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/08/04/customdomain-letsencrypt-herokussl/"/>
    <updated>2017-08-04T17:06:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/08/04/customdomain-letsencrypt-herokussl</id>
    <content type="html"><![CDATA[<p>Herokuへの証明書アップロード手順の確認のために、カスタムドメイン・証明書の取得から試してみた。<br/>
長い記事になりますが、備忘録として。</p>

<!-- more -->


<h1>ドメインの取得</h1>

<p>無料で独自ドメインを取得出来るという、 <a href="http://www.freenom.com/ja/index.html">freenom</a>を使用する。<br/>
(やはり無料だけあって色々とデメリットがあげられたりしているので、ご利用は自己責任で)<br/>
取得できるドメインは5種類で、 <code>.tk/.ml/.ga/.cf/.gq</code> となっている。</p>

<p>詳しい登録方法などは以下を参考にさせてもらいました。</p>

<ul>
<li><a href="http://qiita.com/teekay/items/135dc67e39f24997019e">無料のドメインを取得する（2016年10月） &ndash; Qiita</a></li>
</ul>


<p>今回は <code>.tk</code> のドメインで取得した。<br/>
ちなみに、<code>.tk</code>のドメインは90日間で25アクセス以下だった場合には登録が削除されるらしいので運用の際は注意。</p>

<p>以下のドメインで取得してみた。(もうドメイン登録はキャンセル済み）</p>

<blockquote><p>ssl-sni-test.tk</p></blockquote>

<p>ユーザー登録はメールアドレスからの登録にしたが、住所や名前などは必須となっていた。<br/>
以下が必須だった項目。</p>

<ul>
<li>first name</li>
<li>last name</li>
<li>address1</li>
<li>city</li>
<li>state</li>
<li>postcode</li>
<li>phone number</li>
<li>password</li>
</ul>


<p>登録すれば同時にドメインの申請も完了。</p>

<h2>ネームサーバとDNS</h2>

<p>freenomには無料で利用できるDNSサーバが用意されているのでそれを利用する。</p>

<p>上部メニューから <code>Services -&gt; My Domains</code> を選択。<br/>
編集したいドメインの、 <code>Manage Domain</code>をクリック。</p>

<p>タブメニューの <code>Management Tools -&gt; Nameservers</code>を選択。<br/>
<code>Use default nameservers</code>を選択して、<code>Change Nameservers</code>をクリック。<br/>
これで、freenomのネームサーバを使う設定に変更できた。<br/>
（デフォルトではfreenomのネームサーバを使うように設定されていないため、DNSの設定が出来なかった。）</p>

<p>あとは、タブメニューの <code>Manage Freenom DNS</code>を選択。<br/>
ここで、DNSの設定が可能となる。</p>

<h1>証明書の取得</h1>

<p>証明書は無料で発行出来る、 <code>Let</code>s Encrypt`を利用する。<br/>
証明書の発行には、ブラウザ上で発行出来るサービスがあるのでそちらを利用させてもらう。<br/>
以下に作者さんの詳しい説明があるので、そちらから。</p>

<ul>
<li><a href="http://qiita.com/tappie/items/76881fdf7996c57a105a">Let&#39;s Encrypt の証明書をブラウザ上で簡単取得 (dns-01 / ECDSA もあるよ) &ndash; Qiita</a></li>
</ul>


<p>基本、そのまま進めて問題ないが、１点だけ、秘密鍵はブラウザ上では作らずにローカルPC上で作成したものをアップした方がよさそう。<br/>
ブラウザ上で作ったものをHerokuにアップするとパスフレーズを解除しろ、と言われ、パスフレーズを解除しようとコマンドを入れるとエラーが出たりしたため、最初からパスフレーズがかかっていないものを作成し、アップロードした方が確実と思われる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openssl genrsa 2048 &gt; key.pem</span></code></pre></td></tr></table></div></figure>


<p>ドメインの所有証明は、<code>dns-01</code>の方法を使用した。<br/>
取得したチャレンジトークンをTXTレコードとしてDNSに登録する。</p>

<p>登録例</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Name </th>
<th align="left"> Type </th>
<th align="left"> TTL </th>
<th align="left"> Target </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>_acme-challenge.ssl-sni-test.tk.</code> </td>
<td align="left"> TXT </td>
<td align="left"> 14440 </td>
<td align="left"> <code>"L9Dlzt3Kzfu2mLYbmW2RTUdEzNBuNPiyyBt6yQyEjKk"</code> |</td>
</tr>
</tbody>
</table>


<p>結構すぐに反映された。<br/>
あとは証明書を発行するのみ。</p>

<h1>Herokuへアップロード</h1>

<p>Herokuのアプリに証明書を適用させるには2種類の方法がある。</p>

<ul>
<li><code>SSL Endpoint</code> : SSLアドオンを利用した方法 ($20/month)

<ul>
<li>Typeは <code>sni</code></li>
</ul>
</li>
<li><code>Heroku SSL</code> : Heroku標準の機能 (無料)

<ul>
<li>Typeは <code>endpoint</code></li>
</ul>
</li>
</ul>


<p><code>SSL Endpoint</code>は従来からの方法で、2016年末ごろに<code>Heroku SSL</code>が追加された。<br/>
なので、今後追加する場合には<code>Heroku SSL</code>を利用する方がよい。</p>

<p>ただし、<code>Heroku SSL</code>はFree Dynoで利用しているアプリには使用出来ないので注意。<br/>
今回は <code>Heroku SSL</code>を利用する。</p>

<h2>アップロード方法</h2>

<p>アップロード方法は管理画面からGUI操作で行うか、Heroku CLI経由でコマンドラインから行うかの2種類がある。</p>

<h3>管理画面からアップロードする</h3>

<p><code>Setting</code>から、<code>Domains and certificates</code>セクションにある、<code>Configure SSL</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2017/08/ssl01.jpg" alt="" /></p>

<p>更新方法を聞かれるので、今回は<code>Manually</code>を選択。<br/>
<code>Automatically</code>はLet&rsquo;s Encryptの場合にのみ使える自動更新のオプションで、今回はLet&rsquo;s Enctyptなので利用出来るのだが、普通はマニュアルになるため今回もマニュアルにした。</p>

<p><img src="http://kayakuguri.github.io/images/2017/08/ssl02.jpg" alt="" /></p>

<p>アップロードするウインドウが表示されるので、ファイルをドラッグ。</p>

<p><img src="http://kayakuguri.github.io/images/2017/08/ssl03.jpg" alt="" /></p>

<p>アップするものは以下。</p>

<ul>
<li>証明書 (+中間証明書)</li>
<li>秘密鍵</li>
</ul>


<p>中間証明書は、Let&rsquo;s Encryptの場合だけなのかは不明だが、今回はなしでもアップすることが出来た。<br/>
通常は必要だと思われる（証明書発行会社のページには一緒にアップして下さい、とある）ので末尾に追加しておく。</p>

<p><img src="http://kayakuguri.github.io/images/2017/08/ssl04.jpg" alt="" /></p>

<p>無事、アップされると以下のようになる。</p>

<p><img src="http://kayakuguri.github.io/images/2017/08/ssl06.jpg" alt="" /></p>

<h3>コマンドからのアップロード</h3>

<p><code>certs:add</code>でアップ可能。コマンドのヘルプは以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku certs:add -h
</span><span class='line'>Usage: heroku certs:add CRT KEY [flags]
</span><span class='line'>
</span><span class='line'>add an SSL certificate to an app
</span><span class='line'>
</span><span class='line'>Flags:
</span><span class='line'> -a, --app     (required) app to run command against
</span><span class='line'> -r, --remote  git remote of app to use
</span><span class='line'> --bypass      bypass the trust chain completion step
</span><span class='line'> --domains     domains to create after certificate upload
</span><span class='line'> --type        type to create, either 'sni' or 'endpoint'
</span><span class='line'>
</span><span class='line'>Note: certificates with PEM encoding are also valid
</span><span class='line'>
</span><span class='line'>Example:
</span><span class='line'>
</span><span class='line'>    $ heroku certs:add example.com.crt example.com.key
</span><span class='line'>
</span><span class='line'>Example (Certificate Intermediary):
</span><span class='line'>
</span><span class='line'>     $ heroku certs:add intermediary.crt example.com.crt example.com.key</span></code></pre></td></tr></table></div></figure>


<p>アップする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku certs:add ssl-sni-test-cert.pem ssl-sni-test-server-nopass.key -a sni-test
</span><span class='line'>Resolving trust chain... done
</span><span class='line'>Adding SSL certificate to ⬢ sni-test... done
</span><span class='line'>Certificate details:
</span><span class='line'>Common Name(s): ssl-sni-test.tk
</span><span class='line'>Expires At:     2017-11-02 02:12 UTC
</span><span class='line'>Issuer:         /C=US/O=Let's Encrypt/CN=Let's Encrypt Authority X3
</span><span class='line'>Starts At:      2017-08-04 02:12 UTC
</span><span class='line'>Subject:        /CN=ssl-sni-test.tk
</span><span class='line'>SSL certificate is verified by a root authority.
</span><span class='line'>? Select domains you would like to add
</span><span class='line'>
</span><span class='line'>=== Your certificate has been added successfully.  Add a custom domain to your app by running ⬢ heroku domains:add &lt;yourdomain.com&gt;</span></code></pre></td></tr></table></div></figure>


<p>途中、ドメインの選択する箇所があったが、一つしかないしそのままエンターでいけた。</p>

<p>コマンドからアップ状況を確認する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku certs -a sni-test
</span><span class='line'>Name              Common Name(s)   Expires               Trusted  Type
</span><span class='line'>────────────────  ───────────────  ────────────────────  ───────  ────
</span><span class='line'>pteranodon-48202  ssl-sni-test.tk  2017-11-02 02:12 UTC  True     SNI</span></code></pre></td></tr></table></div></figure>


<h1>ドメインの設定</h1>

<p>Herokuへのドメイン追加、と、DNSの設定、の２つが必要。</p>

<h2>Herokuへのドメイン追加</h2>

<p>証明書をアップした時と同じく、<code>Setting</code>画面から追加する。</p>

<p><img src="http://kayakuguri.github.io/images/2017/08/ssl07.jpg" alt="" /></p>

<p>追加したいドメインを登録。</p>

<p><img src="http://kayakuguri.github.io/images/2017/08/ssl08.jpg" alt="" /></p>

<p>登録すると以下のようになる。</p>

<p><img src="http://kayakuguri.github.io/images/2017/08/ssl09.jpg" alt="" /></p>

<p>もちろん、コマンドからも登録可能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku domains:add ssl-sni-test.tk -a sni-test
</span><span class='line'>Adding ssl-sni-test.tk to ⬢ sni-test... done
</span><span class='line'> ▸    Configure your app's DNS provider to point to the DNS Target ssl-sni-test.tk.herokudns.com.
</span><span class='line'> ▸    For help, see https://devcenter.heroku.com/articles/custom-domains
</span><span class='line'>
</span><span class='line'>The domain ssl-sni-test.tk has been enqueued for addition
</span><span class='line'> ▸    Run heroku domains:wait 'ssl-sni-test.tk' to wait for completion</span></code></pre></td></tr></table></div></figure>


<p>コマンドから確認すると以下のようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku domains -a sni-test
</span><span class='line'>=== sni-test Heroku Domain
</span><span class='line'>sni-test.herokuapp.com
</span><span class='line'>
</span><span class='line'>=== sni-test Custom Domains
</span><span class='line'>Domain Name      DNS Target
</span><span class='line'>───────────────  ─────────────────────────────
</span><span class='line'>ssl-sni-test.tk  ssl-sni-test.tk.herokudns.com</span></code></pre></td></tr></table></div></figure>


<h2>DNSの設定</h2>

<p>freenomからDNSの設定を行う。<br/>
Heroku側のドメイン追加で取得したDNS TargetをCNAMEとして登録する。以下のような形で追加した。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Name </th>
<th align="left"> Type </th>
<th align="left"> TTL </th>
<th align="left"> Target </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">  </td>
<td align="left"> CNAME </td>
<td align="left"> 14440 </td>
<td align="left"> <code>ssl-sni-test.tk.herokudns.com</code> |</td>
</tr>
</tbody>
</table>


<h1>アクセス</h1>

<p><code>https</code>でアクセスすると、無事、アクセス出来た。<br/>
SSLもLet&rsquo;s Encryptでちゃんと反映されていた。</p>

<p><img src="http://kayakuguri.github.io/images/2017/08/ssl10.jpg" alt="" /></p>

<h1>2つの証明書と2つのドメイン</h1>

<p>ここからは応用検証。<br/>
一つのHerokuアプリに2つのドメインを適用させ、それぞれに別々の証明書を適用させてみる。</p>

<h2>サブドメインの証明書</h2>

<p>先ほどと同じようにサブドメインの証明書を取得した。以下で取得する。</p>

<blockquote><p>add.ssl-sni-test.tk</p></blockquote>

<p>チャレンジトークンも変わるので、DNSレコードに2つ目のTXTレコードを追加する。</p>

<h2>Herokuへアップ</h2>

<p>管理画面から同じようにアップしてみたが、すでにアップされているものを置き換える事になるようで、複数の証明書をアップすることは出来なかった。<br/>
次にコマンドから追加してみるも、以下のようにエラーが出た。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku certs:add cert.pem server.key -a sni-test
</span><span class='line'>Resolving trust chain... done
</span><span class='line'>Adding SSL certificate to ⬢ sni-test... !
</span><span class='line'> ▸    Only one SNI endpoint is allowed per app (try certs:update instead).</span></code></pre></td></tr></table></div></figure>


<p>どうやら証明書は一つしかアップ出来ないよう。<br/>
しかし、<code>Only one SNI endpoint</code>とあるように、<code>sni</code>のタイプには証明書は一つしかアップできない、とのことのよう。</p>

<h3>SSL Endpoint</h3>

<p>というわけで、SSL Endpointのアドオンを追加し、試してみた。<br/>
アドオンを追加する。(有料なので注意)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons:create ssl:endpoint</span></code></pre></td></tr></table></div></figure>


<p>証明書をアップする。その際、typeに<code>endpoint</code>を指定する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku certs:add cert.pem server.key --type endpoint -a sni-test
</span><span class='line'>Resolving trust chain... done
</span><span class='line'>Adding SSL certificate to ⬢ sni-test... done
</span><span class='line'>⬢ sni-test now served by kanagawa-69051.herokussl.com
</span><span class='line'>Certificate details:
</span><span class='line'>Common Name(s): add.ssl-sni-test.tk
</span><span class='line'>Expires At:     2017-11-02 02:49 UTC
</span><span class='line'>Issuer:         /C=US/O=Let's Encrypt/CN=Let's Encrypt Authority X3
</span><span class='line'>Starts At:      2017-08-04 02:49 UTC
</span><span class='line'>Subject:        /CN=add.ssl-sni-test.tk
</span><span class='line'>SSL certificate is verified by a root authority.
</span><span class='line'>? Select domains you would like to add
</span><span class='line'>
</span><span class='line'>=== Your certificate has been added successfully.  Update your application's DNS settings as follows
</span><span class='line'>Domain           Record Type  DNS Target
</span><span class='line'>───────────────  ───────────  ─────────────────────────────
</span><span class='line'>ssl-sni-test.tk  ALIAS/ANAME  ssl-sni-test.tk.herokudns.com</span></code></pre></td></tr></table></div></figure>


<p>やはりtypeが違うのでアップすることが出来た。<br/>
証明書のアップ状況を確認してみる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku certs -a sni-test
</span><span class='line'>Name                 Endpoint                      Common Name(s)       Expires               Trusted  Type
</span><span class='line'>───────────────────  ────────────────────────────  ───────────────────  ────────────────────  ───────  ────────
</span><span class='line'>kanagawa-69051       kanagawa-69051.herokussl.com  add.ssl-sni-test.tk  2017-11-02 02:49 UTC  True     Endpoint
</span><span class='line'>corythosaurus-87918  (Not applicable for SNI)      ssl-sni-test.tk      2017-11-02 02:12 UTC  True     SNI</span></code></pre></td></tr></table></div></figure>


<h2>ドメインの追加</h2>

<p>同じく、Herokuへドメインを追加する。<br/>
登録するTarget Nameは、<code>herokudns.com</code>のものでもよいし、<code>kanagawa-69051.herokussl.com</code>のSSL Endpointで設定されているものでもどちらでもよい。</p>

<p>DNSには以下のように追加した。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Name </th>
<th align="left"> Type </th>
<th align="left"> TTL </th>
<th align="left"> Target </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>add</code> </td>
<td align="left"> CNAME </td>
<td align="left"> 14440 </td>
<td align="left"> <code>kanagawa-69051.herokussl.com</code> |</td>
</tr>
</tbody>
</table>


<h2>アクセス</h2>

<p>これで無事、 <code>ssl-sni-test.tk</code> と、 <code>add.ssl-sni-test.tk</code> の両方へアクセス出来るようになった。<br/>
さらに、どちらにも別々の証明書を適用させる事が出来た。</p>

<h1>感想</h1>

<p>無料ドメインと無料証明書はかなり便利そう。ドメインの方は運用に不安が残るが、全く無料で独自ドメインのHTTPSのサイトが持てるというのはちょっと驚き。(Herokuは無料では不可能）</p>

<p>Herokuの場合はアプリを気軽に作る事が出来るため、一つのサーバ(アプリ)での運用、というのはあまりすることがないと思われる。<br/>
そのため、<code>sni</code> <code>endpoint</code> それぞれのタイプで一つしか証明書がアップ出来ないようになっているのだと思う。それだったらアプリを分ければいいよ、との考え方だと思うので、複数アップロードの出番はまずないと思われる。</p>

<h1>参考</h1>

<ul>
<li><a href="http://qiita.com/teekay/items/135dc67e39f24997019e">無料のドメインを取得する（2016年10月） &ndash; Qiita</a></li>
<li><a href="http://qiita.com/tappie/items/76881fdf7996c57a105a">Let&#39;s Encrypt の証明書をブラウザ上で簡単取得 (dns-01 / ECDSA もあるよ) &ndash; Qiita</a></li>
<li><a href="https://zenlogic.jp/user-support/knowledge/ssl/sni.html">SSL基礎知識 1つのサーバーで複数の証明書が使える、SNIって？｜Zenlogic &ndash; ファーストサーバ株式会社</a></li>
<li><a href="https://devcenter.heroku.com/articles/ssl">Heroku SSL | Heroku Dev Center</a></li>
<li><a href="https://devcenter.heroku.com/articles/ssl-endpoint">SSL Endpoint | Heroku Dev Center</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
