<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vagrant | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/vagrant/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2018-04-13T17:03:10+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[s3互換のローカルストレージ環境minioにLaravelから保存する(vagrant)]]></title>
    <link href="http://kayakuguri.github.io/blog/2018/04/13/s3-minio-laravel/"/>
    <updated>2018-04-13T16:44:33+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2018/04/13/s3-minio-laravel</id>
    <content type="html"><![CDATA[<p>Laravelからの保存先に実際のS3を使わずに、ローカルに疑似S3環境を作成してそこに保存させてみる。</p>

<!-- more -->


<h1>minio</h1>

<p><a href="https://www.minio.io/">Minio： Private cloud storage</a></p>

<p>S3互換のオブジェクトストレージ環境。今回はVagrant上のCentOS7にいれた。<br/>
入れかたはまんま以下を参考に。</p>

<ul>
<li><a href="https://qiita.com/rerofumi/items/21f7a22b8b824859754f">S3 互換のシンプルなオブジェクトストレージ Minio を使う &ndash; Qiita</a></li>
</ul>


<p>インストールはダウンロードして配置するだけ。</p>

<p><code>
$ sudo curl https://dl.minio.io/server/minio/release/linux-amd64/minio -o /usr/local/bin/minio
$ sudo chmod +x /usr/local/bin/minio
$ sudo curl https://raw.githubusercontent.com/minio/minio-service/master/linux-systemd/minio.service -o /etc/systemd/system/minio.service
$ sudo useradd -s /sbin/nologin minio-user
</code></p>

<p>オブジェクト保存先のディレクトリを作成してユーザを指定する。</p>

<p><code>
$ sudo mkdir -p /var/lib/minio
$ sudo chown minio-user:minio-user /var/lib/minio
</code></p>

<p><code>/etc/default/minio</code> に設定ファイルを作成して記述。<br/>
アクセスキーとシークレットは後でログインや接続などに使用する。適当な値を入れておく。</p>

<p>```</p>

<h1>Local export path.</h1>

<p>MINIO_VOLUMES=&ldquo;/var/lib/minio/&rdquo;</p>

<h1>Use if you want to run Minio on a custom port.</h1>

<p>MINIO_OPTS=&ldquo;&mdash;address :9000&rdquo;</p>

<h1>Access Key of the server.</h1>

<p>MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE</p>

<h1>Secret key of the server.</h1>

<p>MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
```</p>

<p>自動起動設定と起動。</p>

<p><code>
$ sudo systemctl enable minio
$ sudo systemctl start minio
</code></p>

<p>ブラウザからアクセス出来るGUIが用意されている。<br/>
Vagrant経由でのアクセスは、Vagrantで指定しているIPに9000ポート(デフォルト。指定したポートで）でアクセスすると確認出来る。(httpなので注意）</p>

<p>例) <code>http://192.168.33.33:9000/</code></p>

<p>画面右下にあるプラスボタンからバケットを作成出来る。<br/>
ここからファイルを直接アップすることも可能。<br/>
バケットは適当に作っておく。</p>

<h1>Laravel</h1>

<p>以下を参考にさせてもらった。</p>

<ul>
<li><a href="https://laravel-news.com/minio-s3-compliant-storage?utm_medium=feed&amp;utm_source=facebook.com&amp;utm_campaign=Feed%3A+laravelnews">Minio： An Open-Source S3 Compliant Storage Service &ndash; Laravel News</a></li>
</ul>


<p>laravelから保存してみる。<br/>
基本的には環境の設定を渡してやるだけで動作する。</p>

<p>S3への保存をさせるのと、Formヘルパーを使ったのでそれぞれのパッケージを入れた。</p>

<p><code>
$ composer require "laravelcollective/html":"^5.6.0"
$ composer require league/flysystem-aws-s3-v3
</code></p>

<p><code>filesystems.php</code>でドライバーの設定をする。<br/>
S3の場合と微妙に違うため、<code>minio</code>用として分けておく方がよいと思われる。</p>

<p><code>config/filesystems.php</code></p>

<p>```
&lsquo;minio&rsquo; => [</p>

<pre><code>'driver' =&gt; 's3',
'endpoint' =&gt; env('MINIO_ENDPOINT', 'http://127.0.0.1:9000'),
'use_path_style_endpoint' =&gt; true,
'key' =&gt; env('AWS_KEY'),
'secret' =&gt; env('AWS_SECRET'),
'region' =&gt; env('AWS_REGION'),
'bucket' =&gt; env('AWS_BUCKET'),
</code></pre>

<p>],
```</p>

<p>デフォルトのS3用の設定は以下のようになっている。<br/>
<a href="https://github.com/laravel/laravel/blob/master/config/filesystems.php#L58-L65">デフォルトの設定</a></p>

<p><code>.env</code>ファイルで値を設定する。</p>

<p><code>
FILESYSTEM_DRIVER=minio
MINIO_ENDPOINT="http://127.0.0.1:9000"
AWS_KEY=AKIAIOSFODNN7EXAMPLE
AWS_SECRET=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
AWS_REGION=us-east-1
AWS_BUCKET=sample-storage
</code></p>

<ul>
<li><code>FILESYSTEM_DRIVER</code> : 設定したminioを指定</li>
<li><code>MINIO_ENDPOINT</code> : vagrantの内部からアクセスすることになるので、ローカルホストにポート番号をつけた形で指定する</li>
<li><code>AWS_KEY</code> : 設定した値</li>
<li><code>AWS_SECRET</code> : 設定した値</li>
<li><code>AWS_REGION</code> : なんでもよい</li>
<li><code>AWS_BUCKET</code> : 作ったバケット</li>
</ul>


<p>これであとは普通にs3に投げる方法で実装してやるだけでOK。<br/>
以下のような感じで作って試してみた。</p>

<p>ビュー (抜粋)</p>

<p>```
</p>

<pre><code>\{\{ Form::file('file_data') \}\}
\{\{ Form::submit('送信') \}\}
</code></pre>

<p>
```</p>

<p>コントローラー (抜粋)</p>

<p>```
public function fileUpload(Request $request)
{</p>

<pre><code>$file = $request-&gt;file('file_data');
if(!is_null($file)){
    $filename = $file-&gt;store('hoge/fuga');
    return redirect('/')-&gt;with('success', $filename.'を保存しました。');
}else{
    return redirect('/')-&gt;back();
}
</code></pre>

<p>}
```</p>

<h1>参考</h1>

<ul>
<li><a href="https://qiita.com/rerofumi/items/21f7a22b8b824859754f">S3 互換のシンプルなオブジェクトストレージ Minio を使う &ndash; Qiita</a></li>
<li><a href="https://laravel-news.com/minio-s3-compliant-storage?utm_medium=feed&amp;utm_source=facebook.com&amp;utm_campaign=Feed%3A+laravelnews">Minio： An Open-Source S3 Compliant Storage Service &ndash; Laravel News</a></li>
<li><a href="https://qiita.com/makies/items/0684dad04a6008891d0d">Laravelで画像ファイルアップロードをする簡単なサンプル &ndash; Qiita</a></li>
<li><a href="https://qiita.com/aozora0000/items/30c139164610c5799484">Laravel5からMinioObjectStorageに接続する &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhpStormを使用してPHP UnitのテストをVagrantのリモート上で実行する]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/09/22/laravel-phpunit-vagrant-phpstorm/"/>
    <updated>2017-09-22T19:05:58+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/09/22/laravel-phpunit-vagrant-phpstorm</id>
    <content type="html"><![CDATA[<p>LaravelのUnitテストを実行すべく、ローカルのVagrant環境上でPHP Unitを実行するように設定してみた。</p>

<!-- more -->


<h1>環境</h1>

<ul>
<li>Vagrant

<ul>
<li><a href="https://box.scotch.io/">ScotchBox</a></li>
</ul>
</li>
<li>Laravel 5.5.7</li>
<li>PHP 7.0</li>
</ul>


<h1>PHP Unit</h1>

<p>PHP UnitはCompoerにてプロジェクトディレクトリにインストールする。<br/>
LaravelではデフォルトでComposerに入っているので特に設定はなし。<br/>
(Linuxに入れる必要はない)</p>

<p><code>
"phpunit/phpunit": "~6.0"
</code></p>

<h1>PhpStorm</h1>

<p>PhpStormでの設定方法。<br/>
設定したいプロジェクトのルートディレクトリを開いた状態で設定する。</p>

<h2>PHP Interpreter</h2>

<p><code>Preference</code>を開く。<br/>
<code>Languages &amp; Frameworks -&gt; PHP -&gt; Test Frameworks</code>を選択。<br/>
<code>+</code>マークをクリックし、<code>PHPUnit by Remote Interpreter</code>を選択する。</p>

<p><img src="/images/2017/09/phpunit_01.jpg" alt="" /></p>

<p>Interpreterを選択するウインドウが開くが、interpreterがないので作成する。<br/>
右端の<code>...</code>をクリックする。</p>

<p><img src="/images/2017/09/phpunit_02.jpg" alt="" /></p>

<p>ウインドウが開くので、<code>+</code>をクリックし、<code>From Docker, Vagrant, VM, Remote...</code>を選択。</p>

<p><img src="/images/2017/09/phpunit_03.jpg" alt="" /></p>

<p>開いたウインドウで、<code>Vagrant</code>を選択。すると自動で設定が読み込まれるのでそのままOKする。</p>

<p><img src="/images/2017/09/phpunit_04.jpg" alt="" /></p>

<p>OKをクリックすると、SSH接続が行われ情報が自動で読み込まれる。<br/>
そのままでOKなのでOKをクリックする。</p>

<p><img src="/images/2017/09/phpunit_05.jpg" alt="" /></p>

<p>Interpreterを選択する画面に戻るので、作成したInterpreterを選択し、OKをクリック。</p>

<p><img src="/images/2017/09/phpunit_06.jpg" alt="" /></p>

<p>追加したInterpreterでPHPUnitのライブラリを指定するが、Composer経由でのロードになるので、デフォルトの<code>Use Composer autoloader</code>のままでよい。<br/>
Vagrant内でのautolodのパスを指定するので、<code>...</code>をクリック。</p>

<p><img src="/images/2017/09/phpunit_07.jpg" alt="" /></p>

<p>Scothboxは<code>/var/www</code>がホストと共有しているディレクトリになるので、そこから<code>vendor/autoload.php</code>を選択する。</p>

<p><img src="/images/2017/09/phpunit_08.jpg" alt="" /></p>

<p>選択すると、追加されているPHPUnitのバージョンが表示される。</p>

<p><img src="/images/2017/09/phpunit_09.jpg" alt="" /></p>

<p>これでInterpreterの設定は完了。</p>

<h2>Run/Debug Configurations</h2>

<p>Configurationsの設定を行う。</p>

<p>メニューから、<code>Run -&gt; Edit Configurations</code>を選択。</p>

<p><code>+</code>をクリックし、<code>PHPUnit</code>のConfigurationを追加する。</p>

<p><img src="/images/2017/09/phpunit_10.jpg" alt="" /></p>

<p>Nameは適当に書く。<br/>
Test scopeはテストしたいディレクトリを選択する。<br/>
Laravelのtestsディレクトリを指定しておく。（どこでもよい）<br/>
この設定の下部に、Errorと出ているのでFixをクリック。</p>

<p><img src="/images/2017/09/phpunit_11.jpg" alt="" /></p>

<p>PHPの設定ウインドウが開くので、<code>PHP language level</code>はVagrant環境に合わせて<code>7</code>を選択。<br/>
<code>CLI Interpreter</code>は設定したinterpreterを選択する。</p>

<p><img src="/images/2017/09/phpunit_12.jpg" alt="" /></p>

<p>OKで閉じる。</p>

<h2>実行</h2>

<p>右上のセレクトボックスが、先ほど作成したConfigurationが選択されている状態になっているはずなので、そのまま緑の三角をクリック。</p>

<p><img src="/images/2017/09/phpunit_13.jpg" alt="" /></p>

<p>すると、<code>tests</code>ディレクトリ以下のテストファイルが自動で起動し、テストが実行される。<br/>
デフォルトのサンプルテストは必ず成功するので、無事、テストが通ればOK。</p>

<p><img src="/images/2017/09/phpunit_14.jpg" alt="" /></p>

<p><code>ExampleTest.php</code>の<code>assertTrue</code>を<code>false</code>にしてみて失敗させてみる。</p>

<p>```
public function testBasicTest()
{</p>

<pre><code>$this-&gt;assertTrue(false);
</code></pre>

<p>}
```</p>

<p>ファイルを選択して右クリックすれば、そのファイルのみをテスト実行する事も可能。<br/>
失敗すると以下のようになる。</p>

<p><img src="/images/2017/09/phpunit_15.jpg" alt="" /></p>

<p>これで無事、成功と失敗の動作が確認できた。</p>

<h1>参考</h1>

<ul>
<li><a href="https://confluence.jetbrains.com/display/PhpStorm/Running+PHPUnit+tests+over+SSH+on+a+remote+server+with+PhpStorm">Running PHPUnit tests over SSH on a remote server with PhpStorm &ndash; PhpStorm &ndash; Confluence</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrantで、Authentication failureのWarningが出た場合の対処]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/04/24/vagrant-authentication-error/"/>
    <updated>2017-04-24T17:21:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/04/24/vagrant-authentication-error</id>
    <content type="html"><![CDATA[<p>Vagrantを起動させた場合に、Warningが出て起動しなくなってしまった時にググった対処方のメモ。</p>

<!-- more -->


<h1>環境</h1>

<p>```
・ホスト側
Mac OSX 10.11.6
Vagrant 1.8.6
Virtual Box 5.1.6</p>

<p>・ゲスト側
CentOX 6.5
```</p>

<h1>エラー内容</h1>

<p>以下のエラーが出た。</p>

<p><code>
Warning: Authentication failure. Retrying...
</code></p>

<p>起動途中で上記のwarningが連発し、タイムアウトで終了してしまう。</p>

<h1>原因</h1>

<p>vagrant 1.7以降の場合に、vagrantで使用している秘密鍵と公開鍵の不一致？によって引き起こされるエラーのよう。</p>

<h1>対処法</h1>

<p>以下の手順で対処した。</p>

<p><code>Vagrantfile</code>に、ゲストOSの公開鍵を書き換えないように以下の設定を追記。</p>

<p><code>
config.ssh.insert_key = false
</code></p>

<p><code>$ vagrant up</code>でvagrantを起動。途中、warningが出るが、<code>ctrl + c</code>で中断する。<br/>
中断してもvagrant自体は立ち上がっているので、<code>$ vagraht ssh</code>でゲストOSにログインする。</p>

<p><code>/home/vagrant/</code>以下に、<code>.ssh</code>ディレクトリがなければ作成する。<br/>
(すでにあったので今回は作成していない)</p>

<p>vagrantの作者のGithubリポジトリから公開鍵を取得し、<code>authorized_keys</code>という名前で保存する。</p>

<p><code>
$ wget --no-check-certificate https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub -O /home/vagrant/.ssh/authorized_keys
</code></p>

<p>ファイルやディレクトリのパーミッションを変更する。</p>

<p><code>
$ chmod 0700 /home/vagrant/.ssh
$ chmod 0600 /home/vagrant/.ssh/authorized_keys
$ chown -R vagrant /home/vagrant/.ssh
</code></p>

<p>ホストOS側にある、<code>.vagrant</code>ディレクトリ内の<code>private_key</code>を削除する。
<code>.vagrant/machines/default/virtualbox/private_key</code> を削除。</p>

<p><code>$ vagrant halt</code>で停止する。</p>

<p>これで再度、<code>$ vagrant up</code>することで起動することが出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="http://qiita.com/shyse/items/9ec50b868b90f847c75f">vagrant upコマンド実行時にAuthentication failure.エラーが発生する</a></li>
<li><a href="https://github.com/NetCommons3/NetCommons3/wiki/vagrant-up-%E3%81%A7Authentication-failure.-Retrying...">vagrant up でAuthentication failure. Retrying&hellip;</a></li>
<li><a href="http://qiita.com/megane42/items/1d8ae7444d8c1b10bbd7">Vagrant で作った VM にやってはいけない2つのこと</a></li>
<li><a href="http://qiita.com/t_732_twit/items/2303a0c3f27c288382c5#1-4">Vagrantで自分の作成した公開鍵と秘密鍵を使う方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScotchboxでのPHPエラーの出力場所]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/12/05/ubuntu-error-log/"/>
    <updated>2016-12-05T17:02:15+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/12/05/ubuntu-error-log</id>
    <content type="html"><![CDATA[<p>自分用メモ。<br/>
<a href="https://box.scotch.io/">Scotchbox</a>のVagrant環境で、PHPの標準エラー出力がどこに吐かれるかをいつも調べるのでメモ。</p>

<!-- more -->


<h1>環境</h1>

<p>環境は以下。</p>

<ul>
<li>Scotchbox 2.5</li>
<li>Ubuntu 14.04 LTS</li>
<li>PHP 5.6</li>
</ul>


<p>純粋なUbuntuでも同じ場所にログが出力されるのかは調査していないので、あくまでもScotchbox環境、とする</p>

<h1>結果</h1>

<p>結論から書くと、以下のパスに保存されていた。</p>

<p><code>
/var/log/apache2/error.log
</code></p>

<p>というわけで、<code>tail</code>する場合は以下。</p>

<p>```</p>

<h1>tail -f /var/log/apache2/error.log</h1>

<p>```</p>

<h1>設定内容</h1>

<p>出力するパスは、以下のファイルで設定されている。<br/>
<code>/etc/apache2/sites-available/000-default.conf</code></p>

<p>内容</p>

<p>```
<VirtualHost *:80></p>

<pre><code>...
ErrorLog ${APACHE_LOG_DIR}/error.log
...
</code></pre>

<p></VirtualHost><br/>
```</p>

<p><code>APACHE_LOG_DIR</code>という環境変数で設定されていることがわかる。<br/>
では、この環境変数はどこで設定しているかというと、以下のファイル。</p>

<p><code>/etc/apache2/envvars</code></p>

<p><code>
...
export APACHE_LOG_DIR=/var/log/apache2$SUFFIX
...
</code></p>

<p>というわけで、冒頭のディレクトリに保存されていた。<br/>
もし変更したい場合は上記<code>envvars</code>にて変更すればよさそう。<br/>
(パーミッションの設定を与えてやる必要はあると思う。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScotchboxでWordPressのローカル環境をサクッと構築する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/11/15/scotchbox-wordpress/"/>
    <updated>2016-11-15T18:50:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/11/15/scotchbox-wordpress</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/flurinduerst/WPDistillery">WPDisillery</a>というScotch BoxのWordPress用キットを利用して簡単にローカルにWordPress環境を作る。</p>

<!-- more -->


<p>手順は以下のままで試してみた。</p>

<p><a href="https://box.scotch.io/">https://box.scotch.io/</a><br/>
[Installing WordPress]</p>

<h1>Setup</h1>

<p><code>WPDistillery</code>のリポジトリをクローンする。<br/>
実質、必要なものは、<code>config.yml</code>と<code>setup.sh</code>の2ファイルだけなので、それを引き上げて他は削除する。</p>

<p><code>
$ git clone git@github.com:flurinduerst/WPDistillery.git
$ mv WPDistillery/config.yml config.yml
$ mv WPDistillery/setup.sh setup.sh
$ rm -rf WPDistillery
</code></p>

<p><code>Scotch Box</code>をクローンする。<br/>
必要なものは<code>Vagrantfile</code>と<code>public</code>フォルダなので引き上げて、その他は削除する。</p>

<p><code>
$ git clone https://github.com/scotch-io/scotch-box.git
$ mv scotch-box/public public
$ mv scotch-box/Vagrantfile Vagrantfile
$ rm -rf scotch-box
</code></p>

<p>この時点で以下のような構造になっているはず。</p>

<p><code>
Vagrantfile
config.yml
public/
setup.sh
</code></p>

<p>ここまでをワンライナーで実行するコマンド。</p>

<p><code>
git clone https://github.com/scotch-io/scotch-box.git &amp;&amp; mv scotch-box/public public &amp;&amp; mv scotch-box/Vagrantfile Vagrantfile &amp;&amp; rm -rf scotch-box &amp;&amp; git clone --depth 1 https://github.com/flurinduerst/WPDistillery.git &amp;&amp; mv WPDistillery/config.yml config.yml &amp;&amp; mv WPDistillery/setup.sh setup.sh &amp;&amp; rm -rf WPDistillery
</code></p>

<h1>Config.yml</h1>

<p>WordPressの設定のために、<code>Config.yml</code>を編集する。</p>

<p>デフォルトでは以下のような内容になっている。<br/>
<a href="https://github.com/flurinduerst/WPDistillery/blob/master/config.yml">https://github.com/flurinduerst/WPDistillery/blob/master/config.yml</a></p>

<h2>言語とタイムゾーン</h2>

<p>デフォルトではアメリカになっているので日本に変更する。<br/>
localeは日本版の場合は、<code>ja</code>となる。(<code>ja_JP</code>ではない)</p>

<p>```</p>

<h1>language/timezone</h1>

<p>wplocale: ja
timezone: &ldquo;Asia/Tokyo&rdquo;
```</p>

<h2>ユーザ</h2>

<p>初期ユーザの設定。(ローカルだし)そのままでも構わない。
```</p>

<h1>admin user settings</h1>

<p>admin:
  user: admin
  password: admin
  email: <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#x3a;&#109;&#97;&#x69;&#108;&#x40;&#x64;&#x6f;&#109;&#97;&#x69;&#x6e;&#x2e;&#x74;&#108;&#100;">&#x6d;&#x61;&#x69;&#108;&#64;&#100;&#x6f;&#109;&#x61;&#105;&#x6e;&#46;&#116;&#108;&#x64;</a>
  first_name: &ldquo;&rdquo;
  last_name: &ldquo;&rdquo;
```</p>

<h2>サイトの設定</h2>

<p>サイトのタイトルや説明、パーマリンクの設定など、ブログ全般の設定関係。<br/>
<strong>urlだけ、ホスト名で指定したURLを記入する</strong>。<br/>
その他はそのままで問題なし。</p>

<p>```
wpsettings:
  url: scotchbox
  title: Example Title
  description: Example Description
  permalink_structure: &ldquo;/%postname%/&rdquo;
  thumbnail_width: 150
  thumbnail_height: 150
  medium_width: 300
  medium_height: 300
  large_width: 1024
  large_height: 1024
  # use page as frontpage
  page_on_front: true</p>

<pre><code>frontpage_name: Example Front Page
</code></pre>

<p>  # automatic conversion of smilies
  convert_smilies: false
```</p>

<h2>テーマ</h2>

<p>デフォルトでは、<code>WPSeed</code>というテーマが指定されている。<br/>
<a href="https://github.com/flurinduerst/WPSeed/">flurinduerst/WPSeed: WordPress starter Theme + sage Workflow</a></p>

<p>これはテーマ作成の元になるようなものを集めた、テーマのフレームワーク？みたいなもののよう。</p>

<p>```</p>

<h1>theme to install, choose new name in &lsquo;rename&rsquo; or leave empty</h1>

<p>theme:
  name: WPSeed
  rename: &ldquo;&rdquo;
  url: &ldquo;<a href="https://github.com/flurinduerst/WPSeed/archive/master.zip">https://github.com/flurinduerst/WPSeed/archive/master.zip</a>&rdquo;
  # add branch (e.g. master) or leave empty (&ldquo;&rdquo;) if theme is not downloaded from a git repository
  source_branch: master
```</p>

<p>デフォルトのプラグイン、Twenthsixteenはそのまま入っていた。</p>

<h2>プラグイン</h2>

<p>有効化するものと有効化しないで入れておくものをそれぞれ選択出来る。</p>

<p>インストールして有効化するものは以下。</p>

<p>```</p>

<h1>plugins to install &amp; activate</h1>

<p>plugins_active:
  &ndash; disable-comments
  &ndash; duplicate-post
  &ndash; enable-media-replace
  &ndash; favicon-by-realfavicongenerator
  &ndash; regenerate-thumbnails
  &ndash; simple-page-ordering
  &ndash; user-switching
  &ndash; google-sitemap-generator
```</p>

<p>インストールだけするものは以下。</p>

<p>```</p>

<h1>plugins to install</h1>

<p>plugins_inactive:
  #development
  &ndash; custom-post-type-ui
  &ndash; search-and-replace
  &ndash; capability-manager-enhanced
  #administration
  &ndash; adminimize
  &ndash; admin-menu-editor
  &ndash; admin-menu-reorder
  &ndash; wordpress-seo
  #security/backup
  &ndash; wp-security-audit-log
  &ndash; backwpup
```</p>

<p>好きなものを追加したい場合はここに正式な名前でリストに追加すればよさそう。<br/>
( <code>https://ja.wordpress.org/plugins/</code> の後ろに付くもの)</p>

<p>とりあえず、長くなるけどデフォルトで入っているものを調べてみる。</p>

<h3>有効化されるもの</h3>

<ul>
<li><a href="https://ja.wordpress.org/plugins/disable-comments/">disable-comments</a> &ndash; コメント停止用</li>
<li><a href="https://ja.wordpress.org/plugins/duplicate-post/">duplicate-post</a> &ndash; 記事を複製する</li>
<li><a href="https://ja.wordpress.org/plugins/enable-media-replace/">enable-media-replace</a> &ndash; アップされている画像の置換</li>
<li><a href="https://ja.wordpress.org/plugins/favicon-by-realfavicongenerator/">favicon-by-realfavicongenerator</a> &ndash; ファビコン設定用</li>
<li><a href="https://ja.wordpress.org/plugins/regenerate-thumbnails/">regenerate-thumbnails</a> &ndash; アップロード済みの画像のサムネイルを一括再生成</li>
<li><a href="https://ja.wordpress.org/plugins/simple-page-ordering/">simple-page-ordering</a> &ndash; ページ・カスタム投稿タイプの並び順を入れ替える</li>
<li><a href="https://ja.wordpress.org/plugins/user-switching/">user-switching</a> &ndash; ユーザー切り替え</li>
<li><a href="https://ja.wordpress.org/plugins/google-sitemap-generator/">google-sitemap-generator</a> &ndash; sitemapを自動で作成</li>
</ul>


<h3>インストールのみ</h3>

<ul>
<li><a href="https://ja.wordpress.org/plugins/custom-post-type-ui/">custom-post-type-ui</a> &ndash; カスタム投稿タイプを作成</li>
<li><a href="https://ja.wordpress.org/plugins/search-and-replace/">search-and-replace</a> &ndash; DB内のデータを検索・置換する</li>
<li><a href="https://ja.wordpress.org/plugins/capability-manager-enhanced/">capability-manager-enhanced</a> &ndash; ユーザ権限の管理</li>
<li><a href="https://ja.wordpress.org/plugins/adminimize/">adminimize</a> &ndash; ユーザ権限の管理</li>
<li><a href="https://ja.wordpress.org/plugins/admin-menu-editor/">admin-menu-editor</a> &ndash; 管理画面メニューのカスタマイズ</li>
<li><a href="https://ja.wordpress.org/plugins/admin-menu-reorder/">admin-menu-reorder</a> &ndash; 管理画面メニューの並び替え</li>
<li><a href="https://ja.wordpress.org/plugins/wordpress-seo/">wordpress-seo</a> &ndash; SEO管理</li>
<li><a href="https://ja.wordpress.org/plugins/wp-security-audit-log/">wp-security-audit-log</a> &ndash; 作業ログ管理</li>
<li><a href="https://ja.wordpress.org/plugins/backwpup/">backwpup</a> &ndash; バックアップ</li>
</ul>


<p>一部、重複していたり、更新が止まってたりするものもあるので、実際本番アップする際には精査した方がよさそう。</p>

<h3>設定をスキップする設定</h3>

<p>最後の <code># WPDISTILLERY SETUP</code> のセクションは、自動セットアップをするかどうかの設定。デフォルトでは全てオン(<code>true</code>)になっている。</p>

<p>```
setup:
  wp: true
  settings: true
  theme: true
  plugins: true
  cleanup: true</p>

<pre><code>comment: true
posts: true
files: true
themes: true
</code></pre>

<p>```</p>

<h1>ホスト</h1>

<p><code>Vagrantfile</code>にてホストの設定をする。<br/>
デフォルトでは以下のように、<code>192.168.33.10</code>のIPで、<code>scotchbox</code>というホスト名になっている。<br/>
これを必要ならば、任意のものに変更する。</p>

<p><code>
config.vm.network "private_network", ip: "192.168.33.10"
config.vm.hostname = "scotchbox"
</code></p>

<h1>Vagrantを起動</h1>

<p>ここまでで設定が完了したので、Vagrantを起動する。</p>

<p><code>
$ vagrant up
</code></p>

<h1>設定を実行</h1>

<p>Vagrantが起動したら、WordPressの自動設定を起動するためにVagrantにsshで入る。</p>

<p><code>
$ vagrant ssh
</code></p>

<p>自動設定の前に、<code>WP CLI</code>を最新版に更新し、その後、<code>setup.sh</code>のシェルスクリプトを起動する。</p>

<p>```
$ sudo wp cli update &mdash;allow-root
You have version 0.20.3. Would you like to update to 0.25.0? [y/n] y
Downloading from <a href="https://github.com/wp-cli/wp-cli/releases/download/v0.25.0/wp-cli-0.25.0.phar...">https://github.com/wp-cli/wp-cli/releases/download/v0.25.0/wp-cli-0.25.0.phar...</a>
New version works. Proceeding to replace.
Success: Updated WP-CLI to 0.25.0</p>

<p>$ cd ../../var/www/ &amp;&amp; bash setup.sh
========== WPDISTILLERY START ==========
&hellip;
Do you want to continue anyway? (y/n) y
&hellip;
&hellip;
========== WPDISTILLERY FINISHED ==========
```</p>

<h1>アクセス</h1>

<p>設定したホスト名かIPでアクセスすると、トップページが表示される。<br/>
<code>/wp-login.php</code>でログイン画面が開き、設定したユーザでログインが出来る。
これで無事、起動出来た。</p>

<h1>簡易インストール</h1>

<p>デフォルトのままだとプラグインやテーマが入ってかなり時間がかかるので、さくっと起動するために、ほとんどの設定をオフにしてインストールしてみる。</p>

<p>```
setup:
  wp: true
  settings: false
  theme: false
  plugins: false
  cleanup: false</p>

<pre><code>comment: false
posts: false
files: false
themes: false
</code></pre>

<p>```</p>

<p>これだと、サイトの名前やユーザの設定以外はデフォルトのまま起動できた。<br/>
デフォルトのフルの状態のものよりかなり早いのでこちらの方がよいかもしれない。</p>

<h1>参考</h1>

<ul>
<li><a href="https://box.scotch.io/">Scotch Box ♥ A Vagrant LAMP Stack That Just Works</a></li>
<li><a href="https://github.com/flurinduerst/WPDistillery#setup">flurinduerst/WPDistillery: WordPress Setup runner for Scotch Box</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
