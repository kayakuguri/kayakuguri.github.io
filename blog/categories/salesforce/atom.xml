<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: salesforce | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/salesforce/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2018-04-23T15:21:38+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Illuminated Cloud 2を使ってみる]]></title>
    <link href="http://kayakuguri.github.io/blog/2018/04/23/illuminated-cloud-2/"/>
    <updated>2018-04-23T15:19:26+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2018/04/23/illuminated-cloud-2</id>
    <content type="html"><![CDATA[<p>MavensMateが開発終了、ということで、Illuminated Cloudを使ってみる。</p>

<!-- more -->


<h1>概要</h1>

<p><a href="http://www.illuminatedcloud.com/">Illuminated Cloud</a></p>

<p>Salesforce公式が出している、JetBrainsのエディタのプラグイン。<br/>
<a href="https://plugins.jetbrains.com/plugin/10253-illuminated-cloud-2">Illuminated Cloud 2 ：： JetBrains Plugin Repository</a></p>

<p>補完もちゃんと出るし、テストやdeployも可能っぽい。<br/>
以下、英語だけどデモ動画。</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/7kzZrCoNWN8?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<p>以下の２つのエディタで利用可能</p>

<ul>
<li>IntelliJ IDEA

<ul>
<li><a href="https://www.jetbrains.com/idea/">IntelliJ IDEA： The Java IDE for Professional Developers by JetBrains</a></li>
</ul>
</li>
<li>WebStorm IDEs

<ul>
<li><a href="https://www.jetbrains.com/webstorm/">WebStorm： The Smartest JavaScript IDE by JetBrains</a></li>
</ul>
</li>
</ul>


<p>IntelliJ IDEAのCommunity Editionなら無料で使用可能。</p>

<p>30日間は無料トライアルがあるが、それ以降は、$125/年、のサブスクリプションプランとなっている。</p>

<h1>インストール</h1>

<p>Preferencesから、Pluginsを選択し、Browse repositories&hellip;を選択。<br/>
検索に、<code>Illu</code>などと入力して、結果の、<code>Illuminated Cloud 2</code>を選択してインストールする。<br/>
(<code>Illuminated Cloud</code>無印の方は古い方なので間違えないように）</p>

<h1>プロジェクトの作成</h1>

<p>New Projectを選択し、Illuminated Cloudを選択。</p>

<p><img src="/images/2018/04/illuminated01.png" alt="" /></p>

<p>Connectionの部分で接続するSalesforceのアカウントを選択する。<br/>
まずはアカウントの設定が必要なので、鉛筆マークからアカウント情報を追加すする。</p>

<p><img src="/images/2018/04/illuminated02.png" alt="" /></p>

<p>入力して、Testボタンで接続テストが可能。Connection configuration is valid.と表示されればOK。<br/>
(TestせずにOKをクリックすると接続確認してからでないと接続出来ない、等の警告が出た）<br/>
OKをクリックすると、メタデータが取得され、どれを同期するかのリストが表示されるので、ApexやVFなど必要なものを選択してNextをクリック。</p>

<p><img src="/images/2018/04/illuminated03.jpg" alt="" /></p>

<p>プロジェクトの保存先を聞かれるので選択。</p>

<p>作成されると、以下のアラートが表示された。</p>

<p><img src="/images/2018/04/illuminated04.jpg" alt="" /></p>

<p>MavensMateなんかと同じく、保存アクション(コマンド+S)時にSFへDeployするかどうか、のよう。<br/>
ファイルの保存自体は自動で行われるので、deployしたい場合にのみ、コマンド+Sする、という流れになりそう。<br/>
Yesで有効化しておく。</p>

<h2>使用する</h2>

<p>FAQとして、メニューのショートカットの一覧？が載っていた。<br/>
<a href="http://www.illuminatedcloud.com/support/faq">FAQ &ndash; Illuminated Cloud</a></p>

<h3>新規作成</h3>

<p>新規作成はFile→Newで作成可能。<br/>
<code>src/classes</code>を選択した状態では<code>Apex Class</code>が、<code>src/pages</code>を選択した状態だと、<code>Visualforce Page</code>が選択肢に表示される。</p>

<p><img src="/images/2018/04/illuminated05.png" alt="" /></p>

<p>SF側の更新を聞かれるので、Yesで。</p>

<p><img src="/images/2018/04/illuminated06.png" alt="" /></p>

<p>作成するとSFの方にもそのまま作成される。</p>

<h3>削除</h3>

<p>ファイルを右クリックでDeleteを選択。いくつか聞かれるが、Yesを選んでいけば、SF上のファイルも削除される。</p>

<h3>同期</h3>

<p>SF側で作成や削除したファイルがあれば、Retrievalから同期が可能。</p>

<p><img src="/images/2018/04/illuminated07.jpg" alt="" /></p>

<p>新しく追加したい時は、Searver Onlyにチェックし、 <code>Retrieve for Merge</code>をクリックする。</p>

<p><img src="/images/2018/04/illuminated08.jpg" alt="" /></p>

<p>すると、マージするファイルの選択画面となるので、選択し、緑の三角をクリックして選択しているファイルをマージさせる。<br/>
(この場合は2ファイル追加）</p>

<p><img src="/images/2018/04/illuminated09.jpg" alt="" /></p>

<h3>テスト</h3>

<p>Run → Runを選択。(Ctrl + Opt + R)<br/>
Edit Configurations..というウインドウが出るのでそのままクリック。<br/>
左のツリーから、Apex Unit Testsを選択。<br/>
Test Classesからテストしたいクラスを選択。</p>

<p><img src="/images/2018/04/illuminated10.png" alt="" /></p>

<p>そのままRunをクリックすればテストが実行される。<br/>
結果は以下のような感じ。</p>

<p><img src="/images/2018/04/illuminated11.jpg" alt="" /></p>

<h1>まとめ</h1>

<p>Eclipseの時と違って特に悩むようなところはなかった。<br/>
ただ、この機能ってどこにあるんだろう？となった時に探す手段がない。<br/>
公式のドキュメントもそれらしいものがほぼないし。<br/>
とはいえ、公式で有料のものなので今後のサポートなどは安心感がある。Salesforce DXも対応しており、今後はこれ一択、とかになりそうな気配。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apex Rest APIで任意のステータスコードを返す]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/11/27/apex-rest-response/"/>
    <updated>2017-11-27T14:49:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/11/27/apex-rest-response</id>
    <content type="html"><![CDATA[<p>カスタムでApex Rest APIを作成する際にレスポンスにステータスコードを反映させる方法。</p>

<!-- more -->


<h1>概要</h1>

<p>今までは、返却用するJSON用のクラスを作成し、そのクラスを返却していたのだが、<br/>
そもそも返却の方法としてはそれが正しくなかった（お作法に則っていなかった）よう。</p>

<p><a href="https://kayakuguri.github.io/blog/2015/03/27/apex-rest-tips/">[salesforce]Apex REST作成時のtips</a><br/>
この辺の記事内で返却しているやり方。</p>

<p>実際には、<code>return</code>で結果を返す必要はなく、<code>RestResponse</code>クラスに追加してやるだけでよかった。</p>

<ul>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.apexcode.meta/apexcode/apex_methods_system_restresponse.htm">RestResponse クラス</a></li>
</ul>


<h1>RestResponse</h1>

<h2>ステータスコード</h2>

<p>ステータスコードの指定は以下のようにする。</p>

<p><code>
RestResponse res = RestContext.response;
res.statusCode = 400;
</code></p>

<h2>ヘッダ情報</h2>

<p>デフォルトの情報だと、<code>Content-Type</code>が<code>application/octetstream</code>になっているようなので、<code>application/json</code>に変更したい。<br/>
ヘッダ情報の追加・変更は以下のようにする。</p>

<p><code>
RestResponse res = RestContext.response;
res.addHeader('Content-Type', 'application/json');
</code></p>

<h2>レスポンス内容</h2>

<p>レスポンスの内容をJSONで返す場合、作成した返却用クラスをJSONにパースし、<code>Blob</code>にキャストして追加してやる。</p>

<p>```
ResultData result = new ResultData();</p>

<p>RestResponse res = RestContext.response;
res.responseBody = Blob.valueOf(JSON.serialize(result));
```</p>

<h2>コード</h2>

<p>上記をまとめると以下のような形になる。</p>

<p>```
@RestResource(urlMapping=&lsquo;/your/api&rsquo;)
global with sharing class Your_Apex_Class  {</p>

<pre><code>@HttpPost
global static void something_method() {
  ResultData result = new ResultData();
  result.success = false;
  ResultError error = new ResultError();
  result.error = error;

  RestResponse res = RestContext.response;
  res.addHeader('Content-Type', 'application/json');
  // (中略)

  if(/* エラーの場合 */){
    error.message = 'エラーメッセージ';
    res.statusCode = 400;
    res.responseBody = Blob.valueOf(JSON.serialize(result));
    return;
  }

  // (中略)
  result.success = true;
  res.statusCode = 200;
  res.responseBody = Blob.valueOf(JSON.serialize(result));
  return;
}

global class ResultData{
  global Boolean success;
  global ResultError error;
}

global class ResultError{
  global String message;
}
</code></pre>

<p>} <br/>
```</p>

<p>エラー発生時にはステータスコードが<code>400</code>で以下のようなJSONが返却される。</p>

<p>```
{</p>

<pre><code>"success": false,
"error": {
    "message": "エラーメッセージ"
}
</code></pre>

<p>}
```</p>

<h1>テスト</h1>

<p>テストクラスを書く際に、送信結果を取得する場合には以下のようにする。</p>

<p>```
@isTest static void your_something_test() {</p>

<pre><code>String json_str = '{ "YOUR" : "JSON_DATA" }';

//あらかじめ宣言が必要
RestRequest req = new RestRequest();
req.requestBody = Blob.valueof(json_str);
RestContext.request = req;
RestResponse res = new RestResponse();
RestContext.response = res;

Your_Apex_Class.something_method(); //実行

System.assertEquals(res.statusCode, 400); //ステータスコード
//返却されたJSON文字列をMapにキャストする
Map&lt;String, Object&gt; requestBody = (Map&lt;String, Object&gt;)JSON.deserializeUntyped(res.responseBody.ToString());
Map&lt;String, Object&gt; errorBody = (Map&lt;String, Object&gt;)requestBody.get('error');
System.assertEquals(errorBody.get('message'), 'エラーメッセージ'); //エラーメッセージ
</code></pre>

<p>}
```</p>

<h1>参考</h1>

<ul>
<li><a href="https://salesforce.stackexchange.com/questions/54010/apexrest-controlling-http-error-codes-on-exceptions">apexrest: controlling HTTP error codes on exceptions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Visualforce] 必須チェックのエラー文言をカスタマイズする]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/08/22/custom-vf-error/"/>
    <updated>2017-08-22T15:11:17+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/08/22/custom-vf-error</id>
    <content type="html"><![CDATA[<p>前記事の続きで、<code>apex:inputField</code> を使わない場合のバリデーションエラーの表示方法を調べたメモ。<br/>
結局標準の表示では対応してくれないようなので、自前で実装することになった。</p>

<!-- more -->


<p><a href="http://kayakuguri.github.io/blog/2017/08/18/custom-selectlist-req/">前回</a>までで作成した状態はこちら。</p>

<p>```
&lt;apex:pageBlockSectionItem >
  &lt;apex:outputLabel value=&ldquo;都道府県&rdquo; for=&ldquo;prefcbx&rdquo;/>
  &lt;apex:outputPanel styleClass=&ldquo;requiredInput&rdquo; layout=&ldquo;block&rdquo;></p>

<pre><code>  &lt;apex:outputPanel styleClass="requiredBlock" layout="block"/&gt;
  &lt;apex:selectList value="{!pref__c}" id="prefcbx" size="1" required="true"&gt;
      &lt;apex:selectOptions value="{!options}"/&gt;
  &lt;/apex:selectList&gt;
</code></pre>

<p>  &lt;/apex:outputPanel>
&lt;/apex:pageBlockSectionItem>
```</p>

<p><img src="/images/2017/08/custom_selectlist02.jpg" alt="" /></p>

<h1>apex:message</h1>

<p>このまま空で送信しても内部的にはエラーとなり送信出来ないのだが、エラーの内容が表示されない。<br/>
そこで、<code>&lt;apex:message&gt;</code>を追加するとエラーは出るようになった。</p>

<p><code>
&lt;apex:message for="prefcbx" styleClass="errorMsg" /&gt;
</code></p>

<p>表示は以下。</p>

<p><img src="/images/2017/08/custom_error01.jpg" alt="" /></p>

<p>問題点は以下。</p>

<ul>
<li>エラー文言が英語</li>
<li>選択リストのボックスがエラー表示になってない(赤枠がない）</li>
</ul>


<h1>required=true</h1>

<p>この英語のエラーをローカライズして表示させる方法がわからなかった。(<code>lang</code>オプションを設定しても違うようだった）<br/>
なので、apex内で指定したエラー文言を表示させてやることに。</p>

<p><code>&lt;apex:inputField&gt;</code>タグなどに、<code>required=true</code>をつけると必須のチェックを自動で行ってくれるようになるのだが、このチェックは<code>form</code>の<code>action</code>で指定したメソッドなどの送信処理が走る前にチェックがされてしまうよう。<br/>
そのため、入力が空だった場合にはこのエラー文言を表示する、などカスタマイズしようにもすることが出来なかった。</p>

<p>よって、<code>required</code>を外してやる。<br/>
そうすると、必須のエラーも自分で検知してやらないといけなくなる。</p>

<p>```
if(String.isBlank(pref__c)){</p>

<pre><code>//必須エラー
</code></pre>

<p>}
```</p>

<p>そして<code>required=true</code>を外してしまうと、必須の赤い線が<code>apex:inputField</code>タグで表示されなくなってしまうため、全ての項目の必須表示を自前で実装してやる必要がある。</p>

<h1>addError()</h1>

<p>ちなみに、sObjectに<code>addError()</code>メソッドでエラーを追加してやると追加した文言がエラーとして表示されるようになる。<br/>
ただしこれも上記<code>required=true</code>が入っているとapexの処理が通らないため、<code>required</code>オプションは外しておく。</p>

<p><code>
pref__c.addError('入力して下さい。');
</code></p>

<p>上記のように追加すると、以下のように表示がされる。</p>

<blockquote><p><strong>エラー:</strong> 入力して下さい。</p></blockquote>

<h1>apex:outputText</h1>

<p>よって、普通のテキスト表示である、<code>apex:outputText</code>を利用してエラーの有無で出し分けをしてやる。<br/>
さらに、選択リストの部分には、<code>error</code>クラスをつけてやることでエラー表示の赤枠を出してやることが出来るため、エラー時のみ、クラスを<code>error</code>としてやることにする。</p>

<p>```
public String errorMessage{get;set;}
public String errorClass{get;set;}</p>

<p>public PageReference save(){</p>

<pre><code>if(String.isBlank(town.addr1_1name__c)){
    errorMessage = '都道府県を入力して下さい';
    errorClass = 'error';
}
</code></pre>

<p>}
```</p>

<p>これでようやく以下のように目的通りの表示が出来た。</p>

<p><img src="/images/2017/08/custom_error02.jpg" alt="" /></p>

<h1>結果</h1>

<p>最終的に標準と全く同じように必須のエラーを表示してやるように調整した場合、以下のようになった。</p>

<h3>apex</h3>

<p>```
public with sharing class CusotmSelectList_Sample {</p>

<pre><code>public CustomObject__c object{get;set;}
public String errorMessage{get;set;}
public String errorClass{get;set;}

public CusotmSelectList_Sample(ApexPages.StandardController controller) {
    object = new CustomObject__c();
}

/**
 * カスタム設定から都道府県のリストを取得する
 * @type List&lt;SelectOption&gt;
 */
public List&lt;SelectOption&gt; getOptions() {
  Map&lt;String, Prefectures__c&gt; prefs = Prefectures__c.getAll();
  List&lt;SelectOption&gt; options = new List&lt;SelectOption&gt;();
  options.add(new SelectOption('', '--なし--'));
  for(String key : prefs.keySet()){
      Prefectures__c pref_obj = prefs.get(key);
      options.add(new SelectOption(pref_obj.Label__c, pref_obj.Label__c));
  }
  return options;
}

public PageReference save(){
    if(String.isBlank(object.pref__c)){
        errorMessage = '&lt;strong&gt;エラー:&lt;/strong&gt; 値を入力してください';
        errorClass = 'error';
        return null;
    }

    insert object; //エラーがなければ保存
    return null; //完了画面とかに遷移させる
}
</code></pre>

<p>}
```</p>

<h3>VF Page</h3>

<p>```
&lt;apex:page showHeader=&ldquo;true&rdquo; sidebar=&ldquo;true&rdquo; title=&ldquo;作成&rdquo; standardController=&ldquo;CustomObject__c&rdquo; extensions=&ldquo;CusotmSelectList_Sample&rdquo;></p>

<pre><code>&lt;apex:sectionHeader title="レコードの作成" /&gt;
&lt;apex:form&gt;
    &lt;apex:pageBlock title="" mode="edit"&gt;

        &lt;apex:pageBlockButtons&gt;
            &lt;apex:commandButton action="{!save}" value="保存"/&gt;
        &lt;/apex:pageBlockButtons&gt;

        &lt;apex:pageBlockSection title="内容" columns="1"&gt;
            &lt;apex:pageBlockSectionItem &gt;
            &lt;apex:outputLabel value="都道府県" for="prefcbx"/&gt;
            &lt;apex:outputPanel styleClass="requiredInput" layout="block"&gt;
                &lt;apex:outputPanel styleClass="requiredBlock" layout="block"/&gt;
                &lt;apex:selectList value="{!object.pref__c}" id="prefcbx" size="1" styleClass="{!errorClass}"&gt;
                &lt;apex:selectOptions value="{!options}"/&gt;
                &lt;/apex:selectList&gt;
                    &lt;br /&gt;
                    &lt;apex:outputText value="{!errorMessage}" styleClass="errorMsg" rendered="{!LEN(errorMessage)&gt;0}" escape="false"/&gt;
            &lt;/apex:outputPanel&gt;
            &lt;/apex:pageBlockSectionItem&gt;
        &lt;/apex:pageBlockSection&gt;

    &lt;/apex:pageBlock&gt;
&lt;/apex:form&gt;
</code></pre>

<p>&lt;/apex:page>
```</p>

<h1>結果</h1>

<p>とりあえずこれで一つの項目で、必須表示〜エラー表示まで実装してやることが出来た。<br/>
ただし、複数項目で実現するためには項目の数だけエラー表示用の変数が必要になるため、クラスにするなど何かしら工夫しないとコードが冗長になりそう。<br/>
また、バリデーション用のコードもヘルパークラスに分けるなどした方がよいかもしれない。</p>

<h1>参考</h1>

<ul>
<li><a href="https://developer.salesforce.com/forums/?id=906F0000000AhwaIAC">&#12456;&#12521;&#12540;&#12513;&#12483;&#12475;&#12540;&#12472;&#12395;&#12388;&#12356;&#12390; &ndash; Salesforce Developer Community</a></li>
<li><a href="https://blog.freedom-man.com/forcecom_apexmessage/">apex:Messageの挙動について調べてみる</a></li>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.pages.meta/pages/pages_compref_message.htm">apex:message</a></li>
<li><a href="https://help.salesforce.com/articleView?id=000006300&amp;language=ja&amp;type=1">Visualforce 上のテキストボックスの下に、カスタムエラーメッセージを表示する方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Visualforce] カスタム設定から選択肢を設定し必須表示する]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/08/18/custom-selectlist-req/"/>
    <updated>2017-08-18T18:25:33+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/08/18/custom-selectlist-req</id>
    <content type="html"><![CDATA[<p>Visualforceページにて、選択リストをカスタム設定のリストから取得し、必須の赤いバーを表示させる方法。</p>

<!-- more -->


<p>今回は都道府県の設定をカスタム設定で設定しているとする。</p>

<ul>
<li>カスタム設定のAPI参照名 : <code>Prefectures__c</code></li>
<li>都道府県名を保存している項目名 : <code>Label__c</code></li>
<li>入力先の項目名 : <code>pref__c</code></li>
</ul>


<h1>カスタム設定の取得</h1>

<p>これは別で記事を書いているのでそちらをどうぞ。</p>

<p><a href="http://kayakuguri.github.io/blog/2016/02/01/custom-setting/">カスタム設定を作成して取得してみる &ndash; KayaMemo</a></p>

<p>こんな感じ。<br/>
これでVFページからは、 <code>{!options}</code>で呼び出せる。</p>

<p>```
public List<SelectOption> getOptions() {</p>

<pre><code>Map&lt;String, Prefectures__c&gt; prefs = Prefectures__c.getAll();
List&lt;SelectOption&gt; options = new List&lt;SelectOption&gt;();
options.add(new SelectOption('', '--なし--'));
for(String key : prefs.keySet()){
    Prefectures__c pref_obj = prefs.get(key);
    options.add(new SelectOption(pref_obj.Label__c, pref_obj.Label__c));
}
return options;
</code></pre>

<p>}
```</p>

<h1>選択リストに任意の値を設定</h1>

<p><code>apex:inputField</code>を使うと楽だが、それではその項目に設定されている選択肢しか表示できない。<br/>
(そもそも選択リスト型でないと選択リストにならない)</p>

<p>よって、<code>apex:selectList</code>を使うと設定可能。</p>

<p>```
&lt;apex:selectList value=&ldquo;{!pref__c}&rdquo; size=&ldquo;1&rdquo; multiselect=&ldquo;false&rdquo; required=&ldquo;true&rdquo;></p>

<pre><code>&lt;apex:selectOptions value="{!options}"/&gt;
</code></pre>

<p>&lt;/apex:selectList>
```</p>

<p>表示は以下のようになる。</p>

<p><img src="/images/2017/08/custom_selectlist01.jpg" alt="" /></p>

<h1>必須の表示</h1>

<p>上記画像からわかるように、<code>required="true"</code>を指定しているにも関わらず、SF標準の赤い線が出てくれない。<br/>
これは、<code>apex:inputField</code>を利用している時にしか自動で表示してくれないため、自分で設定してやる必要がある。<br/>
以下のようになる。</p>

<p>```
&lt;apex:pageBlockSectionItem ></p>

<pre><code>&lt;apex:outputLabel value="都道府県" for="prefcbx"/&gt;
&lt;apex:outputPanel styleClass="requiredInput" layout="block"&gt;
    &lt;apex:outputPanel styleClass="requiredBlock" layout="block"/&gt;
    &lt;apex:selectList value="{!pref__c}" id="prefcbx" size="1" required="true"&gt;
        &lt;apex:selectOptions value="{!options}"/&gt;
    &lt;/apex:selectList&gt;
&lt;/apex:outputPanel&gt;
</code></pre>

<p>&lt;/apex:pageBlockSectionItem>
```</p>

<p>これで以下のような表示となる。</p>

<p><img src="/images/2017/08/custom_selectlist02.jpg" alt="" /></p>

<h1>エラー表示</h1>

<p>さらに同じく空だった場合のエラーの表示も自動で挿入してくれなくなるため、これも自分で表示してやる必要がある。<br/>
が、このエラー表示がかなり難航してるため、解決したら別ポストで。</p>

<p>以下に書きました。<br/>
↓↓<br/>
<a href="http://kayakuguri.github.io/blog/2017/08/22/custom-vf-error/">[Visualforce] 必須チェックのエラー文言をカスタマイズする</a></p>

<h1>参考</h1>

<ul>
<li><a href="http://vaindespair.blogspot.jp/2011/04/blog-post_733.html">memo: Force.com&#12288;&#65306;&#12288;任意の選択リストを作成したい&#65339;Visualforceタグ&#65341;</a></li>
<li><a href="http://kayakuguri.github.io/blog/2016/02/01/custom-setting/">カスタム設定を作成して取得してみる &ndash; KayaMemo</a></li>
<li><a href="http://blog.jeffdouglas.com/2008/11/16/displaying-the-required-red-bar-for-a-control/">Displaying the Required Red Bar for a Control</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Visualforce] テキストエリア入力欄の表示]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/08/17/vf-textarea/"/>
    <updated>2017-08-17T15:16:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/08/17/vf-textarea</id>
    <content type="html"><![CDATA[<p>Visualforceページにて、テキストエリアの入力欄を表示する際に、大きさを指定したりした時の表示のされ方などのまとめ。</p>

<!-- more -->


<h2>apex:inputField</h2>

<p>一番基本となる、<code>apex:inputField</code>の場合。<br/>
<code>value</code>で指定した項目の型を読み取って自動で入力フォームのタイプを変更してくれるので、普通はこちらを使っておけばよい。</p>

<p>ただし、テキストエリア項目の場合は以下のように入力欄がすごく小さい。</p>

<p><code>
&lt;apex:inputField value="{!項目名}" required="true" label="inputFieldサンプル" /&gt;
</code></p>

<p><img src="/images/2017/08/vf_textarea01.jpg" alt="" /></p>

<p>なので、サイズを調整したいが、<code>apex:inputField</code>には<code>rows</code>や<code>cols</code>などのオプションがない。<br/>
よって、スタイスを直接書いてやるしかなさそう。</p>

<p><code>
&lt;apex:inputField value="{!項目名}" required="true" style="width:315px; height:70px;" label="inputFieldサンプル サイズ変更" /&gt;
</code></p>

<p><img src="/images/2017/08/vf_textarea02.jpg" alt="" /></p>

<p>これで、サイズを任意に変更しつつ必須表示にも対応。</p>

<h3>エラー</h3>

<p><code>apex:inputField</code>を使った場合はそのままエラーの表示にも対応している。</p>

<p><img src="/images/2017/08/vf_textarea06.jpg" alt="" /></p>

<h2>apex:inputtextArea</h2>

<p><code>apex:inputtextArea</code>を利用すると、<code>rows</code> <code>cols</code>でのサイズ指定が可能。<br/>
<code>apex:outputlabel</code>も使うと標準の表示を同じようにラベルを配置してやれる。</p>

<p>```
&lt;apex:pageblocksectionItem></p>

<pre><code>&lt;apex:outputlabel value = "outputlabelサンプル"/&gt;
&lt;apex:inputtextArea value = "{!項目名}" cols = "50" rows = "5" required="true" /&gt;
</code></pre>

<p>&lt;/apex:pageblocksectionItem>
```</p>

<p><img src="/images/2017/08/vf_textarea03.jpg" alt="" /></p>

<p>しかし、この場合だと <code>required="true"</code> を指定していても赤い線が表示されない。<br/>
その赤い線を再現してやるには、divでクラスをつけて構造を再現してやる必要があるよう。</p>

<p>```
&lt;apex:pageBlockSectionItem></p>

<pre><code>&lt;apex:outputlabel value = "outputlabelサンプル 必須再現"/&gt;
&lt;apex:outputPanel&gt;
    &lt;div class="requiredInput"&gt;
    &lt;div class="requiredBlock"&gt;&lt;/div&gt;
    &lt;apex:inputtextArea value="{!項目名}" cols = "50" rows = "5" required="true" /&gt;
&lt;/div&gt;
&lt;/apex:outputPanel&gt;
</code></pre>

<p>&lt;/apex:pageBlockSectionItem>
```</p>

<p><img src="/images/2017/08/vf_textarea04.jpg" alt="" /></p>

<p>これで任意のサイズを指定しつつ、必須表示も出来るようになった。</p>

<p>これらを並べてやると以下のような感じ。</p>

<p><img src="/images/2017/08/vf_textarea05.jpg" alt="" /></p>

<h3>エラー</h3>

<p>エラー表示はそのままだと対応していないため、以下のような方法で自前で実装してやる必要がある。</p>

<p><a href="https://developer.salesforce.com/forums/?id=906F0000000AhwaIAC">&#12456;&#12521;&#12540;&#12513;&#12483;&#12475;&#12540;&#12472;&#12395;&#12388;&#12356;&#12390; &ndash; Salesforce Developer Community</a></p>

<h2>参考</h2>

<ul>
<li><a href="https://developer.salesforce.com/forums/?id=906F000000095xFIAQ">How do I alter dimensions of inputField Text and TextArea fields ? &ndash; Salesforce Developer Community</a></li>
<li><a href="https://salesforce.stackexchange.com/questions/5462/required-field-mark-red-vertical-bar-not-coming">visualforce &ndash; Required field mark (Red Vertical Bar) not coming &ndash; Salesforce Stack Exchange</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
