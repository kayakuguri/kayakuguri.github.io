<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ssl | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/ssl/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2017-08-22T15:13:31+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[カスタムドメイン取得とLet's Encrypt証明書とHeroku SSLと]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/08/04/customdomain-letsencrypt-herokussl/"/>
    <updated>2017-08-04T17:06:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/08/04/customdomain-letsencrypt-herokussl</id>
    <content type="html"><![CDATA[<p>Herokuへの証明書アップロード手順の確認のために、カスタムドメイン・証明書の取得から試してみた。<br/>
長い記事になりますが、備忘録として。</p>

<!-- more -->


<h1>ドメインの取得</h1>

<p>無料で独自ドメインを取得出来るという、 <a href="http://www.freenom.com/ja/index.html">freenom</a>を使用する。<br/>
(やはり無料だけあって色々とデメリットがあげられたりしているので、ご利用は自己責任で)<br/>
取得できるドメインは5種類で、 <code>.tk/.ml/.ga/.cf/.gq</code> となっている。</p>

<p>詳しい登録方法などは以下を参考にさせてもらいました。</p>

<ul>
<li><a href="http://qiita.com/teekay/items/135dc67e39f24997019e">無料のドメインを取得する（2016年10月） &ndash; Qiita</a></li>
</ul>


<p>今回は <code>.tk</code> のドメインで取得した。<br/>
ちなみに、<code>.tk</code>のドメインは90日間で25アクセス以下だった場合には登録が削除されるらしいので運用の際は注意。</p>

<p>以下のドメインで取得してみた。(もうドメイン登録はキャンセル済み）</p>

<blockquote><p>ssl-sni-test.tk</p></blockquote>

<p>ユーザー登録はメールアドレスからの登録にしたが、住所や名前などは必須となっていた。<br/>
以下が必須だった項目。</p>

<ul>
<li>first name</li>
<li>last name</li>
<li>address1</li>
<li>city</li>
<li>state</li>
<li>postcode</li>
<li>phone number</li>
<li>password</li>
</ul>


<p>登録すれば同時にドメインの申請も完了。</p>

<h2>ネームサーバとDNS</h2>

<p>freenomには無料で利用できるDNSサーバが用意されているのでそれを利用する。</p>

<p>上部メニューから <code>Services -&gt; My Domains</code> を選択。<br/>
編集したいドメインの、 <code>Manage Domain</code>をクリック。</p>

<p>タブメニューの <code>Management Tools -&gt; Nameservers</code>を選択。<br/>
<code>Use default nameservers</code>を選択して、<code>Change Nameservers</code>をクリック。<br/>
これで、freenomのネームサーバを使う設定に変更できた。<br/>
（デフォルトではfreenomのネームサーバを使うように設定されていないため、DNSの設定が出来なかった。）</p>

<p>あとは、タブメニューの <code>Manage Freenom DNS</code>を選択。<br/>
ここで、DNSの設定が可能となる。</p>

<h1>証明書の取得</h1>

<p>証明書は無料で発行出来る、 <code>Let</code>s Encrypt`を利用する。<br/>
証明書の発行には、ブラウザ上で発行出来るサービスがあるのでそちらを利用させてもらう。<br/>
以下に作者さんの詳しい説明があるので、そちらから。</p>

<ul>
<li><a href="http://qiita.com/tappie/items/76881fdf7996c57a105a">Let&#39;s Encrypt の証明書をブラウザ上で簡単取得 (dns-01 / ECDSA もあるよ) &ndash; Qiita</a></li>
</ul>


<p>基本、そのまま進めて問題ないが、１点だけ、秘密鍵はブラウザ上では作らずにローカルPC上で作成したものをアップした方がよさそう。<br/>
ブラウザ上で作ったものをHerokuにアップするとパスフレーズを解除しろ、と言われ、パスフレーズを解除しようとコマンドを入れるとエラーが出たりしたため、最初からパスフレーズがかかっていないものを作成し、アップロードした方が確実と思われる。</p>

<p><code>
$ openssl genrsa 2048 &gt; key.pem
</code></p>

<p>ドメインの所有証明は、<code>dns-01</code>の方法を使用した。<br/>
取得したチャレンジトークンをTXTレコードとしてDNSに登録する。</p>

<p>登録例</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Name </th>
<th align="left"> Type </th>
<th align="left"> TTL </th>
<th align="left"> Target </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>_acme-challenge.ssl-sni-test.tk.</code> </td>
<td align="left"> TXT </td>
<td align="left"> 14440 </td>
<td align="left"> <code>"L9Dlzt3Kzfu2mLYbmW2RTUdEzNBuNPiyyBt6yQyEjKk"</code> |</td>
</tr>
</tbody>
</table>


<p>結構すぐに反映された。<br/>
あとは証明書を発行するのみ。</p>

<h1>Herokuへアップロード</h1>

<p>Herokuのアプリに証明書を適用させるには2種類の方法がある。</p>

<ul>
<li><code>SSL Endpoint</code> : SSLアドオンを利用した方法 ($20/month)

<ul>
<li>Typeは <code>sni</code></li>
</ul>
</li>
<li><code>Heroku SSL</code> : Heroku標準の機能 (無料)

<ul>
<li>Typeは <code>endpoint</code></li>
</ul>
</li>
</ul>


<p><code>SSL Endpoint</code>は従来からの方法で、2016年末ごろに<code>Heroku SSL</code>が追加された。<br/>
なので、今後追加する場合には<code>Heroku SSL</code>を利用する方がよい。</p>

<p>ただし、<code>Heroku SSL</code>はFree Dynoで利用しているアプリには使用出来ないので注意。<br/>
今回は <code>Heroku SSL</code>を利用する。</p>

<h2>アップロード方法</h2>

<p>アップロード方法は管理画面からGUI操作で行うか、Heroku CLI経由でコマンドラインから行うかの2種類がある。</p>

<h3>管理画面からアップロードする</h3>

<p><code>Setting</code>から、<code>Domains and certificates</code>セクションにある、<code>Configure SSL</code>をクリック。</p>

<p><img src="/images/2017/08/ssl01.jpg" alt="" /></p>

<p>更新方法を聞かれるので、今回は<code>Manually</code>を選択。<br/>
<code>Automatically</code>はLet&rsquo;s Encryptの場合にのみ使える自動更新のオプションで、今回はLet&rsquo;s Enctyptなので利用出来るのだが、普通はマニュアルになるため今回もマニュアルにした。</p>

<p><img src="/images/2017/08/ssl02.jpg" alt="" /></p>

<p>アップロードするウインドウが表示されるので、ファイルをドラッグ。</p>

<p><img src="/images/2017/08/ssl03.jpg" alt="" /></p>

<p>アップするものは以下。</p>

<ul>
<li>証明書 (+中間証明書)</li>
<li>秘密鍵</li>
</ul>


<p>中間証明書は、Let&rsquo;s Encryptの場合だけなのかは不明だが、今回はなしでもアップすることが出来た。<br/>
通常は必要だと思われる（証明書発行会社のページには一緒にアップして下さい、とある）ので末尾に追加しておく。</p>

<p><img src="/images/2017/08/ssl04.jpg" alt="" /></p>

<p>無事、アップされると以下のようになる。</p>

<p><img src="/images/2017/08/ssl06.jpg" alt="" /></p>

<h3>コマンドからのアップロード</h3>

<p><code>certs:add</code>でアップ可能。コマンドのヘルプは以下。</p>

<p>```
$ heroku certs:add -h
Usage: heroku certs:add CRT KEY [flags]</p>

<p>add an SSL certificate to an app</p>

<p>Flags:
 -a, &mdash;app     (required) app to run command against
 -r, &mdash;remote  git remote of app to use
 &mdash;bypass      bypass the trust chain completion step
 &mdash;domains     domains to create after certificate upload
 &mdash;type        type to create, either &lsquo;sni&rsquo; or &lsquo;endpoint&rsquo;</p>

<p>Note: certificates with PEM encoding are also valid</p>

<p>Example:</p>

<pre><code>$ heroku certs:add example.com.crt example.com.key
</code></pre>

<p>Example (Certificate Intermediary):</p>

<pre><code> $ heroku certs:add intermediary.crt example.com.crt example.com.key
</code></pre>

<p>```</p>

<p>アップする。</p>

<p>```
$ heroku certs:add ssl-sni-test-cert.pem ssl-sni-test-server-nopass.key -a sni-test
Resolving trust chain&hellip; done
Adding SSL certificate to ⬢ sni-test&hellip; done
Certificate details:
Common Name(s): ssl-sni-test.tk
Expires At:     2017-11-02 02:12 UTC
Issuer:         /C=US/O=Let&rsquo;s Encrypt/CN=Let&rsquo;s Encrypt Authority X3
Starts At:      2017-08-04 02:12 UTC
Subject:        /CN=ssl-sni-test.tk
SSL certificate is verified by a root authority.
? Select domains you would like to add</p>

<p>=== Your certificate has been added successfully.  Add a custom domain to your app by running ⬢ heroku domains:add &lt;yourdomain.com>
```</p>

<p>途中、ドメインの選択する箇所があったが、一つしかないしそのままエンターでいけた。</p>

<p>コマンドからアップ状況を確認する。</p>

<p><code>
$ heroku certs -a sni-test
Name              Common Name(s)   Expires               Trusted  Type
────────────────  ───────────────  ────────────────────  ───────  ────
pteranodon-48202  ssl-sni-test.tk  2017-11-02 02:12 UTC  True     SNI
</code></p>

<h1>ドメインの設定</h1>

<p>Herokuへのドメイン追加、と、DNSの設定、の２つが必要。</p>

<h2>Herokuへのドメイン追加</h2>

<p>証明書をアップした時と同じく、<code>Setting</code>画面から追加する。</p>

<p><img src="/images/2017/08/ssl07.jpg" alt="" /></p>

<p>追加したいドメインを登録。</p>

<p><img src="/images/2017/08/ssl08.jpg" alt="" /></p>

<p>登録すると以下のようになる。</p>

<p><img src="/images/2017/08/ssl09.jpg" alt="" /></p>

<p>もちろん、コマンドからも登録可能。</p>

<p>```
$ heroku domains:add ssl-sni-test.tk -a sni-test
Adding ssl-sni-test.tk to ⬢ sni-test&hellip; done
 ▸    Configure your app&rsquo;s DNS provider to point to the DNS Target ssl-sni-test.tk.herokudns.com.
 ▸    For help, see <a href="https://devcenter.heroku.com/articles/custom-domains">https://devcenter.heroku.com/articles/custom-domains</a></p>

<p>The domain ssl-sni-test.tk has been enqueued for addition
 ▸    Run heroku domains:wait &lsquo;ssl-sni-test.tk&rsquo; to wait for completion
```</p>

<p>コマンドから確認すると以下のようになる。</p>

<p>```
$ heroku domains -a sni-test
=== sni-test Heroku Domain
sni-test.herokuapp.com</p>

<p>=== sni-test Custom Domains
Domain Name      DNS Target
───────────────  ─────────────────────────────
ssl-sni-test.tk  ssl-sni-test.tk.herokudns.com
```</p>

<h2>DNSの設定</h2>

<p>freenomからDNSの設定を行う。<br/>
Heroku側のドメイン追加で取得したDNS TargetをCNAMEとして登録する。以下のような形で追加した。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Name </th>
<th align="left"> Type </th>
<th align="left"> TTL </th>
<th align="left"> Target </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">  </td>
<td align="left"> CNAME </td>
<td align="left"> 14440 </td>
<td align="left"> <code>ssl-sni-test.tk.herokudns.com</code> |</td>
</tr>
</tbody>
</table>


<h1>アクセス</h1>

<p><code>https</code>でアクセスすると、無事、アクセス出来た。<br/>
SSLもLet&rsquo;s Encryptでちゃんと反映されていた。</p>

<p><img src="/images/2017/08/ssl10.jpg" alt="" /></p>

<h1>2つの証明書と2つのドメイン</h1>

<p>ここからは応用検証。<br/>
一つのHerokuアプリに2つのドメインを適用させ、それぞれに別々の証明書を適用させてみる。</p>

<h2>サブドメインの証明書</h2>

<p>先ほどと同じようにサブドメインの証明書を取得した。以下で取得する。</p>

<blockquote><p>add.ssl-sni-test.tk</p></blockquote>

<p>チャレンジトークンも変わるので、DNSレコードに2つ目のTXTレコードを追加する。</p>

<h2>Herokuへアップ</h2>

<p>管理画面から同じようにアップしてみたが、すでにアップされているものを置き換える事になるようで、複数の証明書をアップすることは出来なかった。<br/>
次にコマンドから追加してみるも、以下のようにエラーが出た。</p>

<p><code>
$ heroku certs:add cert.pem server.key -a sni-test
Resolving trust chain... done
Adding SSL certificate to ⬢ sni-test... !
 ▸    Only one SNI endpoint is allowed per app (try certs:update instead).
</code></p>

<p>どうやら証明書は一つしかアップ出来ないよう。<br/>
しかし、<code>Only one SNI endpoint</code>とあるように、<code>sni</code>のタイプには証明書は一つしかアップできない、とのことのよう。</p>

<h3>SSL Endpoint</h3>

<p>というわけで、SSL Endpointのアドオンを追加し、試してみた。<br/>
アドオンを追加する。(有料なので注意)</p>

<p><code>
$ heroku addons:create ssl:endpoint
</code></p>

<p>証明書をアップする。その際、typeに<code>endpoint</code>を指定する。</p>

<p>```
$ heroku certs:add cert.pem server.key &mdash;type endpoint -a sni-test
Resolving trust chain&hellip; done
Adding SSL certificate to ⬢ sni-test&hellip; done
⬢ sni-test now served by kanagawa-69051.herokussl.com
Certificate details:
Common Name(s): add.ssl-sni-test.tk
Expires At:     2017-11-02 02:49 UTC
Issuer:         /C=US/O=Let&rsquo;s Encrypt/CN=Let&rsquo;s Encrypt Authority X3
Starts At:      2017-08-04 02:49 UTC
Subject:        /CN=add.ssl-sni-test.tk
SSL certificate is verified by a root authority.
? Select domains you would like to add</p>

<p>=== Your certificate has been added successfully.  Update your application&rsquo;s DNS settings as follows
Domain           Record Type  DNS Target
───────────────  ───────────  ─────────────────────────────
ssl-sni-test.tk  ALIAS/ANAME  ssl-sni-test.tk.herokudns.com
```</p>

<p>やはりtypeが違うのでアップすることが出来た。<br/>
証明書のアップ状況を確認してみる。</p>

<p><code>
$ heroku certs -a sni-test
Name                 Endpoint                      Common Name(s)       Expires               Trusted  Type
───────────────────  ────────────────────────────  ───────────────────  ────────────────────  ───────  ────────
kanagawa-69051       kanagawa-69051.herokussl.com  add.ssl-sni-test.tk  2017-11-02 02:49 UTC  True     Endpoint
corythosaurus-87918  (Not applicable for SNI)      ssl-sni-test.tk      2017-11-02 02:12 UTC  True     SNI
</code></p>

<h2>ドメインの追加</h2>

<p>同じく、Herokuへドメインを追加する。<br/>
登録するTarget Nameは、<code>herokudns.com</code>のものでもよいし、<code>kanagawa-69051.herokussl.com</code>のSSL Endpointで設定されているものでもどちらでもよい。</p>

<p>DNSには以下のように追加した。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Name </th>
<th align="left"> Type </th>
<th align="left"> TTL </th>
<th align="left"> Target </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>add</code> </td>
<td align="left"> CNAME </td>
<td align="left"> 14440 </td>
<td align="left"> <code>kanagawa-69051.herokussl.com</code> |</td>
</tr>
</tbody>
</table>


<h2>アクセス</h2>

<p>これで無事、 <code>ssl-sni-test.tk</code> と、 <code>add.ssl-sni-test.tk</code> の両方へアクセス出来るようになった。<br/>
さらに、どちらにも別々の証明書を適用させる事が出来た。</p>

<h1>感想</h1>

<p>無料ドメインと無料証明書はかなり便利そう。ドメインの方は運用に不安が残るが、全く無料で独自ドメインのHTTPSのサイトが持てるというのはちょっと驚き。(Herokuは無料では不可能）</p>

<p>Herokuの場合はアプリを気軽に作る事が出来るため、一つのサーバ(アプリ)での運用、というのはあまりすることがないと思われる。<br/>
そのため、<code>sni</code> <code>endpoint</code> それぞれのタイプで一つしか証明書がアップ出来ないようになっているのだと思う。それだったらアプリを分ければいいよ、との考え方だと思うので、複数アップロードの出番はまずないと思われる。</p>

<h1>参考</h1>

<ul>
<li><a href="http://qiita.com/teekay/items/135dc67e39f24997019e">無料のドメインを取得する（2016年10月） &ndash; Qiita</a></li>
<li><a href="http://qiita.com/tappie/items/76881fdf7996c57a105a">Let&#39;s Encrypt の証明書をブラウザ上で簡単取得 (dns-01 / ECDSA もあるよ) &ndash; Qiita</a></li>
<li><a href="https://zenlogic.jp/user-support/knowledge/ssl/sni.html">SSL基礎知識 1つのサーバーで複数の証明書が使える、SNIって？｜Zenlogic &ndash; ファーストサーバ株式会社</a></li>
<li><a href="https://devcenter.heroku.com/articles/ssl">Heroku SSL | Heroku Dev Center</a></li>
<li><a href="https://devcenter.heroku.com/articles/ssl-endpoint">SSL Endpoint | Heroku Dev Center</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuにComodoで取得したSSL証明書を反映させる]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/07/heroku-comodo-ssl/"/>
    <updated>2016-09-07T10:27:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/07/heroku-comodo-ssl</id>
    <content type="html"><![CDATA[<p>ちょっとつなげ方とかが特殊だったのでメモ。</p>

<!-- more -->


<p><a href="https://comodo.jp/">トップページ | COMODO JAPAN  | SSL 証明書</a></p>

<p>通常の流れであれば、取得した証明書の末尾に、対応している中間CA証明書をくっつけて、秘密鍵と共にアップすればOK。<br/>
<a href="http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain/">[heroku]herokuでのSSL設定とカスタムサブドメインの適用方法 &ndash; KayaMemo</a></p>

<p>しかし、Comodoという発行会社で取得したSSLの場合は以下のような内容で4つのファイルが送られてくる。</p>

<ul>
<li>AddTrustExternalCARoot.crt (ルート証明書)</li>
<li>COMODORSAAddTrustCA.crt    (中間証明書 その1)</li>
<li>COMODORSADomainValidationSecureServerCA.crt (中間証明書 その2)</li>
<li>STAR_example_com.crt   (サーバ証明書)</li>
</ul>


<p>アップする際にはこれらを全てつなげたファイルが必要になるよう。<br/>
そしてそのつなげ方にも順番があるようで、下から順番に末尾に追加していく形。<br/>
コマンドは以下となる。</p>

<p><code>
$ cat STAR_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt &gt; STAR_example_com-bundle.pem
</code></p>

<p>これで全てつなげたファイル、 <code>STAR_example_com-bundle.pem</code> が出来上がる。<br/>
あとは、秘密鍵と共にアップするだけ。<br/>
(秘密鍵は、 <code>server.key</code> とする）</p>

<p><code>
$ heroku certs:add STAR_example_com-bundle.pem server.key -a YOUR_APP
</code></p>

<h2>参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/26100642/heroku-comodo-ssl-and-it-not-working">Heroku Comodo SSL and it not working? &ndash; Stack Overflow</a></li>
<li><a href="http://qiita.com/white_aspara25/items/d9a1f99e8abdee0b5450">ELB の ComodoSSL 証明書を更新 &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant (Ubuntu) 環境でhttps接続する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/08/10/vagrant-ubuntu-ssl/"/>
    <updated>2016-08-10T15:18:45+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/08/10/vagrant-ubuntu-ssl</id>
    <content type="html"><![CDATA[<p>本番がhttpsの開発でローカル環境だけhttpで接続していると色々面倒があるため、ローカルのvagrant環境でもhttps接続出来るように調整してみたメモ。</p>

<!-- more -->


<h1>前提</h1>

<p>OSはubuntu。というか、いつものように、vagrantの環境はscotchbox。</p>

<p><a href="https://box.scotch.io/">https://box.scotch.io/</a></p>

<h1>参考</h1>

<p>主に以下を参考にそのまま作業した。ありがとうございます。</p>

<p><a href="http://hidex7777.hatenablog.com/entry/2014/03/18/220943">VagrantでUbuntuサーバ/Apache2のSSL(https) &ndash; orangeProse別館</a></p>

<h1>テスト用の証明書を作成</h1>

<p>まずはモジュールを有効に。</p>

<p><code>
$ sudo a2enmod ssl
$ sudo service apache2 reload
</code></p>

<p>で、テスト用の証明書を作成。</p>

<p><code>
$ sudo make-ssl-cert generate-default-snakeoil --force-ovarwrite
$ sudo make-ssl-cert /usr/share/ssl-cert/ssleay.cnf /etc/apache2/apache.pem
</code></p>

<p>二つ目を実行すると、コンソールの画面全体で設定画面が表示されて証明書の内容を聞かれる。
ひとつ目はコモンネーム。
hostsで指定しているURLを指定しておく。</p>

<p><img src="/images/2016/08/vagrant_ssl_01.jpg" alt="" /></p>

<p>二つ目は、 <code>Subject Alternative Names</code> (サブジェクトの別名)。<br/>
<a href="https://knowledge.geotrust.com/jp/support/knowledge-base/index?vproductcat=G&amp;vdomain=GEOTRUST_JP&amp;page=content&amp;id=SO24206&amp;actp=LIST&amp;viewlocale=ja_JP&amp;locale=ja_JP&amp;redirected=true">「Subject Alternative Names（サブジェクトの別名）」とは何ですか  | GeoTrust<br/>
</a></p>

<p>今回は特に使用しないので空白のままとしておく。</p>

<p><img src="/images/2016/08/vagrant_ssl_02.jpg" alt="" /></p>

<p>apacheを再起動。</p>

<h1>設定ファイル</h1>

<p>このままだとSSL用の設定ファイルがないようなので、<code>default-ssl.conf</code>というファイルをコピーして使用する。</p>

<p><code>
$ cd /etc/apache2/sites-available
$ sudo cp default-ssl.conf ssl.conf
$ sudo a2ensite ssl
$ sudo service apache2 reload
</code></p>

<p>参考サイトでは<code>.conf</code>の拡張子が指定されていなかったのだが、指定されていないとエラーとなってしまう。<br/>
<a href="http://qiita.com/mzmttks/items/85c69313693cb1df4949">Apache2 on ubuntu で a2ensite すると does not exist と言われるときの対処法 &ndash; Qiita</a></p>

<p>最後はapacheを再起動。</p>

<p>この状態で、httpsでアクセスをすると、プライバシーが保護されていない、というような警告が出るが、無視してアクセスすると無事、接続できた。</p>

<p><img src="/images/2016/08/vagrant_ssl_03.jpg" alt="" /></p>

<h1>ドキュメントルート</h1>

<p>しかしhttpでアクセスしていたファイルにアクセスが出来ない。
どうやら、httpsで指定されているドキュメントルートが違っているよう。
先程コピーした、<code>ssl.conf</code>ファイルを見てみる。</p>

<p>すると、以下のようにドキュメントルートが設定されている。</p>

<p><code>
DocumentRoot /var/www/html
</code></p>

<p>今回は、<code>public</code>をドキュメントルートとしているので、そちらに変更する。</p>

<p><code>
DocumentRoot /var/www/public
</code></p>

<p>例によって、apacheを再起動して接続確認。無事、接続出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="https://www.k4750.net/2013/10/13/self-signed-cert/">（正しい）オレオレ証明書の作り方 |  K4750.net</a></li>
<li><a href="http://takuya-1st.hatenablog.jp/entry/20100730/1280474385">超簡単・オレオレ証明書の作り方 &ndash; それマグで！</a></li>
<li><a href="http://blog.inouetakuya.info/entry/20110605/1307261417">それ etckeeper でできるよ &ndash; /etc 以下を Git で自動的にバージョン管理 &ndash; 彼女からは、おいちゃんと呼ばれています</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Salesforce] Let’s Encryptの証明書ではSFからのコールアウトを受けられない]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/08/10/sf-lets-encrypt/"/>
    <updated>2016-08-10T11:49:42+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/08/10/sf-lets-encrypt</id>
    <content type="html"><![CDATA[<p>Let’s Encryptで取得した証明書を適用させたサイトへコールアウトしたところエラーが発生し接続出来なかったので、調査してみた。</p>

<!-- more -->


<h1>エラー内容</h1>

<p>エラーは下記の内容。</p>

<blockquote><p>System.CalloutException: sun.security.validator.ValidatorException: <br/>
PKIX path building failed: <br/>
sun.security.provider.certpath.SunCertPathBuilderException: <br/>
unable to find valid certification path to requested target</p></blockquote>

<p>エラー内容で調べてみると、自己証明書、ではSFからのアクセスが出来ない、という情報があり、その中で紹介されているエラーが上記内容と酷似していることがわかった。</p>

<p><a href="http://appirio.co.jp/category/tech-blog/2013/05/apex%E3%82%B3%E3%83%BC%E3%83%AB%E3%82%A2%E3%82%A6%E3%83%88%E3%81%AE%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9part-2/">Apexコールアウトのベストプラクティス:Part 2 &ndash; Appirio Japan</a></p>

<p>しかし、Let’s Encryptは自己証明書ではない…。</p>

<h1>SFが許可するCA</h1>

<p>引き続き調べてみると、どうやらsalesforceは接続出来る認証局 (CA) をホワイトリスト方式で設定しているよう。</p>

<p><a href="https://help.salesforce.com/HTViewSolution?id=000007225&amp;language=en_US">Salesforce.com SSL certificates Salesforce supports</a></p>

<p>以下が許可されている認証局のリスト。</p>

<p><a href="https://developer.salesforce.com/page/Outbound_Messaging_SSL_CA_Certificates">Outbound Messaging SSL CA Certificates &ndash; developer.force.com</a></p>

<p>このリストには、Let’s Encryptがない。<br/>
というわけで、SFがLet’s Encrypt認証局が作成した証明書を適用したサイトへの接続は許可していない、ということになり、冒頭のエラーが発生していた、ということになる。</p>

<p>ちなみに、Let’s Encryptの認証局をリストに加えてほしい、という要望は結構前から上がっているよう。</p>

<p><a href="https://success.salesforce.com/ideaView?id=08730000000E28LAAS">Support Let&rsquo;s Encrypt CA Certificate &ndash; Ideas &ndash; Salesforce Success Community</a></p>

<p>対応する気はないのか、まだ手が回ってないだけなのか…。</p>

<h1>参考</h1>

<ul>
<li><a href="https://jp.globalsign.com/service/knowledge/ca/">認証局 （CA：Certification Authority）とは？ | SSL・電子証明書ならGMOグローバルサイン</a></li>
<li><a href="http://qiita.com/kawaz/items/f90810b9ea823b6556a8">認証局を立ててぼろもうけしたいんですが＞無理な理由を理解しよう &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacのOpenSSLでCSRファイルを作成する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/11/10/generate-csr/"/>
    <updated>2015-11-10T13:57:43+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/11/10/generate-csr</id>
    <content type="html"><![CDATA[<p>いつも忘れてググってしまうので備忘録。</p>

<!-- more -->


<h2>秘密鍵作成</h2>

<h3>乱数ファイル</h3>

<pre><code>$ openssl dgst -md5 /var/log/system.log &gt; rand.dat
</code></pre>

<h3>パスフレーズ付き秘密鍵</h3>

<pre><code>$ openssl genrsa -des3 -rand rand.dat 2048 &gt; server.pem
</code></pre>

<p>キー長は<code>2048</code>が多かったのでそれで。</p>

<h4>パスフレーズの解除方法</h4>

<pre><code>$ openssl rsa -in server.pem -out server.pem
</code></pre>

<h4>パスフレーズなしの秘密鍵</h4>

<pre><code>$ openssl genrsa -rand rand.dat 2048 &gt; server.pem
</code></pre>

<h2>CSR作成</h2>

<blockquote><p>証明書署名要求(CSR:Certificate Signing Request)</p></blockquote>

<pre><code>$ openssl req -new -key server.pem -out csr.pem
</code></pre>

<blockquote><p>Country Name (2 letter code) [AU]:(国名)<br/>
State or Province Name (full name) [Some-State]:(都道府県)<br/>
Locality Name (eg, city) []:(市町村)<br/>
Organization Name (eg, company) [Internet Widgits Pty Ltd]:(組織名)<br/>
Organizational Unit Name (eg, section) []:(部署名)<br/>
Common Name (e.g. server FQDN or YOUR name) []:(サーバ名:FQDN)<br/>
Email Address []:(メールアドレス)</p>

<p>Please enter the following &lsquo;extra&rsquo; attributes<br/>
to be sent with your certificate request<br/>
A challenge password []:<br/>
An optional company name []:</p></blockquote>

<p>部署名、メールアドレスは空でよい。</p>

<p>後はこのCSRを使用して証明書を発行する。</p>

<h2>確認</h2>

<p>CSRの内容確認。</p>

<pre><code>$ openssl req -in req.pem -text
</code></pre>

<p>```
Certificate Request:</p>

<pre><code>Data:
    Version: 0 (0x0)
    Subject: C=JP, ST=Tokyo, L=xxx, O=xxx, CN=xxx.jp
    Subject Public Key Info:
    ...
</code></pre>

<p>```</p>

<p>確認ツール<br/>
<a href="http://tech-unlimited.com/csrcheck.html">CSR内容確認 | CSRの中身を再確認してミスを防止 | すぐに使える便利なWEBツール | Tech-Unlimited</a></p>

<h2>参考</h2>

<p><a href="http://www.karakaram.com/mac-apache-ssl">Macに最初から入っているApacheでSSL通信する環境を整えた | karakaram-blog</a><br/>
<a href="https://www.geotrust.co.jp/support/ssl/csr/apache_openssl_new.html">Apache + OpenSSL CSR生成手順 (新規)｜CSRの生成方法｜マニュアル｜サポート｜SSLサーバ証明書 ジオトラスト</a><br/>
<a href="http://chinmai.net/~osakana/tech-memo/wiki.cgi?page=OpenSSL+CSR%2C+%BE%DA%CC%C0%BD%F1%A4%CA%A4%C9%B3%CE%C7%A7%A5%B3%A5%DE%A5%F3%A5%C9">OpenSSL CSR, 証明書など確認コマンド &ndash; tech-memo＠さかにゃ日記</a></p>
]]></content>
  </entry>
  
</feed>
