<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: salesforce | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/salesforce/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-04-28T12:58:39+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Salesforce]承認プロセスの作り方]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/28/approval-process/"/>
    <updated>2015-04-28T12:43:41+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/28/approval-process</id>
    <content type="html"><![CDATA[<p>承認プロセスを作成してみたので、そのログ。</p>

<!-- more -->


<h2>承認プロセスの作成</h2>

<p><code>商談</code>オブジェクトで作成してみる。<br/>
<img src="/images/2015/04/shonin01.jpg" alt="" /></p>

<h4>ステップ 1. 名前と説明の入力</h4>

<p>プロセス名と一意の名前を適当に入力。<br/>
<img src="/images/2015/04/shonin02.jpg" alt="" /></p>

<h4>ステップ 2. 入力条件の指定</h4>

<p>特定の入力条件で承認プロセスを発動する場合は設定。<br/>
全てレコードで承認を必要とする場合はなしで。<br/>
<img src="/images/2015/04/shonin03.jpg" alt="" /></p>

<h4>ステップ 3. 承認者項目と編集権限のプロパティの指定</h4>

<p>この承認申請を誰に割り当てるのか＝誰に承認してもらうのかを決定<br/>
標準項目としてマネージャーという項目がある。<br/>
<img src="/images/2015/04/shonin04.jpg" alt="" /></p>

<p>これは、ユーザーの項目内で設定しているマネージャーに指定されたユーザーを承認者とするもの。<br/>
<img src="/images/2015/04/shonin05.jpg" alt="" /></p>

<p>今回はなしにしておいて後で設定する。<br/>
<img src="/images/2015/04/shonin06.jpg" alt="" /></p>

<h4>ステップ 4. 通知テンプレートの選択</h4>

<p>承認開始時に送信するメールを設定。<br/>
<img src="/images/2015/04/shonin07.jpg" alt="" /></p>

<p>メールテンプレートは以下から作成可能。<br/>
管理->コミュニケーションテンプレート->メールテンプレート</p>

<p>なしでもよい。</p>

<h4>ステップ 5. 承認ページレイアウトに表示する項目の選択</h4>

<p>承認者が承認時に確認する画面の項目を選択する。<br/>
今回はそのままで。<br/>
<img src="/images/2015/04/shonin08.jpg" alt="" /></p>

<h4>ステップ 6. 申請者の指定</h4>

<p>この承認プロセスを申請できるユーザーを限定できる。<br/>
通常は所有者、となる。<br/>
<img src="/images/2015/04/shonin09.jpg" alt="" /></p>

<p><code>保存</code>する。</p>

<h2>承認ステップの作成</h2>

<p><img src="/images/2015/04/shonin10.jpg" alt="" /></p>

<p>最大15個までのステップを追加可能。</p>

<h4>ステップ 1. 名前と説明の入力</h4>

<p>名前と一意の名前を適当に入力。<br/>
<img src="/images/2015/04/shonin11.jpg" alt="" /></p>

<h4>ステップ 2. ステップ条件の指定</h4>

<p>このステップに入る条件を指定できる。<br/>
今回は全てのレコードとする。<br/>
<img src="/images/2015/04/shonin25.jpg" alt="" /></p>

<h4>ステップ 3. 割り当て先の選択</h4>

<p>承認者の設定。<br/>
都度変えたい場合は、手動、も選べる。<br/>
今回は固定で、特定のユーザーに自動で割り当てる。<br/>
<img src="/images/2015/04/shonin12.jpg" alt="" /></p>

<p><code>保存</code>する。</p>

<h2>アクション</h2>

<p><img src="/images/2015/04/shonin13.jpg" alt="" /></p>

<p>以下の4つを選択可能。<br/>
上記で設定した承認ステップのアクションを作成。<br/>
申請時や承認時、却下時にアクションが起動する。</p>

<ul>
<li>ToDo</li>
<li>電子メールアラート</li>
<li>項目自動更新</li>
<li>アウトバウンドメッセージ</li>
</ul>


<h3>項目自動更新</h3>

<p>名前、一意の名前を適当に作成。<br/>
更新する項目を選択し、どの値にするかを決定する。<br/>
今回はフェーズを更新するとする。</p>

<p><img src="/images/2015/04/shonin14.jpg" alt="" /></p>

<h2>作成完了</h2>

<p>全ての設定が終わったら、<code>有効化</code>しておく。<br/>
<img src="/images/2015/04/shonin15.jpg" alt="" /></p>

<p>警告が出るが、OKをクリック。<br/>
<img src="/images/2015/04/shonin16.jpg" alt="" /></p>

<p>完了。</p>

<h2>承認の流れ</h2>

<p>商談レコードを作成し、承認申請を行う、のだが、承認申請のボタンがデフォルトでは出てなかった。 <br/>
(環境によって変わるかも)<br/>
なので、ページレイアウトから<code>承認申請</code>のボタンを追加した。<br/>
<img src="/images/2015/04/shonin17.jpg" alt="" /></p>

<p>また、同じく関連項目の<code>承認履歴</code>を追加しておく。<br/>
<img src="/images/2015/04/shonin21.jpg" alt="" /></p>

<p>表示されるようになったので、<code>承認申請</code>をクリック。<br/>
<img src="/images/2015/04/shonin18.jpg" alt="" /></p>

<p>警告が表示されるが、OK。<br/>
<img src="/images/2015/04/shonin19.jpg" alt="" /></p>

<p>するとレコードがロックされ、<br/>
<img src="/images/2015/04/shonin20.jpg" alt="" /></p>

<p>設定したメールが飛ぶ。</p>

<p>そして、承認履歴の部分に承認、却下などの項目が現れる。<br/>
<img src="/images/2015/04/shonin22.jpg" alt="" /></p>

<p><code>承認/却下</code>をクリックすると、入力エリアが現れるので、適当にコメントを書いて承認してみる。<br/>
<img src="/images/2015/04/shonin23.jpg" alt="" /></p>

<p>レコードに戻ると、承認されている。設定した項目自動更新も反映されている。<br/>
<img src="/images/2015/04/shonin24.jpg" alt="" /></p>

<p>実際は承認するユーザーは別になると思うが、今回は自分で申請して承認している。</p>

<h2>参考</h2>

<p><a href="https://www.youtube.com/watch?v=b6_9NNTn_Hk">Salesforceをもっと使い倒そう-承認プロセス &ndash; YouTube</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[apex][SF]ApexRESTのテストコードでのパラメータの渡し方]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/20/rest-apex-test/"/>
    <updated>2015-04-20T15:43:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/20/rest-apex-test</id>
    <content type="html"><![CDATA[<p>いくつくか方法があるような。<br/>
そのうち一番楽だったものを。</p>

<!-- more -->


<p>例えば以下のようなクラスを作ったとする。</p>

<p>```
@RestResource(urlMapping=&lsquo;/user/*&rsquo;)
global with sharing class userInfo_API {</p>

<pre><code>@HttpPost
global static ResultData doPost(){
    RestRequest req = RestContext.request;
    String user_id = req.params.get('user_id');

    //何らかの処理
}
</code></pre>

<p>}
```</p>

<p>この場合、<code>user_id</code>を渡すためには以下のように記述します。</p>

<p>```
@isTest
private class Test_userInfo_API {</p>

<pre><code>static testMethod void postTest(){
    RestRequest req = new RestRequest();
    RestContext.request = req;
    req.addParameter('user_id', 'ユーザーID');
    userInfo_API.doPost();
}
</code></pre>

<p>}
```</p>

<p><code>RestRequest</code>のパラメータにセットしておくだけでOKなよう。</p>

<p>余談。<br/>
APIのクラスのみを実行させようとしてもエラーが出る。</p>

<blockquote><p>System.NullPointerException: Attempt to de-reference a null object</p></blockquote>

<p>なのでテストメソッド内では最低限以下は必要。</p>

<p><code>
RestRequest req = new RestRequest();
RestContext.request = req;
userInfo_API.doPost();
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]Apex REST作成時のtips]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/27/apex-rest-tips/"/>
    <updated>2015-03-27T19:45:44+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/27/apex-rest-tips</id>
    <content type="html"><![CDATA[<p>最近よくApexRESTを作成していて、<br/>
その中でちょっとしたtipsというかメモをメモっておきます。</p>

<!-- more -->


<h2>エンドポイント</h2>

<p>エンドポイントの指定には以下のように書きます。</p>

<pre><code>@RestResource(urlMapping='/User/Login')
</code></pre>

<p>この時に、<code>*</code>を使う事も出来ます。</p>

<pre><code>@RestResource(urlMapping='/User/*')
</code></pre>

<p>なので、ここにユーザーIDを入れたりして、そのIDを取得することで、<br/>
よりREST APIらしい(?)挙動でAPIを作成する事が出来ます。<br/>
apex側で送信されたIDを取得するには、以下のように<code>/</code>で区切って取得します。</p>

<pre><code>String accountId = req.requestURI.substring(req.requestURI.lastIndexOf('/')+1);
</code></pre>

<p>公式のドキュメントに正にこのままの内容が載っていました。</p>

<p><a href="https://www.salesforce.com/us/developer/docs/apexcode/Content/apex_rest_code_sample_basic.htm">Apex REST Basic Code Sample</a></p>

<h2>JSON</h2>

<p>返却するJSONの形式ですが、クラスの入れ子や、<code>List</code>を活用することで<br/>
かなり自由度高く作成出来ます。</p>

<p>例えば、以下のようなJSONを返すとします。</p>

<p>```
&ldquo;success&rdquo;:1,
&ldquo;User&rdquo; : {</p>

<pre><code>"user_id": xxx,
"hobby":[
    {"name":"映画", "level":"3"},
    {"name":"サッカー", "level":"1"}
]
</code></pre>

<p>},
&ldquo;request_time&rdquo;: &ldquo;2015-3-27 12:33&rdquo;
```</p>

<p>この場合、以下のようにクラスを複数作り、入れ子構造を作る事で作成出来ます。</p>

<p>```
global class UserData{</p>

<pre><code>global String user_id;
global HobbyData hobby
</code></pre>

<p>}
global class HobbyData{</p>

<pre><code>global String name;
global String level;
</code></pre>

<p>}
global class resultData{</p>

<pre><code>global Integer success;
global UserData User;
global String request_time;
</code></pre>

<p>}
```</p>

<p>作成するときは以下のような感じで。</p>

<p>```
List<HobbyData> hobbies = new List<HobbyData>();
HobbyData hobby1 = new HobbyData();
hobby1.name = &lsquo;映画&rsquo;;
hobby1.level = &lsquo;3&rsquo;;
hobbies.add(hobby1);
HobbyData hobby2 = new HobbyData();
hobby2.name = &lsquo;サッカー&rsquo;;
hobby2.level = &lsquo;1&rsquo;;
hobbies.add(hobby2);</p>

<p>UserData user = new UserData();
user.user_id = &lsquo;xxx&rsquo;;
user.hobby = hobbies;</p>

<p>resultData result = new resultData();
result.success = 1;
result.User = user;
result.request_time = &lsquo;2015-3-27 12:33&rsquo;;</p>

<p>return result;
```</p>

<p>地道な作業にはなりますが、これでわりかし綺麗なJSONが返せました。<br/>
もっと簡単な方法があったらまた書きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ビュー画面に出るチャターフォローボタンを非表示にする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/10/chatter-follow/"/>
    <updated>2015-03-10T16:13:23+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/10/chatter-follow</id>
    <content type="html"><![CDATA[<p>キャンペーンやリードなどのビュー画面を表示した時にアクションの列に表示される、<br/>
緑の＋ボタンは、このリード(やキャンペーンなど)をチャターでフォローする、というボタンなのですが、<br/>
特に使用しないので非表示にする方法を調べました。</p>

<!-- more -->


<p>このボタンを非表示にしたい。</p>

<p><img src="/images/2015/03/chatter1.jpg" alt="チャターフォローボタン" /></p>

<p>これは、フィード追跡、という機能で制御できます。<br/>
<code>カスタマイズ</code> &ndash;> <code>Chatter</code> &ndash;> <code>フィード追跡</code> を選択。</p>

<p><img src="/images/2015/03/chatter2.jpg" alt="フィード追跡" /></p>

<p>追跡をやめたいオブジェクトを選択します。<br/>
上部にある、「フィード追跡の有効化」のチェックを外します。</p>

<p><img src="/images/2015/03/chatter3.jpg" alt="" /></p>

<p>保存します。</p>

<p><img src="/images/2015/03/chatter4.jpg" alt="" /></p>

<p>これでビュー画面からボタンが非表示になりました。</p>

<p><img src="/images/2015/03/chatter5.jpg" alt="" /></p>

<p>このフィード追跡機能はフォローしたレコードにどういう変更があった時に通知するか、を設定できるので、<br/>
上手く使えば便利になるのかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]メモ&添付ファイルに添付されたファイルのURLを取得する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/12/25/get-attachment-url/"/>
    <updated>2014-12-25T11:21:42+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/12/25/get-attachment-url</id>
    <content type="html"><![CDATA[<p>オブジェクトの、「メモ＆添付ファイル」で添付されたファイルを公開URLを使用してダウンロードリンクを作成したい。</p>

<!-- more -->


<p>添付ファイルの名前などはSOQLで取得できるが、そのファイルへのリンクURLそのものは取得出来ない。<br/>
けれど、以下のURLを組み立てる事で、ダウンロードは出来るよう。</p>

<pre><code>https://cs6.salesforce.com/servlet/servlet.FileDownload?file=FILE_ID
</code></pre>

<p>これさえわかれば後は公開URLに適用させてやればよい。<br/>
その際に参照権限を与えておかないといけない。<br/>
その方法は以前書いた画像の表示とほぼ同じ。<br/>
<a href="http://kayakuguri.github.io/blog/2014/10/16/forcecom-sites-profile/">[Salesforce]リッチテキストエリアに保存された画像を一般公開する</a></p>

<p>まずは、サイトの設定から、</p>

<p><img src="/images/2014/12/attach01.jpg" alt="" /></p>

<p>表示ラベルをクリックして詳細を表示し、</p>

<p><img src="/images/2014/12/attach02.jpg" alt="" /></p>

<p>公開アクセス設定から、</p>

<p><img src="/images/2014/12/attach03.jpg" alt="" /></p>

<p>プロファイルの編集を選んで、</p>

<p><img src="/images/2014/12/attach04.jpg" alt="" /></p>

<p>添付ファイルをダウンロードさせたいオブジェクトの権限に参照を与えてやる。</p>

<p><img src="/images/2014/12/attach05.jpg" alt="" /></p>

<p>後は、項目レベルセキュリティの設定で個別な参照権限の設定が必要かと思ったが、これだけでいけた。</p>

<p>設定後は以下のようなアドレスになる。</p>

<pre><code>http://yourdomain.cs6.force.com/yoursite/servlet/servlet.FileDownload?file=FILE-ID
</code></pre>

<h3>参考</h3>

<p><a href="https://developer.salesforce.com/forums/ForumsMain?id=906F0000000AURkIAO">Trigger to get download link/url from attachments in salesforce?</a></p>
]]></content>
  </entry>
  
</feed>
