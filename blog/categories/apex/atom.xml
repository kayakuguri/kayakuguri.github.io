<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: apex | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/apex/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2014-10-22T11:56:56+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[apexで割り算をしたら整数になった]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/10/21/apex-decimal/"/>
    <updated>2014-10-21T16:44:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/10/21/apex-decimal</id>
    <content type="html"><![CDATA[<p>タイトル通り、apex上で割り算をしたら整数になってしまったんですね。<br/>
単純に型付け言語による仕様だったのですが、ちょっとハマったのでメモ。</p>

<!-- more -->


<p>最初、記述したのが以下のコード</p>

<pre><code>Decimal a = 1 / 2;
System.debug(a);  //0
</code></pre>

<p>これだと、<code>0</code>が出力されます。<br/>
<code>Decimal</code>は小数まで表示できる型なのになんで？？？<br/>
と思ったんですが、計算している、<code>1</code>とか<code>2</code>が、<code>Integer</code>型、ってことなんですね。<br/>
なので、これを<code>Decimal</code>型にしてやると計算できます。</p>

<pre><code>Decimal a = Decimal.valueOf(1) / Decimal.valueOf(2);
System.debug(a);  //0.5
</code></pre>

<p>しかし数字を書きたいだけなのにいちいちキャストするのはめんどう。<br/>
なので、以下でも大丈夫。</p>

<pre><code>Decimal a = 1.0 / 2.0;
System.debug(a);  //0.5
</code></pre>

<p>小数点をつけると<code>Decimal</code>型になるようです。</p>

<p>ちなみにやりたかったことは、<code>Datetime</code>型の現在時間を日本時間(GMT+9)で表示することです。</p>

<pre><code>Datetime.now() + (9.0/24.0)
</code></pre>

<p><code>Datetime</code>型の足し算は1日単位で行われるため、24で割ると時間になります。<br/>
しかし、小数点にしないと<code>0</code>になってしまい計算できませんでした。<br/>
<code>format</code>をつかってフォーマットしてしまうと文字列になってしまうため、足し算で対応しています。</p>

<p>・<code>format</code>を使った場合</p>

<pre><code>Datetime.now().format('yyyy-MM-dd hh:mm', 'JST');
</code></pre>

<p><a href="https://sites.google.com/site/odekakeshimasyo/salesforceapexdatetime">Salesforce Apex 日付 時間 &ndash; おでかけしましょ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]SOQLで子リレーションの情報を取得する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/10/15/soql-relation/"/>
    <updated>2014-10-15T17:42:17+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/10/15/soql-relation</id>
    <content type="html"><![CDATA[<p>SOQLにて、あるオブジェクトの子リレーションになっているオブジェクトの情報を取得したい場合の話です。</p>

<!-- more -->


<p>子オブジェクトの参照名は、カスタムオブジェクトの場合は、<code>__r</code>となっていて、<br/>
標準オブジェクトは、お尻に<code>s</code>をつける形となっています。(だいたい)</p>

<p>今回はあまり例で見ることのなかった、<code>campaign</code>、<code>campaignmember</code>で例を示します。</p>

<p>とあるキャンペーンのキャンペーンメンバーのデータを取得する場合、以下のようなSOQLで取得できます。</p>

<pre><code>Select id, (Select cm.id From CampaignMembers cm) From Campaign
</code></pre>

<p>これを開発者コンソールの、Query Editorで実行してみると、以下の様なデータが取得できます。<br/>
(1レコード例)</p>

<pre><code>id: 701O00000007osrIAA
CampaignMembers: [{"Id":"00vO0000002B00XIAS"},{"Id":"00vO0000002B00SIAS"}]
</code></pre>

<p>これをapex上で使用するには、<code>CampaignMmber</code>が配列で入ってくるので、<br/>
for文で回して取得してやる必要があります。<br/>
以下は、３つの<code>campaignID</code>から取得したデータの<code>CampaignMember</code>の<code>status</code>を取得しています。</p>

<pre><code>List&lt;String&gt; campid = new List&lt;String&gt;();
campid.add('701O00000007orzIAA');
campid.add('701O00000007osrIAA');
campid.add('701O00000007l1sIAA');
String soql_c = 'SELECT id,type, (Select Status From CampaignMembers) FROM Campaign WHERE id=:campid';

List&lt;Campaign&gt; campRes;
campRes = Database.query(soql_c);

for(Campaign cdata : campRes){
    for(CampaignMember cmdata : cdata.CampaignMembers){
        System.debug(cmdata.Status);
    }
}
</code></pre>

<h3>参考</h3>

<p><a href="http://blog.flect.co.jp/salesforce/2010/07/soql-3dd0.html">セールスフォースの豆知識: SOQLでのリレーションの辿り方</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]ListとSet]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/10/14/list-set-map/"/>
    <updated>2014-10-14T19:12:55+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/10/14/list-set-map</id>
    <content type="html"><![CDATA[<p>Apexで、配列であるListで重複したデータを取り除きたい、と思ったのだけれど、<br/>
Listじゃなく、Setでやれば重複が許されなかった。</p>

<!-- more -->


<p>JAVAの場合は<code>HashSet</code>というものを使うことで重複したデータが入らないように出来るそう。<br/>
<a href="http://javatechnology.net/java/duplicate-hashset/">Javaの重複文字列の削除方法 | ジャイアントモリンキーのjavaテック</a></p>

<p>これが、Apexの場合は、<code>Set</code>型がデフォルトで、<code>HashSet</code>になっているよう。<br/>
ちなみに、<code>Map</code>も重複が許されない、<code>HashMap</code>のよう。</p>

<p><a href="http://blog.livedoor.jp/minoaw/archives/1703075.html">[ApexCode]コレクション : minoawのブログ</a></p>

<p><a href="https://developer.salesforce.com/page/JP:An_Introduction_to_Apex">Apex コードの概要</a><br/>
コレクション型の部分</p>

<blockquote><p>Set は、プリミティブ型の集合であり、順序の指定はなく、要素の重複は許されません。<br/>
List は、要素の集合です。要素間の順序を保持したい場合に使用します。要素の重複は許されます。</p></blockquote>
]]></content>
  </entry>
  
</feed>
