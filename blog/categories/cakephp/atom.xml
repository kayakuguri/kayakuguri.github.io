<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cakephp | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/cakephp/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2017-11-27T15:51:26+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cakephpのtransitionコンポーネントで送信ボタンを複数配置する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/02/29/cakephp-transition-multi-submit/"/>
    <updated>2016-02-29T18:07:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/02/29/cakephp-transition-multi-submit</id>
    <content type="html"><![CDATA[<p>cakephpのtransitionコンポーネント利用時に送信ボタンを複数配置し、どちらが押されたかを判定してみたメモ。</p>

<!-- more -->


<h1>ビュー</h1>

<p>以下のように <code>name</code> 属性でわけておく。<br/>
今回は、完了、と、一時保存、でわけた。</p>

<p><code>
&lt;?php echo $this-&gt;Form-&gt;submit('一時保存', array('name' =&gt; 'temp')); ?&gt;
&lt;?php echo $this-&gt;Form-&gt;submit('完了', array('name' =&gt; 'comp')); ?&gt;
</code></p>

<h1>コントローラ</h1>

<p>コントローラので受けた際に、以下のように取得する。</p>

<p>```
$all_data = $this->Transition->mergedData();</p>

<p>if(isset($all_data[&ldquo;comp&rdquo;]){</p>

<pre><code>//完了が押された時の処理
</code></pre>

<p>}else if(isset($all_data[&ldquo;temp&rdquo;])){</p>

<pre><code>//一時保存が押された時の処理
</code></pre>

<p>}
```</p>

<p><code>mergedData</code> の中には以下のように格納されている。<br/>
(<code>var_dump</code> した結果)</p>

<p>```
array(2) {
  [&ldquo;hoge_model&rdquo;]=>
  array(87) {</p>

<pre><code>["huga"]=&gt;
string(0) "test"
["foo"]=&gt;
string(0) "bar"
...
</code></pre>

<p>  }
  [&ldquo;temp&rdquo;]=>
  string(12) &ldquo;一時保存&rdquo;
}
```</p>

<p>これであるかどうかの判定で判別が出来るので、処理をそれぞれ変える事が出来た。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePhp]ログイン処理を外部APIを使用して実装する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/23/cakephp-custom-authenticate/"/>
    <updated>2015-04-23T17:30:59+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/23/cakephp-custom-authenticate</id>
    <content type="html"><![CDATA[<p>DBからの情報取得ではなく、外部のAPIにアクセスして認証したかったので<br/>
Authコンポーネントをカスタマイズしてみた。</p>

<!-- more -->


<p>画面遷移としては、ユーザー名(メールアドレス)とパスワードを入力し、<br/>
APIに接続してOKならログインする、というもの。</p>

<h2>Authenticate</h2>

<p>おーせんてぃけーと。<br/>
上記で書いた通り、フォームから送信されたユーザー名とパスワードを使用してログインするので、<br/>
<code>FormAuthenticate</code>を継承する。<br/>
オーバーライドする関数は、<code>authenticate</code>と<code>_findUser</code>。</p>

<p><code>/app/Controller/Component/Auth/UseAPIAuthenticate.php</code></p>

<p>```
&lt;?php
App::uses(&lsquo;FormAuthenticate&rsquo;, &lsquo;Controller/Component/Auth&rsquo;);</p>

<p>class UseAPIAuthenticate extends FormAuthenticate {</p>

<pre><code>public function authenticate(CakeRequest $request, CakeResponse $response)
{
    //コンポーネントの設定を読み込む
    $userModel = $this-&gt;settings['userModel'];
    list(, $model) = pluginSplit($userModel);
    $fields = $this-&gt;settings['fields'];
    if (!$this-&gt;_checkFields($request, $model, $fields)) {
        return false;
    }

    return $this-&gt;_findUser(
        $request-&gt;data[$model][$fields['username']],
        $request-&gt;data[$model][$fields['password']]
    );
}

public function _findUser($username, $password = null)
{
    // ログイン実施
    $this-&gt;user = null;
    $ret = ClassRegistry::init('Api')-&gt;login($username, $password);
    if (! $ret) {
        //なんらかのログインエラー
        return false;
    }

    //ユーザーデータ。中身はニーズに合わせて
    $result = Array(
        "username" =&gt; $username,
        "result" =&gt; $ret
    );
    return $result;
}
</code></pre>

<p>}
```</p>

<p>APIに接続する処理は、Apiというモデルに記述しているとする。<br/>
コンポーネントからモデルを使用するのはあまりよくないともどこかで見たが、標準のAuthコンポーネントも使用していたのでよしとする。<br/>
その際の使用方法は以下のようになる。</p>

<pre><code>ClassRegistry::init('Api')
</code></pre>

<p>ログイン成功後、返却するデータの中身は、配列である必要があるよう。<br/>
<code>true</code>とだけ返してても認証されなかった。</p>

<h2>AppController</h2>

<p>AppControllerにて、上記のAuthコンポーネントの設定を書く。</p>

<p><code>/app/Controller/AppController.php</code></p>

<p>```
&lt;?php
App::uses(&lsquo;Controller&rsquo;, &lsquo;Controller&rsquo;);</p>

<p>class AppController extends Controller {</p>

<pre><code>public $uses = array('User', 'Api');

public $components = array(
    'Session',
    'Auth' =&gt; array(
        'authenticate' =&gt; array(
            'UseAPI' =&gt; array(
                'userModel' =&gt; 'User',
                'fields' =&gt; array(
                    'username' =&gt; 'email'
                )
            )
        )
    )
);

....略....
</code></pre>

<p>}
```</p>

<p>作成したクラスファイル名が、<code>UseAPIAuthenticate</code>の場合は、<code>UseAPI</code>と、Authenticateを引いて指定する。<br/>
これは実際にCakeのAuthコンポーネント内で、以下のように指定されているため。</p>

<p><code>/lib/Cake/Controller/Component/AuthComponent.php</code> 795行目</p>

<pre><code>$className = $class . 'Authenticate';
</code></pre>

<p>で、使用するモデルは、<code>User</code>とし、今回はメールアドレスでのログインということで、<code>username</code>に<code>email</code>を使用する指定をしている。</p>

<h2>UsersController</h2>

<p>で、ログインページで実行される処理を<code>UsersController</code>に書く。</p>

<p>```
&lt;?php
App::uses(&lsquo;AppController&rsquo;, &lsquo;Controller&rsquo;);
class UsersController extends AppController
{</p>

<pre><code>public $uses = array('User', 'Api');

public function beforeFilter()
{
    $this-&gt;Auth-&gt;allow('login', ...認証除外ページ);
    parent::beforeFilter();
}

/**
 * ログイン
 */
public function login()
{
    //POST値がある？
    if (! $this-&gt;request-&gt;is('post')) {
        // ログインフォームを表示
        $this-&gt;logout(); //ログアウトしてログインページを表示させる処理
        return;
    }

    /// authコンポーネント使用
    //ログイン
    $result = $this-&gt;Auth-&gt;login(); //trueかfalseが返ってくる
    $data = $this-&gt;Auth-&gt;user(); //UseAPIAuthenticateで設定したユーザーデータを取得出来る

    if (!$result) {
        $this-&gt;Session-&gt;setFlash(__('ユーザ名もしくはパスワードが正しくありません'));
        return;
    }

    //トップページへ
    $this-&gt;redirect(array('action' =&gt; 'index'));
}

....略....
</code></pre>

<p>}
```</p>

<p><code>$this-&gt;Auth-&gt;login()</code>とするだけでフォームで入力された内容が引き継がれてログイン処理が行われる。<br/>
実際の処理は、<code>/lib/Cake/Controller/Component/AuthComponent.php</code>で行われている。<br/>
ログインの結果は、trueかfalesで返ってくるのでfalseの場合はエラーを表示している。<br/>
ログイン成功時にセットしたユーザーデータは、<code>$this-&gt;Auth-&gt;user()</code>で取得できる。</p>

<h2>Model</h2>

<p>実際にAPIを使用してログインしている箇所は側だけ。中身は割愛。</p>

<p><code>/app/Model/Api.php</code></p>

<p>```
&lt;?php
App::uses(&lsquo;AppModel&rsquo;, &lsquo;Model&rsquo;);
class Sf extends AppModel
{</p>

<pre><code>public function login($email, $pw)
{
    //何かしらAPIへの接続処理

    return $result;
}
</code></pre>

<p>}
```</p>

<h2>View</h2>

<p>最後はビュー。フォーム部分だけ。</p>

<p>```
&lt;?php echo $this->Form->create(&lsquo;User&rsquo;, array(&lsquo;novalidate&rsquo; => true)); ?></p>

<pre><code>&lt;label&gt;
    ログインID&lt;br&gt;
    &lt;?php echo $this-&gt;Form-&gt;input('User.email', array(
        'label' =&gt; false,
        'placeholder' =&gt; ''
    )); ?&gt;
&lt;/label&gt;

&lt;label&gt;
    パスワード&lt;br&gt;
    &lt;?php echo $this-&gt;Form-&gt;input('User.password', array(
        'type' =&gt; 'password',
        'value' =&gt; '',
        'label' =&gt; false,
        'placeholder' =&gt; ''
    )); ?&gt;
&lt;/label&gt;
&lt;?php echo $this-&gt;Session-&gt;flash(); // エラーメッセージ ?&gt;

&lt;?php echo $this-&gt;Form-&gt;submit('ログイン', array(
    'class' =&gt; 'input-submit',
    'div' =&gt; false
)); ?&gt;
</code></pre>

<p>&lt;?php echo $this->Form->end() ?>
```</p>

<p>nameにあたる、<code>User.email</code>の部分はCompnentの設定に合わせる。<br/>
ちなみに、formタグにある、<code>'novalidate' =&gt; true</code>は、<br/>
何も指定しない場合は勝手に、<code>required="required"</code>がついてしまうので、それを付けない設定を一括で指定している。<br/>
バリデーションは他でまとめてしているのでついてないほうがなにかとやりやすい。</p>

<h2>まとめ</h2>

<p>最初は自前でクッキーなどをチェックしていたのだが、<br/>
ページ遷移時の認証機構をcakephpが一括して受け持ってくれるのはかなり楽だった。</p>

<h2>参考</h2>

<p><a href="http://book.cakephp.org/2.0/ja/core-libraries/components/authentication.html#id6">カスタム認証オブジェクトの作成 &ndash; 認証 &mdash; CakePHP Cookbook 2.x ドキュメント</a><br/>
<a href="http://qiita.com/gold1/items/94938956ed02d939b7f2">CakePHP 2.4 md5 で Auth認証 &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePHP]ページタイトルを設定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/20/cakephp-pagetitle/"/>
    <updated>2015-04-20T11:16:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/20/cakephp-pagetitle</id>
    <content type="html"><![CDATA[<p>変な所でハマってしまったのでメモ。</p>

<!-- more -->


<p>cakephpでタイトルの設定をするべくググっていると、どうやら以下で変更が出来る、とのこと。</p>

<pre><code>$this-&gt;set('title_for_layout', 'ページタイトル');
</code></pre>

<p>しかし一向に反映されない。<br/>
それもそのはずで、デフォルトのテンプレート内の<code>title</code>タグ部分を変更してしまっていて、<br/>
固定にしていたので変更が効かなかった。<br/>
そもそも、<code>$this-&gt;set</code>はviewに変数セットするためだけの関数なので、View側と記述を合わせれば<code>title_for_layout</code>である必要がない、ということになる。</p>

<p>ちなみデフォルトテンプレートの初期設定は以下になっているよう。<br/>
<a href="http://ameblo.jp/itboy/entry-11510932141.html">http://ameblo.jp/itboy/entry-11510932141.html</a></p>

<p>```
<title></p>

<pre><code>&lt;?php echo $cakeDescription ?&gt;:
&lt;?php echo $title_for_layout; ?&gt;
</code></pre>

<p></title>
```</p>

<h2>参考</h2>

<p><a href="http://book.cakephp.org/2.0/ja/views.html#view-layouts">ビュー &mdash; CakePHP Cookbook 2.x ドキュメント &ndash; レイアウト</a><br/>
<a href="http://www.t-net.ne.jp/~cyfis/cakephp/controller/pageTitle.html">ページタイトルを設定する &ndash; CakePHPの部屋</a><br/>
<a href="http://satoshi14.hatenablog.com/entry/2013/05/13/125421">CakePHP ページタイトルを一括管理する方法 &ndash; Autumn Like Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePHP]400系エラーが発生した場合にトップページにリダイレクトさせる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/13/cake-php-404-redirect/"/>
    <updated>2015-04-13T15:35:00+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/13/cake-php-404-redirect</id>
    <content type="html"><![CDATA[<p>ググると色々と方法が出てくるので今更ですが、<br/>
記事によって微妙に違ったので、最終的に上手くいったものをメモ。</p>

<!-- more -->


<p>cakephpがエラーをハンドリングしているControllerは以下。<br/>
<code>/lib/Cake/Error/ExceptionRenderer.php</code></p>

<p>この中の、219行目あたりにある、<code>error400</code>の処理が400系エラー時の処理にあたる。<br/>
なので、これをオーバーライドしてやる形でリダイレクト処理を書く。<br/>
(直接編集してもいいが、コアシステムになるのでなるべく触らないほうがよさげ)</p>

<p>まずエラーの際の処理をオーバーライドするためのクラスファイルを作成。<br/>
<code>/lib/Cake/Error/AppExceptionRenderer.php</code></p>

<p>```
&lt;?php
App::uses(&lsquo;ExceptionRenderer&rsquo;, &lsquo;Error&rsquo;);</p>

<p>class AppExceptionRenderer extends ExceptionRenderer {</p>

<pre><code>public function error400($error) { // 400番台のエラー時に呼ばれるメソッドを上書き
    $this-&gt;controller-&gt;redirect(array('controller' =&gt; 'users', 'action' =&gt; 'index'), 301);
}
</code></pre>

<p>}
```</p>

<p>この時に注意点は、<code>redirect</code>関数を呼び出すときに、<code>$this-&gt;controller</code>経由で呼び出さないとエラーになってしまった。<br/>
<code>$this-&gt;redirect()</code>ではダメだった。</p>

<p>で、coreクラスでエラー時に呼び出すクラスを作成したクラスに変更。</p>

<p><code>/app/Config/core.php</code> 79行目付近</p>

<p><code>
'renderer' =&gt; 'ExceptionRenderer',
↓↓
'renderer' =&gt; 'AppExceptionRenderer',
</code></p>

<p>後はコントローラーなどがないページへアクセスすれば、指定のページにリダイレクトが発生する。</p>

<h3>参考</h3>

<p><a href="https://www.markernet.co.jp/blog/2014/06/12/post-1622/">CakePHP2.Xで404 Not Foundエラーをリダイレクトする方法 | WEB制作ブログ</a><br/>
<a href="http://studio-faust.com/programming/258/">CakePHP2 404エラーの場合にトップページにリダイレクト | Web Studio Faust</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakaPHP]ラジオボタンの必須チェック]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/06/cakephp-radio-validation/"/>
    <updated>2015-04-06T12:58:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/06/cakephp-radio-validation</id>
    <content type="html"><![CDATA[<p>またもやバリデーションネタ。<br/>
ラジオボタンにたいして未選択のチェックを入れる方法。</p>

<!-- more -->


<p>モデルのバリデーションルールに、<code>'required' =&gt; true</code>とかを入れればよいだけかとおもいきや、なかなか一筋縄ではいかなった。</p>

<h3>&lsquo;required&rsquo; => true</h3>

<p><code>'required' =&gt; true</code>を設定しただけではバリデーションルールが適用されないよう。<br/>
ルールを同時に設定する必要があるとか。<br/>
このオプションの意味は、指定のキーデータがない場合にチェックされるよう。(たぶん)</p>

<p>ルールには空だとエラー、ということで、<code>notEmpty</code>を追加。<br/>
これで必須のチェックのみは完了。</p>

<h3>required属性</h3>

<p>モデルでバリデーションを指定すると、自動的にinputタグの属性に、<code>required</code>が追加されてしまう。<br/>
このまま送信しようとすると、Chrome限定だと思うが、エラーが出た送信出来ない。</p>

<blockquote><p>An invalid form control with name=&lsquo;xxx&rsquo; is not focusable.</p></blockquote>

<p>Chromeでは<code>required</code>属性が入ったinputでデータがなかった場合は、吹き出しのようなものを出すような仕様になっているが、<br/>
radioボタンの場合はその吹き出しを出す場所がなくてエラーになってしまうみたい。</p>

<h4>回避方法</h4>

<p>回避方法はいくつかあるよう。</p>

<p>１）<br/>
なのでradioボタンの場合はこの属性を入れてはいけない。<br/>
cakeの場合、オプションに<code>'required' =&gt; false</code>を指定してやることで出さないように出来た。</p>

<p>２）<br/>
<code>form</code>タグの生成時に<code>novalidate</code>をtrueでセットしてやればその中のinputタグには、<code>required</code>属性がつかなくなるよう。<br/>
全部にセット出来るという意味ではこれが一番お手軽かも。</p>

<h3>ソース</h3>

<p>最終的なソースの抜粋は以下。</p>

<h4>モデル</h4>

<p>```
&lsquo;radio_data&rsquo; => array(</p>

<pre><code>array(
    'rule' =&gt; 'notEmpty',
    'message' =&gt; '選択して下さい'
),
</code></pre>

<p>)
```</p>

<h4>ビュー</h4>

<p>```
&lt;?php echo $this->Form->input(&lsquo;radio_data&rsquo;, array(</p>

<pre><code>'type' =&gt; 'radio',
'options' =&gt; array('OK', 'NG'),
'required' =&gt; false
</code></pre>

<p>));?>
```</p>

<p>もしくは、</p>

<p>```
&lt;?php echo $this->Form->create(&lsquo;Model&rsquo;, array(&lsquo;novalidate&rsquo; => true));  ?>
<del>中略</del>
&lt;?php echo $this->Form->input(&lsquo;radio_data&rsquo;, array(</p>

<pre><code>'type' =&gt; 'radio',
'options' =&gt; array('OK', 'NG'),
</code></pre>

<p>));?>
```</p>

<h3>参考</h3>

<p><a href="http://stackoverflow.com/questions/7168645/invalid-form-control-only-in-google-chrome">html &ndash; &quot;Invalid form control&quot; only in Google Chrome &ndash; Stack Overflow</a><br/>
<a href="http://d.hatena.ne.jp/cakephper/20130211/1360589926">CakePHP2.3からinputタグにhtml5のrequired属性がつくようになった &ndash; cakephperの日記(CakePHP, Laravel, PHP)</a></p>
]]></content>
  </entry>
  
</feed>
