<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2016-06-23T12:51:19+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Composerを使ってPEARのライブラリをインストールする]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/06/23/pear-composer-install/"/>
    <updated>2016-06-23T12:43:47+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/06/23/pear-composer-install</id>
    <content type="html"><![CDATA[<p>PEARのライブラリをComposer経由でインストールする方法。メモ。</p>

<!-- more -->


<p><code>PEAR::Log</code>をインストールする方法を例にする。</p>

<h1>Pearのリポジトリから取得する</h1>

<p><code>composer.json</code>に以下のように記述し、取得する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "repositories": [
</span><span class='line'>    {
</span><span class='line'>        "type": "pear",
</span><span class='line'>        "url": "http://pear.php.net"
</span><span class='line'>    }
</span><span class='line'>  ],
</span><span class='line'>  "require": {
</span><span class='line'>    "pear-pear.php.net/PEAR": "*@stable",
</span><span class='line'>    "pear-pear.php.net/Log": "*@stable"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>このまま <code>$ composer install</code>すると以下の様なWarningが出てインストールエラーとなる。</p>

<blockquote><p>PEAR repository from <a href="http://pear.php.net">http://pear.php.net</a> could not be loaded. Your configuration does not allow connections to <a href="http://pear.php.net/channel.xml.">http://pear.php.net/channel.xml.</a> See <a href="https://getcomposer.org/doc/06-config.md#secure-http">https://getcomposer.org/doc/06-config.md#secure-http</a> for details.</p></blockquote>

<h1>セキュアじゃないURLからも取得</h1>

<p>これは、取得先のURLが<code>http</code>になっているため。
デフォルトではセキュアなURL、<code>https</code>からしか取得をしない設定になっているよう。</p>

<p>そのため、これを解除して、<code>http</code>からも取得出来るようにしてやる。</p>

<p><a href="https://getcomposer.org/doc/06-config.md#secure-http">https://getcomposer.org/doc/06-config.md#secure-http</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"config": {
</span><span class='line'>  "secure-http": false
</span><span class='line'>},</span></code></pre></td></tr></table></div></figure>


<h1>Composer.json</h1>

<p>というわけで全文は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "config": {
</span><span class='line'>    "secure-http": false
</span><span class='line'>  },
</span><span class='line'>  "repositories": [
</span><span class='line'>    {
</span><span class='line'>        "type": "pear",
</span><span class='line'>        "url": "http://pear.php.net"
</span><span class='line'>    }
</span><span class='line'>  ],
</span><span class='line'>  "require": {
</span><span class='line'>    "pear-pear.php.net/PEAR": "*@stable",
</span><span class='line'>    "pear-pear.php.net/Log": "*@stable"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これで無事、インストール出来た。
使用の際はComposerのライブラリと同じく、<code>vendor/autoload.php</code>を読み込んで使う。</p>

<h1>参考</h1>

<ul>
<li><a href="https://www.softel.co.jp/blogs/tech/archives/4057">【php】PEARをインストールする（Composerで）   at softelメモ</a></li>
<li><a href="http://qiita.com/dozo/items/d892cc964bb28d7a95fc">composer:repositoriesでPEARパッケージをインストール &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel HomesteadのPostgreSQLにPosticoから接続する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/06/09/homestead-postgres-via-homestead/"/>
    <updated>2016-06-09T14:56:23+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/06/09/homestead-postgres-via-homestead</id>
    <content type="html"><![CDATA[<p>まとまって情報がなかったのでメモ。</p>

<!-- more -->


<h1>SSH</h1>

<p>ssh接続する際のユーザー名・パスワードは、デフォルトでは、<code>vagrant/vagrant</code>のよう。
ユーザー名はホスト名とは別で、vagrantを立ち上げた状態で以下のコマンドで確認出来た。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh-config
</span><span class='line'>Host default
</span><span class='line'>  HostName 127.0.0.1
</span><span class='line'>  User vagrant
</span><span class='line'>  Port 2222
</span><span class='line'>  UserKnownHostsFile /dev/null
</span><span class='line'>  StrictHostKeyChecking no
</span><span class='line'>  PasswordAuthentication no
</span><span class='line'>  IdentityFile /Users/USER_NAME/Vagrant/app_folder/.vagrant/machines/default/virtualbox/private_key
</span><span class='line'>  IdentitiesOnly yes
</span><span class='line'>  LogLevel FATAL
</span><span class='line'>  ForwardAgent yes</span></code></pre></td></tr></table></div></figure>


<p>この中の、<code>User vagrant</code>という部分。</p>

<p>SSH Hostは、<code>Homestead.yaml</code>で指定したip。
デフォルトは、<code>192.168.10.10</code>だと思う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ip: "192.168.10.10"</span></code></pre></td></tr></table></div></figure>


<h1>Postgres</h1>

<p>Postgresはデフォルトでは以下の設定になっている。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">ホスト名 </td>
<td align="left"> localhost </td>
</tr>
<tr>
<td></td>
<td align="left"> DB名 </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> ユーザー名 </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> パスワード </td>
<td align="left"> secret </td>
</tr>
</tbody>
</table>


<h1>Postico</h1>

<p>Posticoから接続する際には、Optionsから、<code>Connect via SSH</code>を選択してSSH接続設定をしておく。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Nickname </td>
<td align="left"> (なんでも) </td>
</tr>
<tr>
<td></td>
<td align="left"> Host </td>
<td align="left"> localhost (デフォルト) </td>
</tr>
<tr>
<td></td>
<td align="left"> Port </td>
<td align="left"> 5432 (デフォルト) </td>
</tr>
<tr>
<td></td>
<td align="left"> User </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> Password </td>
<td align="left"> secret </td>
</tr>
<tr>
<td></td>
<td align="left"> Database </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> SSH Host </td>
<td align="left"> 192.168.10.10 </td>
</tr>
<tr>
<td></td>
<td align="left"> Port </td>
<td align="left"> 22 (デフォルト) </td>
</tr>
<tr>
<td></td>
<td align="left"> User </td>
<td align="left"> vagrant </td>
</tr>
<tr>
<td></td>
<td align="left"> Password </td>
<td align="left"> vagrant </td>
</tr>
<tr>
<td></td>
<td align="left"> Private Key </td>
<td align="left"> なし </td>
</tr>
</tbody>
</table>


<p><img src="http://kayakuguri.github.io/images/2016/06/postico_homestead.jpg" alt="" /></p>

<p>これで接続出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="https://laravel.com/docs/5.1/homestead">Laravel Homestead</a></li>
<li><a href="http://qiita.com/megane42/items/1d8ae7444d8c1b10bbd7">Vagrant で作った VM にやってはいけない2つのこと &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[StroyBoardのNavigationBarのタイトルを変更する方法あれこれ]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/06/03/navigation-title-change/"/>
    <updated>2016-06-03T12:05:14+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/06/03/navigation-title-change</id>
    <content type="html"><![CDATA[<p>ナビゲーションバー上のタイトルの変更方法をメモ。</p>

<!-- more -->


<h1>前提</h1>

<p>作りの前提としては以下。</p>

<ul>
<li>Xcode7.3</li>
<li>Swift2.2</li>
<li>StoryBoard上でViewを配置し、メニューから<code>Navigation Controller</code>を配置</li>
<li>ページ間は、セグエ、で接続</li>
</ul>


<h1>次ページがある場合</h1>

<p>次ページがある場合は、ナビゲーションバーの部分をダブルクリックして変更すればそれが反映される。</p>

<p><img src="http://kayakuguri.github.io/images/2016/06/change_ttl01.jpg" alt="" /></p>

<h1>最後のページの場合</h1>

<p>次ページがなく、そのページが遷移先の行き止まりの場合は、そのViewのタイトルをプロパティから設定することで変更が可能。</p>

<p><img src="http://kayakuguri.github.io/images/2016/06/change_ttl02.jpg" alt="" /></p>

<h1>コードから変更</h1>

<p>コードからViewのタイトルを変更すれば動的にも変更可能。
これは遷移先あるなしには関係なし。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.title = "hoge"</span></code></pre></td></tr></table></div></figure>


<p>このタイトルの設定を、<code>viewWillAppear</code>に入れておけばページを表示するたびにタイトルを変更することが可能。</p>

<h1>参考</h1>

<ul>
<li><a href="http://grandbig.github.io/blog/2015/05/10/storyboard-navigationbar/">StoryboardでNavigationBarを表示する &ndash; Takahiro Octopress Blog</a></li>
<li><a href="http://blog.77jp.net/iphone%E9%96%8B%E7%99%BA-uiviewcontroller-%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB-viewdidload-viewwillappear-viewdidappear-viewwilldisappear-viewdiddisappear-ios-%E9%80%86">【iOS】UIViewController ライフサイクル viewDidLoad viewWillAppear viewDidAppear viewWillDisappear viewDidDisappear | iOS &amp; Android &amp; Linux Labs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[swift]alamofireとswiftyjsonを使ってAPIからデータを取得する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/05/26/alamofire-swiftyjson/"/>
    <updated>2016-05-26T18:39:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/05/26/alamofire-swiftyjson</id>
    <content type="html"><![CDATA[<p><a href="http://kayakuguri.github.io/blog/2016/05/23/swift-sf-restapi/">一つ前の投稿</a>でSalesforceへ接続出来たが、HTTP通信の部分とJSONへのパース部分はライブラリを使うのがデファクトスタンダードになりつつある、という情報を仕入れたので試してみる。</p>

<!-- more -->


<h1>インストール</h1>

<p>インストールするライブラリは以下の２つ。</p>

<ul>
<li>Alamofire</li>
<li>SwiftyJSON</li>
</ul>


<p><code>Alamofire-SwiftyJSON</code>というライブラリも同時に使用している紹介記事が多かったのだが、インストールしてみると以下の様な警告が出た。</p>

<blockquote><p>Alamofire-SwiftyJSON has been deprecated in favor of AlamofireSwiftyJSON</p></blockquote>

<p>気になって調べてみると、以下の様なページが。</p>

<ul>
<li><a href="https://github.com/pdutourgeerling/Alamofire-SwiftyJSON-Podspec">pdutourgeerling/Alamofire-SwiftyJSON-Podspec: Updated Podspec for Alamofire-SwiftyJSON</a></li>
</ul>


<p>機械翻訳にかけてみると、どうやらAlamofire-SwiftyJSONはAlamofireの古いバージョンである、1.3を使うようになっており、1.3はSwift2に対応していいない。なので、Alamofireの新しいバージョンをインストールするためには直接Githubのリポジトリを指定してやる必要がある、とのことのよう。</p>

<p>今回は特に使わなくても大丈夫だったのでインストールはしないでおいた。</p>

<p><code>Podfile</code>には以下を追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod 'Alamofire'
</span><span class='line'>pod 'SwiftyJSON'</span></code></pre></td></tr></table></div></figure>


<p><code>$ pod update</code>でインストールした。</p>

<h1>利用</h1>

<p>前回のアクセストークン取得の際のコードは以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let URL = NSURL(string: SF_LOGIN_URL + "/services/oauth2/token")
</span><span class='line'>let req = NSMutableURLRequest(URL: URL!)
</span><span class='line'>req.HTTPMethod = "POST"
</span><span class='line'>let paramString = "grant_type=password&client_id=" + SF_CLIENT_ID + "&client_secret=" + SF_CLIENT_SECRET + "&username=" + SF_USERNAME + "&password=" + SF_PASSWORD
</span><span class='line'>req.HTTPBody = paramString.dataUsingEncoding(NSUTF8StringEncoding)
</span><span class='line'>
</span><span class='line'>let configuration = NSURLSessionConfiguration.defaultSessionConfiguration()
</span><span class='line'>let session = NSURLSession(configuration: configuration, delegate: nil, delegateQueue: NSOperationQueue.mainQueue())
</span><span class='line'>
</span><span class='line'>let task = session.dataTaskWithRequest(req, completionHandler: {
</span><span class='line'>    (let data, let response, let error) -&gt; Void in
</span><span class='line'>    do{
</span><span class='line'>        let json = try NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments) as! NSDictionary
</span><span class='line'>        print(json)
</span><span class='line'>    }catch{
</span><span class='line'>        print("error")
</span><span class='line'>    }
</span><span class='line'>})
</span><span class='line'>task.resume()</span></code></pre></td></tr></table></div></figure>


<h2>import</h2>

<p>ライブラリを読み込むために、ファイルの冒頭に<code>import</code>を追加しておくこと。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import Alamofire
</span><span class='line'>import SwiftyJSON</span></code></pre></td></tr></table></div></figure>


<h2>HTTP通信</h2>

<p>通信は、<code>responseJSON</code>を使う。<br/>
少し前にAlamofireの仕様変更があったらしく、エラーハンドリングの方法が変わったよう。</p>

<ul>
<li>参考 &ndash; <a href="http://ja.stackoverflow.com/questions/16844/alamofire-3-0%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6json%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95">Alamofire 3.0を使用してJSONデータを取得する方法</a></li>
</ul>


<p>通信部分と結果だけ記述するとこんな感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Alamofire.request(.POST, URL!, parameters: parameters)
</span><span class='line'>    .responseJSON { response in
</span><span class='line'>          print(response.result)
</span><span class='line'>          //SUCCESS or FAILURE
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>エラーハンドリング用に分岐させるとこうなる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Alamofire.request(.POST, URL!, parameters: parameters)
</span><span class='line'>    .responseJSON { response in
</span><span class='line'>        switch response.result {
</span><span class='line'>        case .Success(let value):
</span><span class='line'>            print("value: \(value)")
</span><span class='line'>        case .Failure(let error):
</span><span class='line'>            print(error)
</span><span class='line'>        }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>返ってくるエラーは<code>ErrorType</code>の型になっており、前回の記事と同じ取扱で大丈夫だった。</p>

<h2>JSONへパース</h2>

<p>取得した値をJSONへパースするには、以下だけでいける。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let json = JSON(data)</span></code></pre></td></tr></table></div></figure>


<p>また、文字列への変換もプロパティで用意されている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let str:String = json["token"].string</span></code></pre></td></tr></table></div></figure>


<p>実に簡単。</p>

<h1>完成</h1>

<p>アクセストークンを取得する部分だけ書き換えたものコードは以下のようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let URL = SF_LOGIN_URL + "/services/oauth2/token"
</span><span class='line'>let parameters = [
</span><span class='line'>    "grant_type":"password",
</span><span class='line'>    "client_id":SF_CLIENT_ID,
</span><span class='line'>    "client_secret":SF_CLIENT_SECRET,
</span><span class='line'>    "username":SF_USERNAME,
</span><span class='line'>    "password":SF_PASSWORD
</span><span class='line'>]
</span><span class='line'>
</span><span class='line'>Alamofire.request(.POST, URL, parameters: parameters)
</span><span class='line'>    .responseJSON { response in
</span><span class='line'>        switch response.result {
</span><span class='line'>        case .Success(let value):
</span><span class='line'>            let json = JSON(value)
</span><span class='line'>            print(json)            
</span><span class='line'>            
</span><span class='line'>            //let access_token = json["access_token"].string
</span><span class='line'>            //let instance_url = json["instance_url"].string
</span><span class='line'>            //let token_type = json["token_type"].string
</span><span class='line'>            
</span><span class='line'>        case .Failure(let error):
</span><span class='line'>          print("error")
</span><span class='line'>        }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>ヘッダ</h2>

<p>ちなみにヘッダの指定は以下のようにしてアクセストークンを送れた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let headers = [
</span><span class='line'>    "Authorization": "\(self.token_type) \(self.access_token)"
</span><span class='line'>]
</span><span class='line'>Alamofire.request(.POST, URL, parameters: parameters, headers: headers)
</span><span class='line'>  .responseJSON { response in
</span><span class='line'>      (略)</span></code></pre></td></tr></table></div></figure>


<h1>まとめ</h1>

<p>コードはそこまで劇的に減るわけではないが、すっきりした。<br/>
なによりパラメータの指定や、JSONの取り扱いがかなり見やすく簡単になったと思う。<br/>
特に理由がなければライブラリを使えば良い気がする。</p>

<h1>参考</h1>

<ul>
<li><a href="http://cocoadocs.org/docsets/Alamofire/3.4.0/">Alamofire Reference</a></li>
<li><a href="http://qiita.com/yutat93/items/1b6dfe34fa8537cf3329">AlamofireとSwiftyJSONでAPIを叩くチュートリアル &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swiftからsalesforceへOAuth認証してRestAPIへ接続する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/05/23/swift-sf-restapi/"/>
    <updated>2016-05-23T20:18:58+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/05/23/swift-sf-restapi</id>
    <content type="html"><![CDATA[<p>iOSアプリからSalesforceとRestAPIで通信するためにOAuth認証してみた。</p>

<!-- more -->


<h1>認証方法の種類</h1>

<p>Salesforceへ接続するためにはいくつか方法があるが、</p>

<ul>
<li><a href="https://help.salesforce.com/apex/HTViewHelpDoc?id=remoteaccess_oauth_jwt_flow.htm&amp;language=ja">OAuth 2.0 JWT べアラートークンフロー</a></li>
<li><a href="https://help.salesforce.com/apex/HTViewHelpDoc?id=remoteaccess_oauth_SAML_bearer_flow.htm&amp;language=ja">OAuth 2.0 SAML ベアラーアサーションフロー</a></li>
<li><a href="https://help.salesforce.com/apex/HTViewHelpDoc?id=remoteaccess_oauth_web_server_flow.htm&amp;language=ja">OAuth 2.0 Web サーバ認証フロー</a></li>
<li><a href="https://help.salesforce.com/apex/HTViewHelpDoc?id=remoteaccess_oauth_username_password_flow.htm&amp;language=ja">OAuth 2.0 ユーザ名パスワードフロー</a></li>
</ul>


<p>今回はPHPでも利用したことがある、ユーザー名パスワードフロー、を利用してみる。
たぶん、パスワードの保持などが必要など、セキュリティとしては一番低いものっぽいので、JWTなどで認証した方がいいのかもしれない。</p>

<p>SwiftのライブラリとしてCocoapodsで提供されている認証用ライブラリがあるが、このライブラリではWebサーバ認証フローが使われており、不特定多数との接続には向いていない。
(Webサーバ認証フローは、Salesforceのアカウントを取得している前提となる。Facebookログイン、のようなイメージ）</p>

<h1>準備</h1>

<p>Salesforce側へ接続するために必要になる情報は以下。
接続アプリケーションは事前に作成しておく。</p>

<ul>
<li>ログインID</li>
<li>ログインパスワード</li>
<li>セキュリティトークン(IPアドレスを指定している場合は必要なし)</li>
<li>コンシューマ鍵 (クライアントID)</li>
<li>コンシューマの秘密 (クライアントシークレット)</li>
</ul>


<h1>環境変数</h1>

<p>開発中はSandboxへ、リリース時には本番環境へ、と接続先を切り替えたいので、環境変数へ上記の内容を保存する。</p>

<ul>
<li>参考: <a href="http://shibuya-3percent.hatenablog.com/entry/2016/01/18/024948">Swiftでの環境変数を使ってDebug/Releaseで定数を使い分ける</a></li>
</ul>


<p>まず、Build Settingsに値を追加する。</p>

<p><img src="http://kayakuguri.github.io/images/2016/05/sf-swift01.jpg" alt="" /></p>

<p>プロジェクトから、<code>TARGETS</code>ファイルを選択。
<code>Build Setting</code>を選んで、プラスマークをクリックして、<code>Add User-Defined Setting</code>を選ぶ。</p>

<p>左側には設定したい項目名をKeyとして登録。
自動的に、<code>Debug</code>と<code>Release</code>が表示されるので、それぞれの値を入れる。</p>

<p><img src="http://kayakuguri.github.io/images/2016/05/sf-swift02.jpg" alt="" /></p>

<p>次に、<code>Info.plist</code>に定義したキーを呼び出せるように設定する。
<code>Infomation Property List</code>の<code>+</code>をクリックして追加する。</p>

<p><code>Key</code>は実際にコードから呼び出す際に使用する名前となる。
<code>Type</code>は<code>String</code>とする。
<code>Value</code>は定義した値を呼び出すため、<code>${KEY}</code>というように記述する。</p>

<p><img src="http://kayakuguri.github.io/images/2016/05/sf-swift03.jpg" alt="" /></p>

<p>ここまでで設定は完了。
以下のコードで呼び出せる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let SF_LOGIN_URL = NSBundle.mainBundle().objectForInfoDictionaryKey("SF_LOGIN_URL") as! String</span></code></pre></td></tr></table></div></figure>


<h1>OAuth認証</h1>

<p>準備した値を使用してアクセストークンを要求する。
アクセストークンの要求は、指定のエンドポイントへPOSTで値を送信する事で行う。</p>

<p>エンドポイント</p>

<ul>
<li>本番 : <a href="https://login.salesforce.com/services/oauth2/token">https://login.salesforce.com/services/oauth2/token</a></li>
<li>sandbox : <a href="https://test.salesforce.com/services/oauth2/token">https://test.salesforce.com/services/oauth2/token</a></li>
</ul>


<p>送信する値</p>

<ul>
<li>grant_type — <code>password</code></li>
<li>client_id — 接続アプリケーション定義のコンシューマ鍵</li>
<li>client_secret — 接続アプリケーション定義のコンシューマの秘密</li>
<li>username — ユーザ名</li>
<li>password — パスワード (+セキュリティトークン)</li>
</ul>


<p>パスワードはIPを指定していない場合は、パスワードの後ろにセキュリティトークンを繋げてやる必要がある。</p>

<h2>POST送信</h2>

<p>追記：HTTP通信とJSONのパースについてはライブラリを使ったバージョンの方がいいかも。<br/>
<a href="http://kayakuguri.github.io/blog/2016/05/26/alamofire-swiftyjson/">[swift]alamofireとswiftyjsonを使ってAPIからデータを取得する</a></p>

<p>POST送信は、<code>NSURLConnection</code>がディスコンになったので、<code>NSURLSession</code>を使用する必要があるとのこと。
非同期での通信が基本になったよう。</p>

<ul>
<li>参考: <a href="http://qiita.com/fmtonakai/items/30d8b9bcc3dd2b8d228b">Sayonara NSURLConnection &ndash; Qiita</a></li>
</ul>


<p>送信し、返ってきた値をJSONに変換して受け取る。
以下を参考にしてコードを記述した。</p>

<ul>
<li><a href="http://swiftdeveloperblog.com/send-http-post-request-example-using-swift-and-php/">Send HTTP POST Request example using Swift and PHP &ndash; Swift Developer Blog</a></li>
<li><a href="http://ohtacky.blogspot.jp/2015/09/swiftios9json.html">&#12304;swift&#12305;iOS9におけるjsonの取得 sendAsynchronousRequestが使えない&#12290; ~ ネットショップの立ち上げから運営までの作業ログ</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let SF_LOGIN_URL = NSBundle.mainBundle().objectForInfoDictionaryKey("SF_LOGIN_URL") as! String
</span><span class='line'>let SF_CLIENT_ID = NSBundle.mainBundle().objectForInfoDictionaryKey("SF_CLIENT_ID") as! String
</span><span class='line'>let SF_CLIENT_SECRET = NSBundle.mainBundle().objectForInfoDictionaryKey("SF_CLIENT_SECRET") as! String
</span><span class='line'>let SF_USERNAME = NSBundle.mainBundle().objectForInfoDictionaryKey("SF_USERNAME") as! String
</span><span class='line'>let SF_PASSWORD = NSBundle.mainBundle().objectForInfoDictionaryKey("SF_PASSWORD") as! String
</span><span class='line'>
</span><span class='line'>let URL = NSURL(string: SF_LOGIN_URL + "/services/oauth2/token")
</span><span class='line'>let req = NSMutableURLRequest(URL: URL!)
</span><span class='line'>req.HTTPMethod = "POST"
</span><span class='line'>let paramString = "grant_type=password&client_id=" + SF_CLIENT_ID + "&client_secret=" + SF_CLIENT_SECRET + "&username=" + SF_USERNAME + "&password=" + SF_PASSWORD
</span><span class='line'>req.HTTPBody = paramString.dataUsingEncoding(NSUTF8StringEncoding)
</span><span class='line'>
</span><span class='line'>let configuration = NSURLSessionConfiguration.defaultSessionConfiguration()
</span><span class='line'>let session = NSURLSession(configuration: configuration, delegate: nil, delegateQueue: NSOperationQueue.mainQueue())
</span><span class='line'>
</span><span class='line'>let task = session.dataTaskWithRequest(req, completionHandler: {
</span><span class='line'>    (let data, let response, let error) -&gt; Void in
</span><span class='line'>    do{
</span><span class='line'>        let json = try NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments) as! NSDictionary
</span><span class='line'>        print(json)
</span><span class='line'>    }catch{
</span><span class='line'>        print("error")
</span><span class='line'>    }
</span><span class='line'>})
</span><span class='line'>task.resume()</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<ul>
<li><a href="http://qiita.com/sushichop/items/ac4ae99b905ce523c2fe">SwiftでHTTPリクエストする &ndash; Qiita</a></li>
<li><a href="http://www.kaleidosblog.com/nsurlsession-in-swift-get-and-post-data">NSURLSession in Swift: get and post data</a></li>
</ul>


<h2>ATS</h2>

<p>しかしこのまま送信するとエラーが返ってくる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2016-05-23 18:56:48.600 XXX-DEV[30024:28386036] CFNetwork SSLHandshake failed (-9824)
</span><span class='line'>2016-05-23 18:56:48.600 XXX-DEV[30024:28386036] NSURLSession/NSURLConnection HTTP load failed (kCFStreamErrorDomainSSL, -9824)</span></code></pre></td></tr></table></div></figure>


<p>これは、iOS9から導入されたATSという機能によるものらしい。
外部への送信はHTTPSかつセキュアな証明書を使用していないと接続しない、というセキュリティ強化のための機能のよう。
本来はサーバー側で証明書を変更するなどの対応が好ましいが、salesforce側の証明書を変更するのは不可能なため、例外ドメインを指定して通信を許可してやる。</p>

<p>通信したいドメインがATSに対応しているかどうかは、<code>nscurl</code>コマンドを使用すると調べる事ができるよう。</p>

<ul>
<li>参考: <a href="http://blog.kishikawakatsumi.com/entry/2015/10/19/121257">接続先がATS (App Transport Security)に対応しているか、または例外の設定をnscurlコマンドで簡単に調べる &ndash; 24/7 twenty-four seven</a></li>
</ul>


<p>このコマンドではATSの設定を変えながらしらみつぶしにチェックしてくれるコマンド、となっている。
なので、この結果をみながら接続がパスする設定を確認する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nscurl --ats-diagnostics https://test.salesforce.com/</span></code></pre></td></tr></table></div></figure>


<p><code>test.salesforce.com</code>の場合は、
<code>TLS</code>のバージョンを変更しただけでは通信が失敗しているが、
<code>Perfect Forward Secrecy</code>を<code>false</code>とした場合にはパスしていることがわかる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>================================================================================
</span><span class='line'>
</span><span class='line'>Configuring TLS exceptions for test.salesforce.com
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>TLSv1.2
</span><span class='line'>2016-05-23 19:06:14.743 nscurl[30351:28433837] CFNetwork SSLHandshake failed (-9824)
</span><span class='line'>2016-05-23 19:06:14.744 nscurl[30351:28433837] NSURLSession/NSURLConnection HTTP load failed (kCFStreamErrorDomainSSL, -9824)
</span><span class='line'>Result : FAIL
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>TLSv1.1
</span><span class='line'>2016-05-23 19:06:14.814 nscurl[30351:28433837] CFNetwork SSLHandshake failed (-9824)
</span><span class='line'>2016-05-23 19:06:14.815 nscurl[30351:28433837] NSURLSession/NSURLConnection HTTP load failed (kCFStreamErrorDomainSSL, -9824)
</span><span class='line'>Result : FAIL
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>TLSv1.0
</span><span class='line'>2016-05-23 19:06:14.883 nscurl[30351:28433837] CFNetwork SSLHandshake failed (-9824)
</span><span class='line'>2016-05-23 19:06:14.883 nscurl[30351:28433837] NSURLSession/NSURLConnection HTTP load failed (kCFStreamErrorDomainSSL, -9824)
</span><span class='line'>Result : FAIL
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>================================================================================
</span><span class='line'>
</span><span class='line'>Configuring PFS exceptions for test.salesforce.com
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>Disabling Perfect Forward Secrecy
</span><span class='line'>Result : PASS
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>コマンドで<code>--verbose</code>オプションをつけると設定の内容を具体的に表示させる事ができる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nscurl --ats-diagnostics --verbose https://test.salesforce.com/</span></code></pre></td></tr></table></div></figure>


<p>以下は失敗。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    NSExceptionDomains =     {
</span><span class='line'>        "test.salesforce.com" =         {
</span><span class='line'>            NSExceptionMinimumTLSVersion = "TLSv1.2";
</span><span class='line'>        };
</span><span class='line'>    };
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以下は成功。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    NSExceptionDomains =     {
</span><span class='line'>        "test.salesforce.com" =         {
</span><span class='line'>            NSExceptionRequiresForwardSecrecy = false;
</span><span class='line'>        };
</span><span class='line'>    };
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>この結果から<code>info.plist</code>に設定を追加していく。</p>

<ul>
<li><p>参考: <a href="http://shirakiya.hatenablog.com/entry/2015/10/03/234816">iOS9から導入されたATSとは？そして回避する方法は？ &ndash; Be a Engineer.</a></p></li>
<li><p>NSAppTransportSecurity (Dictionary)</p>

<ul>
<li>NSExceptionDomains (Dictionary)

<ul>
<li>test.salesforce.com (Dictionary)

<ul>
<li>NSExceptionRequiresForwardSecrecy (Boolean) &ndash; <code>NO</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><img src="http://kayakuguri.github.io/images/2016/05/sf-swift04.jpg" alt="" /></p>

<p>これでようやく通信に成功し、アクセストークンを取得することが出来た。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "access_token":"(ACCESS_TOKEN)",
</span><span class='line'>  "instance_url":"https://cs5.salesforce.com",
</span><span class='line'>  "id":"https://test.salesforce.com/id/xxx/xxx",
</span><span class='line'>  "token_type":"Bearer",
</span><span class='line'>  "issued_at":"1463998466487",
</span><span class='line'>  "signature":"(SIGNATURE)"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>APIへ接続</h1>

<p>今回は自作したApex Rest APIに接続してみる。
apexの作り方は割愛。エンドポイントはapex内で以下のように指定しているとする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@RestResource(urlMapping='/user/login')</span></code></pre></td></tr></table></div></figure>


<p>APIへの接続には、アクセストークンを取得した際に一緒に取得した<code>instance_url</code>へ接続する。
このURLは環境によって変わることがある。
しかしこのドメインもATSによって接続が失敗してしまう。
今回は簡易だが、ATSの機能自体をオフにすることで対応する。</p>

<p><code>NSAppTransportSecurity</code>の下に、<code>NSAllowsArbitraryLoads</code>を追加し、<code>true</code>にしてやることで機能自体をオフにすることができる。</p>

<p><img src="http://kayakuguri.github.io/images/2016/05/sf-swift05.jpg" alt="" /></p>

<p>APIへ接続する際には、ヘッダにさきほど取得したアクセストークンを入れてやる。</p>

<ul>
<li>参考: <a href="http://stackoverflow.com/questions/28526743/how-to-use-alamofire-with-custom-headers-for-post-request">swift &ndash; How to use Alamofire with custom headers for POST request &ndash; Stack Overflow</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>req.addValue("Bearer \(self.access_token)", forHTTPHeaderField: "Authorization")</span></code></pre></td></tr></table></div></figure>


<p>アクセストークンを取得した後からのコードは以下となる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//OAuth認証後に取得する
</span><span class='line'>var access_token = json["access_token"] as? String
</span><span class='line'>var instance_url = json["instance_url"] as? String
</span><span class='line'>var token_type = json["token_type"] as? String
</span><span class='line'>
</span><span class='line'>//APIへ接続
</span><span class='line'>let URL = NSURL(string: self.instance_url + "/services/apexrest/user/login")
</span><span class='line'>let req = NSMutableURLRequest(URL: URL!)
</span><span class='line'>
</span><span class='line'>req.addValue("\(self.token_type) \(self.access_token)", forHTTPHeaderField: "Authorization") //ヘッダ
</span><span class='line'>
</span><span class='line'>let user_email = "xxx@example.com"
</span><span class='line'>let user_pass = "xxx"
</span><span class='line'>
</span><span class='line'>req.HTTPMethod = "POST"
</span><span class='line'>let paramString = "email=\(user_email)&passwd=\(user_pass)"
</span><span class='line'>req.HTTPBody = paramString.dataUsingEncoding(NSUTF8StringEncoding)
</span><span class='line'>let configuration = NSURLSessionConfiguration.defaultSessionConfiguration()
</span><span class='line'>let session = NSURLSession(configuration: configuration, delegate: nil, delegateQueue: NSOperationQueue.mainQueue())
</span><span class='line'>
</span><span class='line'>let task = session.dataTaskWithRequest(req, completionHandler: {
</span><span class='line'>    (let data, let response, let error) -&gt; Void in
</span><span class='line'>    do{
</span><span class='line'>        let json = try NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments) as! NSDictionary
</span><span class='line'>        print(json)
</span><span class='line'>    }catch{
</span><span class='line'>        print("error")
</span><span class='line'>    }
</span><span class='line'>})
</span><span class='line'>task.resume()</span></code></pre></td></tr></table></div></figure>


<p>これで指定のエンドポイントへ接続が出来た。</p>

<h1>まとめ</h1>

<p>とりあえず、アクセストークンを取得してRest APIへ接続、まで一通り出来た。
後は必要であれば、認証方式をJWTにしたり出来るといいかもしれない。</p>

<p>もしSFへの接続でいいライブラリなどがあれば教えて下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[swift]リターンキーが押されたら次の入力欄へ移動する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/05/17/swift-textfield-change-forcus/"/>
    <updated>2016-05-17T15:48:08+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/05/17/swift-textfield-change-forcus</id>
    <content type="html"><![CDATA[<p>入力欄が複数ある画面で、リターンキーをタップして次の入力欄へ移動する処理を調べたのでメモ。</p>

<!-- more -->


<h1>入力欄の設定</h1>

<p>以下のように、入力欄が２つあり、メールアドレスの入力欄でリターンキーをタップすると、次のパスワード入力欄にフォーカスが移動するようにする。</p>

<p><img src="http://kayakuguri.github.io/images/2016/05/login01.jpg" alt="" /></p>

<p>設定したい入力欄(ログインIDの入力欄)を選択し、inspecotrから<code>tag</code>を設定する。</p>

<p><img src="http://kayakuguri.github.io/images/2016/05/login02.jpg" alt="" /></p>

<p>フォーカスさせる順番に、1,2,3と設定する。</p>

<h1>Delgate</h1>

<p>リターンキーが押されたイベントを検知するために、クラスに<code>UITextFieldDelegate</code>を追加する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ViewController: UIViewController, UITextFieldDelegate {
</span><span class='line'>  ...</span></code></pre></td></tr></table></div></figure>


<p>ロード時のコード内で判定するテキストフィールドの<code>delegate</code>を自身に設定する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>override func viewDidLoad() {
</span><span class='line'>  super.viewDidLoad()
</span><span class='line'>  login_txt.delegate = self
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ここまで設定すると、リターンキーが押された時に、<code>textFieldShouldReturn</code>の関数が自動で実行されるようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func textFieldShouldReturn(textField: UITextField) -&gt; Bool {
</span><span class='line'>  //リターンキーが押された時に実行される
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>フォーカスの移動</h1>

<p>これは以下の記事を使わせてもらった。<br/>
<a href="http://qiita.com/mm36/items/848e93d590ef5c41e43f">ios アプリのテキスト入力で次のテキストボックスにサクッと移動する方法</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func textFieldShouldReturn(textField: UITextField) -&gt; Bool {
</span><span class='line'>    // 今フォーカスが当たっているテキストボックスからフォーカスを外す
</span><span class='line'>    textField.resignFirstResponder()
</span><span class='line'>    // 次のTag番号を持っているテキストボックスがあれば、フォーカスする
</span><span class='line'>    let nextTag = textField.tag + 1
</span><span class='line'>    if let nextTextField = self.view.viewWithTag(nextTag) {
</span><span class='line'>        nextTextField.becomeFirstResponder()
</span><span class='line'>    }
</span><span class='line'>    return true
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>完成</h1>

<p>これでリターンキーが押された時に指定した入力欄にフォーカスが移動出来るように設定出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="http://anthrgrnwrld.hatenablog.com/entry/2015/06/26/204031">テキストフィールドにテキスト入力後、Returnでキーボードを隠す方法 [Swift1.2][UITextField] &ndash; MILLEN BOX</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Heroku] アドオンを共有機能を使って管理する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/05/16/heroku-addon-attach/"/>
    <updated>2016-05-16T16:51:59+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/05/16/heroku-addon-attach</id>
    <content type="html"><![CDATA[<p>herokuでPostgreSQLやRedisなどを他のアプリでも共有したい場合、環境変数をコピペして使っていたのだけれど、
それだとちょっとマズイ場合もあるらしく、attacheing add-on を使ってみた。</p>

<!-- more -->


<h1>共有する理由</h1>

<p>環境変数にパスワードなどをコピペするよりも確実、という理由もあるが、一番大きなところとしては、
メンテナンスなどでアドオンのDB名やユーザー名などの情報が変わってしまうことがあるよう。<br/>
その時に、直接入れているアプリの方では自動的に環境変数も書き換わるため支障はないが、
コピペで設定している他のアプリが合った場合には参照が出来なくなってしまう。
その時に共有設定していれば、設定しているアプリの環境変数も自動で書き換わるためメンテナンスの手間がなくなる。
なによりも突然アクセスできなくなる事がなくなる、というわけ。</p>

<p>コピペなんていう不確定な方法よりもherokuの公式機能に乗った方が確実に安全。</p>

<h1>アドオンの追加</h1>

<p>例えば今回は、<code>dog</code>、というアプリにheroku postgresを入れてみる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons:create heroku-postgresql:hobby-dev -a dog
</span><span class='line'>Creating postgresql-opaque-93277... done, (free)
</span><span class='line'>Adding postgresql-opaque-93277 to dog... done
</span><span class='line'>Setting DATABASE_URL and restarting dog... done, v10
</span><span class='line'>Database has been created and is available</span></code></pre></td></tr></table></div></figure>


<p><a href="https://devcenter.heroku.com/articles/heroku-postgresql">https://devcenter.heroku.com/articles/heroku-postgresql</a></p>

<p>DBの設定内容は、環境変数の<code>DATABASE_URL</code>に保存されている。</p>

<h1>アドオンの共有</h1>

<p>作ったアドオンを別のアプリでも利用してみる。<br/>
その際にアドオンの名前が必要になる。<br/>
上記作成時に名前が返ってきており、<code>postgresql-opaque-93277</code>が今回の名前になる。<br/>
後から確認するには、アプリの一覧を見ればわかる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons -a dog
</span><span class='line'>
</span><span class='line'>Add-on                                       Plan       Price
</span><span class='line'>───────────────────────────────────────────  ─────────  ─────
</span><span class='line'>heroku-postgresql (postgresql-opaque-93277)  hobby-dev  free
</span><span class='line'> └─ as DATABASE</span></code></pre></td></tr></table></div></figure>


<p>名前がわかったところで、この名前を利用して他のアプリと共有させる。<br/>
例えば今回は<code>cat</code> というアプリに共有させたとする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons:attach -a cat postgresql-opaque-93277
</span><span class='line'>Attaching postgresql-opaque-93277 to cat... done
</span><span class='line'>Setting DATABASE vars and restarting cat... done, v17</span></code></pre></td></tr></table></div></figure>


<p>ここでアドオンの名前を指定する。<br/>
アドオン一覧で確認すると<code>dog</code>アプリから共有されていることがわかる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons -a cat
</span><span class='line'>
</span><span class='line'>Add-on                                       Plan       Price
</span><span class='line'>───────────────────────────────────────────  ─────────  ────────────────────
</span><span class='line'>heroku-postgresql (postgresql-opaque-93277)  hobby-dev  (billed to dog app)
</span><span class='line'> ├─ as DATABASE
</span><span class='line'> └─ as DATABASE on dog app</span></code></pre></td></tr></table></div></figure>


<p>DBの設定内容は、環境変数の<code>DATABASE_URL</code>に保存されている。</p>

<p>heorkuのダッシュボード上では以下のように共有されている事がわかるようになっている。</p>

<p><img src="http://kayakuguri.github.io/images/2016/05/attach01.jpg" alt="" /></p>

<h1>アドオンの削除</h1>

<h2>共有の解除</h2>

<p>共有の解除は、<code>detach</code>を使う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons:detach -a cat postgresql-opaque-93277
</span><span class='line'>Removing DATABASE attachment to postgresql-opaque-93277 from cat... done
</span><span class='line'>Unsetting DATABASE vars and restarting cat... done, v18</span></code></pre></td></tr></table></div></figure>


<h2>削除</h2>

<p>削除には、<code>destroy</code>を使う。<br/>
共有をしている場合は、先に共有設定を全て解除しておく必要がある。<br/>
途中、確認のためにアプリ名の入力を求められるので入力する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons:destroy postgresql-opaque-93277
</span><span class='line'>
</span><span class='line'> !    WARNING: Destructive Action
</span><span class='line'> !    This command will affect the app: dog
</span><span class='line'> !    To proceed, type "dog" or re-run this command with --confirm dog
</span><span class='line'>
</span><span class='line'>&gt; dog
</span><span class='line'>Destroying postgresql-opaque-93277 on dog... done, (free)
</span><span class='line'>Removing vars for DATABASE from dog and restarting... done, v13</span></code></pre></td></tr></table></div></figure>


<h1>アドオン名の指定</h1>

<p>ここまでで一通りのアドオンの設定方法は終わりだけど、それぞれのアドオンを追加、共有する時に名前を変更できる。</p>

<h2>追加時</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons:create heroku-postgresql:hobby-dev -a dog --name dog-database --as DOG_DATABASE
</span><span class='line'>Creating dog-database... done, (free)
</span><span class='line'>Adding dog-database to dog... done
</span><span class='line'>Setting DOG_DATABASE_URL and restarting dog... done, v16
</span><span class='line'>Database has been created and is available</span></code></pre></td></tr></table></div></figure>


<p><code>--name</code>は、アドオンの名前を指定している。<br/>
<code>--as</code>は環境変数に追加する名前を指定している。<br/>
<code>as</code>で指定する名前は、アルファベットの大文字で、使用できる記号も決まっている。(<code>-</code>ハイフンは使用できない)</p>

<p>この場合、DBの設定内容は、環境変数の<code>DOG_DATABASE_URL</code>に保存されている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku config -a dog
</span><span class='line'>=== dog Config Vars
</span><span class='line'>DOG_DATABASE_URL: postgres://yo....</span></code></pre></td></tr></table></div></figure>


<h2>共有時</h2>

<p>共有時にはアドオンの名前は設定出来ない(元を参照するので)が、<code>as</code>の指定は可能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons:attach -a cat dog-database --as CAT_DATABASE
</span><span class='line'>Attaching dog-database as CAT_DATABASE to cat... done
</span><span class='line'>Setting CAT_DATABASE vars and restarting cat... done, v19</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<ul>
<li><a href="https://devcenter.heroku.com/articles/heroku-postgresql">Heroku Postgres | Heroku Dev Center</a></li>
<li><a href="https://devcenter.heroku.com/articles/managing-add-ons">Managing Add-ons | Heroku Dev Center</a></li>
<li><a href="http://blog.flect.co.jp/labo/2015/01/addon-a943.html">Addon のアプリ間共有 &ndash; フレクトのHeroku Lab</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce] エラーが出てもエラーレコード以外は更新させる]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/05/13/database-upsert/"/>
    <updated>2016-05-13T17:26:24+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/05/13/database-upsert</id>
    <content type="html"><![CDATA[<p>salesforceでインサート・アップデートする場合、ガバナ制限の関係から都度DMLを発行せずにある程度まとめてやる事が多い。<br/>
その際に、一件でもエラーが出てしまうと他もまきこまれてロールバックされてしまうので、エラー以外は更新させる方法。</p>

<!-- more -->


<h1>通常の方法</h1>

<p>通常の方法、というか、簡易な方法としては、以下のようにインサートする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;Lead&gt; lists = new List&lt;Lead&gt;();
</span><span class='line'>for(xx){
</span><span class='line'>  //Leadを作ってaddする処理
</span><span class='line'>}
</span><span class='line'>insert lists;</span></code></pre></td></tr></table></div></figure>


<p><code>for</code>文の中で<code>insert</code>せずに、リストにまとめておいて外で一回だけ<code>insert</code>する。<br/>
これで、DMLは一回だけ発行したことになるので、節約が可能。<br/>
ループの中ではSOQL、DMLはしない。これがapexの鉄則。</p>

<p>しかしこれだと例えば全部で200件インサートする予定があって、そのうち150件目に不備がありエラーが出た場合、
そこで処理がストップし、それまでにインサートした149件もすべてロールバックされインサート自体がなかったことになる。
要件によってはこの方がいい場合もあるが、エラーが出たレコード以外は全てインサートしたい場合もある。</p>

<h1>Database Class</h1>

<p>そんな時は、<code>Database</code>クラスを使う。<br/>
使い方は、<code>Database.insert()</code>とするだけ。</p>

<p>このメソッドの第1引数に、インサートするオブジェクトのリストを、
第２引数に、エラー時の挙動を入れる。</p>

<ul>
<li>trueの場合はエラー時には全てロールバック(上記の単純な<code>insert</code>と同じ)(デフォルト)</li>
<li>falseの場合はエラーレコード以外はインサートする</li>
</ul>


<p>上記の例を書き換えると、以下のようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;Lead&gt; lists = new List&lt;Lead&gt;();
</span><span class='line'>for(xx){
</span><span class='line'>  //Leadを作ってaddする処理
</span><span class='line'>}
</span><span class='line'>Database.insert(lists, false);</span></code></pre></td></tr></table></div></figure>


<p>これでエラーのレコード以外はインサートさせる事が出来た。<br/>
<code>updata</code>、<code>upsert</code>、<code>delete</code> についても同じ。</p>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.200.0.apexcode.meta/apexcode/apex_methods_system_database.htm">Database クラス</a></p>

<h1>Upsert</h1>

<p>upsertも上記と方法は同じだが、upsertでは外部IDの指定が可能になるが、その方法が少し簡易バージョンとは違った。</p>

<p>例えば、<code>Lead</code>オブジェクトの、カスタム項目、<code>UserID__c</code>を外部IDとして指定する場合。<br/>
簡易バージョンの場合は以下のようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;Lead&gt; lists = new List&lt;Lead&gt;();
</span><span class='line'>//処理中略
</span><span class='line'>upsert lists UserID__c;</span></code></pre></td></tr></table></div></figure>


<p>上記、<code>Database</code>を使ったパターンだと、ドキュメントには以下のように書かれている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>upsert(recordToUpsert, externalIdField, allOrNone)</span></code></pre></td></tr></table></div></figure>


<p>この第二引数の<code>externalIdField</code>が外部IDの指定箇所になるが、型は、<code>Schema.SObjectField</code>となっていて、
そのまま <code>Database.upsert(lists, UserID__c, false)</code>とやるとエラーが出る。</p>

<p>なので以下のようにして指定したい項目の<code>Schema.SObjectField</code>を取得して指定してやる必要がある。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;Lead&gt; lists = new List&lt;Lead&gt;();
</span><span class='line'>//処理中略
</span><span class='line'>Schema.DescribeFieldResult F = Lead. UserID__c.getDescribe();
</span><span class='line'>Schema.sObjectField T = F.getSObjectField();
</span><span class='line'>Database.upsert(lists, T, false);</span></code></pre></td></tr></table></div></figure>


<p>これで外部IDを指定したアップサートが可能となる。</p>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.200.0.apexcode.meta/apexcode/apex_class_Schema_SObjectField.htm">SObjectField クラス</a></p>

<h1>エラーハンドリング</h1>

<p>さて、DMLでエラーが発生した場合、その内容を取得するには、<code>try..catch</code>で例外を拾っていた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try{
</span><span class='line'>  insert lists;
</span><span class='line'>}catch(DmlException e){
</span><span class='line'>  System.debug(e.getMessage());
</span><span class='line'>  System.debug(e.getStackTraceString());
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.200.0.apexcode.meta/apexcode/apex_classes_exception_methods.htm">Exception クラスおよび組み込み例外</a></p>

<p>しかし、<code>Database</code>を使ってinsertなどをした場合は別の方法で取得する。<br/>
というか、エラーだけでなく、結果を一件ずつ取得することが出来るため、それらからエラー分を取得する、という形になる。</p>

<p><code>SaveResult</code>クラスを使用する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;Database.SaveResult&gt; res_lists = Database.insert(lists, false);</span></code></pre></td></tr></table></div></figure>


<p>取得した結果から、成功、失敗を取得し、内容を取得したりする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;Database.SaveResult&gt; res_lists = Database.insert(lists, false);
</span><span class='line'>for (Database.SaveResult res : res_lists) {
</span><span class='line'>  if(res.isSuccess()){
</span><span class='line'>      //成功時
</span><span class='line'>  }else{
</span><span class='line'>      //失敗時
</span><span class='line'>      for(Database.Error err : res.getErrors()) {
</span><span class='line'>          System.debug(err.getStatusCode());
</span><span class='line'>          System.debug(err.getMessage());
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>例えば出力内容は以下のような感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEBUG|REQUIRED_FIELD_MISSING
</span><span class='line'>値を入力してください: [LastName]</span></code></pre></td></tr></table></div></figure>


<p>この <code>SaveResult</code> は、インサート時の結果を取得するためのクラスで、
インサート、アップサート、アップサート、デリート、それぞれのクラスが別々に用意されている。</p>

<ul>
<li>insert &ndash; SaveResult</li>
<li>update &ndash; UndeleteResult</li>
<li>upsert &ndash; UpsertResult</li>
<li>delete &ndash; DeleteResult</li>
</ul>


<p>詳しくは、Apex 開発者ガイド、を参照。<br/>
(直接のリンクがなぜか貼れなかった）</p>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.apexcode.meta/apexcode/apex_namespace_Database.htm">Apex開発者ガイド &ndash; リファレンス &ndash; Database名前空間</a></p>

<h1>まとめ</h1>

<p>以上で一通り想定していた動作をさせることができた。<br/>
エラー時に他をロールバックするかどうかとかは、結構忘れがちになるけれど、結構難しい問題。<br/>
仕様策定時にきちんと考慮していきたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ターミナル録画サービスAsciinemaを使ってみてプロンプトも変更した]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/04/26/asciinema/"/>
    <updated>2016-04-26T13:36:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/04/26/asciinema</id>
    <content type="html"><![CDATA[<p>簡単にターミナルでの操作を録画してアップロード、シェア出来るサービス、Asciinema、を使ってみた。</p>

<p><a href="https://asciinema.org/">https://asciinema.org/</a></p>

<!-- more -->


<h1>インストール</h1>

<p>様々用意されている。<br/>
<a href="https://asciinema.org/docs/installation">https://asciinema.org/docs/installation</a></p>

<p>今回はHomebrewで入れてみた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install asciinema</span></code></pre></td></tr></table></div></figure>


<p>バージョン確認。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ asciinema --version
</span><span class='line'>asciinema 1.1.1</span></code></pre></td></tr></table></div></figure>


<h1>ユーザー登録</h1>

<p>ユーザー登録用のURLを表示させる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ asciinema auth
</span><span class='line'>Open the following URL in a browser to register your API token and assign any recorded asciicasts to your profile:
</span><span class='line'>https://asciinema.org/connect/1b327ae7-6fdd-4784-81a0-xxxxxxxx</span></code></pre></td></tr></table></div></figure>


<p>フォームからメールアドレスを入力して送信。</p>

<p><img src="http://kayakuguri.github.io/images/2016/04/asciinema01.jpg" alt="" /></p>

<p>メールに登録用フォームのURLが送信されるので、15分以内にリンクをクリックします。 <br/>
クリック後、任意のユーザー名を入力し、クリック。<br/>
（ここで一度何故かエラーのようなページに飛ばされたが、無事登録ができていた。)</p>

<p><img src="http://kayakuguri.github.io/images/2016/04/asciinema02.jpg" alt="" /></p>

<h1>録画開始</h1>

<p>以下のコマンドで録画が開始される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ asciinema rec
</span><span class='line'>~ Current terminal size is 150x50.
</span><span class='line'>~ It may be too big to be properly replayed on smaller screens.
</span><span class='line'>~ You can now resize it. Press &lt;Enter&gt; to start recording.
</span><span class='line'>
</span><span class='line'>~ Asciicast recording started.
</span><span class='line'>~ Hit Ctrl-D or type "exit" to finish.</span></code></pre></td></tr></table></div></figure>


<p>書いてある通り、<code>Ctrl-D</code>で録画終了。<br/>
そのままアップロードするかどうかを聞かれる。<br/>
アップロードを選択すると、完了後にURLが表示される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~ Asciicast recording finished.
</span><span class='line'>~ Press &lt;Enter&gt; to upload, &lt;Ctrl-C&gt; to cancel.
</span><span class='line'>
</span><span class='line'>https://asciinema.org/a/2l7dg8ov3eftv7v9xxxxxxx</span></code></pre></td></tr></table></div></figure>


<p>アップロードされたURLにアクセスすると、操作したものがそのまま録画されていることがわかる。<br/>
注意としては、録画が始まってからは操作していない時間も含めてそのまま録画されるため、考えたり調べたりしてしまうと動画上は何もしてない時間になってしまう。<br/>
予めメモっておくなどが必要そう。</p>

<h1>紐付け</h1>

<p>アップロードした動画を確認してみると、先程登録したユーザー名ではなく、ターミナルに表示されているコンピューター名のユーザーでアップロードされたことになっている。<br/>
登録したユーザーと紐付いてない状態。<br/>
このままでは動画を削除したり編集したりが出来ないため、紐付ける。</p>

<p>紐付けは簡単で、ターミナルで先程と同じく、<code>$ asciinema auth</code>とコマンドするだけ。<br/>
同じようにURLが表示されるのでそのURLにアクセスすると、すでにログインしている状態なので、アップした動画がさきほど登録したユーザーの動画として認識される。</p>

<p>これで動画を編集出来るようになった。</p>

<p><img src="http://kayakuguri.github.io/images/2016/04/asciinema03.jpg" alt="" /></p>

<p>ちなみにアップロードしたままだと動画はプライベートの設定になっている。<br/>
プライベート、といってもURLを知っていれば誰でも見られる状態。<br/>
これをpublicにすれば、公式のサイトから最近アップされたもの、として表示されたりするようになるみたい。</p>

<h1>ターミナルの名前表記(プロンプト)</h1>

<p>ターミナルの内容がそのまま録画されるため、<code>$</code>の左側もそのまま表示されます。<br/>
(この部分を、プロンプト、というよう）<br/>
自分の設定ではここに本名が表示されてしまっているのでこのままではちょっとイヤ。<br/>
(usernameの部分に名前が出てる）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>username@username ~/Desktop $</span></code></pre></td></tr></table></div></figure>


<p>（デフォルトでは、<code>hostname:Desktop</code>になっているそう）</p>

<p>これをカスタマイズする。</p>

<p>ターミナルはzshを入れているので、出力内容は、<code>PROMPT</code>で設定されているよう。<br/>
出力してみると以下のような内容。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo $PROMPT
</span><span class='line'>%F{135}%n%f@%F{166}%m%f %F{118}%~%f $git_info[prompt]$</span></code></pre></td></tr></table></div></figure>


<p><code>%F{135}</code>といのは色の指定。<code>%F</code>と<code>%f</code>で囲まれた範囲に色をつける。<br/>
<code>%n</code>はユーザー名。<br/>
<code>%m</code>はコンピューターのホスト名。<br/>
<code>%~</code>は、カレントディレクトリ。<br/>
<code>$git_info[prompt]</code>は、現在のGitリポジトリ表記。<br/>
(gitリポジトリ表記は色々バリエーションがある？）</p>

<p>この辺は凝りだすと沼っぽいので、とりあえず名前だけいらないと思ったので、カレントディレクトリとGitのリポジトリ名だけでにしておいた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PROMPT='%F{8}%~%f $git_info[prompt] $ '</span></code></pre></td></tr></table></div></figure>


<p>これをデフォルトの設定にするために、<code>~/.zshrc</code>に追記しておく。<br/>
これでユーザー名などが表記されなくなった。</p>

<h2>Rubyのバージョン表記</h2>

<p>いつのまにやらrubyのバージョンが右側に表示されるようになっている。<br/>
これはこれで便利なんだろうけれど、残念ながらruby使いではないので、これを非表示にしてみる。</p>

<p>右側に表示させるには、<code>RPROMPT</code>という環境変数を使うよう。<br/>
結局どこでこの設定をしているかがわからなかったので、同じく、<code>~/.zshrc</code>に設定し、上書きして対処した。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RPROMPT=</span></code></pre></td></tr></table></div></figure>


<h1>サンプル</h1>

<p>最後に、Asciinemaのバージョンを表記しただけの内容を録画してアップロードしてみたものを埋め込んでおく。</p>

<p><a href="https://asciinema.org/a/43594"><img src="https://asciinema.org/a/43594.png" alt="asciicast" /></a></p>

<h1>参考</h1>

<ul>
<li><a href="http://qiita.com/ka_/items/f1ebdde1e7fdf41c80a3">Asciinema の紹介 &ndash; Qiita</a></li>
<li><a href="http://rcmdnk.github.io/blog/2013/12/11/blog-asciinema/">ターミナル操作を録画して公開する: Asciinema</a></li>
<li><a href="https://asciinema.org/docs/usage">Usage &ndash; asciinema</a></li>
</ul>


<h2>プロンプト関連</h2>

<ul>
<li><a href="http://qiita.com/Cside/items/8f618409ac8cc368f6d1">いまのPROMPT &ndash; Qiita</a></li>
<li><a href="https://wiki.archlinuxjp.org/index.php/Zsh?rdfrom=https%3A%2F%2Fwiki.archlinux.org%2Findex.php%3Ftitle%3DZsh_%28%25E6%2597%25A5%25E6%259C%25AC%25E8%25AA%259E%29%26redirect%3Dno#.E3.83.97.E3.83.AD.E3.83.B3.E3.83.97.E3.83.88.E3.81.AE.E3.82.AB.E3.82.B9.E3.82.BF.E3.83.9E.E3.82.A4.E3.82.BA">Zsh &ndash; ArchWiki</a></li>
<li><a href="http://tegetegekibaru.blogspot.jp/2012/08/zsh_2.html">てげてげきばる日記: zsh 設定 &ndash; プロンプト &ndash;</a></li>
<li><a href="http://baqamore.hatenablog.com/entry/2014/05/26/221233">zsh のプロンプト &ndash; ばかもりだし</a></li>
<li><a href="http://qiita.com/iwazer/items/5f57a80b8aac0f4e9839">Bashのプロンプトを変える(OSX) &ndash; Qiita</a></li>
<li><a href="http://www.yoheim.net/blog.php?q=20140309">[Mac] ターミナルの$前の出力内容をカスタマイズする- YoheiM .NET</a></li>
<li><a href="http://news.mynavi.jp/column/zsh/002/">漢のzsh (2) 取りあえず、プロンプトを整えておく。カッコつけたいからね | マイナビニュース</a></li>
<li><a href="http://makimoto.hatenablog.com/entry/show-rbenv-version-on-zsh-prompt">zsh で rbenv の Ruby のバージョンをプロンプトに表示させる &ndash; Stats of the Rivers</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UbuntuでApacheの環境変数を設定する方法]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/04/22/ubuntu-env/"/>
    <updated>2016-04-22T16:21:16+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/04/22/ubuntu-env</id>
    <content type="html"><![CDATA[<p><a href="http://kayakuguri.github.io/blog/2015/05/26/vagrant-env/">以前に書いた環境変数の設定方法</a>は、centOS用だったので(後で知った）、ubuntuでの方法も書いておく。<br/>
といってもパスのメモだけど。</p>

<!-- more -->


<p>Ubuntuでの設定が必要になった理由としては、いつも愛用している<a href="https://box.scotch.io/">Scotchbox</a>がUbuntuのディストリビューションだったため。</p>

<h1>設定ファイルのパス</h1>

<p>以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/apache2/envvars</span></code></pre></td></tr></table></div></figure>


<p>このファイルの末尾などに、以下のように追記する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export HOGE=xxx</span></code></pre></td></tr></table></div></figure>


<h1>apatch再起動</h1>

<p><code>service</code>で再起動。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo service apache2 restart</span></code></pre></td></tr></table></div></figure>


<p>以上で設定完了。</p>

<h1>取得</h1>

<p>取得は通常通り、<code>getenv</code>で可能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>getenv('HOGE');</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<p><a href="http://www.yamamo10.jp/yamamoto/comp/home_server/ubuntu_server/apache/index.php">自宅サーバー(ubuntu server Apache)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nodeでnode_modulesにパスを通す]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/04/11/node-express-server/"/>
    <updated>2016-04-11T18:07:45+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/04/11/node-express-server</id>
    <content type="html"><![CDATA[<p>nodeのexpressサーバを起動しようとしてexpressモジュールがない、と言われた。<br/>
モジュールは入れているはずなのでパスが通ってない、ということだったのだが、モジュールのパスをどこに通したらいいのか、のメモ。</p>

<!-- more -->


<h1>expressのインストール</h1>

<p>順を追って、まずはexpressのインストール。<br/>
グローバルに入れた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g express</span></code></pre></td></tr></table></div></figure>


<p>参考にさせてもらったページでは、以下のようにパスを通す、とあったのだけれどそれではダメだった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># node_modules
</span><span class='line'>export NODE_PATH=/usr/local/lib/node_modules</span></code></pre></td></tr></table></div></figure>


<p>動作させてみたコードは以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app = require('express')();
</span><span class='line'>
</span><span class='line'>app.get('/', function(req, res){
</span><span class='line'>        res.send('hello world');
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>app.listen(3000);</span></code></pre></td></tr></table></div></figure>


<p>エラー内容は以下の様な感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module.js:338
</span><span class='line'>    throw err;
</span><span class='line'>          ^
</span><span class='line'>Error: Cannot find module 'express'
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h1>足りないモジュールのインストール</h1>

<p>expressのモジュールが足らない、と言われている。<br/>
調べると、足りてないモジュールを一気にインストールするコマンドがある、とのことでそれも実行してみたが、expressはもちろん入っているので効果なし。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g npm-install-missing</span></code></pre></td></tr></table></div></figure>


<h1>モジュールのパスを調べて通す</h1>

<p>色々調べると、以下のコマンドでモジュールの場所を表示させることが可能だった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm root -g
</span><span class='line'>/Users/{USER_NAME}/.nodebrew/node/v0.12.7/lib/node_modules</span></code></pre></td></tr></table></div></figure>


<p>実際に<code>li</code>してみると、<code>express</code>なども入っているようだったので、そこにパスを改めて通す。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># node_modules
</span><span class='line'>export NODE_PATH="/Users/{USER_NAME}/.nodebrew/node/v0.12.7/lib/node_modules"</span></code></pre></td></tr></table></div></figure>


<p>設定ファイルを読み込み直すかターミナルを再起動。<br/>
再び上記のコードからサーバを起動させてみたところ、無事、 <code>http://localhost:3000</code>にアクセス出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="http://qiita.com/pakiln/items/826a9199697576e2e24a">expressパッケージとコマンドのインストール &ndash; Qiita</a></li>
<li><a href="http://qiita.com/KENJU/items/5b2fda95be4685a750e1">【Node.js】足りないモジュールをたったの一行でインストールするコマンド &ndash; Qiita</a></li>
<li><a href="http://qiita.com/joe-re/items/12987cdeee506dea3889">グローバルにインストールしたnode moduleがnot foundになる時の対処 &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atomのプラグイン、Git Time Machineを入れてみた]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/03/30/git-time-machine/"/>
    <updated>2016-03-30T11:06:18+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/03/30/git-time-machine</id>
    <content type="html"><![CDATA[<p>Gitのコミット履歴を差分形式で確認できるatomプラグインがGithubのトレンドで上がってきていたので使ってみた。</p>

<!-- more -->


<h1>インストール</h1>

<p>まずはインストール。<br/>
atomのパッケージからインストールする。</p>

<p>上部メニューから、<code>Preference</code>を選んで、<code>Install</code>から、 <code>git-time-machine</code>で検索。</p>

<p><img src="http://kayakuguri.github.io/images/2016/03/git-time-machine01.jpg" alt="" /></p>

<p>インストールする。<br/>
（少し時間がかかった。）</p>

<h1>起動</h1>

<p>インストール後、念のため再起動しておく。<br/>
<code>コマンド+シフト+P</code>を押して、<code>Git Time Machine</code>を起動。</p>

<p><img src="http://kayakuguri.github.io/images/2016/03/git-time-machine02.jpg" alt="" /></p>

<p>すると下部にコミットした場所がグラフのような形で表示される。</p>

<p><img src="http://kayakuguri.github.io/images/2016/03/git-time-machine03.jpg" alt="" /></p>

<p>グラフの●部分をクリックすると選択中のファイルとの差分が表示できる。<br/>
(以下は公式のgitアニメから)</p>

<p><img src="http://kayakuguri.github.io/images/2016/03/git-time-machine04.jpg" alt="" /></p>

<p>もちろんそのままの状態でファイルを編集可能。</p>

<p>こうやって過去の状態を確認しながらプログラムが出来るので便利そう。</p>

<h1>リンク</h1>

<p><a href="https://github.com/littlebee/git-time-machine">littlebee/git-time-machine &ndash; Github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cakephpのtransitionコンポーネントで送信ボタンを複数配置する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/02/29/cakephp-transition-multi-submit/"/>
    <updated>2016-02-29T18:07:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/02/29/cakephp-transition-multi-submit</id>
    <content type="html"><![CDATA[<p>cakephpのtransitionコンポーネント利用時に送信ボタンを複数配置し、どちらが押されたかを判定してみたメモ。</p>

<!-- more -->


<h1>ビュー</h1>

<p>以下のように <code>name</code> 属性でわけておく。<br/>
今回は、完了、と、一時保存、でわけた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php echo $this-&gt;Form-&gt;submit('一時保存', array('name' =&gt; 'temp')); ?&gt;
</span><span class='line'>&lt;?php echo $this-&gt;Form-&gt;submit('完了', array('name' =&gt; 'comp')); ?&gt;</span></code></pre></td></tr></table></div></figure>


<h1>コントローラ</h1>

<p>コントローラので受けた際に、以下のように取得する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$all_data = $this-&gt;Transition-&gt;mergedData();
</span><span class='line'>
</span><span class='line'>if(isset($all_data["comp"]){
</span><span class='line'>  //完了が押された時の処理
</span><span class='line'>  
</span><span class='line'>}else if(isset($all_data["temp"])){
</span><span class='line'>  //一時保存が押された時の処理
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>mergedData</code> の中には以下のように格納されている。<br/>
(<code>var_dump</code> した結果)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>array(2) {
</span><span class='line'>  ["hoge_model"]=&gt;
</span><span class='line'>  array(87) {
</span><span class='line'>    ["huga"]=&gt;
</span><span class='line'>    string(0) "test"
</span><span class='line'>    ["foo"]=&gt;
</span><span class='line'>    string(0) "bar"
</span><span class='line'>    ...
</span><span class='line'>  }
</span><span class='line'>  ["temp"]=&gt;
</span><span class='line'>  string(12) "一時保存"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これであるかどうかの判定で判別が出来るので、処理をそれぞれ変える事が出来た。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カスタム設定を作成して取得してみる]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/02/01/custom-setting/"/>
    <updated>2016-02-01T15:15:19+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/02/01/custom-setting</id>
    <content type="html"><![CDATA[<p>カスタム設定、というカスタムオブジェクトの一種でSOQLいらずでもっと手軽に扱える <code>カスタム設定</code> とうものを知ったので、<br/>
作り方から使い方を調べてみた。</p>

<!-- more -->


<blockquote><p>カスタム設定はカスタムオブジェクトと類似しており、アプリケーション開発者は、カスタムデータセットの作成の他に、組織、プロファイル、または特定のユーザに対しカスタムデータを作成して関連付けることができます。<br/>
<a href="https://help.salesforce.com/HTViewHelpDoc?id=cs_about.htm&amp;language=ja">https://help.salesforce.com/HTViewHelpDoc?id=cs_about.htm&amp;language=ja</a></p></blockquote>

<p>今回は全体で使用する、環境変数、としてカスタム設定を作成してみた。</p>

<h2>作成</h2>

<p>[開発] → [カスタム設定] にアクセス。<br/>
まずは新規でカスタム設定、を作る。<br/>
オブジェクトのようなもの。</p>

<p><img src="http://kayakuguri.github.io/images/2016/01/custom_setting02.jpg" alt="" /></p>

<p>今回は以下のように作成した。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> 表示ラベル </td>
<td align="left"> 環境変数</td>
</tr>
<tr>
<td></td>
<td align="left"> オブジェクト名 </td>
<td align="left"> EnvironmentVars</td>
</tr>
<tr>
<td></td>
<td align="left"> 設定種別 </td>
<td align="left"> リスト</td>
</tr>
<tr>
<td></td>
<td align="left"> 表示 </td>
<td align="left"> 公開</td>
</tr>
<tr>
<td></td>
<td align="left"> 説明 </td>
<td align="left"> </td>
</tr>
</tbody>
</table>


<p><img src="http://kayakuguri.github.io/images/2016/01/custom_setting03.jpg" alt="" /></p>

<p>設定種別は、リスト、と、階層、があり、<br/>
階層、は、ユーザーやプロファイルごとに同じ項目で違う値を設定したり出来るよう。<br/>
どのユーザーが使用しているかによって変数の値を変更できるようになるので、<br/>
そういうことを実現したい時に便利っぽい。 <br/>
今回は全員同じにしたいので、リスト、にしておいた。</p>

<p>また、表示、は、公開・保護、とある。<br/>
公開、だとSOAP APIでも取得できるようになったり、とオープンな状態？になるよう。<br/>
特に秘匿する内容でもないので、公開、にしておいた。</p>

<p>次に作成したカスタム設定内にカスタム項目を追加する。<br/>
作成したカスタム設定から、新規、をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2016/01/custom_setting04.jpg" alt="" /></p>

<p>通常の項目作成と同じ流れで、型を選択し、内容を埋めていく。<br/>
今回は以下のように作成した。<br/>
目的としては、SitesのURLを環境変数として持っておくためのもの。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> 型 </td>
<td align="left"> テキスト</td>
</tr>
<tr>
<td></td>
<td align="left"> 項目の表示ラベル </td>
<td align="left"> Sites</td>
</tr>
<tr>
<td></td>
<td align="left"> 文字数 </td>
<td align="left"> 255</td>
</tr>
<tr>
<td></td>
<td align="left"> 項目名 </td>
<td align="left"> Sites</td>
</tr>
<tr>
<td></td>
<td align="left"> 説明、など </td>
<td align="left"> </td>
</tr>
</tbody>
</table>


<p><img src="http://kayakuguri.github.io/images/2016/01/custom_setting05.jpg" alt="" /></p>

<p>ここまででオブジェクトと項目が作成出来たので、実際にデータを入れていく。<br/>
作成したカスタム設定の<code>Manege</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2016/01/custom_setting06.jpg" alt="" /></p>

<p>リストが表示されるので、新規、をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2016/01/custom_setting07.jpg" alt="" /></p>

<p>内容を記入して保存。</p>

<p><img src="http://kayakuguri.github.io/images/2016/01/custom_setting08.jpg" alt="" /></p>

<h2>取得</h2>

<p>作成したデータをApexで取得する。</p>

<p>前述の通り、取得の際にはSOQLを発行する必要がなく、以下のようにメソッドレベルで取得可能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Map&lt;String, EnvironmentVars__c&gt; settingMap = EnvironmentVars__c.getAll();
</span><span class='line'>
</span><span class='line'>for (String key : settingMap.keySet()) {
</span><span class='line'>    EnvironmentVars__c env = settingMap.get(key);
</span><span class='line'>    System.debug('**DEBUG** ' key + ' / ' + env.SitesURL__c);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>SOQLを発行しないので、ガバナ的にも優しく、内容はキャッシュされるので動作も高速。<br/>
環境変数のように決まった値であれば便利に使えるかもしれない。</p>

<h2>参考</h2>

<p><a href="https://help.salesforce.com/HTViewHelpDoc?id=cs_accessing.htm&amp;language=ja">カスタム設定へのアクセス</a><br/>
<a href="https://odekakeshimasyo.io/salesforce-apex-customsetting.html">Salesforce Apex カスタム設定 | odekakeshimasyo.io</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lumenのテーブル名を既存のものに合わせる]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/01/05/lumen-eloquent/"/>
    <updated>2016-01-05T17:37:23+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/01/05/lumen-eloquent</id>
    <content type="html"><![CDATA[<p>lumenやlaravelではモデル名が単数形で、DBのテーブル名はその複数形、が基本の仕様となっている。<br/>
なので、新規にテーブル名を作成する場合や、テーブル名が複数形であればとくに問題ないのだが、<br/>
既存のテーブル名を利用する際に単数形となってしまっている時には明示的に指定してやる必要がある。<br/>
指定は<code>Eloquent</code>を利用してやる。</p>

<!-- more -->


<blockquote><p>Eloquentとは、PHPフレームワークのLaravelに最初から含まれているORM（Object-relational mapping:オブジェクト関係マッピング）です。</p></blockquote>

<h2>lumenでの利用</h2>

<p>lumenではデフォルトではEloquentの利用がオフになっている。<br/>
なので、<code>bootstrap/app.php</code>内のコメントアウトを外して有効にしてやる。</p>

<pre><code>$app-&gt;withEloquent();
</code></pre>

<h2>モデルの作成</h2>

<p>モデルは、<code>app/</code>以下に作成する。<br/>
例えば、user、というテーブル名を利用したい場合は、<code>app/User.php</code>を作成してやる。<br/>
その中で、<code>protected $table</code>の箇所がテーブル名を指定している箇所となるので、ここで単数形のテーブル名を指定してやる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php namespace App;
</span><span class='line'>use Illuminate\Database\Eloquent\Model;
</span><span class='line'>class User extends Model {
</span><span class='line'>    protected $table = ‘user’;
</span><span class='line'>    protected $fillable = [
</span><span class='line'>        ‘name’,
</span><span class='line'>        ‘username’,
</span><span class='line'>        ‘password’
</span><span class='line'>    ];
</span><span class='line'>    protected $hidden = [ ‘password’ ];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>利用</h2>

<p>マイグレーションは作成しなくても動作した。<br/>
(項目をDBとコードで同期させる時にartisanから利用するよう。lumenでも利用できる）</p>

<p>以下の様な形で取得できた。</p>

<pre><code>DB::table('user')-&gt;get();
</code></pre>

<h2>参考</h2>

<p><a href="http://laravel4.winroad.jp/2014/03/06/eloquent-orm%E3%81%AE%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E7%94%A8%E6%B3%95/">Eloquent ORMの基本的な使用法 | WinRoadのLaravel4初心者講座</a><br/>
<a href="https://medium.com/@petehouston/enable-eloquent-orm-in-laravel-lumen-micro-framework-7a4f2fbcaf5d#.pe3a4ibc8">Enable Eloquent ORM in Laravel Lumen micro-framework — Medium</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim-refでvim上でPHPのマニュアルを参照してみる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/12/24/vim-ref/"/>
    <updated>2015-12-24T19:41:21+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/12/24/vim-ref</id>
    <content type="html"><![CDATA[<p>vim上から直接PHPのマニュアルを参照して表示させてみた。</p>

<!-- more -->


<h2>vim-refをインストール</h2>

<h3>NeoBundleでインストール</h3>

<p><code>.vimrc</code>に以下を追記。</p>

<pre><code>NeoBundle 'thinca/vim-ref'
</code></pre>

<p>vimを起動してインストール。<br/>
(<code>:NeoBundleInstall</code>が必要であれば実行)</p>

<h2>マニュアルのダウンロード</h2>

<p>任意のディレクトリにマニュアルをダウンロード。<br/>
<code>.vim/ref</code>にダウンロードした。</p>

<p>各種マニュアルは以下にまとまっている。<br/>
日本語の、Many HTML filesをダウンロードし。<br/>
<code>.vim/ref/php-chunked-xhtml</code>に展開した。</p>

<p><a href="http://php.benscom.com/download-docs.php">http://php.benscom.com/download-docs.php</a><br/>
<a href="http://php.benscom.com/get/php_manual_ja.tar.gz/from/a/mirror">http://php.benscom.com/get/php_manual_ja.tar.gz/from/a/mirror</a></p>

<h2>設定</h2>

<p><code>.vimrc</code>に展開したディレクトリを指定。</p>

<pre><code>let g:ref_phpmanual_path = $HOME . '/.vim/ref/php-chunked-xhtml'
</code></pre>

<h3>vimproc</h3>

<p>vimprocが必要なよう？なので、インストール。<br/>
<a href="https://github.com/Shougo/vimproc.vim">https://github.com/Shougo/vimproc.vim</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NeoBundle 'Shougo/vimproc.vim', {
</span><span class='line'>\ 'build' : {
</span><span class='line'>\     'windows' : 'tools\\update-dll-mingw',
</span><span class='line'>\     'cygwin' : 'make -f make_cygwin.mak',
</span><span class='line'>\     'mac' : 'make',
</span><span class='line'>\     'linux' : 'make',
</span><span class='line'>\     'unix' : 'gmake',
</span><span class='line'>\    },
</span><span class='line'>\ }</span></code></pre></td></tr></table></div></figure>


<h3>テキストブラウザ</h3>

<p>なにかしらのテキストブラウザが必要。</p>

<ul>
<li>lynx</li>
<li>w3m</li>
</ul>


<p>lynxを入れてみる。</p>

<pre><code>$ brew install lynx
</code></pre>

<p>以下で起動出来る。</p>

<pre><code>$ /usr/local/bin/lynx
</code></pre>

<p>起動後は、<code>g</code>を入力すると、<code>URL to open:</code>とURL入力を待機している除隊となるので、<code>www.yahoo.com</code>などと入力してエンターキーを入力してみると、<br/>
クッキーの使用を許可するか、などと聞かれたあと、yahoo.comが開く。<br/>
<img src="http://kayakuguri.github.io/images/2015/12/lynx.jpg" alt="" /></p>

<p><a href="http://ext.omo3.com/linux/lynx.html">Lynx をインストールする | 渋谷生活</a></p>

<p>設定ファイルは以下にある。<br/>
<code>/usr/local/Cellar/lynx/2.8.8rel.2_1/etc/lynx.cfg</code></p>

<p>439行目あたりに<code>#CHARACTER_SET:iso-8859-1</code>と文字コード設定がコメントアウトされた状態になっているので、その下にutf-8の設定を追加。</p>

<pre><code>CHARACTER_SET:utf-8
</code></pre>

<p>602行目あたりに<code>#PREFERRED_LANGUAGE:en</code>というコメントアウトがあるので、以下を追加。</p>

<pre><code>PREFERRED_LANGUAGE:ja
</code></pre>

<h2>使用</h2>

<p>使用は、<code>:Ref</code>のコマンドで、、と書いてあるものもあったけど動かなかった。<br/>
代わりに、php編集中に調べたい関数にカーソルと合わせた状態で、<code>shift-k</code>をタイプするとその単語のマニュアルを表示させることが出来た。</p>

<p><img src="http://kayakuguri.github.io/images/2015/12/vim-ref.jpg" alt="" /></p>

<p>ただし使用している間、ファンが唸るほどに処理が走っていたような……。要調査。</p>

<h2>参考</h2>

<p><a href="https://github.com/thinca/vim-ref">thinca/vim-re</a><br/>
<a href="http://umeji.blogspot.jp/2011/09/phpvimrefvim.html">It&rsquo;s better.: phpマニュアルをvim上から見る(ref.vim)</a><br/>
<a href="http://qiita.com/masa2sei/items/85a2c2cc3721c79a5322">vim-refを使う &ndash; Qiita</a><br/>
<a href="http://www.karakaram.com/20120726-vim-ref">vim-refを導入する [2012年版] | karakaram-blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimにNeoBundleとNeoCompleteを入れる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/12/24/neobundle-neocomplete/"/>
    <updated>2015-12-24T15:09:50+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/12/24/neobundle-neocomplete</id>
    <content type="html"><![CDATA[<p>vim環境を整えていくためにNeoCompleteを入れてみる。</p>

<!-- more -->


<h2>NeoBundle</h2>

<p>NeoCompleteを入れるために、vimのプラグイン管理ツールである、NeoBundleを入れる。<br/>
<a href="https://github.com/Shougo/neobundle.vim">Shougo/neobundle.vim</a></p>

<p>インストール方法は上記公式のReadmeに従った。</p>

<p>任意のディレクトリにインストール用ファイルをダウンロードし、実行。</p>

<pre><code>$ curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh &gt; install.sh
$ sh ./install.sh
$ rm ./install.sh
</code></pre>

<p>インストール時に表示される以下の設定を、<code>.vimrc</code>に記述。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"NeoBundle Scripts-----------------------------
</span><span class='line'>if has('vim_starting')
</span><span class='line'>  if &compatible
</span><span class='line'>    set nocompatible               " Be iMproved
</span><span class='line'>  endif
</span><span class='line'>
</span><span class='line'>  " Required:
</span><span class='line'>  set runtimepath+=~/.vim/bundle/neobundle.vim/
</span><span class='line'>endif
</span><span class='line'>
</span><span class='line'>" Required:
</span><span class='line'>call neobundle#begin(expand('~/.vim/bundle'))
</span><span class='line'>
</span><span class='line'>" Let NeoBundle manage NeoBundle
</span><span class='line'>" Required:
</span><span class='line'>NeoBundleFetch 'Shougo/neobundle.vim'
</span><span class='line'>
</span><span class='line'>" Add or remove your Bundles here:
</span><span class='line'>NeoBundle 'Shougo/neosnippet.vim'
</span><span class='line'>NeoBundle 'Shougo/neosnippet-snippets'
</span><span class='line'>NeoBundle 'tpope/vim-fugitive'
</span><span class='line'>NeoBundle 'ctrlpvim/ctrlp.vim'
</span><span class='line'>NeoBundle 'flazz/vim-colorschemes'
</span><span class='line'>
</span><span class='line'>" You can specify revision/branch/tag.
</span><span class='line'>NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }
</span><span class='line'>
</span><span class='line'>" Required:
</span><span class='line'>call neobundle#end()
</span><span class='line'>
</span><span class='line'>" Required:
</span><span class='line'>filetype plugin indent on
</span><span class='line'>
</span><span class='line'>" If there are uninstalled bundles found on startup,
</span><span class='line'>" this will conveniently prompt you to install them.
</span><span class='line'>NeoBundleCheck
</span><span class='line'>"End NeoBundle Scripts-------------------------</span></code></pre></td></tr></table></div></figure>


<p>vimを起動すると、<code>NeoBundleCheck</code>の記述があるので、インストールできていないプラグインを自動でチェックしてくれて、インストールを促される。<br/>
そのまま<code>y</code>を入力して、プラグインのインストールを完了させる。</p>

<h3>プラグインのインストール</h3>

<p>プラグインのインストールは、<code>.vimrc</code>内の、<br/>
<code>call neobundle#begin</code>と、<code>call neobundle#end</code>の間に、<br/>
<code>NeoBundle xxx/xxx</code>を記述し、vimを起動してやる。</p>

<h2>NeoComplete</h2>

<p>上記の方法に則って、以下を<code>.vimrc</code>に追加。</p>

<pre><code>NeoBundle 'Shougo/neocomplete.vim'
</code></pre>

<h3>lua</h3>

<p>luaという言語で作成されているため、luaが有効になったvimをインストールする必要がある。<br/>
luaがインストールされているかどうかは、vimのバージョン確認で確認出来るよう。</p>

<pre><code>$ vim --version | grep lua
+dialog_con_gui  +lua             +rightleft       +windows
...
</code></pre>

<p><code>+lua</code>となっていればインストール済。<br/>
<code>-lua</code>となっていればインストールされていない。</p>

<p>自分の環境ではインストールされていたが、されていない場合はvimをlua付きでインストールし直す必要があるよう。</p>

<pre><code>$ brew install vim --with-lua
</code></pre>

<p><a href="https://github.com/Shougo/neocomplete.vim#vim-for-mac-os-x">https://github.com/Shougo/neocomplete.vim#vim-for-mac-os-x</a></p>

<h3>設定</h3>

<p>設定を<code>.vimrc</code>に記述。<br/>
公式サイトにある設定内容をそのまま使用した。<br/>
<a href="https://github.com/Shougo/neocomplete.vim">Shougo/neocomplete.vim</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>" Disable AutoComplPop.
</span><span class='line'>let g:acp_enableAtStartup = 0
</span><span class='line'>" Use neocomplete.
</span><span class='line'>let g:neocomplete#enable_at_startup = 1
</span><span class='line'>" Use smartcase.
</span><span class='line'>let g:neocomplete#enable_smart_case = 1
</span><span class='line'>" Set minimum syntax keyword length.
</span><span class='line'>let g:neocomplete#sources#syntax#min_keyword_length = 3
</span><span class='line'>let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
</span><span class='line'>
</span><span class='line'>" Define dictionary.
</span><span class='line'>let g:neocomplete#sources#dictionary#dictionaries = {
</span><span class='line'>    \ 'default' : '',
</span><span class='line'>    \ 'vimshell' : $HOME.'/.vimshell_hist',
</span><span class='line'>    \ 'scheme' : $HOME.'/.gosh_completions'
</span><span class='line'>        \ }
</span><span class='line'>
</span><span class='line'>" Define keyword.
</span><span class='line'>if !exists('g:neocomplete#keyword_patterns')
</span><span class='line'>    let g:neocomplete#keyword_patterns = {}
</span><span class='line'>endif
</span><span class='line'>let g:neocomplete#keyword_patterns['default'] = '\h\w*'
</span><span class='line'>
</span><span class='line'>" Plugin key-mappings.
</span><span class='line'>inoremap &lt;expr&gt;&lt;C-g&gt;     neocomplete#undo_completion()
</span><span class='line'>inoremap &lt;expr&gt;&lt;C-l&gt;     neocomplete#complete_common_string()
</span><span class='line'>
</span><span class='line'>" Recommended key-mappings.
</span><span class='line'>" &lt;CR&gt;: close popup and save indent.
</span><span class='line'>inoremap &lt;silent&gt; &lt;CR&gt; &lt;C-r&gt;=&lt;SID&gt;my_cr_function()&lt;CR&gt;
</span><span class='line'>function! s:my_cr_function()
</span><span class='line'>  return (pumvisible() ? "\&lt;C-y&gt;" : "" ) . "\&lt;CR&gt;"
</span><span class='line'>  " For no inserting &lt;CR&gt; key.
</span><span class='line'>  "return pumvisible() ? "\&lt;C-y&gt;" : "\&lt;CR&gt;"
</span><span class='line'>endfunction
</span><span class='line'>" &lt;TAB&gt;: completion.
</span><span class='line'>inoremap &lt;expr&gt;&lt;TAB&gt;  pumvisible() ? "\&lt;C-n&gt;" : "\&lt;TAB&gt;"
</span><span class='line'>" &lt;C-h&gt;, &lt;BS&gt;: close popup and delete backword char.
</span><span class='line'>inoremap &lt;expr&gt;&lt;C-h&gt; neocomplete#smart_close_popup()."\&lt;C-h&gt;"
</span><span class='line'>inoremap &lt;expr&gt;&lt;BS&gt; neocomplete#smart_close_popup()."\&lt;C-h&gt;"
</span><span class='line'>" Close popup by &lt;Space&gt;.
</span><span class='line'>"inoremap &lt;expr&gt;&lt;Space&gt; pumvisible() ? "\&lt;C-y&gt;" : "\&lt;Space&gt;"
</span><span class='line'>
</span><span class='line'>" AutoComplPop like behavior.
</span><span class='line'>"let g:neocomplete#enable_auto_select = 1
</span><span class='line'>
</span><span class='line'>" Shell like behavior(not recommended).
</span><span class='line'>"set completeopt+=longest
</span><span class='line'>"let g:neocomplete#enable_auto_select = 1
</span><span class='line'>"let g:neocomplete#disable_auto_complete = 1
</span><span class='line'>"inoremap &lt;expr&gt;&lt;TAB&gt;  pumvisible() ? "\&lt;Down&gt;" : "\&lt;C-x&gt;\&lt;C-u&gt;"
</span><span class='line'>
</span><span class='line'>" Enable omni completion.
</span><span class='line'>autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
</span><span class='line'>autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
</span><span class='line'>autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
</span><span class='line'>autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
</span><span class='line'>autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
</span><span class='line'>
</span><span class='line'>" Enable heavy omni completion.
</span><span class='line'>if !exists('g:neocomplete#sources#omni#input_patterns')
</span><span class='line'>  let g:neocomplete#sources#omni#input_patterns = {}
</span><span class='line'>endif
</span><span class='line'>"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]-&gt;\h\w*\|\h\w*::'
</span><span class='line'>"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|-&gt;\)'
</span><span class='line'>"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|-&gt;\)\|\h\w*::'
</span><span class='line'>
</span><span class='line'>" For perlomni.vim setting.
</span><span class='line'>" https://github.com/c9s/perlomni.vim
</span><span class='line'>let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*-&gt;\h\w*\|\h\w*::'</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで補完が効くようになる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/12/neocomplete.jpg" alt="" /></p>

<h2>参考</h2>

<p><a href="http://cpp0302.hatenablog.com/entry/2015/04/10/033609">neocomplcacheからneocompleteへの乗り換え &ndash; 自分の速さで</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linuxのパッケージ管理についての用語を理解する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/12/18/linux-package/"/>
    <updated>2015-12-18T18:06:02+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/12/18/linux-package</id>
    <content type="html"><![CDATA[<p>vagrantで環境を構築する際に、PHPの各種バージョンを指定して作成した場合はありますが、<br/>
その際にyumでリポジトリを追加してパッケージをインストール、、などと言われても意味がわかっていなかったので、ざっくりと調べてみました。</p>

<!-- more -->


<h2>yum</h2>

<p>RedHat系ディストリビューションのパッケージ管理システムのこと。<br/>
PHPでいう、composerのLinux(RedHat系)版、みたいなものでしょうか。<br/>
ちなみにRedHat系ディストリビューションのLinux、とは、CentOSがそれにあたるよう。(Fedora、とか）<br/>
<a href="https://ja.wikipedia.org/wiki/Linux%E3%83%87%E3%82%A3%E3%82%B9%E3%83%88%E3%83%AA%E3%83%93%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E6%AF%94%E8%BC%83">Linuxディストリビューションの比較 &ndash; Wikipedia</a><br/>
(Debian系のディストリビューション、では、<code>apt-get</code>が使われる。<br/>
UbuntuはDebian系ディストリビューション。）</p>

<p>一方、<code>rpm</code>、というのもあるそうですが、rpmを機能拡張したものがyum、という位置づけのようです。<br/>
<a href="http://blog.inouetakuya.info/entry/20111006/1317900802">初心者の頃に知っておきたかった rpm と yum の違いと使い分け &ndash; 彼女からは、おいちゃんと呼ばれています</a></p>

<p>要するにyumで提供されているものはyumを使ったほうが楽だからyumを使うけれど、<br/>
rpmでしかないものや、yumで提供されているものが古かったりするばあいは、rpmで直接指定する、みたいな感じっぽいです。</p>

<p>また、上記サイトに用語の説明として以下のように記載されていました。</p>

<blockquote><p>・パッケージ<br/>
ソフトウェアの一連のファイルをまとめたもの<br/>
・リポジトリ<br/>
パッケージを集めて保管している場所。インターネット上にいろいろなリポジトリが存在する<br/>
・RPM データベース<br/>
rpm 形式のパッケージがインストールされると、その情報は「/usr/lib/rpm」に格納される。このデータのまとまりを「RPM データベース」という</p></blockquote>

<h2>リポジトリ</h2>

<p>今聞くとgitしか思い浮かびませんが、たぶん意味は同じ。<br/>
リポジトリ、なのか、レポジトリなのか、揺れがあります。<br/>
(リポジトリ、のほうが多い気がしました）</p>

<p><a href="http://www.searchman.info/fedoracore4/sev1050.html">yumの概念を覚えよう。fedoracore4では標準でついてます。</a></p>

<blockquote><p>最新バージョンのソフトウェアは、リポジトリというサイトに登録されていています。<br/>
まあ、簡単にいうと、リポジトリとはソフトウェアの貯蔵庫みたいなもの。</p></blockquote>

<p>PHPでいうところの、<code>composer.json</code>がネット上にアップされていて、どのパッケージのどのバージョンをインストールするか、みたなものが管理されており、それをリポジトリ、と呼ぶ、という事でしょうか。</p>

<h2>remi</h2>

<p><a href="http://oki2a24.com/2012/03/13/what-is-rpmforge-remi-epel/">yum が便利になる RPMforge、Remi、EPEL とは一体何なのか &#8211; oki2a24</a></p>

<p>有名なサードパーティのリポジトリの一つのよう。<br/>
あと有名なものは上記サイトにあるように、 <code>EPEL</code> とか、 <code>RPMforge</code> とかがあるみたいです。</p>

<p><a href="http://rpms.famillecollet.com/">Remi&rsquo;s RPM repository</a></p>

<p>人の名前らしい。<br/>
<a href="http://snickerjp.blogspot.jp/2013/01/remi.html">&#12300;remiってなに&#65311;&#12301;って話 : 元うなぎ屋</a></p>

<h2>CentOSのPHP</h2>

<p>ようやく本題に近づいてきました。<br/>
現状、CentOSの公式リポジトリで提供されているPHPは、5.4、らしいです。<br/>
CentOS7.x系では、PHP5.4、なのだと思います。<br/>
CentOS6.x系では、PHP5.3、のようです。</p>

<p>ですので、最新のPHPを含め、他のバージョンのPHPをインストールするには、そのPHPがパッケージされたリポジトリを使用する必要があります。<br/>
その際に上記のremi、を使うのがもっともポピュラーな方法のようです。</p>

<h3>EPELリポジトリ</h3>

<blockquote><p>Remi で提供されているソフトウェアをインストールするためには EPEL のリポジトリも必須要件となっていますので、EPELのリポジトリの追加を行った後に Remi のリポジトリを追加します。<br/>
<a href="http://weblabo.oscasierra.net/centos7-php56-install/">CentOS 7 に PHP 5.6 を yum でインストールする手順 | WEB ARCH LABO</a></p></blockquote>

<h2>用語の揺れ</h2>

<p>remiのyumリポジトリなのか、yumのremiリポジトリなのか？</p>

<blockquote><p>CentOS7では「EPEL」リポジトリを「yum」で追加することで追加することができます。<br/>
<a href="http://www.server-memo.net/centos-settings/centos7/add-repo.html">CentOS7 サードパーティーリポジトリの追加 | server-memo.net</a></p></blockquote>

<p>上記にある通り、EPELリポジトリをyumで追加するので、remiリポジトリ、が正解だと思います。</p>

<h2>サードパーティリポジトリ</h2>

<p>特にサードパーティのリポジトリをインストールしなかったばあいは、yum標準のリポジトリからインストールやアップデートが行われますが、<br/>
サードパーティのリポジトリをインストールしている場合はyumを使用する際にインストールしたサードパーティのリポジトリからインストールやアップデートが行われる、ということのようです。</p>

<p>remiやEPELなんかの有名どころでは信頼性も高いのかもしれないですが、セキュリティの観点から言うとやはり公式の標準リポジトリからインストールするのが一番安全だと思われます。<br/>
なので、通常はyum標準のリポジトリを利用するが、足りないものやカスタマイズしたい場合のみ、remiなどのサードパーティのリポジトリを使う、という運用がよく行われるようです。</p>

<blockquote><p>追加するリポジトリによっては、CentOS標準のパッケージを置き換えてしまったりするものがあり、それが問題を引き起こしてしまう場合があります。</p>

<p>ですので、通常はCentOSデフォルトのリポジトリを使用し、そこに無いパッケージをインストールしたい場合のみ、明示的に追加したリポジトリを指定してパッケージのインストールを行うという運用に私はしています。<br/>
<a href="http://www.server-memo.net/centos-settings/centos7/add-repo.html">CentOS7 サードパーティーリポジトリの追加 | server-memo.net</a></p></blockquote>

<h1>まとめ</h1>

<p>とりあえずyum、リポジトリ、remiなどの関係がざっくりと理解できました。<br/>
linux系の記事とかを調べているとこの辺の用語が当たり前に出てくるのでつらかったのですが、これである程度整理しながら読むことが出来そうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ApexでJSONをパースする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/12/08/json-apex-parse/"/>
    <updated>2015-12-08T19:12:05+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/12/08/json-apex-parse</id>
    <content type="html"><![CDATA[<p>Apex RestAPIなんかを作成している際に、インプットをJSONにしたい場合があります。<br/>
その際に受け取ったJSONをApexでパースして使用する方法がややこしかったのでメモ。</p>

<!-- more -->


<h2>基本</h2>

<p>基本としては、以下の記事が詳しいです。<br/>
<a href="http://www.teamspirit.co.jp/blog/staff/2011/10/winter12json2.html">Winter&rsquo;12のJSONサポートを使いこなす(2) | チームスピリット</a></p>

<p>ここにもある通り、例えば、<code>{a:xx, b:xxx}</code>などのJSONがある場合は、予めapex側でそのJSONの内容専用のクラスを用意してやる必要がある、とのこと。<br/>
何もなしでいきなりパースしていくことが出来ない。</p>

<p>そのためにクラスを用意してオブジェクトにして……が非常にめんどくさい。</p>

<h2>変換ツール</h2>

<p>そんなめんどくさいJSONのクラス作成を一発で変換してくれるwebツールが以下。</p>

<p><a href="http://json2apex.herokuapp.com/">JSON2Apex</a></p>

<p>例の通り、例えば以下の様なJSONを入力してapexを作成すると、以下のようなコードが生成される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class JSON2Apex {
</span><span class='line'>
</span><span class='line'>  public class User {
</span><span class='line'>      public String name;
</span><span class='line'>      public String twitter;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public User user;
</span><span class='line'>
</span><span class='line'>  
</span><span class='line'>  public static JSON2Apex parse(String json) {
</span><span class='line'>      return (JSON2Apex) System.JSON.deserialize(json, JSON2Apex.class);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>そしてなんと一緒にテストコードまで出力してくれる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@IsTest
</span><span class='line'>public class JSON2Apex_Test {
</span><span class='line'>  
</span><span class='line'>  static testMethod void testParse() {
</span><span class='line'>      String json = '{ ¥"user¥" : { ¥"name¥" : ¥"Simon Fell¥", ¥"twitter¥" : ¥"@superfell¥" } }';
</span><span class='line'>      JSON2Apex obj = JSON2Apex.parse(json);
</span><span class='line'>      System.assert(obj != null);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これをコピペするなりしてapexクラスとして作成すればOK。</p>

<h2>配列のJSON</h2>

<p>以下の様な配列になっているJSONをパースしたい場合。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"data":[
</span><span class='line'>  {
</span><span class='line'>      "userid":1,
</span><span class='line'>      "name":"hoge"
</span><span class='line'>  },
</span><span class='line'>  {   "userid":2,
</span><span class='line'>      "name":"fuga"
</span><span class='line'>  }
</span><span class='line'>]}    </span></code></pre></td></tr></table></div></figure>


<p>これも上記ツールにかけると以下の様なクラスが生成される。<br/>
(テストクラスは割愛)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class JSON2Apex {
</span><span class='line'>
</span><span class='line'>  public List&lt;Data&gt; data;
</span><span class='line'>
</span><span class='line'>  public class Data {
</span><span class='line'>      public Integer userid;
</span><span class='line'>      public String name;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  
</span><span class='line'>  public static JSON2Apex parse(String json) {
</span><span class='line'>      return (JSON2Apex) System.JSON.deserialize(json, JSON2Apex.class);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これを利用して<code>userid</code>を順番に取得したい場合は以下のようにすればいい。<br/>
(json_strには上記のJSONが入っているものとする)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>JSON2Apex_Thread obj = JSON2Apex_Thread.parse(json_str);
</span><span class='line'>for(JSON2Apex.Data val : obj.data){
</span><span class='line'>    System.debug(val. userid);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>いちいちJSONの内容に合わせてクラスを作成しないといけないのは非常にめんどくさい。<br/>
<code>JSON.deserialize</code>の他にも、<code>JSON.createParser()</code>もあるが、これも同じくクラスの作成は必要。<br/>
型が厳密なだけにいちいち指定が必要になるのかもしれない。</p>

<h2>参考</h2>

<p><a href="http://salesforce.stackexchange.com/questions/5427/json-deserialize-array-of-objects">apex &ndash; JSON.deserialize Array of Objects &ndash; Salesforce Stack Exchange</a><br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_System_JsonParser.htm">JSONParser Class | Force.com Apex Code Developer&#x27;s Guide | Salesforce Developers</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ローカルのWordPressをCloud9の環境へ引っ越す(DB)]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/11/27/cloud9-wordpress-mysqlimport/"/>
    <updated>2015-11-27T15:30:19+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/11/27/cloud9-wordpress-mysqlimport</id>
    <content type="html"><![CDATA[<p>ローカルで開発していたwordpressをCloud9に移動させるべく、DBのインポートをしてみた。</p>

<!-- more -->


<p>まずはCloud9でWordpressプロジェクトを作成する。<br/>
これは順場に選んでくだけで簡単に可能。</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/c9_00.jpg" alt="" /></p>

<h2>MySqlの起動など</h2>

<p>mysqlの起動などは以下で可能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 起動
</span><span class='line'>$ mysql-ctl start
</span><span class='line'>
</span><span class='line'># 停止
</span><span class='line'>$ mysql-ctl stop</span></code></pre></td></tr></table></div></figure>


<p><code>mysql-ctl</code>コマンドは以下を実行可能。</p>

<pre><code>[start|restart|stop|status|cli|install]
</code></pre>

<p>以下で、mysqlに入る事が出来る。</p>

<pre><code>$ mysql-ctl cli
...
mysql&gt; 
</code></pre>

<p>もしくは、ユーザー指定で普通にログインも出来る。</p>

<pre><code>$ mysql -u kayakuguri
</code></pre>

<p>この中でデータベースやテーブルを作成したり出来る。<br/>
なので、インポートするDBを作成しておく。</p>

<h2>ダンプファイルのアップロード</h2>

<p>ローカルのファイルをアップするのと同じ手順でダンプしたSQLファイルをアップロードする。<br/>
Cloud9のIDE上から、<code>File -&gt; Upload Local Files...</code>を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/c9_01.jpg" alt="" /></p>

<p>アップしたいファイルをウインドウにドロップして完了。<br/>
直下にアップした。</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/c9_02.jpg" alt="" /></p>

<h2>インポート</h2>

<p>これで準備は整ったのでダンプファイルをインポートする。<br/>
下部のエリアから、<code>bash</code>タブを選択し、そこにコマンドを打ち込んでいく。</p>

<p>mysqlのユーザー名はCloud9のログイン名と同じで、パスワードはかかっていない。<br/>
なので以下のようになる。</p>

<pre><code>$ mysql -u kayakuguri test_wp_db &lt; dump.sql
</code></pre>

<p><img src="http://kayakuguri.github.io/images/2015/11/c9_03.jpg" alt="" /></p>

<h3>サイトURLの変更</h3>

<p>このままだとローカルのサイトURLがwordpressのURLとして引き継がれてしまうので、コマンドで直接DBのデータをいじって変更してみる。</p>

<pre><code>$ mysql -u kayakuguri
</code></pre>

<p>mysqlにログイン。</p>

<pre><code># DBを選択
mysql&gt; use test_wp_db;
# 現状の設定を確認
mysql&gt; SELECT * FROM wpoptions WHERE option_name='siteurl';
# アップデート
mysql&gt; UPDATE wpoptions SET option_value='https://your-project-kayakuguri.c9users.io' where option_name IN ('home', 'siteurl');
</code></pre>

<p>URLはRUNさせてみると確認出来る。<br/>
(<code>https://プロジェクト名.ユーザー名.c9users.io/</code>っぽい)</p>

<h3>wp-configの変更</h3>

<p>wp-configにて、mysqlのユーザー名を指定していると思うので、それをCloud9用に変更しておく。<br/>
パスワードはいらない。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/** MySQL データベースのユーザー名 */
</span><span class='line'>define('DB_USER', 'kayakuguri');
</span><span class='line'>
</span><span class='line'>/** MySQL データベースのパスワード */
</span><span class='line'>define('DB_PASSWORD', '');</span></code></pre></td></tr></table></div></figure>


<p>完了。</p>

<h2>注意</h2>

<p>wordpressプロジェクトで始めた場合、<code>wp-admin</code>、<code>wp-content</code>、<code>wp-includes</code>の主要なディレクトリを直下以外のディレクトリに移動が出来なかった。<br/>
なので、ドキュメントルート以外でwordpressを稼働させるプロジェクトの場合は注意が必要。</p>

<p>その場合は、PHPのプロジェクトとして作成し、自前で全ファイルをアップロードしてDBの設定などをすればよいかとも思ったが、どうも上手くいかなかった。<br/>
要調査。</p>

<p>ちなみにPHPの環境は今日現在、<code>PHP Version 5.5.9-1ubuntu4.13</code>だった。</p>

<h2>参考</h2>

<p><a href="https://docs.c9.io/docs/setting-up-mysql">Setting Up MySQL · Cloud9</a><br/>
<a href="http://qiita.com/hishigataBOZE/items/bdd6009d3bfc1c7d313b">[WordPress + MySQL] DBからサイトURLを変更 &ndash; Qiita</a></p>
]]></content>
  </entry>
  
</feed>
