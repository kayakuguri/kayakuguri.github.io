<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2014-05-20T18:45:05+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[heokuで既存アプリにビルドパックを適用させる]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/05/14/heroku-set-build-pack/"/>
    <updated>2014-05-14T11:04:44+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/05/14/heroku-set-build-pack</id>
    <content type="html"><![CDATA[<p>新規アプリを作成時にビルドパックを適用する方法は<br/>
<a href="http://kayakuguri.github.io/blog/2014/02/18/create-php-heroku-mbstring/">以前に書いた</a>のですが、すでに作成しているいアプリに適用させる必要が出たので<br/>
調べてみました。</p>

<!-- more -->


<p>結論から言うと、公式にありました。</p>

<p><a href="https://devcenter.heroku.com/articles/buildpacks">Buildpacks | Heroku Dev Center</a></p>

<p>実際に適用させてみます。<br/>
(<code>myapp</code>となっている箇所は変更して下さい。)</p>

<p>まず、適用したいアプリを任意のフォルダに<code>clone</code>。</p>

<pre><code>$ git clone git@heroku.com:myapp.git
</code></pre>

<p>で、上記のURLを参考に、ビルドパックを適用させる。<br/>
PHPでmbStringが使いたいので、以下のカスタムビルドパックを指定した。<br/>
(PHPが<a href="https://blog.heroku.com/archives/2014/4/29/introducing_the_new_php_on_heroku">公式にサポート</a>されたけれど、mbStringは入ってないっぽい。<br/>
 公式分でのmb環境構築方法がわかればまたメモします。)</p>

<pre><code>heroku config:set BUILDPACK_URL=https://github.com/iphoting/heroku-buildpack-php-tyler.git#php/5.4.9
</code></pre>

<p>適当にファイルを作って、コミットして、プッシュ。<br/>
プッシュ時にデプロイされるので、そこでビルドパックも適用される。</p>

<pre><code>$ echo '&lt;?php phpinfo();' &gt; index.php
$ git add .
$ git commit -m 'initial commit'
$ git push heroku master
</code></pre>

<p>しかし、このpushの段階で怒られる。</p>

<pre><code>fatal: Could not read from remote repository.
</code></pre>

<p>ググると、herokuにremoteでaddしないといけない模様。<br/>
参考：<a href="http://d.hatena.ne.jp/s-0samu/20110416/1302890751">Railsでtwitterサービスをつくる（続きの続き） &ndash; ありえないなど、ありえない</a></p>

<pre><code>$ git remote add heroku git@heroku.com:myapp.git
$ git push heroku master
</code></pre>

<p>再度pushすると無事、デプロイが完了し、PHP環境が出来上がりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apexからPOSTでファイルを送信する 改訂版]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/27/submit-base64/"/>
    <updated>2014-02-27T13:41:16+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/27/submit-base64</id>
    <content type="html"><![CDATA[<p><a href="http://kayakuguri.github.io/blog/2014/02/26/submit-callout-with-multipart/">前回のファイル送信</a>の動作確認版。</p>

<!-- more -->


<p>まず、やりたいこととして、<br/>
saleseforceで作成したページからファイルをherokuで作成したapiに送信して、<br/>
herokuのapiからそのファイルを添付で送信したかった。</p>

<p>結論としては以下の手順で動作した。</p>

<ol>
<li>visualforceで<code>apex:inputFile</code>を使用してファイルをアプロード</li>
<li>apexでファイルを受け取り、そのファイルを<code>base64エンコード</code>。</li>
<li>base64エンコードした文字列をPOSTのパラメータとして送信</li>
<li>herokuにアップしているphpでPOSTデータを受け取る</li>
<li>受け取ったbase64データをデコードして保存(一時的)</li>
<li>保存されたファイルからQdmailを使用してメールを送信</li>
</ol>


<hr />

<p>1) visualforceで<code>apex:inputFile</code>を使用してファイルをアプロード<br/>
visualforceページでのinputの書き方</p>

<pre><code>&lt;apex:input value="{!Email}" /&gt;
&lt;apex:inputFile value="{!FileBody}" filename="{!FileName}"/&gt;
</code></pre>

<p>2) apexでファイルを受け取り、そのファイルを<code>base64エンコード</code>。<br/>
3) base64エンコードした文字列をPOSTのパラメータとして送信<br/>
apex側で受け取る</p>

<pre><code>public String FileName { get; set; }
public Blob FileBody { get; set; }
public String Email { get; set; }

public Pagereference submit() {
    HttpRequest request = new HttpRequest();
    request.setEndpoint('送信先のphp');
    request.setMethod('POST');
    request.setHeader('Accept-Language', 'ja');
    //パラメータ
    Map&lt;String, String&gt; params = new Map&lt;String, String&gt;();
    params.put('to', Email);  //送信先
    params.put('attachName', FileName); //ファイル名
    params.put('attach', EncodingUtil.base64Encode(FileBody)); //ファイル内容
    Set&lt;String&gt; keys = params.keySet();
    String r = '';
    for(String key : keys) {
        //body用にパラメータを整形 to=xx&amp;attach=xx のように
        String val = params.get(key);
        r += key + '=';
        if(val != null) r += val;
        r += '&amp;';
    }
    r = r.removeEnd('&amp;');
    request.setBody(r);

    //送信
    Http http = new Http();
    HttpResponse response = http.send(request);
    ResResult = response.getBody(); //結果を受け取る
}
</code></pre>

<p>4) herokuにアップしているphpでPOSTデータを受け取る<br/>
5) 受け取ったbase64データをデコードして保存(一時的)<br/>
6) 保存されたファイルからQdmailを使用してメールを送信</p>

<p><a href="http://kayakuguri.github.io/blog/2014/02/18/php-heroku-sendattachmail/">Qdmailでの送信方法は以前の投稿を参照。</a></p>

<pre><code>require_once('../lib/qdmail.php');
require_once('../lib/qdsmtp.php');

//送信内容
$to          = $_POST['to'];
$subject     = '件名';
$body        = '本文';
$fromname    = '送り先名';
$fromaddress = '送り先アドレス';
$attachname  = $_POST['attachName'];
$attach      = $_POST['attach'];

$mail = new Qdmail();
$mail -&gt; smtp(true);
$param = array(
    'host'=&gt; $_ENV['MAILGUN_SMTP_SERVER'],
    'port'=&gt; $_ENV['MAILGUN_SMTP_PORT'],
    'from'=&gt; $fromaddress,
    'protocol'=&gt;'SMTP_AUTH',
    'user'=&gt; $_ENV['MAILGUN_SMTP_LOGIN'],
    'pass' =&gt; $_ENV['MAILGUN_SMTP_PASSWORD']
);
$mail -&gt;smtpServer($param);
$mail -&gt;to($to);
$mail -&gt;subject($subject);
$mail -&gt;from($fromaddress,$fromname);
$mail -&gt;text($body);

//添付ファイル
$bin = base64_decode(str_replace(' ', '+', $_POST['attach'][0])); //注意
$fp = fopen( "./" . $_POST['attachName'][0], "w" );
fwrite( $fp, $bin );
fclose( $fp );
$attach = array();
$attach[] = array( "./" . $_POST['attachName'][0] , $_POST['attachName'][0] );

//送信
echo $mail -&gt;send(); //成功の場合は「1」が返ってくる
</code></pre>

<p>Base64デコードしてファイルに保存する方法は以下を参考にしました。<br/>
<a href="http://blog.nipx.jp/archives/4137">Flashからアップロードする方法いろいろ</a><br/>
ただし、そのままではエラーになることがあるよう。</p>

<blockquote><p>どうやら、POSTでデータを渡すと、Base64の「+」記号が勝手にスペースに変換されてしまうらしい。<br/>
<a href="http://pontago.hatenablog.com/entry/20091028/1256743421">http://pontago.hatenablog.com/entry/20091028/1256743421</a></p></blockquote>

<p>(ヘッダ分を差し引く、の部分は無視しても問題なかった)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PHP][heroku]Mailgun APIを使って添付ファイルを送る]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/19/attachment-use-mailgunapi/"/>
    <updated>2014-02-19T17:37:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/19/attachment-use-mailgunapi</id>
    <content type="html"><![CDATA[<p>以前に、<a href="http://kayakuguri.github.io/blog/2014/02/18/php-heroku-sendattachmail/">mailgunで添付ファイル付きメールを送る方法</a>を書いたが、<br/>
そちらは、<code>SMTP</code>バージョンで、今回はそのMailgun APIバージョン。</p>

<!-- more -->


<p>以下のファイルをダウンロードして一式アップしておく。<br/>
(readmeファイルなどいらないものが大量にあるが、とりあえず全部あげておく)</p>

<p><a href="https://9f67cbbd1116d8afb399-7760483f5d1e5f28c2d253278a2a5045.ssl.cf2.rackcdn.com/mailgun-php-1.7.zip">Library Download</a> (zip直リンク)</p>

<p>基本の送信方法は以下。<br/>
<a href="http://documentation.mailgun.com/quickstart.html#sending-messages">Sending Messages</a></p>

<pre><code># Include the Autoloader (see "Libraries" for install instructions)
require 'vendor/autoload.php';
use Mailgun\Mailgun;

# Instantiate the client.
$mgClient = new Mailgun('key-3ax6xnjp29jd6fds4gc373sgvjxteol0');
$domain = "samples.mailgun.org";

# Make the call to the client.
$result = $mgClient-&gt;sendMessage("$domain",
              array('from'    =&gt; 'Excited User &lt;me@samples.mailgun.org&gt;',
                    'to'      =&gt; 'Baz &lt;baz@example.com&gt;',
                    'subject' =&gt; 'Hello',
                    'text'    =&gt; 'Testing some Mailgun awesomness!'));
</code></pre>

<p>添付ファイルを送る方法は、<code>attachment</code>を使って、その中にファイル名を書く。<br/>
ファイル名を指定する方法が紹介されていた。<br/>
<a href="https://github.com/mailgun/mailgun-php/issues/35">https://github.com/mailgun/mailgun-php/issues/35</a></p>

<pre><code>array(
    'attachment' =&gt; array(
        'filePath' =&gt; './' . $attach['name'],
        'remoteName' =&gt; $attach['name']
    )
)
</code></pre>

<p>この方法で実装したところ、一時ファイルから添付ファイルにしての送信、が出来なかった。<br/>
(ファイルがないと怒られる)</p>

<p>試しに、heroku内で<code>move_uploaded_file</code>を使ってみると、エラーもなく保存出来た。<br/>
そのままそのファイルを添付して送ったところ、無事、送信完了。<br/>
ただしファイル自体は直接アクセスしようとすると<code>404</code>が表示されるので、<br/>
そのスクリプト内でのみ有効、のよう。</p>

<p>あと、上記の添付例のまま送信すると、2つ添付された。<br/>
どうやらファイル名を指定する箇所が効いておらず、書かれているファイル名が添付されたよう。<br/>
試しに、<code>'remoteName' =&gt; $attach['name']</code>の行を削除しても送信出来た。</p>

<p>その部分を考慮して、最終的に出来たコードが以下。</p>

<p>・1ファイルを1つの宛先に送信する場合<br/>
・送信先や内容などはPOSTで受け取る想定</p>

<pre><code>require '../vendor/autoload.php';
use Mailgun\Mailgun;
$mgClient = new Mailgun('key-xxx');
$domain = "appxxx.mailgun.org";

$attach = $_FILES["attach"]; //添付ファイル

//ファイル保存
try{
    $result = move_uploaded_file($attach['tmp_name'], './'.$attach['name']);
} catch (Exception $e) {
    var_dump($e-&gt;getMessage());
}

//メール送信
try {
    $result = $mgClient-&gt;sendMessage("$domain",
        array(
            'from'    =&gt; $_POST['fromname'].' &lt;'.$_POST['fromaddress'].'&gt;',
            'to'      =&gt; $_POST['toname'].' &lt;'.$_POST['to'].'&gt;',
            'subject' =&gt; $_POST['subject'],
            'text'    =&gt; $_POST['body']
        ),
        array(
            'attachment' =&gt; array(
                './' . $attach['name']
            )
        )
    );
    var_dump($result);

} catch (Exception $e) {
    var_dump($e-&gt;getMessage());
}               
</code></pre>

<p>結局、一度保存してからの送信、となるので、SMTPを使った方が処理が速いかも。(未検証)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PHP][heroku]upload_max_filesizeを変更する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/18/change-max-filesize/"/>
    <updated>2014-02-18T17:02:20+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/18/change-max-filesize</id>
    <content type="html"><![CDATA[<p>herokuにて、<code>upload_max_filesize</code>を変更してみた。</p>

<!-- more -->


<p>初め、<code>ini_set</code>で変更しようとしてみたところ、<br/>
変更出来なかった。</p>

<pre><code>ini_set('upload_max_filesize', '6M');
</code></pre>

<p>参考：<a href="http://d.hatena.ne.jp/knowledgetree/20110217/1297939617">php.iniの設定を変えてもファイルをアップロードできないケース</a></p>

<p>調べてみると、変更出来るもの、出来ないものがあるらしく、<br/>
<code>upload_max_filesize</code>は、<code>ini_set()</code>では変更出来ないよう。</p>

<p><code>upload_max_filesize</code>は、<code>PHP_INI_PERDIR</code>となっていて、<br/>
php.ini、.htaccess、httpd.conf あるいは .user.ini (PHP 5.3 以降の場合) で設定可能なエントリ<br/>
となっている。<br/>
<a href="http://jp2.php.net/manual/ja/configuration.changes.modes.php">http://jp2.php.net/manual/ja/configuration.changes.modes.php</a></p>

<p>参考：PHP/ini_set()で変更できない値<br/>
<a href="http://hodade.adam.ne.jp/itmemo/index.php?PHP%2Fini_set()%A4%C7%CA%D1%B9%B9%A4%C7%A4%AD%A4%CA%A4%A4%C3%CD">http://hodade.adam.ne.jp/itmemo/index.php?PHP%2Fini_set()%A4%C7%CA%D1%B9%B9%A4%C7%A4%AD%A4%CA%A4%A4%C3%CD</a></p>

<p>herokuでは(たぶん).htaccessが使えない。<br/>
代わりに、<code>.user.ini</code>を試してみるとそちらで変更出来た。</p>

<p><code>.user.ini</code>ファイルを作成して、アップロード。<br/>
<strong>設置したディレクトリ内でのみ</strong>、有効になる。</p>

<p>[内容]</p>

<pre><code>upload_max_filesize = 6M
</code></pre>

<p>参考：<a href="http://yamanxworld.blogspot.jp/2009/12/php-53-htaccess-userini.html">PHP 5.3 の新機能: .htaccess の代わりになる .user.ini</a></p>

<hr />

<p><strong>追記</strong></p>

<p>上記の方法を取ったけれど、pnp.iniの設定ファイルを読み込ませる方法があった。<br/>
今回herokuにインストールしたbuildpackは、confというディレクトリ以下に設定ファイルを置けば<br/>
自動で認識されるような作りになっていたようです。</p>

<p>なので、conf以下に<code>php.ini</code>ファイルを置けば、いちいち各ディレクトリに設定ファイルを置かないでも大丈夫。</p>

<p>さらに、このbuildpackの環境は以下になっています。</p>

<ul>
<li>PHP 5.4.9（mbstring, mysql, pgsql, phpredis, mcryptなどなど）</li>
<li>nginx + php-fpm</li>
</ul>


<p>この、<code>nginx</code>というphpサーバはデフォルトではPOST出来るサイズが<code>1MB</code>になっているよう。<br/>
ここも変更しておかないとエラーになってしまう。</p>

<p><a href="http://qiita.com/notanota/items/4816ad71b90a9967fa18">nginxで"client intended to send too large body"が発生した時の対策方法</a></p>

<p>このnginxの設定ファイルは、<code>nginx.conf.erb</code>になるので、これも置いておく。<br/>
デフォルトの設定ファイルはそれぞれ以下にある。</p>

<ul>
<li><a href="https://raw.github.com/iphoting/heroku-buildpack-php-tyler/master/conf/php.ini">php.ini</a></li>
<li><a href="https://raw.github.com/iphoting/heroku-buildpack-php-tyler/master/conf/nginx.conf.erb">nginx.conf.erb</a></li>
</ul>


<p>php.iniの設定</p>

<pre><code>post_max_size = 8M
upload_max_filesize = 8M
</code></pre>

<p>nginxの設定</p>

<pre><code>http {
    client_max_body_size 1048576; # default 1M

    server {
        client_max_body_size 8M;
    }
}
</code></pre>

<p>参考：<a href="http://tkyk.name/blog/2012/11/28/php-on-heroku/">Heroku上に最新のPHP5.4 + Nginx環境を30秒で構築する</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuでmb-string付きのPHP環境を作る]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/18/create-php-heroku-mbstring/"/>
    <updated>2014-02-18T10:57:30+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/18/create-php-heroku-mbstring</id>
    <content type="html"><![CDATA[<p>順番が前後しますが、mbstring付きのphp環境を作る方法をメモしておきます。</p>

<!-- more -->


<p>前提条件としては、heorkuのアカウントを持っていて、herokuコマンドが有効になっていて、<br/>
gitも使える状態、です。<br/>
<a href="http://devcenter.heroku.com/articles/heroku-command">Heroku Toolbelt</a>とかをインストールしておけば、herokuコマンドが使えるようになります。</p>

<p>参考：<a href="http://blog.infinity-dimensions.com/2012/01/heroku-toolbelt-install.html">Herokuコマンドを使えるようにするHeroku Toolbeltをインストール</a></p>

<hr />

<p>まずは、ディレクトリを作成しておき、そのディレクトリ内にgitを作成。<br/>
phpinfo()などだけ書いたテストのindex.phpを作成し、commitしておきます。</p>

<pre><code>$ mkdir myapp
$ cd myapp
$ git init
$ echo '&lt;?php phpinfo();' &gt; index.php
$ git add .
$ git commit -m 'initial commit'
</code></pre>

<p>で、herokuコマンドを使用して、phpをherokuで動かすためのプラグインである、'buildpack'をインストール。</p>

<pre><code>$ heroku create -s cedar -b git://github.com/iphoting/heroku-buildpack-php-tyler.git#php/5.4.9
</code></pre>

<p>ただし、このまま作成すると、heroku側で勝手に決められたアプリ名になってしまう。<br/>
後から名前を変更することは出来るが、リポジトリのURLを変更しないといけなかったりして、ちょっと面倒。<br/>
最初から名前を指定した上で作成するには、<code>heroku create myapp</code>とすればよい。<br/>
(名前は他のユーザーと被っているとダメ。また、アルファベットの大文字を使用しても怒られた。)<br/>
なので上記の分を名前指定で作成すると、以下。</p>

<pre><code>$ heroku create myapp -s cedar -b git://github.com/iphoting/heroku-buildpack-php-tyler.git#php/5.4.9
</code></pre>

<p>で、herokuにpush。<br/>
pushすると自動的にdeployもされるので、成功すればこれでmbstring付きのphp環境の作成は環境。</p>

<pre><code>$ git push heroku master
</code></pre>

<p>openするとページが表示される。</p>

<pre><code>$ heroku open
</code></pre>

<p>参考：<a href="http://d.hatena.ne.jp/hnw/20120603">HerokuのBuildpackを利用してmbstringが有効なPHPサーバを立ててみた</a></p>
]]></content>
  </entry>
  
</feed>
