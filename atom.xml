<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-05-26T17:55:33+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrant環境での環境変数の設定方法]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/26/vagrant-env/"/>
    <updated>2015-05-26T17:54:23+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/26/vagrant-env</id>
    <content type="html"><![CDATA[<p>vagrant環境で環境変数を使いたかったので調べてみたところ、<br/>
httpdファイルへの追記が必要とのことで試してみた。</p>

<!-- more -->


<h2>httpd</h2>

<p><code>/etc/sysconfig/httpd</code>このファイルへ必要な環境変数を記述し、<code>vagrant up</code>すればよい。</p>

<pre><code>export SET_VALUE=hoge
</code></pre>

<p>httpdの中身はデフォルトでは全てコメントアウトされているので、上記だけを記述したファイルに差し替えてもOK。</p>

<h2>再起動</h2>

<p>apacheの再起動ではだめで、vagrant自体の再起動が必要。</p>

<pre><code>$ vagrant reload
</code></pre>

<p>phpinfoで出力させてみると、無事、反映されていた。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/enviroment.jpg" alt="" /></p>

<h2>$_ENV</h2>

<p>これで反映はされたが、環境変数を取得するための、<code>$_ENV</code>が動作しなかった。<br/>
<code>getenv()</code>だと正しく取得出来る。</p>

<p>調べて見ると、<code>php.ini</code>の設定で<code>ENV</code>を使用するかを設定出来るよう。<br/>
デフォルトでは使用するようになっているようだが、なぜか使用しないようになっていた。</p>

<p>設定する場合は以下のように記述。<br/>
場所は、<code>/etc/php.ini</code>にあった。</p>

<pre><code>variables_order = "EGPCS"
</code></pre>

<p>EGPCSというのは以下のように頭文字となっている。</p>

<blockquote><p>EGPCS (Environment (環境変数)、 Get、Post、 Cookie (クッキー)、そして Server)<br/>
<a href="http://php.net/manual/ja/ini.core.php">http://php.net/manual/ja/ini.core.php</a></p></blockquote>

<p>これを反映して再起動。</p>

<h2>Vagrantでの反映</h2>

<p>ファイルは予め用意しておき、<code>vagrant up</code>だけで反映されるようにしてみる。<br/>
とはいえ、シェルでコピーしているだけだけど。</p>

<p>セットアップ用のシェルスクリプト内に以下を追記。<br/>
設定用の<code>httpd</code>ファイルはVagrantfileと同階層の<code>vagrant.config</code>ディレクトリ以下に設置しているものとする。</p>

<pre><code>cp /vagrant/vagrant.config/httpd /etc/sysconfig/httpd
</code></pre>

<p>この状態で、<code>vagrant up</code>すれば、<code>vagrant.config</code>内で設定したファイルがvagrant環境に反映される。</p>

<h2>参考</h2>

<p><a href="http://yukke.blog3.fc2.com/blog-entry-68.html">ブログ Apache＋PHPで環境変数を追加したい</a></p>

<p>この参考記事でわかったけれど、同じく<code>Apache Environment</code>と<code>environment</code>でハマってた。<br/>
以下のような関係になっているらしい。</p>

<table>
<thead>
<tr>
<th>方法 </th>
<th> 反映先 </th>
<th> 取得方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>httpd.conf </td>
<td> Apache Environment </td>
<td> $_SERVER</td>
</tr>
<tr>
<td>httpd </td>
<td> environment </td>
<td> $_ENV</td>
</tr>
</tbody>
</table>


<p><a href="http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q11102244256">phpで環境変数$_ENVを使用しようとしていますが使用できない状態です。&hellip; &ndash; Yahoo!知恵袋</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wordpressをherokuにインストールする場合はルーティングのhtaccessを自分で設置すること]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/22/heroku-wp-htaccess/"/>
    <updated>2015-05-22T16:11:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/22/heroku-wp-htaccess</id>
    <content type="html"><![CDATA[<p>タイトルママ。<br/>
ちょっとハマったのでメモ。</p>

<!-- more -->


<h2>WordPressのインストール</h2>

<p>以下の手順で通常通りwordpressをインストールした。</p>

<ol>
<li>herokuにインストール用のアプリを作成</li>
<li>gitでローカルにclone</li>
<li>2のディレクトリ内に<a href="https://ja.wordpress.org/">Wordpress日本語版</a>をダウンロードして展開</li>
<li>herokuのアプリにmySQLのアドオン、<a href="https://addons.heroku.com/cleardb">ClearDB</a>を入れる</li>
<li>環境変数から、DBの接続情報を確認。<br/>
<code>mysql://ユーザ名:パスワード@サーバ名/データベース?reconnect=true</code></li>
<li>wp-config.phpにDB情報を反映</li>
<li>PushしてDploy</li>
<li>wp-admin/install.phpにアクセスして、サイト名やユーザー名などを設定してインストール。</li>
<li>完了</li>
</ol>


<h2>固定ページにアクセス</h2>

<p>通常の投稿でもたぶん同じ事が起こると思うが、<br/>
最初から入っているサンプルの固定ページにアクセス。</p>

<blockquote><p><a href="http://YOUR-APP-NAME.herokuapp.com/sample-page/">http://YOUR-APP-NAME.herokuapp.com/sample-page/</a></p></blockquote>

<p>アクセスを確認してから、特にソースは触らずに<a href="http://kayakuguri.github.io/blog/2015/04/21/git-allow-empty/">空でdeploy</a>。</p>

<p>再度上記の固定ページにアクセスすると、<strong>404 Notfound</strong>。</p>

<h2>ルーティング</h2>

<p>ローカルに入れていたWordPressのディレクトとファイルを見比べていると、<br/>
ローカルのものはドキュメントルートに<code>.htaccess</code>がある。</p>

<p>中身を見ていると、リダイレクトしているよう。</p>

<p>どうやら、wordpressのインストール時に、wordpressのルートにルーティング用の<code>.htaccess</code>を自動で作成するよう。<br/>
それがdeployのタイミングで消えてしまい、リダイレクトがかからず、404となっていた。</p>

<p><code>.htaccess</code>の中身は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># BEGIN WordPress
</span><span class='line'>&lt;IfModule mod_rewrite.c&gt;
</span><span class='line'>RewriteEngine On
</span><span class='line'>RewriteBase /
</span><span class='line'>RewriteRule ^index\.php$ - [L]
</span><span class='line'>RewriteCond %{REQUEST_FILENAME} !-f
</span><span class='line'>RewriteCond %{REQUEST_FILENAME} !-d
</span><span class='line'>RewriteRule . /index.php [L]
</span><span class='line'>&lt;/IfModule&gt;
</span><span class='line'>
</span><span class='line'># END WordPress</span></code></pre></td></tr></table></div></figure>


<p>これを<code>.htaccess</code>の名前でwordpressのルートに保存してやり、git管理下においてやればよい。</p>

<p>これを置いた状態であれば、deployかけても問題なくアクセスが出来た。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Session Fixation]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/21/session-fixation/"/>
    <updated>2015-05-21T19:09:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/21/session-fixation</id>
    <content type="html"><![CDATA[<p>今更ながら、Session Fixationなるものを知ったのでメモ。</p>

<!-- more -->


<p>内容は以下、徳丸先生が詳しい。<br/>
<a href="http://blog.tokumaru.org/2009/01/introduction-to-session-fixation-attack.html">とくまるひろしのSession Fixation攻撃入門 | 徳丸浩の日記</a></p>

<p>日本語では、<code>セッション固定攻撃</code>と呼ばれているようで、<br/>
ログイン認証をセッションで行っているサイトに対して、何らかの方法でユーザーに意図した固定セッションIDを与えた状態でログインしてもらい、<br/>
攻撃者はそのIDでログインしたことにする、というもののよう。</p>

<p>対策としては以下いずれかになるよう。</p>

<blockquote><p>(1) セッション変数内に特定の値を常に与えるようにし、もしその値が無かった場合には正しくふられたセッションIDではないと判断する。<br/>
(セッションIDの正当性をセッション変数内に埋め込む)<br/>
(2) ログイン処理など、そのサイトでの本来のセッションの使用を行う時点で(重要な情報を持たせるときに)、セッションIDを変更する。
<a href="http://pentan.info/php/session_fixation.html">http://pentan.info/php/session_fixation.html</a></p></blockquote>

<p>2のセッションの付け替えは以下のようにする。</p>

<pre><code>session_start();
session_destroy();
session_start();
session_regenerate_id();
</code></pre>

<p>ログインが成功し、ログイン認証をセッションに格納する直前に付け替えを入れてやれば、<br/>
ログイン後には別のIDとなるので、攻撃側が用意した固定IDを回避することが出来る。</p>

<p>ただしこの、<code>session_regenerate_id</code>は結構な負荷がかかるようで、<br/>
連続して使用しているとセッションが切れてしまうらしい。<br/>
なので、連続的に実行されないようにする事が重要っぽい。<br/>
ログイン時に一回のみ実行されるようにしておけば特に問題なさそう。</p>

<h2>参考</h2>

<p><a href="http://canalize.jp/archives/009281.php">セッションハイジャック と session_regenerate_id( )関数 &ndash; Shoulder.jp</a> <br/>
<a href="http://pentan.info/php/session_gc.html">セッションの有効期間とか設定とか挙動とかを調べました &ndash; [PHP + PHP] ぺんたん info</a><br/>
<a href="http://pentan.info/php/session_fixation.html">セッション固定攻撃(session fixation) &ndash; [PHP + PHP] ぺんたん info</a><br/>
<a href="http://blog.ohgaki.net/session_regenerate_id_wo">ログイン後にsession_regenerate_id()を実行するだけで十分か? | yohgaki&#039;s blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesfroce]開発者コンソールでのFIELD_INTEGRITY_EXCEPTIONエラー]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/14/developper-console-error/"/>
    <updated>2015-05-14T14:50:12+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/14/developper-console-error</id>
    <content type="html"><![CDATA[<p>たまに起こっていつも調べている気がするのでメモ。</p>

<!-- more -->


<p>最近は開発者コンソールで開発をしている事が多いのだけれど、ファイルをいざ保存しようとしたらたまに以下のようなエラーが出て保存できない時がある。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/Force_com_Developer_Console_01.jpg" alt="" /></p>

<blockquote><p>FIELD_INTEGRITY_EXCEPTION<br/>
Failde to create createContainerMember for containerId=undefined:null は無効な containerIdです。</p></blockquote>

<p>保存しているファイルの種類や内容には関係ない。<br/>
これが起こるとsavingのまま止まってしまう。</p>

<p>で、解決方法は公式にある。</p>

<p><a href="https://help.salesforce.com/apex/HTViewSolution?id=000204953&amp;language=en_US">Developer console cannot save classes/triggers/pages</a></p>

<p>まず、開発者コンソールを閉じて、再度開く。(念のため)<br/>
で、開発者コンソールのメニューから、<code>Workspace</code> &ndash;> <code>New Workspace</code>を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/Force_com_Developer_Console_02.jpg" alt="" /></p>

<p>適当な名前で保存する。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/Force_com_Developer_Console_03.jpg" alt="" /></p>

<p>ワークスペースが新しく切り替わる(見た目は変わらない)。<br/>
すると、無事保存出来るようになる。</p>

<p>一度保存出来るようになったらもとのdefaultのワークスペースに戻しても問題なくなっているので、<br/>
先程作った適当なワークスペース削除しても問題なし。</p>

<p>開発者コンソールは便利なんだけど、いかんせん不安定な印象がある…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SFストリーミングAPIを試してみた]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/13/sf-streaming-api/"/>
    <updated>2015-05-13T11:54:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/13/sf-streaming-api</id>
    <content type="html"><![CDATA[<p>salesforceのストリーミングAPIを利用すればプッシュ通知のようなものを作成できる、ということで試してみた。</p>

<!-- more -->


<h2>仕組み</h2>

<p>Long pollingと呼ばれる技術が使用されているよう。<br/>
仕組みとしては以下がわかりやすかった。</p>

<blockquote><p>1.クライアントからは従来のポーリング同様に、サーバに対して要求を発行<br/>
2.サーバ側はその要求に対して即時に応答を返さず、ずっと掴んだままにしておく<br/>
3.サーバ側でイベントの発生を検知したら、それまで掴みっぱなしになっていた複数の要求に対して一斉に応答を返す<br/>
4.応答を受信したブラウザはすぐに次の要求を再発行して、ふたたび応答待ちの状態へと戻る<br/>
⇒  結果的にサーバからのプッシュ通知が行われたような動作になります。<br/>
<a href="http://www.terrasky.co.jp/blog/?p=802#sthash.HrI4ITMg.dpuf">http://www.terrasky.co.jp/blog/?p=802#sthash.HrI4ITMg.dpuf</a></p></blockquote>

<h2>流れ</h2>

<p>作成の手順は以下。</p>

<ol>
<li>オブジェクトの作成(設定)</li>
<li>PushTopicの作成</li>
<li>PushTopicをチャンネルに登録、テスト</li>
</ol>


<h2>1.オブジェクトの作成(設定)</h2>

<p>プッシュするためのオブジェクトとして今回は以下のカスタムオブジェクトを使用した。</p>

<p>オブジェクト名：CustomMessage<br/>
プッシュ内容：未読(Unread__c)のチェックボックスがtrueになればプッシュ通知</p>

<h2>2.PushTopicの作成</h2>

<p><code>PushTopic</code>は管理画面上からは作成出来ないよう。<br/>
開発者コンソールから直接レコードを作成する。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/stereaming_api1.jpg" alt="" /></p>

<p>実行させたコードは以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PushTopic pushTopic = new PushTopic();
</span><span class='line'>pushTopic.Name = 'UnreadNotification';
</span><span class='line'>pushTopic.Query = 'SELECT Id, Unread__c FROM CustomMessage__c';
</span><span class='line'>pushTopic.NotifyForOperationCreate = true;
</span><span class='line'>pushTopic.NotifyForOperationUpdate = true;
</span><span class='line'>pushTopic.NotifyForOperationUndelete = false;
</span><span class='line'>pushTopic.NotifyForOperationDelete = false;
</span><span class='line'>pushTopic.ApiVersion = 32.0;
</span><span class='line'>insert pushTopic;</span></code></pre></td></tr></table></div></figure>


<p>※<code>NotifyForOperations</code>と<code>NotifyForFields</code>は変更出来ない、と怒られた。</p>

<h3>通知タイミング</h3>

<p>レコードがどうなった時に通知するかを、<code>NotifyForOperationCreate</code>等で設定している。<br/>
(これらはデフォルトでは<code>true</code>)</p>

<table>
<thead>
<tr>
<th>項目 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>NotifyForOperationCreate </td>
<td> 作成</td>
</tr>
<tr>
<td>NotifyForOperationUpdate </td>
<td> 更新</td>
</tr>
<tr>
<td>NotifyForOperationUndelete </td>
<td> 復元</td>
</tr>
<tr>
<td>NotifyForOperationDelete </td>
<td> 削除</td>
</tr>
</tbody>
</table>


<p><img src="http://kayakuguri.github.io/images/2015/05/stereaming_api2.jpg" alt="" /></p>

<p>実行後、SOQLで参照してみた。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/stereaming_api3.jpg" alt="" /></p>

<h3>通知対象</h3>

<p><code>NotifyForFields</code>は設定出来ない、と怒られたが、ここはデフォルトでは<code>Referenced</code>になっている。<br/>
これは、指定したクエリのSELECT句とWHERE句、両方を通知対象とする、という意味のよう。<br/>
これをSELECT句だけを対象に、とも出来るのだとか。</p>

<p>今回はSELECTに指定した、Unread__cが作成、更新されると通知される。<br/>
(WHERE句がないので、全てのレコード対象)</p>

<p>またこのSELECT句には必ず<code>ID</code>を含める必要があるとのこと。</p>

<h2>3.PushTopicをチャンネルに登録、テスト</h2>

<h3>登録</h3>

<p>以下にアクセス。<br/>
<a href="https://workbench.developerforce.com/login.php">https://workbench.developerforce.com/login.php</a></p>

<p>これは、デモ目的でのみ利用可能な、Salesforceから提供されている、ワークベンチのホスト型インスタンス、だそう。<br/>
本番利用の際は自前で、ワークベンチの設定が必要なのだとか。<br/>
(この辺は未調査)</p>

<p><code>Environment</code>は<code>Production</code>を選択した。<br/>
<code>API Version</code>は<code>32</code>を選択。(33はなかった)</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/stereaming_api4.jpg" alt="" /></p>

<p>規約に同意して、<code>Login with Salesforce</code>をクリック。<br/>
承認を求められるので、<code>許可</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/stereaming_api5.jpg" alt="" /></p>

<p><code>Jump to:</code>で、<code>Streaming Push Topics</code>を選択。<br/>
<code>select</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/stereaming_api6.jpg" alt="" /></p>

<p>次の画面で接続が行われる。<br/>
Push Topicで先程作成した、PushTopicを選択。<br/>
デフォルトでは登録されていない状態っぽいので、<code>Subscribe</code>ボタンをクリックして登録しておく。<br/>
その状態でブラウザを開いたままにしておく。<br/>
<img src="http://kayakuguri.github.io/images/2015/05/stereaming_api7.jpg" alt="" /></p>

<h3>テスト</h3>

<p>新しいウインドウで、再度以下にアクセスし、同じく<code>Production</code>のバージョン<code>32</code>でログイン。<br/>
<a href="https://workbench.developerforce.com/login.php">https://workbench.developerforce.com/login.php</a></p>

<p>上部メニューの<code>data</code>から、<code>Insert</code>をクリック。<br/>
<img src="http://kayakuguri.github.io/images/2015/05/stereaming_api8.jpg" alt="" /></p>

<p>Object Typeで対象のカスタムオブジェクト(CustomMessage__c)を選択し、<code>Next</code>をクリック。<br/>
<img src="http://kayakuguri.github.io/images/2015/05/stereaming_api9.jpg" alt="" /></p>

<p>オブジェクトをインサートするための情報を入力。<br/>
OwinIDは入力しなくても大丈夫だった。<br/>
<img src="http://kayakuguri.github.io/images/2015/05/stereaming_api10.jpg" alt="" /></p>

<p><code>Commit Insert</code>をクリックするとインサートが完了する。<br/>
<img src="http://kayakuguri.github.io/images/2015/05/stereaming_api11.jpg" alt="" /></p>

<p>すると、先程開いていた画面に内容が(ほぼ)リアルタイムに通知される。<br/>
<img src="http://kayakuguri.github.io/images/2015/05/stereaming_api12.jpg" alt="" /></p>

<p><code>sobject</code>には、PushTopicのSELECT句で設定した項目が入っている。</p>

<p>このレコードの作成はこの<code>workbench</code>上からわざわざ作業しなくても、Salesfroceから直接レコードを新規で作成しても受信は問題なくできた。<br/>
あとは、Visualforceのコードに組み込めば受信ページを作れるよう。</p>

<h2>制限</h2>

<p>色々と制限があるよう。詳しくは以下の記事の最後のほうの表を参照。<br/>
<a href="http://www.terrasky.co.jp/blog/?p=802">http://www.terrasky.co.jp/blog/?p=802</a></p>

<p>トピック数が20、とか、登録者数が20、とか、結構厳しい。<br/>
そもそも、Visualforceでの利用で、SFのアカウントを持っている人が通知を受け取るページを開発するのに使用する事を前提としているっぽい。<br/>
通常のwebサービスでSFからの通知を受け取るのに利用出来るかと思って調べていたのだが、どうも違うようだった。</p>

<h2>参考</h2>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.api_streaming.meta/api_streaming/quick_start_workbench.htm">ワークベンチを使用したクイックスタート | Force.com ストリーミング API 開発者ガイド | Salesforce Developers</a><br/>
<a href="http://tyoshikawa1106.hatenablog.com/entry/2013/08/01/225204">SFDC：Streaming API 試してみました &ndash; tyoshikawa1106のブログ</a><br/>
<a href="http://www.terrasky.co.jp/blog/?p=802">10分で分かる！使える！ストリーミング API &laquo;  TerraSky Tech Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[herokuアドオン]cloudinaryでの画像制限設定について]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/11/cloudinary-security/"/>
    <updated>2015-05-11T12:07:56+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/11/cloudinary-security</id>
    <content type="html"><![CDATA[<p>cloudinaryを利用した時に他者に乱用されたりしないのかどうかを調べてみた。</p>

<!-- more -->


<h2>画像のURL</h2>

<p>アップロードする際に、画像名となる<code>public_url</code>を指定しなければランダムで文字列がふられる。</p>

<p><strong>デフォルトでのアップロードの例</strong></p>

<blockquote><p><a href="https://res.cloudinary.com/harslxcej/image/upload/xa9kfgp9jvxouekmrrqu">https://res.cloudinary.com/harslxcej/image/upload/xa9kfgp9jvxouekmrrqu</a></p></blockquote>

<p><code>harslxcej</code>はcloudinaryアカウトごとの名前。<code>cloud_name</code>と呼ばれるもの。<br/>
<a href="http://cloudinary.com/documentation/api_and_access_identifiers#cloud_name">Cloud Name | API, URLs and access identifiers | Cloudinary</a></p>

<p>これだけでも推測は不可能だが、さらにprivateモードを利用することでさらに複雑にすることが可能。</p>

<p>PHPでのアップロード時のオプション</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\Cloudinary\Uploader::upload("your-img",array(
</span><span class='line'>    "type" =&gt; "private"
</span><span class='line'>));</span></code></pre></td></tr></table></div></figure>


<p>表示時のオプション</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$private = cl_image_tag($public_id . ".jpg", array(
</span><span class='line'>    "type"=&gt;"private"
</span><span class='line'>));</span></code></pre></td></tr></table></div></figure>


<p>表示URL</p>

<blockquote><p><a href="http://res.cloudinary.com/harslxcej/image/private/leyxq6ys2wielv6b8yki">http://res.cloudinary.com/harslxcej/image/private/leyxq6ys2wielv6b8yki</a></p></blockquote>

<p>しかしこのままではアクセスが出来ない。<br/>
このURLでのアクセスを許可してやる必要がある。</p>

<h3>編集セットの個別許可</h3>

<p>Cloudinaryの管理画面から、<code>Transformations</code>を選択。<br/>
ここに、いままでアクセスしたことがある編集設定などがずらずらと並んでいるので、その中から探し出すか、新たに設定を作成してやる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/cloudinary_security04.jpg" alt="Create new" /></p>

<p>編集設定を作る</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/cloudinary_security05.jpg" alt="Create new" /></p>

<p>で、許可したい編集セットの<code>Disallowed</code>となっているマーク部分をクリックすると、<code>Allowed</code>の緑アイコンに代わり、アクセスが許可される。<br/>
(編集なしの生データにアクセスを許可してやるには、<code>Create a new transformaton..</code>で何もせずにそのまま保存してやればよい。)</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/cloudinary_security03.jpg" alt="allowed" /></p>

<h3>sign_url</h3>

<p>最初は<code>sign_url</code>をつけないとプライベートのものはアクセス出来ないと思っていたが、上記の方法で解消できた。<br/>
以下でもアクセスは出来るが、プライベートタイプのものを表示する方法、という用途ではないと思われる。</p>

<p><code>"sign_url"=&gt;true</code>をつけると固定のURLとなるので、編集が不可能になるが、表示が許可されるようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$private = cl_image_tag($public_id . ".jpg", array(
</span><span class='line'>    "type"=&gt;"private",
</span><span class='line'>    "sign_url"=&gt;true
</span><span class='line'>));</span></code></pre></td></tr></table></div></figure>


<p>表示URL</p>

<blockquote><p><a href="https://res.cloudinary.com/harslxcej/image/private/s--q7MlJXLg--/leyxq6ys2wielv6b8yki.jpg">https://res.cloudinary.com/harslxcej/image/private/s&#8211;q7MlJXLg&#8211;/leyxq6ys2wielv6b8yki.jpg</a></p></blockquote>

<h3>直リンクは可能</h3>

<p>ただし、URLさえわかってしまえば、表示することは可能。<br/>
また、いわゆる別サーバーからの直リンク、も制限は出来ない。</p>

<h2>編集の制限</h2>

<p>cloudinaryはURLから直接画像や動画を編集する事が出来る。<br/>
例えば以下のような指定。</p>

<pre><code>https://res.cloudinary.com/harslxcej/image/upload/h_100,w_100,c_fill/xa9kfgp9jvxouekmrrqu
</code></pre>

<p>これをプログラムからの指定のみに制限する事が可能。</p>

<p>Cloudinaryの管理画面から、<code>Setting -&gt; Security</code>にアクセス。<br/>
<code>Strict transformations:</code>を<code>Enabled</code>にしてsaveする。<br/>
これで、URLからの直接編集が禁止となる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/cloudinary_security01.jpg" alt="Strict transformations" /></p>

<p>２つ下の項目に、<code>Strict video transformations:</code>と動画でも同じく禁止する設定があるので合わせて設定しておくとよいかも。</p>

<p>これで、PHPなどプログラム上からの生成以外は制限することができたが、<br/>
特定のURLからのみはURLでの編集を許可してやることも可能。</p>

<p>上記、<code>Security</code>画面から、<code>Allowed strict referral domains:</code>に許可したいドメインを指定することで設定できる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/cloudinary_security02.jpg" alt="Allowed strict referral domains" /></p>

<h2>参考</h2>

<p><a href="http://support.cloudinary.com/hc/en-us/articles/202520342-Does-Cloudinary-support-uploading-private-images-">Does Cloudinary support uploading private images? &ndash; Cloudinary Support</a><br/>
<a href="http://support.cloudinary.com/hc/en-us/articles/202520632--Can-our-users-upload-private-images-which-are-not-accessible-through-a-public-URL-">Can our users upload private images which are not accessible through a public URL? &ndash; Cloudinary Support</a><br/>
<a href="http://cloudinary.com/blog/how_to_quickly_build_a_stock_photo_site_using_cloudinary">How to quickly build a stock photo site using Cloudinary | Cloudinary Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[herokuアドオン]cloudinaryで動画を試してみた[PHP]]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/07/cloudinary-movie/"/>
    <updated>2015-05-07T15:31:47+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/07/cloudinary-movie</id>
    <content type="html"><![CDATA[<p>2015年5月5日に新しく発表された動画サポートを試してみた。</p>

<!-- more -->


<h2>アップロード</h2>

<p>インストールなどは<a href="http://kayamemo.mrlittlebig.com/blog/2015/05/07/cloudinary-img/">前回の記事</a>参照。</p>

<p>同一ディレクトリにある、movファイルをアップロードした。<br/>
動画は、iPhoneで撮影したもの。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require '../vendor/autoload.php';
</span><span class='line'>
</span><span class='line'>use Cloudinary;
</span><span class='line'>use Cloudinary\Uploader;
</span><span class='line'>
</span><span class='line'>$account = parse_url(getenv('CLOUDINARY_URL'));
</span><span class='line'>
</span><span class='line'>\Cloudinary::config(array(
</span><span class='line'>    "cloud_name" =&gt; $account['host'],
</span><span class='line'>    "api_key" =&gt; $account['user'],
</span><span class='line'>    "api_secret" =&gt; $account['pass']
</span><span class='line'>));
</span><span class='line'>
</span><span class='line'>$ret = \Cloudinary\Uploader::upload("iphone_movie.mov",array(
</span><span class='line'>    "resource_type" =&gt; "video"
</span><span class='line'>));
</span><span class='line'>
</span><span class='line'>print_r($ret);</span></code></pre></td></tr></table></div></figure>


<p>結果は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Array ( 
</span><span class='line'>  [public_id] =&gt; wfdpqg39qjoc6lnkr3cs 
</span><span class='line'>  [version] =&gt; 1430967110 
</span><span class='line'>  [signature] =&gt; 7f52af2c53ccc3b38f8b33300a40d6085c85c032 
</span><span class='line'>  [width] =&gt; 1280 
</span><span class='line'>  [height] =&gt; 720 
</span><span class='line'>  [format] =&gt; mov 
</span><span class='line'>  [resource_type] =&gt; video 
</span><span class='line'>  [created_at] =&gt; 2015-05-07T02:51:50Z 
</span><span class='line'>  [tags] =&gt; Array ( ) 
</span><span class='line'>  [bytes] =&gt; 5572519 
</span><span class='line'>  [type] =&gt; upload 
</span><span class='line'>  [etag] =&gt; 3114c6de99a74817eef082b330754d1e 
</span><span class='line'>  [url] =&gt; http://res.cloudinary.com/harslxcej/video/upload/v1430967110/wfdpqg39qjoc6lnkr3cs.mov 
</span><span class='line'>  [secure_url] =&gt; https://res.cloudinary.com/harslxcej/video/upload/v1430967110/wfdpqg39qjoc6lnkr3cs.mov 
</span><span class='line'>  [audio] =&gt; Array ( 
</span><span class='line'>      [codec] =&gt; aac 
</span><span class='line'>      [bit_rate] =&gt; 63431 
</span><span class='line'>      [frequency] =&gt; 44100 
</span><span class='line'>      [channels] =&gt; 1 
</span><span class='line'>      [channel_layout] =&gt; mono 
</span><span class='line'>  ) 
</span><span class='line'>  [video] =&gt; Array ( 
</span><span class='line'>      [pix_format] =&gt; yuv420p 
</span><span class='line'>      [codec] =&gt; h264 
</span><span class='line'>      [level] =&gt; 31 
</span><span class='line'>      [bit_rate] =&gt; 4604806 
</span><span class='line'>  ) 
</span><span class='line'>  [frame_rate] =&gt; 29.97002997003 
</span><span class='line'>  [bit_rate] =&gt; 4686070 
</span><span class='line'>  [duration] =&gt; 9.538333 
</span><span class='line'>  [rotation] =&gt; 0 
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<h2>表示</h2>

<p>PHPでは、<code>cl_video_tag</code>を利用することで<code>video</code>タグを出力してくれる。</p>

<pre><code>cl_video_tag($public_id, array( "alt" =&gt; "Sample Video" ));
</code></pre>

<p>出力</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;video alt='Sample Video' poster='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.jpg'&gt;
</span><span class='line'>  &lt;source src='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.webm' type='video/webm'&gt;
</span><span class='line'>  &lt;source src='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.mp4' type='video/mp4'&gt;
</span><span class='line'>  &lt;source src='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.ogv' type='video/ogg'&gt;
</span><span class='line'>&lt;/video&gt;</span></code></pre></td></tr></table></div></figure>


<p>このままだとコントローラーが表示されていないので、その辺のオプションも追加する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cl_video_tag($public_id, array(
</span><span class='line'>    "width" =&gt; 600,
</span><span class='line'>    "height" =&gt; 400,
</span><span class='line'>    "crop" =&gt; "fill",
</span><span class='line'>    "preload" =&gt; "none",
</span><span class='line'>    "controls" =&gt; true,
</span><span class='line'>));</span></code></pre></td></tr></table></div></figure>


<p>出力</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;video controls='1' height='400' poster='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.jpg' preload='none' width='600'&gt;
</span><span class='line'>  &lt;source src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.webm' type='video/webm'&gt;
</span><span class='line'>  &lt;source src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.mp4' type='video/mp4'&gt;
</span><span class='line'>  &lt;source src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.ogv' type='video/ogg'&gt;
</span><span class='line'>&lt;/video&gt;</span></code></pre></td></tr></table></div></figure>


<p>サムネイルの出力は以下。<br/>
public idに拡張子をつけてやらないと表示が出来なかった。<br/>
(jpg, png, webp, wdpに対応しているよう)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cl_image_tag($public_id.".jpg", array(
</span><span class='line'>    "width"=&gt;300,
</span><span class='line'>    "height"=&gt;300,
</span><span class='line'>    "crop"=&gt;"fill",
</span><span class='line'>    "resource_type"=&gt;"video"
</span><span class='line'>));</span></code></pre></td></tr></table></div></figure>


<p>結果</p>

<pre><code>&lt;img src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_300,w_300/wfdpqg39qjoc6lnkr3cs.jpg' height='300' width='300'/&gt;
</code></pre>

<h2>フォームからアップロード</h2>

<p><a href="http://kayamemo.mrlittlebig.com/blog/2015/04/16/heroku-transloadit-2/">前回、Transloaditでアップロード</a>した時と同じように、フォームから選択した動画をアップロードしてみる。</p>

<h3>情報が取得できない</h3>

<p>動画をフォームからアップロードしてみると情報が取得できない、と思ったが、<br/>
どうやらサーバーの設定での最大アップロードサイズを超過していたよう。</p>

<p>アップロードサイズはデフォルトでは、<code>2MB</code>。<br/>
これの変更方法は以前に書いていた。<br/>
<a href="http://kayamemo.mrlittlebig.com/blog/2014/02/18/change-max-filesize/">[PHP][heroku]upload_max_filesizeを変更する &ndash; KayaMemo</a></p>

<h3>コード</h3>

<p>以下、全コード。<br/>
動画をアップロードされたら表示するところまで。<br/>
(エラーチェックなどは全くしていないので注意)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require '../vendor/autoload.php';
</span><span class='line'>use Cloudinary;
</span><span class='line'>use Cloudinary\Uploader;
</span><span class='line'>
</span><span class='line'>$showFlg = false;
</span><span class='line'>
</span><span class='line'>if(isset($_FILES['userfile'])){
</span><span class='line'>    if (move_uploaded_file($_FILES['userfile']['tmp_name'], $_FILES['userfile']['name'])) {
</span><span class='line'>        $uploadFile = $_FILES['userfile']['name'];
</span><span class='line'>
</span><span class='line'>    $account = parse_url(getenv('CLOUDINARY_URL'));
</span><span class='line'>    \Cloudinary::config(array(
</span><span class='line'>        "cloud_name" =&gt; $account['host'],
</span><span class='line'>        "api_key" =&gt; $account['user'],
</span><span class='line'>        "api_secret" =&gt; $account['pass']
</span><span class='line'>    ));
</span><span class='line'>
</span><span class='line'>    $ret = \Cloudinary\Uploader::upload($uploadFile,array(
</span><span class='line'>        "resource_type" =&gt; "video"
</span><span class='line'>    ));
</span><span class='line'>    $public_id = $ret['public_id'];
</span><span class='line'>    $showFlg = true;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>?&gt;
</span><span class='line'>
</span><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>&lt;html lang="ja"&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>    &lt;title&gt;ファイルアップロードテスト&lt;/title&gt;
</span><span class='line'>    &lt;meta charset="utf-8"&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>
</span><span class='line'>&lt;?php if(!$showFlg){ ?&gt;
</span><span class='line'>&lt;form enctype="multipart/form-data" method="post" action="upload-form-movie.php"&gt;
</span><span class='line'>    &lt;input type="hidden" name="MAX_FILE_SIZE" value="20000000" /&gt;
</span><span class='line'>    &lt;input name="userfile" type="file"&gt;
</span><span class='line'>    &lt;input type="submit" value="Upload"&gt;
</span><span class='line'>&lt;/form&gt;
</span><span class='line'>&lt;?php }else{
</span><span class='line'>    echo $resize = cl_video_tag($public_id, array(
</span><span class='line'>        "width" =&gt; 600,
</span><span class='line'>        "height" =&gt; 400,
</span><span class='line'>        "crop" =&gt; "fill",
</span><span class='line'>        "preload" =&gt; "none",
</span><span class='line'>        "controls" =&gt; true,
</span><span class='line'>    ));
</span><span class='line'>} ?&gt;
</span><span class='line'>
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://cloudinary.com/blog/introducing_cloud_based_service_for_video_upload_real_time_manipulation_and_optimized_viewing#api_example_1">Introducing cloud based service for video management | Cloudinary Blog</a><br/>
<a href="http://cloudinary.com/documentation/video_manipulation_and_delivery">Video manipulation and delivery | Cloudinary</a></p>

<p><a href="http://php.net/manual/ja/features.file-upload.post-method.php">PHP: POST メソッドによるアップロード &ndash; Manual </a><br/>
<a href="http://www.php-factory.net/trivia/05.php">サーバーのアップロードファイルの最大容量の確認と容量制限の変更｜PHP工房</a><br/>
<a href="https://devcenter.heroku.com/articles/custom-php-settings#user-ini-files-recommended">Customizing Web Server and Runtime Settings for PHP | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[herokuアドオン]cloudinaryで画像のアップロードと表示[PHP]]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/07/cloudinary-img/"/>
    <updated>2015-05-07T11:34:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/07/cloudinary-img</id>
    <content type="html"><![CDATA[<p>PHPを利用して、cloudinaryにアップロードして、画像を表示させてみた。</p>

<!-- more -->


<h2>インストール</h2>

<p>composerを利用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "require": {
</span><span class='line'>    "cloudinary/cloudinary_php": "dev-master"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>インストール。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ composer install
</span><span class='line'>Loading composer repositories with package information
</span><span class='line'>Installing dependencies (including require-dev)
</span><span class='line'>  - Installing cloudinary/cloudinary_php (dev-master cfa2fd7)
</span><span class='line'>    Cloning cfa2fd7d4043844b46411c213795eafb648703df
</span><span class='line'>
</span><span class='line'>Writing lock file
</span><span class='line'>Generating autoload files</span></code></pre></td></tr></table></div></figure>


<h2>herokuにインストール</h2>

<p>アドオンを追加。</p>

<p><img src="http://kayakuguri.github.io/images/2015/05/Cloudinary01.jpg" alt="add-on" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku addons:create cloudinary:starter
</span><span class='line'>Creating unwinding-truly-5886... done
</span><span class='line'>Adding unwinding-truly-5886 to your-app-name... done
</span><span class='line'>Setting CLOUDINARY_URL and restarting your-app-name... done, v3
</span><span class='line'>Use `heroku addons:docs cloudinary` to view documentation.</span></code></pre></td></tr></table></div></figure>


<p>環境変数の<code>CLOUDINARY_URL</code>でアカウント情報を取得できる。</p>

<h2>アップロード</h2>

<p>以下のコードを記述し、アクセス。<br/>
flickr上にある画像をアップロードしている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require '../vendor/autoload.php';
</span><span class='line'>
</span><span class='line'>use Cloudinary;
</span><span class='line'>use Cloudinary\Uploader;
</span><span class='line'>
</span><span class='line'>$account = parse_url(getenv('CLOUDINARY_URL'));
</span><span class='line'>
</span><span class='line'>\Cloudinary::config(array(
</span><span class='line'>    "cloud_name" =&gt; $account['host'],
</span><span class='line'>    "api_key" =&gt; $account['user'],
</span><span class='line'>    "api_secret" =&gt; $account['pass']
</span><span class='line'>));
</span><span class='line'>
</span><span class='line'>$ret = \Cloudinary\Uploader::upload("https://farm9.staticflickr.com/8748/16531734384_afdd2327e5_z.jpg");
</span><span class='line'>
</span><span class='line'>print_r($ret);</span></code></pre></td></tr></table></div></figure>


<p>で、結果は以下のように返ってくる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Array ( 
</span><span class='line'>  [public_id] =&gt; xa9kfgp9jvxouekmrrqu 
</span><span class='line'>  [version] =&gt; 1430964069 
</span><span class='line'>  [signature] =&gt; 088135f7c32ad04436a18eb35d05b28bfd9e7870 
</span><span class='line'>  [width] =&gt; 640 
</span><span class='line'>  [height] =&gt; 480 
</span><span class='line'>  [format] =&gt; jpg 
</span><span class='line'>  [resource_type] =&gt; image 
</span><span class='line'>  [created_at] =&gt; 2015-05-07T02:01:09Z 
</span><span class='line'>  [tags] =&gt; Array ( ) 
</span><span class='line'>  [bytes] =&gt; 174550 
</span><span class='line'>  [type] =&gt; upload 
</span><span class='line'>  [etag] =&gt; 6fdff26d1bd4d9cc55c3c613743a8dc1 
</span><span class='line'>  [url] =&gt; http://res.cloudinary.com/harslxcej/image/upload/v1430964069/xa9kfgp9jvxouekmrrqu.jpg 
</span><span class='line'>  [secure_url] =&gt; https://res.cloudinary.com/harslxcej/image/upload/v1430964069/xa9kfgp9jvxouekmrrqu.jpg 
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<h2>URLでの表示</h2>

<p>アップロードが完了したものはアクセスするURLを変更することでサイズなどを変更できる。</p>

<h3>オリジナル</h3>

<pre><code>http://res.cloudinary.com/harslxcej/image/upload/xa9kfgp9jvxouekmrrqu.jpg
</code></pre>

<p><img src="http://res.cloudinary.com/harslxcej/image/upload/xa9kfgp9jvxouekmrrqu.jpg" alt="オリジナル" /></p>

<h3>リサイズ</h3>

<pre><code>http://res.cloudinary.com/harslxcej/image/upload/w_100,h_100/xa9kfgp9jvxouekmrrqu.jpg
</code></pre>

<p><img src="http://res.cloudinary.com/harslxcej/image/upload/w_100,h_100/xa9kfgp9jvxouekmrrqu.jpg" alt="リサイズ" /></p>

<h3>角丸</h3>

<pre><code>http://res.cloudinary.com/harslxcej/image/upload/w_320,h_240,c_fill,r_20/xa9kfgp9jvxouekmrrqu.png
</code></pre>

<p><img src="http://res.cloudinary.com/harslxcej/image/upload/w_320,h_240,c_fill,r_20/xa9kfgp9jvxouekmrrqu.png" alt="角丸" /></p>

<p>利用できるタグなどは以下を参照。<br/>
<a href="http://cloudinary.com/documentation/image_transformations">Image transformations | Cloudinary</a></p>

<h2>PHPでURLの生成</h2>

<p>上記のURLをPHPのコードで生成する。</p>

<h3>cl_image_tag</h3>

<p><code>cl_image_tag</code>を利用すると、<code>&lt;img&gt;</code>のタグごと出力される。</p>

<pre><code>$public_id = 'xa9kfgp9jvxouekmrrqu';
echo cl_image_tag($public_id, array( "alt" =&gt; "Sample Image" ));
</code></pre>

<p>結果</p>

<pre><code>&lt;img src='https://res.cloudinary.com/harslxcej/image/upload/xa9kfgp9jvxouekmrrqu' alt='Sample Image'/&gt;
</code></pre>

<p>加工</p>

<pre><code>cl_image_tag($public_id, array(
    "width" =&gt; 100,
    "height" =&gt; 100,
    "crop" =&gt; "fill",
    "effect" =&gt; "grayscale"
));
</code></pre>

<p>結果</p>

<pre><code>&lt;img src='https://res.cloudinary.com/harslxcej/image/upload/c_fill,e_grayscale,h_100,w_100/xa9kfgp9jvxouekmrrqu' height='100' width='100'/&gt;
</code></pre>

<p><img src='https://res.cloudinary.com/harslxcej/image/upload/c_fill,e_grayscale,h_100,w_100/xa9kfgp9jvxouekmrrqu' height='100' width='100'/></p>

<h3>cloudinary_url</h3>

<p>URLを直接取得するには、<code>cloudinary_url</code>を使用する。</p>

<pre><code>echo cloudinary_url($public_id);
echo cloudinary_url($public_id, array(
    "width" =&gt; 100,
    "height" =&gt; 100,
    "crop" =&gt; "fill",
    "effect" =&gt; "grayscale"
));
</code></pre>

<p>その他、詳しくは以下を参照。</p>

<p><a href="http://cloudinary.com/documentation/php_image_manipulation">PHP image manipulation | Cloudinary</a></p>

<h2>参考</h2>

<p><a href="http://cloudinary.com/documentation/php_integration">PHP integration | Cloudinary</a><br/>
<a href="http://programmer-jobs.blogspot.jp/2013/12/phpphalconcloudinary.html">PHPフレームワークのPhalconで&#12289;写真ストレージクラウドのCloudinaryと連携 一言多いプログラマーの独り言</a><br/>
<a href="https://github.com/cloudinary/cloudinary_php">cloudinary/cloudinary_php</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]アウトバウンドメッセージ送信時のエラー]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/01/salesforce-outbound-xml/"/>
    <updated>2015-05-01T14:26:22+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/01/salesforce-outbound-xml</id>
    <content type="html"><![CDATA[<p>先日、アウトバウンドメッセージをPHPで受けとる方法を紹介したけれど、試しているとアウトバウンドメッセージの送信がSalesforce側から何度も試行されていることがわかった。</p>

<!-- more -->


<p>salesforce側のログを見ていると、以下のようなエラーが出ている。<br/>
<code>設定 &gt; 監視 &gt; アウトバウンドメッセージ</code></p>

<p><img src="http://kayakuguri.github.io/images/2015/05/outbound_error.jpg" alt="エラー" /></p>

<blockquote><p>org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.</p></blockquote>

<p>どうやら、PHP側の応答が、SOAPの形式に則ってないとsalesforce側でXMLの解析ができずにエラーが出てしまうっぽい。<br/>
なので、エラーが解消されるまで数回試行が続く、っぽい。</p>

<p>応答はXMLの形式でなければならないので、headerでXMLとしてやる必要がある。</p>

<pre><code>header("Content-Type: application/xml; charset=UTF-8");
</code></pre>

<p>また、返却するXMLは以下のような形でないといけないよう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
</span><span class='line'>  &lt;soapenv:Body&gt;
</span><span class='line'>      &lt;notificationsResponse xmlns="http://soap.sforce.com/2005/09/outbound"&gt;
</span><span class='line'>      &lt;Ack&gt;true&lt;/Ack&gt;
</span><span class='line'>  &lt;/notificationsResponse&gt;
</span><span class='line'>  &lt;/soapenv:Body&gt;
</span><span class='line'>&lt;/soapenv:Envelope&gt;</span></code></pre></td></tr></table></div></figure>


<p>というわけで、以下のようにPHPを書いてやればエラーは出ない。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>header("Content-Type: application/xml; charset=UTF-8");
</span><span class='line'>
</span><span class='line'>//--何らかの処理--
</span><span class='line'>
</span><span class='line'>$response = '&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soapenv:Body&gt;&lt;notificationsResponse xmlns="http://soap.sforce.com/2005/09/outbound"&gt;&lt;Ack&gt;true&lt;/Ack&gt;&lt;/notificationsResponse&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;';
</span><span class='line'>echo $response;</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://www.tgerm.com/2014/08/testing-soap-outbound-messages-without-failures-saxexception.html">{!blog.concret.io}: Testing SOAP Outbound Messages without failures</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Heroku]スティッキーセッションの有効化]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/30/heroku-sticky-session/"/>
    <updated>2015-04-30T10:03:06+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/30/heroku-sticky-session</id>
    <content type="html"><![CDATA[<p>herokuで、<code>スティッキーセッション(セッションアフィニティ)</code>を有効化するオプションが公開されたってことで、調べてみた。</p>

<!-- more -->


<h2>dyno</h2>

<p>herokuでは、dynoを増やしていく=ロードバランサとなって、アクセスの度にランダムにサーバを割り振られる。<br/>
なので、サーバ側に保持しているセッションは同一ユーザーのアクセスであってもページを遷移しただけでセッションが保持されていないサーバに割り振られてしまい、セッション切れを起こしてしまう、という問題がある。<br/>
これを解決していたのが主に、<a href="https://addons.heroku.com/memcachier">MemCachier</a>というアドオンで、このMemCachier側にセッションを保持してやることでサーバが変わってもセッションを維持する、という流れで作成するのがセオリーだった。<br/>
(1Dynoだとサーバは一つなので必要ない)</p>

<h2>スティッキーセッション</h2>

<p>それを解決するのが、スティッキーセッション、セッション・アフィニティ、と呼ばれるもののよう。<br/>
これは、ロードバランサなどでサーバが数台ある場合に、特定のユーザーからのアクセスは特定のサーバのみに接続するように調整するもの、らしい。<br/>
なので、ページ遷移をしてもサーバが変わらず、セッションが切れる事がない、というわけ。<br/>
ただし、この設定で重要なのは、この同じサーバに割り当てる時間、の設定、とのこと。<br/>
長くするとロードバランサの意味がなくなっていくし、短くするとセッションが切れてしまう。<br/>
heroku上でこの時間を設定できるのかは今のところ不明。</p>

<p><a href="http://docs.aws.amazon.com/ja_jp/ElasticLoadBalancing/latest/DeveloperGuide/elb-sticky-sessions.html">スティッキーセッションの有効化と無効化</a></p>

<h2>herokuでの設定</h2>

<p>この機能はまだベータ版、ってことで、デフォルトではもちろん無効となっている。<br/>
有効にするには以下のコマンドを実行する必要がある。</p>

<pre><code>$ heroku labs:enable http-session-affinity
</code></pre>

<h2>検証</h2>

<p>実際に検証してみる。<br/>
検証は、以下のサイトにあった、訪問回数をカウントする単純なものを使用してみた。<br/>
この回数がリロードの度に増えていけばセッションが引き継がれている、ということだが、<br/>
別サーバに接続されてセッションがなくなるとカウントがやり直しになったりする、はず。</p>

<p><a href="http://www.phppro.jp/school/phpschool/vol8/1">第8回　セッションの仕組みを知ろう &ndash; PHP基礎講座</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>session_start();
</span><span class='line'>
</span><span class='line'>if (isset($_SESSION["counter"])) {
</span><span class='line'>  $_SESSION["counter"]++;
</span><span class='line'>  print($_SESSION["counter"]."回目の読み込みです。");
</span><span class='line'>} else {
</span><span class='line'>   $_SESSION["counter"] = 0;
</span><span class='line'>  print("はじめての読み込みです。");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>1 Dyno</h3>

<p>まず、Dynoを１で。<br/>
これは順調に増えた。当然の結果。</p>

<h3>2 Dyno</h3>

<p>dynoを増やしてみる。<br/>
何度かリロードしていると、10回目くらいで「はじめての読み込みです。」という表示が登場。<br/>
それ以降、何回かごとに別々のカウント数が表示される状態に。</p>

<h3>セッションアフィニティ</h3>

<p>で、この2Dynoの状態でセッションアフィニティをオンに。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku labs:enable http-session-affinity                                                    [ruby-2.1.2]
</span><span class='line'>Enabling http-session-affinity for session-afinity-test... done
</span><span class='line'>WARNING: This feature is experimental and may change or be removed without notice.
</span><span class='line'>For more information see: https://devcenter.heroku.com/articles/session-affinity</span></code></pre></td></tr></table></div></figure>


<p>アクセスしてみる。<br/>
100になるくらいまでリロードしてみたが、正常にカウント出来たいたので、きちんと同一セッションを見にいっていると思う。</p>

<h3>注意</h3>

<p>ただし、herokuをdeployするとセッションが切れてしまうのは変わらないようなので注意が必要。<br/>
また、ベータ版の機能となるので、これに頼った実装はまだ早いと思われる。</p>

<h2>参考</h2>

<p><a href="https://blog.heroku.com/archives/2015/4/28/introducing_session_affinity">Heroku | Introducing Session Affinity</a><br/>
<a href="https://devcenter.heroku.com/articles/session-affinity">Heroku Labs: Session Affinity | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Salesforce]承認申請のアウトバウンドメッセージをPHPで受け取る]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/28/approval-process-outbound-massage/"/>
    <updated>2015-04-28T20:20:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/28/approval-process-outbound-massage</id>
    <content type="html"><![CDATA[<p>salesforceからのアウトバウンドメッセージの内容をPHPで受け取ってみた。</p>

<!-- more -->


<h2>アウトバウンドメッセージの設定</h2>

<p>前回作成したものの申請時のアクション部分に<code>アウトバウンドメッセージ</code>を追加。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/outbound01.jpg" alt="" /></p>

<p>以下のように設定した。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/outbound02.jpg" alt="" /></p>

<p>設定完了<br/>
<img src="http://kayakuguri.github.io/images/2015/04/outbound03.jpg" alt="" /></p>

<h2>PHPで受け取る</h2>

<p>アウトバウンドメッセージは<code>SOAP</code>で通信が行われる。<br/>
なので、XML。<br/>
以下のようにアクセスが記録されていた。</p>

<pre><code>at=info method=POST path="/liam_dnes.php?id=1" host=shrouded-island-xxxx.herokuapp.com request_id=01b99464-c9dc-4e15-aa19-xxxxxxx fwd="xxx.xxx.78.8" dyno=web.1 connect=1ms service=4ms status=200 bytes=189
</code></pre>

<p>どうやらPOSTでアクセスされているよう。<br/>
<code>$_POST</code>のままでは取得できなかった。<br/>
どうやら生のPOSTデータを取得する必要があるらしい。</p>

<p>以下で取得した。</p>

<pre><code>$data = file_get_contents( 'php://input' );
</code></pre>

<p>取得すると、以下のようなXMLが取得できた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
</span><span class='line'>    &lt;soapenv:Body&gt;
</span><span class='line'>        &lt;notifications xmlns="http://soap.sforce.com/2005/09/outbound"&gt;
</span><span class='line'>            &lt;OrganizationId&gt;00D10000000Zyxxxxx&lt;/OrganizationId&gt;
</span><span class='line'>            &lt;SessionId xsi:nil="true"/&gt;
</span><span class='line'>            &lt;PartnerUrl&gt;https://ap.salesforce.com/services/Soap/u/33.0/00D100000xxxxx&lt;/PartnerUrl&gt;
</span><span class='line'>            &lt;ActionId&gt;04k100000008STGAA2&lt;/ActionId&gt;
</span><span class='line'>            &lt;EnterpriseUrl&gt;https://ap.salesforce.com/services/Soap/c/33.0/00D100000xxxxx&lt;/EnterpriseUrl&gt;
</span><span class='line'>            &lt;Notification&gt;
</span><span class='line'>                &lt;Id&gt;04l1000000xxxxxx&lt;/Id&gt;
</span><span class='line'>                &lt;sObject xsi:type="sf:Opportunity" xmlns:sf="urn:sobject.enterprise.soap.sforce.com"&gt;
</span><span class='line'>                    &lt;sf:Id&gt;0061000000cxxxxx&lt;/sf:Id&gt;
</span><span class='line'>                    &lt;sf:Name&gt;アウトバウンドのテスト商談&lt;/sf:Name&gt;
</span><span class='line'>                    &lt;sf:StageName&gt;Prospecting&lt;/sf:StageName&gt;
</span><span class='line'>                    &lt;sf:IsClosed&gt;false&lt;/sf:IsClosed&gt;
</span><span class='line'>                &lt;/sObject&gt;
</span><span class='line'>            &lt;/Notification&gt;
</span><span class='line'>        &lt;/notifications&gt;
</span><span class='line'>    &lt;/soapenv:Body&gt;
</span><span class='line'>&lt;/soapenv:Envelope&gt;</span></code></pre></td></tr></table></div></figure>


<p>アウトバウンドの設定は以下のような形。</p>

<p>ここからXMLをパースして、名前など設定した値を取得するには以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>
</span><span class='line'>$data = file_get_contents('php://input');
</span><span class='line'>$xml = simplexml_load_string($data);
</span><span class='line'>
</span><span class='line'>//ID
</span><span class='line'>$notification = $xml-&gt;children('http://schemas.xmlsoap.org/soap/envelope/')-&gt;Body-&gt;children('http://soap.sforce.com/2005/09/outbound')-&gt;notifications-&gt;Notification;
</span><span class='line'>echo $notification-&gt;Id;
</span><span class='line'>
</span><span class='line'>//パラメータ
</span><span class='line'>$params = $notification-&gt;sObject-&gt;children('urn:sobject.enterprise.soap.sforce.com');
</span><span class='line'>echo $params-&gt;Id;
</span><span class='line'>echo $params-&gt;Name;
</span><span class='line'>echo $params-&gt;IsClosed;</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://php.net/manual/ja/wrappers.php.php#wrappers.php.input">php://input</a><br/>
<a href="http://ivystar.jp/programming/php/what-is-phpinput/">「php://input」とは何？－POSTの生データ？ | アイビースター</a><br/>
<a href="https://amigotechnotes.wordpress.com/2013/11/16/parse-xml-with-namespace-by-simplexml-in-php/">Parse XML with namespace by SimpleXML in PHP | Amigo&#039;s Technical Notes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Salesforce]承認プロセスの作り方]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/28/approval-process/"/>
    <updated>2015-04-28T12:43:41+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/28/approval-process</id>
    <content type="html"><![CDATA[<p>承認プロセスを作成してみたので、そのログ。</p>

<!-- more -->


<h2>承認プロセスの作成</h2>

<p><code>商談</code>オブジェクトで作成してみる。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin01.jpg" alt="" /></p>

<h4>ステップ 1. 名前と説明の入力</h4>

<p>プロセス名と一意の名前を適当に入力。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin02.jpg" alt="" /></p>

<h4>ステップ 2. 入力条件の指定</h4>

<p>特定の入力条件で承認プロセスを発動する場合は設定。<br/>
全てレコードで承認を必要とする場合はなしで。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin03.jpg" alt="" /></p>

<h4>ステップ 3. 承認者項目と編集権限のプロパティの指定</h4>

<p>この承認申請を誰に割り当てるのか＝誰に承認してもらうのかを決定<br/>
標準項目としてマネージャーという項目がある。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin04.jpg" alt="" /></p>

<p>これは、ユーザーの項目内で設定しているマネージャーに指定されたユーザーを承認者とするもの。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin05.jpg" alt="" /></p>

<p>今回はなしにしておいて後で設定する。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin06.jpg" alt="" /></p>

<h4>ステップ 4. 通知テンプレートの選択</h4>

<p>承認開始時に送信するメールを設定。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin07.jpg" alt="" /></p>

<p>メールテンプレートは以下から作成可能。<br/>
管理->コミュニケーションテンプレート->メールテンプレート</p>

<p>なしでもよい。</p>

<h4>ステップ 5. 承認ページレイアウトに表示する項目の選択</h4>

<p>承認者が承認時に確認する画面の項目を選択する。<br/>
今回はそのままで。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin08.jpg" alt="" /></p>

<h4>ステップ 6. 申請者の指定</h4>

<p>この承認プロセスを申請できるユーザーを限定できる。<br/>
通常は所有者、となる。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin09.jpg" alt="" /></p>

<p><code>保存</code>する。</p>

<h2>承認ステップの作成</h2>

<p><img src="http://kayakuguri.github.io/images/2015/04/shonin10.jpg" alt="" /></p>

<p>最大15個までのステップを追加可能。</p>

<h4>ステップ 1. 名前と説明の入力</h4>

<p>名前と一意の名前を適当に入力。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin11.jpg" alt="" /></p>

<h4>ステップ 2. ステップ条件の指定</h4>

<p>このステップに入る条件を指定できる。<br/>
今回は全てのレコードとする。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin25.jpg" alt="" /></p>

<h4>ステップ 3. 割り当て先の選択</h4>

<p>承認者の設定。<br/>
都度変えたい場合は、手動、も選べる。<br/>
今回は固定で、特定のユーザーに自動で割り当てる。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin12.jpg" alt="" /></p>

<p><code>保存</code>する。</p>

<h2>アクション</h2>

<p><img src="http://kayakuguri.github.io/images/2015/04/shonin13.jpg" alt="" /></p>

<p>以下の4つを選択可能。<br/>
上記で設定した承認ステップのアクションを作成。<br/>
申請時や承認時、却下時にアクションが起動する。</p>

<ul>
<li>ToDo</li>
<li>電子メールアラート</li>
<li>項目自動更新</li>
<li>アウトバウンドメッセージ</li>
</ul>


<h3>項目自動更新</h3>

<p>名前、一意の名前を適当に作成。<br/>
更新する項目を選択し、どの値にするかを決定する。<br/>
今回はフェーズを更新するとする。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/shonin14.jpg" alt="" /></p>

<h2>作成完了</h2>

<p>全ての設定が終わったら、<code>有効化</code>しておく。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin15.jpg" alt="" /></p>

<p>警告が出るが、OKをクリック。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin16.jpg" alt="" /></p>

<p>完了。</p>

<h2>承認の流れ</h2>

<p>商談レコードを作成し、承認申請を行う、のだが、承認申請のボタンがデフォルトでは出てなかった。 <br/>
(環境によって変わるかも)<br/>
なので、ページレイアウトから<code>承認申請</code>のボタンを追加した。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin17.jpg" alt="" /></p>

<p>また、同じく関連項目の<code>承認履歴</code>を追加しておく。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin21.jpg" alt="" /></p>

<p>表示されるようになったので、<code>承認申請</code>をクリック。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin18.jpg" alt="" /></p>

<p>警告が表示されるが、OK。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin19.jpg" alt="" /></p>

<p>するとレコードがロックされ、<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin20.jpg" alt="" /></p>

<p>設定したメールが飛ぶ。</p>

<p>そして、承認履歴の部分に承認、却下などの項目が現れる。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin22.jpg" alt="" /></p>

<p><code>承認/却下</code>をクリックすると、入力エリアが現れるので、適当にコメントを書いて承認してみる。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin23.jpg" alt="" /></p>

<p>レコードに戻ると、承認されている。設定した項目自動更新も反映されている。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/shonin24.jpg" alt="" /></p>

<p>実際は承認するユーザーは別になると思うが、今回は自分で申請して承認している。</p>

<h2>参考</h2>

<p><a href="https://www.youtube.com/watch?v=b6_9NNTn_Hk">Salesforceをもっと使い倒そう-承認プロセス &ndash; YouTube</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWSアカウントのセキュリティ設定を実施]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/24/aws-account-security/"/>
    <updated>2015-04-24T16:22:32+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/24/aws-account-security</id>
    <content type="html"><![CDATA[<p>awsはアカウントだけ作ってあまり活用はしてなかったのだけれど、<br/>
一つ前の記事でS3を使ったりした際にアカウントのセキュリティ云々があったので設定をしてみた。</p>

<!-- more -->


<p>まず、アカウントを作っただけの状態ではルートのアカウントだけが設定された状態。<br/>
この状態でアイパスが漏れたら<strong>何でもやりたい放題</strong>。<br/>
怖すぎます。</p>

<p>設定前のセキュリティ状況。<br/>
<strong>何もしてません</strong></p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam01.png" alt="" /></p>

<h2>2段階認証</h2>

<h3>Authy</h3>

<p>まずは2段階認証。<br/>
iPhoneアプリ「Authy」というアプリを使ってみる。</p>

<p>ダウンロードして起動し、電話番号とメールアドレスを入力。
SNSか電話で取得したPINコードを入力してアクティベート。</p>

<h3>AWSで設定</h3>

<p><code>サービス-&gt;IAM</code>のセキュリティステータスから、<br/>
ルートアカウントのMFAをアクティブ化、を開き、MFAの管理、をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam02.png" alt="" /></p>

<p>仮想MFAデバイス、を選択して、次のステップ、へ。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam03.png" alt="" /></p>

<p>デバイスはインストールしてるので、チェックをつけて次のステップへ。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam04.png" alt="" /></p>

<p>QRコードが表示される。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam05.png" alt="" /></p>

<h3>アプリの設定</h3>

<p>初めての起動だったので、ど真ん中にある<code>+</code>をタップ。<br/>
バックアップのためのパスワードを設定するように言われるので、入力。<br/>
するとQRコードを読み取る画面になるので、上記QRコードをスキャン。</p>

<p>スキャン後、<code>Done</code>で完了。</p>

<p>その後、6桁の数字が、30秒ごとに切り替わるので、<br/>
先程のQRコードの画面で、2つの異なる数字を入力します。</p>

<p>無事、完了。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam06.png" alt="" /></p>

<p>１つ完了。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam07.png" alt="" /></p>

<h2>IAMアカウントの作成</h2>

<h3>アカウントの作成</h3>

<p>awsの申込に使用したアカウントは常用しないほうがよいよう。<br/>
なので、普段使用するユーザーとして、IAMアカウントを作成する。</p>

<p>先程のセキュリティ設定から、<code>個々のIAMユーザーの作成</code>を開き、<code>ユーザーの管理</code>をクリック。</p>

<p>一つ前の記事とかぶるが、ユーザーを作成。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam08.png" alt="" /><br/>
<img src="http://kayakuguri.github.io/images/2015/04/iam09.png" alt="" /></p>

<p>キーが生成されるので、ダウンロードして保管しておくこと。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam10.png" alt="" /></p>

<h3>ポリシーのアタッチ</h3>

<p>作成したアカウントをクリックし、ポリシーのアタッチをクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam12.png" alt="" /></p>

<p>今回はログインユーザー代わり、ってことで、<code>AdministratorAccess</code>を選択する。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam13.png" alt="" /></p>

<h3>パスワードの設定</h3>

<p>アカウントをクリックした後の画面から、パスワードを設定する。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam18.png" alt="" /></p>

<p>パスワードは自動で発行にしておいた。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam15.png" alt="" /></p>

<p>パスワードが発行される。ダウンロードするなどして管理する。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam16.png" alt="" /></p>

<h3>MFAの追加</h3>

<p>同じようにauthyでMFAを追加しておく。<br/>
同じように、QRコードを読み取り、キーを2つ打って追加完了。</p>

<p>２つ完了。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam11.png" alt="" /></p>

<h2>IAMアカウントにパスワードを設定</h2>

<p>セキュリティ設定から、<br/>
<code>IAMパスワードポリシーの適用</code>を開き、<code>パスワードポリシーの管理</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam14.png" alt="" /></p>

<p>表示されるポリシーを適切に設定してパスワードポリシーの適用をクリック。<br/>
今回はデフォルトのままにしておいた。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam19.png" alt="" /></p>

<p>３つ完了。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam20.png" alt="" /></p>

<h2>グループの作成と割り当て</h2>

<p>セキュリティの設定から<code>グループを使用してアクセス許可を割り当て</code>を開き、<code>グループの管理</code>をクリック。<br/>
IAMユーザーを作成した時と同じように。<br/>
<code>新しいグループの作成</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam21.png" alt="" /></p>

<p>適当に名前をつけて、、
<img src="http://kayakuguri.github.io/images/2015/04/iam22.png" alt="" /></p>

<p>ポリシーを同じく、<code>AdministratorAccess</code>にセットして、作成。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/iam23.png" alt="" /></p>

<p>とりあえず作成だけでOKとしておく。<br/>
アカウントは1つだけなので。</p>

<p>4つ完了。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam25.png" alt="" /></p>

<h2>ルートアクセスキーの削除</h2>

<p>順番が逆ですが、最後にルートアクセスキーを削除する。</p>

<p>右上のユーザー名をクリックし、<code>認証情報</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam26.png" alt="" /></p>

<p>アクセスキー、を開く。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/iam27.png" alt="" /></p>

<p>2つある。<br/>
調べてみると、先日別のブログ用に導入したWordPressのアドオン、Amason JSがこのルートアクセスキーを使用しているよう。<br/>
そういえば追加したような…。<br/>
<a href="http://easyramble.com/wordpress-amazon-js-plugin.html">WordPressでアマゾン・アソシエイトを簡単設定！Amazon JSプラグイン | EasyRamble</a></p>

<p>このプラグインはいまのところIAMのキーには対応していない、とのこと。<br/>
なのでこのアクセスキーは削除できない。<br/>
同じくもう一つのものもウィジェットに使っている可能性大。<br/>
2008年作成、とかなり古いのだけど…。</p>

<h2>結果</h2>

<p>結局全部クリアには出来なかった。<br/>
ルートアクセスキーを無効化に出来なかったのでその他の設定の効力がかなり落ちている感じだけど、<br/>
(IAMユーザーの設定とかしててもルートで入れるので意味ない)<br/>
とりあえず2段階認証だけは入れておけばいいと思います。</p>

<h2>参考</h2>

<p><a href="http://qiita.com/yoshidashingo/items/cd206daca0596659b440">AWSアカウント作ったらこれだけはやっとけ！IAMユーザーとAuthyを使ったMFAで2段階認証 &ndash; Qiita</a><br/>
<a href="http://docs.aws.amazon.com/ja_jp/general/latest/gr/managing-aws-access-keys.html">AWS アカウントのアクセスキー管理</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Herokuアドオン]TransloaditでAWS S3にアップロード]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/24/heroku-transloadit-3/"/>
    <updated>2015-04-24T12:41:32+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/24/heroku-transloadit-3</id>
    <content type="html"><![CDATA[<p>アップロードした動画をS3にエクスポートしてみた。</p>

<!-- more -->


<h2>AWS</h2>

<h4>バケットを作る</h4>

<p>まずはawsにてバケットを作る。</p>

<p><code>movie-upload-sample</code>で作った。<br/>
(アンダースコアを入れると怒られた)</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/aws01.png" alt="" /></p>

<p><img src="http://kayakuguri.github.io/images/2015/04/aws02.png" alt="" /></p>

<h4>アクセスキーとシークレットキー</h4>

<p><img src="http://kayakuguri.github.io/images/2015/04/aws03.png" alt="" /></p>

<p><code>s3upload</code>で、作成した。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/aws04.png" alt="" /></p>

<p>作成後、アクセスキーとシークレットキーを確認できる。<br/>
CSVでもダウンロード化。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/aws05.png" alt="" /></p>

<p>ただし、シークレットアクセスキーを確認できるのはこの状態が最後らしく、そのまま閉じようとしたら警告された。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/aws06.png" alt="" /></p>

<p>確かに作成したユーザー情報を見ても確認は出来なかった。<br/>
忘れてしまったりした場合は再度アクセスキーの作成が必要なよう。<br/>
(セキュリティ的にはある程度の頻度で変更することがオススメされている)</p>

<p>次に権限を付与。<br/>
作成したユーザーをクリックして、アクセス許可 &ndash;> ポリシーのアタッチ、をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/aws07.png" alt="" /></p>

<p><code>AmazonS3FullAccess</code>を選択して、ポリシーのアタッチ。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/aws08.png" alt="" /></p>

<p>アタッチされた。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/aws09.png" alt="" /></p>

<p>これでS3にアップロードする準備が整った。</p>

<h2>Transloaditテンプレート</h2>

<p>作成したバケットやIAMの情報をテンプレートに埋め込んでいく。<br/>
その時、アップするpathを選択できる。</p>

<h3>path</h3>

<p>ドキュメントを見ていると、以下のようにするのが推奨？されていた。<br/>
<code>${previous_step.name}/${unique_prefix}/${file.id}.${file.ext}</code><br/>
出力例：<code>video-step-name/a8/d3eeeb67479f11f8b091b04f6181ad.png</code></p>

<p>とりあえずこのままアップロードしてみた。<br/>
アップロードしたテンプレートは以下。</p>

<pre><code>'params' =&gt; [
    'steps' =&gt; [
        'encode_video' =&gt; [
            'use' =&gt; ':original',
            'robot' =&gt; '/video/encode',
            'preset' =&gt; 'android'
        ],
        'thumb' =&gt; [
            'user' =&gt; 'encode_video',
            'robot' =&gt; '/video/thumbs',
            'count' =&gt; 1,
            'offsets' =&gt; [1],
            'width'=&gt; 100,
            'height'=&gt; 100,
        ],
        'export' =&gt; [
            'use' =&gt; ['encode_video', 'thumb'],
            'robot' =&gt; '/s3/store',
            'bucket' =&gt; 'movie-upload-sample',
            'key' =&gt; 'アクセスキー',
            'secret' =&gt; 'シークレットキー',
            'path' =&gt; '${previous_step.name}/${unique_prefix}/${file.id}.${file.ext}'
        ]
    ],
    'redirect_url' =&gt; $redirectUrl,
]
</code></pre>

<p>awsを見ると以下のようにアップロードされていた。</p>

<p><strong>動画</strong><br/>
<img src="http://kayakuguri.github.io/images/2015/04/aws10.png" alt="" /><br/>
<strong>サムネイル</strong><br/>
<img src="http://kayakuguri.github.io/images/2015/04/aws11.png" alt="" /></p>

<p>ユニーク、なのだが、<code>${unique_prefix}</code>が戻り値にも含まれておらず、アップロード側から知ることが出来ないっぽい。<br/>
<code>file.id</code>は、UUIDになっているとのことなのでユニークなよう。<br/>
これを利用して以下のようにする。</p>

<pre><code>${previous_step.name}/${file.id}.${file.ext}
</code></pre>

<p>これで以下の様なURLで参照出来るようになる。</p>

<pre><code>https://{bucket}.s3.amazonaws.com/movie-upload-sample/encode_video/{id}.mp4
https://{bucket}.s3.amazonaws.com/movie-upload-sample/thumb/{id}.jpg
</code></pre>

<p>ちなみに、エクスポートを使用した場合は、<br/>
transloaditの管理画面から処理済のファイルへのアクセスも、指定したS3へのファイルが参照されるようになるよう。<br/>
(S3だけでなく、FTPなどでも同様)</p>

<h2>全コード</h2>

<pre><code>&lt;?php

require 'vendor/autoload.php';

use transloadit\Transloadit;
$transloadit = new Transloadit([
    'key' =&gt; getenv('TRANSLOADIT_AUTH_KEY'),
    'secret' =&gt; getenv('TRANSLOADIT_SECRET_KEY')
]);

$response = Transloadit::response();
if ($response) {
    echo '&lt;h1&gt;Assembly status:&lt;/h1&gt;';
    echo '&lt;pre&gt;';
    print_r($response);
    echo '&lt;/pre&gt;';
    exit;
}

$redirectUrl = sprintf(
    'http://%s%s',
    $_SERVER['HTTP_HOST'],
    $_SERVER['REQUEST_URI']
);

echo $transloadit-&gt;createAssemblyForm([
    'params' =&gt; [
        'steps' =&gt; [
            'encode_video' =&gt; [
                'use' =&gt; ':original',
                'robot' =&gt; '/video/encode',
                'preset' =&gt; 'android'
            ],
            'thumb' =&gt; [
                'user' =&gt; 'encode_video',
                'robot' =&gt; '/video/thumbs',
                'count' =&gt; 1,
                'offsets' =&gt; [1],
                'width'=&gt; 100,
                'height'=&gt; 100,
            ],
            'export' =&gt; [
                'use' =&gt; ['encode_video', 'thumb'],
                'robot' =&gt; '/s3/store',
                'bucket' =&gt; 'movie-upload-sample',
                'key' =&gt; 'アクセスキー',
                'secret' =&gt; 'シークレットキー',
                'path' =&gt; '${previous_step.name}/${file.id}.${file.ext}'
            ]
        ],
        'redirect_url' =&gt; $redirectUrl
    ]
]);
?&gt;

&lt;!DOCTYPE html&gt;
&lt;html lang="ja"&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="container"&gt;
    &lt;h1&gt;Pick a video to encode for iPhone / Android.&lt;/h1&gt;
    &lt;form&gt;
        &lt;div class="form-group"&gt;
            &lt;label for="exampleInputFile"&gt;File input&lt;/label&gt;
            &lt;input name="example_upload" id="exampleInputFile" type="file"&gt;
            &lt;p class="help-block"&gt;Upload video, NOW.&lt;/p&gt;
        &lt;/div&gt;
        &lt;input type="submit" class="btn btn-danger btn-lg" value="Upload"&gt;
    &lt;/form&gt;
&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>余談</h2>

<p>ちなみに、transloaditのエンコードタイプには、プリセットでiPhoneとアンドロイドどちらも用意されているけれど、<br/>
今回試してみたところではどちらも同じ内容のようだった。<br/>
<code>ffmpeg</code>で読み込ませてみた内容は以下。<br/>
(videoとaudioだけ抽出)</p>

<pre><code>Stream #0:0(und): Video: h264 (Constrained Baseline) (avc1 / 0x31637661), yuv420p, 480x320, 523 kb/s, 25 fps, 25 tbr, 25 tbn, 50 tbc (default)
Stream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, mono, fltp, 82 kb/s (default)
</code></pre>

<h2>参考</h2>

<p><a href="https://transloadit.com/demos/video-encode/encode-for-iphone">Encode a video for the iPhone and strip sound | Transloadit</a><br/>
<a href="https://transloadit.com/demos/video-encode/encode-for-android">Encode a video for Android | Transloadit</a><br/>
<a href="https://transloadit.com/demos/s3-store/store-encoding-and-thumbnails">Encode a video, extract 8 thumbnails and store everything in your S3 bucket | Transloadit</a><br/>
<a href="http://joppot.info/2014/06/14/1621">awsのs3を操作する為のaccess keyとsecret keyを取得する(IAM)</a><br/>
<a href="https://transloadit.com/docs/conversion-robots/#export-to-amazon-s3-with-the-s3store-bot">Export to Amazon S3 with the /s3/store bot | Transloadit</a><br/>
<a href="https://transloadit.com/docs/#assembly-variables">#Assembly variables | Integration | Transloadit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePhp]ログイン処理を外部APIを使用して実装する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/23/cakephp-custom-authenticate/"/>
    <updated>2015-04-23T17:30:59+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/23/cakephp-custom-authenticate</id>
    <content type="html"><![CDATA[<p>DBからの情報取得ではなく、外部のAPIにアクセスして認証したかったので<br/>
Authコンポーネントをカスタマイズしてみた。</p>

<!-- more -->


<p>画面遷移としては、ユーザー名(メールアドレス)とパスワードを入力し、<br/>
APIに接続してOKならログインする、というもの。</p>

<h2>Authenticate</h2>

<p>おーせんてぃけーと。<br/>
上記で書いた通り、フォームから送信されたユーザー名とパスワードを使用してログインするので、<br/>
<code>FormAuthenticate</code>を継承する。<br/>
オーバーライドする関数は、<code>authenticate</code>と<code>_findUser</code>。</p>

<p><code>/app/Controller/Component/Auth/UseAPIAuthenticate.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>App::uses('FormAuthenticate', 'Controller/Component/Auth');
</span><span class='line'>
</span><span class='line'>class UseAPIAuthenticate extends FormAuthenticate {
</span><span class='line'>
</span><span class='line'>    public function authenticate(CakeRequest $request, CakeResponse $response)
</span><span class='line'>    {
</span><span class='line'>      //コンポーネントの設定を読み込む
</span><span class='line'>        $userModel = $this-&gt;settings['userModel'];
</span><span class='line'>        list(, $model) = pluginSplit($userModel);
</span><span class='line'>        $fields = $this-&gt;settings['fields'];
</span><span class='line'>        if (!$this-&gt;_checkFields($request, $model, $fields)) {
</span><span class='line'>            return false;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        return $this-&gt;_findUser(
</span><span class='line'>            $request-&gt;data[$model][$fields['username']],
</span><span class='line'>            $request-&gt;data[$model][$fields['password']]
</span><span class='line'>        );
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public function _findUser($username, $password = null)
</span><span class='line'>    {
</span><span class='line'>        // ログイン実施
</span><span class='line'>        $this-&gt;user = null;
</span><span class='line'>        $ret = ClassRegistry::init('Api')-&gt;login($username, $password);
</span><span class='line'>        if (! $ret) {
</span><span class='line'>            //なんらかのログインエラー
</span><span class='line'>            return false;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>      //ユーザーデータ。中身はニーズに合わせて
</span><span class='line'>        $result = Array(
</span><span class='line'>            "username" =&gt; $username,
</span><span class='line'>            "result" =&gt; $ret
</span><span class='line'>        );
</span><span class='line'>        return $result;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>APIに接続する処理は、Apiというモデルに記述しているとする。<br/>
コンポーネントからモデルを使用するのはあまりよくないともどこかで見たが、標準のAuthコンポーネントも使用していたのでよしとする。<br/>
その際の使用方法は以下のようになる。</p>

<pre><code>ClassRegistry::init('Api')
</code></pre>

<p>ログイン成功後、返却するデータの中身は、配列である必要があるよう。<br/>
<code>true</code>とだけ返してても認証されなかった。</p>

<h2>AppController</h2>

<p>AppControllerにて、上記のAuthコンポーネントの設定を書く。</p>

<p><code>/app/Controller/AppController.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>App::uses('Controller', 'Controller');
</span><span class='line'>
</span><span class='line'>class AppController extends Controller {
</span><span class='line'>
</span><span class='line'>    public $uses = array('User', 'Api');
</span><span class='line'>
</span><span class='line'>    public $components = array(
</span><span class='line'>        'Session',
</span><span class='line'>        'Auth' =&gt; array(
</span><span class='line'>            'authenticate' =&gt; array(
</span><span class='line'>                'UseAPI' =&gt; array(
</span><span class='line'>                    'userModel' =&gt; 'User',
</span><span class='line'>                    'fields' =&gt; array(
</span><span class='line'>                        'username' =&gt; 'email'
</span><span class='line'>                    )
</span><span class='line'>                )
</span><span class='line'>            )
</span><span class='line'>        )
</span><span class='line'>    );
</span><span class='line'>        
</span><span class='line'>    ....略....
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>作成したクラスファイル名が、<code>UseAPIAuthenticate</code>の場合は、<code>UseAPI</code>と、Authenticateを引いて指定する。<br/>
これは実際にCakeのAuthコンポーネント内で、以下のように指定されているため。</p>

<p><code>/lib/Cake/Controller/Component/AuthComponent.php</code> 795行目</p>

<pre><code>$className = $class . 'Authenticate';
</code></pre>

<p>で、使用するモデルは、<code>User</code>とし、今回はメールアドレスでのログインということで、<code>username</code>に<code>email</code>を使用する指定をしている。</p>

<h2>UsersController</h2>

<p>で、ログインページで実行される処理を<code>UsersController</code>に書く。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>App::uses('AppController', 'Controller');
</span><span class='line'>class UsersController extends AppController
</span><span class='line'>{
</span><span class='line'>  public $uses = array('User', 'Api');
</span><span class='line'>  
</span><span class='line'>  public function beforeFilter()
</span><span class='line'>    {
</span><span class='line'>        $this-&gt;Auth-&gt;allow('login', ...認証除外ページ);
</span><span class='line'>        parent::beforeFilter();
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    /**
</span><span class='line'>     * ログイン
</span><span class='line'>     */
</span><span class='line'>    public function login()
</span><span class='line'>    {
</span><span class='line'>        //POST値がある？
</span><span class='line'>        if (! $this-&gt;request-&gt;is('post')) {
</span><span class='line'>            // ログインフォームを表示
</span><span class='line'>            $this-&gt;logout(); //ログアウトしてログインページを表示させる処理
</span><span class='line'>            return;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        /// authコンポーネント使用
</span><span class='line'>        //ログイン
</span><span class='line'>        $result = $this-&gt;Auth-&gt;login(); //trueかfalseが返ってくる
</span><span class='line'>        $data = $this-&gt;Auth-&gt;user(); //UseAPIAuthenticateで設定したユーザーデータを取得出来る
</span><span class='line'>        
</span><span class='line'>        if (!$result) {
</span><span class='line'>            $this-&gt;Session-&gt;setFlash(__('ユーザ名もしくはパスワードが正しくありません'));
</span><span class='line'>            return;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        //トップページへ
</span><span class='line'>        $this-&gt;redirect(array('action' =&gt; 'index'));
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    ....略....
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>$this-&gt;Auth-&gt;login()</code>とするだけでフォームで入力された内容が引き継がれてログイン処理が行われる。<br/>
実際の処理は、<code>/lib/Cake/Controller/Component/AuthComponent.php</code>で行われている。<br/>
ログインの結果は、trueかfalesで返ってくるのでfalseの場合はエラーを表示している。<br/>
ログイン成功時にセットしたユーザーデータは、<code>$this-&gt;Auth-&gt;user()</code>で取得できる。</p>

<h2>Model</h2>

<p>実際にAPIを使用してログインしている箇所は側だけ。中身は割愛。</p>

<p><code>/app/Model/Api.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>App::uses('AppModel', 'Model');
</span><span class='line'>class Sf extends AppModel
</span><span class='line'>{
</span><span class='line'>  public function login($email, $pw)
</span><span class='line'>    {
</span><span class='line'>        //何かしらAPIへの接続処理
</span><span class='line'>
</span><span class='line'>        return $result;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>View</h2>

<p>最後はビュー。フォーム部分だけ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php echo $this-&gt;Form-&gt;create('User', array('novalidate' =&gt; true)); ?&gt;
</span><span class='line'>  &lt;label&gt;
</span><span class='line'>        ログインID&lt;br&gt;
</span><span class='line'>        &lt;?php echo $this-&gt;Form-&gt;input('User.email', array(
</span><span class='line'>            'label' =&gt; false,
</span><span class='line'>            'placeholder' =&gt; ''
</span><span class='line'>        )); ?&gt;
</span><span class='line'>    &lt;/label&gt;
</span><span class='line'>    
</span><span class='line'>    &lt;label&gt;
</span><span class='line'>        パスワード&lt;br&gt;
</span><span class='line'>        &lt;?php echo $this-&gt;Form-&gt;input('User.password', array(
</span><span class='line'>            'type' =&gt; 'password',
</span><span class='line'>            'value' =&gt; '',
</span><span class='line'>            'label' =&gt; false,
</span><span class='line'>            'placeholder' =&gt; ''
</span><span class='line'>        )); ?&gt;
</span><span class='line'>    &lt;/label&gt;
</span><span class='line'>    &lt;?php echo $this-&gt;Session-&gt;flash(); // エラーメッセージ ?&gt;
</span><span class='line'>    
</span><span class='line'>    &lt;?php echo $this-&gt;Form-&gt;submit('ログイン', array(
</span><span class='line'>        'class' =&gt; 'input-submit',
</span><span class='line'>        'div' =&gt; false
</span><span class='line'>    )); ?&gt;
</span><span class='line'>&lt;?php echo $this-&gt;Form-&gt;end() ?&gt;</span></code></pre></td></tr></table></div></figure>


<p>nameにあたる、<code>User.email</code>の部分はCompnentの設定に合わせる。<br/>
ちなみに、formタグにある、<code>'novalidate' =&gt; true</code>は、<br/>
何も指定しない場合は勝手に、<code>required="required"</code>がついてしまうので、それを付けない設定を一括で指定している。<br/>
バリデーションは他でまとめてしているのでついてないほうがなにかとやりやすい。</p>

<h2>まとめ</h2>

<p>最初は自前でクッキーなどをチェックしていたのだが、<br/>
ページ遷移時の認証機構をcakephpが一括して受け持ってくれるのはかなり楽だった。</p>

<h2>参考</h2>

<p><a href="http://book.cakephp.org/2.0/ja/core-libraries/components/authentication.html#id6">カスタム認証オブジェクトの作成 &ndash; 認証 &mdash; CakePHP Cookbook 2.x ドキュメント</a><br/>
<a href="http://qiita.com/gold1/items/94938956ed02d939b7f2">CakePHP 2.4 md5 で Auth認証 &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuをデプロイするためにgitに空でコミットする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/21/git-allow-empty/"/>
    <updated>2015-04-21T11:14:17+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/21/git-allow-empty</id>
    <content type="html"><![CDATA[<p>小ネタ。<br/>
タイトル通り。</p>

<!-- more -->


<p>herokuはgitにてpushした時にのみ、deployが走る。<br/>
しかし、アドオンを追加した時など、ファイルの変更はないけれどデプロイだけしたい場合がたまにある。<br/>
そんな時にはファイルを無駄に少しだけ触ったりしていたのだけれど、空でコミット出来る事が出来ると知ったので、メモ。</p>

<pre><code>$ git commit -m "for deploy heroku" --allow-empty
</code></pre>

<p>これでコミットしておいてpushすると無事、デプロイ出来る。</p>

<p>以下、検証。</p>

<pre><code>$ git push heroku master
Everything up-to-date
$ git commit -m "for deploy heroku" --allow-empty
[master 069260f] for deploy heroku
$ git push heroku master
Counting objects: 1, done.
Writing objects: 100% (1/1), 190 bytes | 0 bytes/s, done.
.....
  0022947..069260f  master -&gt; master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel5をpostgresqlでHerokuにデプロイ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/21/laravel5-on-heroku/"/>
    <updated>2015-04-21T10:59:17+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/21/laravel5-on-heroku</id>
    <content type="html"><![CDATA[<p>Laravel5をherokuに入れてみました。<br/>
ブラウザやディレクトリでの操作は一切なしで、黒い画面のみで作成してみました。</p>

<!-- more -->


<h2>mcrypt</h2>

<p>ローカルにてインストールしようとするとないと怒られたので導入。<br/>
また、PHPのバージョンが古い場合は、<a href="http://kayamemo.mrlittlebig.com/blog/2015/04/15/mac-update-php/">アップデートが必要</a>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php -v                                                                                                           [ruby-2.1.2]
</span><span class='line'>PHP 5.6.7 (cli) (built: Mar 22 2015 19:03:55)
</span><span class='line'>Copyright (c) 1997-2015 The PHP Group
</span><span class='line'>Zend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies
</span><span class='line'>
</span><span class='line'>$ brew search mcrypt                                                                                               [ruby-2.1.2]
</span><span class='line'>libtomcrypt    mcrypt       php53-mcrypt   php54-mcrypt   php55-mcrypt   php56-mcrypt
</span><span class='line'>
</span><span class='line'>$ brew install php56-mcrypt
</span><span class='line'>...略...
</span><span class='line'>==&gt; Summary
</span><span class='line'>  /usr/local/Cellar/php56-mcrypt/5.6.7: 3 files, 56K, built in 116 seconds</span></code></pre></td></tr></table></div></figure>


<h2>laravelの導入</h2>

<p>インストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ composer create-project laravel/laravel --prefer-dist laravel-sample-on-heroku
</span><span class='line'>...略...
</span><span class='line'>$ cd laravel-sample-on-heroku</span></code></pre></td></tr></table></div></figure>


<p>ドキュメントルートの設定</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch Procfile
</span><span class='line'>$ echo 'web: vendor/bin/heroku-php-apache2 public' &gt;&gt; Procfile</span></code></pre></td></tr></table></div></figure>


<p>Gitを作成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git init
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -m 'init laravel'</span></code></pre></td></tr></table></div></figure>


<p>herokuアプリの作成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku create laravel-sample-on-heroku
</span><span class='line'>Creating laravel-sample-on-heroku... done, stack is cedar-14
</span><span class='line'>https://laravel-sample-on-heroku.herokuapp.com/ | https://git.heroku.com/laravel-sample-on-heroku.git
</span><span class='line'>Git remote heroku added</span></code></pre></td></tr></table></div></figure>


<p>このままデプロイすると、<code>package.json</code>がルートディレクトリにあるため、<code>nodejs</code>のアプリになってしまう。<br/>
なので、phpのビルドパックを追加。<br/>
<a href="https://github.com/heroku/heroku-buildpack-php">https://github.com/heroku/heroku-buildpack-php</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku config:set BUILDPACK_URL=https://github.com/heroku/heroku-buildpack-php
</span><span class='line'>Setting config vars and restarting laravel-sample-on-heroku... done, v4
</span><span class='line'>BUILDPACK_URL: https://github.com/heroku/heroku-buildpack-php</span></code></pre></td></tr></table></div></figure>


<blockquote><p>アプリの作成と同時にするには、<code>create</code>の後に、<code>--buildpack URL</code>を追加してやると一回で設定できる。<br/>
$ heroku create laravel-sample-on-heroku &mdash;buildpack URL xxx</p></blockquote>

<p>すでにリモートリポジトリに追加されているので、pushしてデプロイ。</p>

<pre><code>$ git push heroku master
</code></pre>

<p>ページを開くとすでに動作する状態。</p>

<pre><code>$ heroku open
</code></pre>

<p>完了！</p>

<h2>DBの設定</h2>

<p>アドオンを追加(無料)</p>

<pre><code>$ heroku addons:add heroku-postgresql:dev
</code></pre>

<p>DBの情報を取得</p>

<pre><code>$ heroku config | grep HEROKU_POSTGRESQL
HEROKU_POSTGRESQL_CRIMSON_URL: postgres://UserName:Password@Host.compute-1.amazonaws.com:Port/DatabaseName  
</code></pre>

<p>生成したDBをプライマリーに設定</p>

<pre><code>$ heroku pg:promote HEROKU_POSTGRESQL_CRIMSON_URL
Promoting HEROKU_POSTGRESQL_CRIMSON_URL (DATABASE_URL) to DATABASE_URL... done
</code></pre>

<p>ここからはファイル編集</p>

<pre><code>$ vi config/database.php
---
//29行目
'default' =&gt; 'mysql',
↓
'default' =&gt; 'pgsql',
---
//冒頭に追加
$url = parse_url(getenv("DATABASE_URL"));

$host = $url["host"];
$username = $url["user"];
$password = $url["pass"];
$database = substr($url["path"], 1);
---
//67行目から
'pgsql' =&gt; [
    'driver'   =&gt; 'pgsql',
    'host'     =&gt; $host,
    'database' =&gt; $database,
    'username' =&gt; $username,
    'password' =&gt; $password,
    'charset'  =&gt; 'utf8',
    'prefix'   =&gt; '',
    'schema'   =&gt; 'public',
],
</code></pre>

<p>pushしてデプロイ</p>

<pre><code>$ git add .
$ git commit -m 'setup Heroku PostgreSQL'
$ git push heroku master
</code></pre>

<p>最後に<a href="http://laravel3.kore1server.com/docs/database/migrations">マイグレーション</a>を実行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku run php artisan migrate
</span><span class='line'>Running `php artisan migrate` attached to terminal... up, run.4728
</span><span class='line'>**************************************
</span><span class='line'>*     Application In Production!     *
</span><span class='line'>**************************************
</span><span class='line'>
</span><span class='line'>Do you really wish to run this command? [y/N]y
</span><span class='line'>Migration table created successfully.
</span><span class='line'>Migrated: 2014_10_12_000000_create_users_table
</span><span class='line'>Migrated: 2014_10_12_100000_create_password_resets_table</span></code></pre></td></tr></table></div></figure>


<p><code>/auth/register</code>で、ユーザー登録画面。<br/>
<code>/auth/login</code>でログイン。<br/>
<code>/password/email</code>でパスワードリセットになる。<br/>
(メール送信は設定していないので出来ない)</p>

<p>一通りの設定はこれで完了！<br/>
あとはセッション保持に<a href="https://addons.heroku.com/memcachier">MemCachier</a>か<a href="https://addons.heroku.com/?q=redi">Redis To Go</a>の設定や、<br/>
メール送信用に<a href="https://addons.heroku.com/sendgrid">SendGrid</a>などが必要になると思う。</p>

<h2>サンプル</h2>

<p>作成したアプリは以下。</p>

<p><a href="http://laravel-sample-on-heroku.herokuapp.com">http://laravel-sample-on-heroku.herokuapp.com</a></p>

<h2>参考</h2>

<p><a href="http://qiita.com/MasatoYoshioka@github/items/1b4de4249dc40ff1d902">macosxのphpにmcryptをインストール &ndash; Qiita</a><br/>
<a href="http://www.slideshare.net/esolves/deploy-laravel-on-heroku">Deploy Laravel on Heroku</a><br/>
<a href="https://mattstauffer.co/blog/laravel-on-heroku-using-a-postgresql-database">Laravel on Heroku &ndash; Using a PostgreSQL database &ndash; MattStauffer.co</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[apex][SF]ApexRESTのテストコードでのパラメータの渡し方]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/20/rest-apex-test/"/>
    <updated>2015-04-20T15:43:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/20/rest-apex-test</id>
    <content type="html"><![CDATA[<p>いくつくか方法があるような。<br/>
そのうち一番楽だったものを。</p>

<!-- more -->


<p>例えば以下のようなクラスを作ったとする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@RestResource(urlMapping='/user/*')
</span><span class='line'>global with sharing class userInfo_API {
</span><span class='line'>  @HttpPost
</span><span class='line'>  global static ResultData doPost(){
</span><span class='line'>      RestRequest req = RestContext.request;
</span><span class='line'>      String user_id = req.params.get('user_id');
</span><span class='line'>      
</span><span class='line'>      //何らかの処理
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>この場合、<code>user_id</code>を渡すためには以下のように記述します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@isTest
</span><span class='line'>private class Test_userInfo_API {
</span><span class='line'>  static testMethod void postTest(){
</span><span class='line'>      RestRequest req = new RestRequest();
</span><span class='line'>      RestContext.request = req;
</span><span class='line'>      req.addParameter('user_id', 'ユーザーID');
</span><span class='line'>      userInfo_API.doPost();
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>RestRequest</code>のパラメータにセットしておくだけでOKなよう。</p>

<p>余談。<br/>
APIのクラスのみを実行させようとしてもエラーが出る。</p>

<blockquote><p>System.NullPointerException: Attempt to de-reference a null object</p></blockquote>

<p>なのでテストメソッド内では最低限以下は必要。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RestRequest req = new RestRequest();
</span><span class='line'>RestContext.request = req;
</span><span class='line'>userInfo_API.doPost();</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github page build failedしたメモ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/20/githubpage-failed/"/>
    <updated>2015-04-20T12:10:05+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/20/githubpage-failed</id>
    <content type="html"><![CDATA[<p>このページはGithub pageで作成しているのですが、いつものように記事を書いてdeployしたところ、反映されない。<br/>
しばらくするとビルド失敗の通知がメールで来た。</p>

<!-- more -->


<h2>通知</h2>

<p>以下、メールの内容。</p>

<blockquote><p>The page build failed with the following error:</p>

<p>page build timed out</p>

<p>If you have any questions you can contact us by replying to this email.</p></blockquote>

<p>全くもって情報がない…。</p>

<h2>調査</h2>

<p>とりあえず、公式のトラブルシューティングは以下。<br/>
<a href="https://help.github.com/articles/troubleshooting-github-pages-build-failures/">Troubleshooting GitHub Pages build failures &ndash; User Documentation</a></p>

<p>ググって以下のページを読んでいると以下の情報が。<br/>
<a href="http://dekokun.github.io/posts/2012-07-29-4.html">GitHub Pagesでのビルド失敗</a></p>

<blockquote><p>どうも、markdownの中に“+”で始まる行が3連続するとJekyllのビルドが失敗するらしい</p></blockquote>

<p>つい先日まで問題がなかったことを見ると、今日更新しようとした記事に原因があるとしか思えない。<br/>
ということは記述したマークダウンの内容に何か問題があるのかもしれない。</p>

<h2>検証</h2>

<p>というわけで書いた記事の中身を消してデプロイしてみる。<br/>
……<br/>
無事、デプロイできた。記事も見れた。<br/>
どうやらどこかの記述がダメなよう。</p>

<p>内容を徐々に付け足しながら何回かデプロイして確認してみると……結局全て通った。<br/>
どうやら単純に何かの処理で時間がたまたまかかってタイムアウトになってしまっただけのよう。</p>

<h2>結果</h2>

<p>結局何も問題はなかったけれど、メモとして残しておく。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePHP]ページタイトルを設定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/20/cakephp-pagetitle/"/>
    <updated>2015-04-20T11:16:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/20/cakephp-pagetitle</id>
    <content type="html"><![CDATA[<p>変な所でハマってしまったのでメモ。</p>

<!-- more -->


<p>cakephpでタイトルの設定をするべくググっていると、どうやら以下で変更が出来る、とのこと。</p>

<pre><code>$this-&gt;set('title_for_layout', 'ページタイトル');
</code></pre>

<p>しかし一向に反映されない。<br/>
それもそのはずで、デフォルトのテンプレート内の<code>title</code>タグ部分を変更してしまっていて、<br/>
固定にしていたので変更が効かなかった。<br/>
そもそも、<code>$this-&gt;set</code>はviewに変数セットするためだけの関数なので、View側と記述を合わせれば<code>title_for_layout</code>である必要がない、ということになる。</p>

<p>ちなみデフォルトテンプレートの初期設定は以下になっているよう。<br/>
<a href="http://ameblo.jp/itboy/entry-11510932141.html">http://ameblo.jp/itboy/entry-11510932141.html</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;title&gt;
</span><span class='line'>    &lt;?php echo $cakeDescription ?&gt;:
</span><span class='line'>    &lt;?php echo $title_for_layout; ?&gt;
</span><span class='line'>&lt;/title&gt;</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://book.cakephp.org/2.0/ja/views.html#view-layouts">ビュー &mdash; CakePHP Cookbook 2.x ドキュメント &ndash; レイアウト</a><br/>
<a href="http://www.t-net.ne.jp/~cyfis/cakephp/controller/pageTitle.html">ページタイトルを設定する &ndash; CakePHPの部屋</a><br/>
<a href="http://satoshi14.hatenablog.com/entry/2013/05/13/125421">CakePHP ページタイトルを一括管理する方法 &ndash; Autumn Like Blog</a></p>
]]></content>
  </entry>
  
</feed>
