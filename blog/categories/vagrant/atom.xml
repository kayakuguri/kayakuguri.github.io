<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vagrant | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/vagrant/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2016-07-11T18:08:09+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel HomesteadのPostgreSQLにPosticoから接続する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/06/09/homestead-postgres-via-homestead/"/>
    <updated>2016-06-09T14:56:23+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/06/09/homestead-postgres-via-homestead</id>
    <content type="html"><![CDATA[<p>まとまって情報がなかったのでメモ。</p>

<!-- more -->


<h1>SSH</h1>

<p>ssh接続する際のユーザー名・パスワードは、デフォルトでは、<code>vagrant/vagrant</code>のよう。
ユーザー名はホスト名とは別で、vagrantを立ち上げた状態で以下のコマンドで確認出来た。</p>

<p><code>
$ vagrant ssh-config
Host default
  HostName 127.0.0.1
  User vagrant
  Port 2222
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile /Users/USER_NAME/Vagrant/app_folder/.vagrant/machines/default/virtualbox/private_key
  IdentitiesOnly yes
  LogLevel FATAL
  ForwardAgent yes
</code></p>

<p>この中の、<code>User vagrant</code>という部分。</p>

<p>SSH Hostは、<code>Homestead.yaml</code>で指定したip。
デフォルトは、<code>192.168.10.10</code>だと思う。</p>

<p><code>
ip: "192.168.10.10"
</code></p>

<h1>Postgres</h1>

<p>Postgresはデフォルトでは以下の設定になっている。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">ホスト名 </td>
<td align="left"> localhost </td>
</tr>
<tr>
<td></td>
<td align="left"> DB名 </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> ユーザー名 </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> パスワード </td>
<td align="left"> secret </td>
</tr>
</tbody>
</table>


<h1>Postico</h1>

<p>Posticoから接続する際には、Optionsから、<code>Connect via SSH</code>を選択してSSH接続設定をしておく。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Nickname </td>
<td align="left"> (なんでも) </td>
</tr>
<tr>
<td></td>
<td align="left"> Host </td>
<td align="left"> localhost (デフォルト) </td>
</tr>
<tr>
<td></td>
<td align="left"> Port </td>
<td align="left"> 5432 (デフォルト) </td>
</tr>
<tr>
<td></td>
<td align="left"> User </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> Password </td>
<td align="left"> secret </td>
</tr>
<tr>
<td></td>
<td align="left"> Database </td>
<td align="left"> homestead </td>
</tr>
<tr>
<td></td>
<td align="left"> SSH Host </td>
<td align="left"> 192.168.10.10 </td>
</tr>
<tr>
<td></td>
<td align="left"> Port </td>
<td align="left"> 22 (デフォルト) </td>
</tr>
<tr>
<td></td>
<td align="left"> User </td>
<td align="left"> vagrant </td>
</tr>
<tr>
<td></td>
<td align="left"> Password </td>
<td align="left"> vagrant </td>
</tr>
<tr>
<td></td>
<td align="left"> Private Key </td>
<td align="left"> なし </td>
</tr>
</tbody>
</table>


<p><img src="/images/2016/06/postico_homestead.jpg" alt="" /></p>

<p>これで接続出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="https://laravel.com/docs/5.1/homestead">Laravel Homestead</a></li>
<li><a href="http://qiita.com/megane42/items/1d8ae7444d8c1b10bbd7">Vagrant で作った VM にやってはいけない2つのこと &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6.5にPHP5.4を入れる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/11/26/centos65-php54/"/>
    <updated>2015-11-26T17:50:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/11/26/centos65-php54</id>
    <content type="html"><![CDATA[<p>CentOS6.5の標準のPHPは5.3。<br/>
5.4環境が欲しかったので作ってみたメモ。</p>

<!-- more -->


<p>PHPは入ってない状態から始める。</p>

<pre><code>$ php -v
-bash: php: command not found
</code></pre>

<h2>rpmでレポジトリを追加</h2>

<p>あまり意味はわかってないですが、epelとremiレポジトリを追加。<br/>
<code>vagrant</code>にSSHで入ってからの作業。</p>

<p><code>
$ sudo rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
$ sudo rpm -Uvh http://dl.iuscommunity.org/pub/ius/stable/Redhat/6/x86_64/ius-release-1.0-11.ius.el6.noarch.rpm
$ sudo rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
</code></p>

<h2>PHPをインストール</h2>

<pre><code>$ sudo yum install php --enablerepo=remi
</code></pre>

<h2>確認</h2>

<pre><code>$ php -v
PHP 5.4.45 (cli) (built: Sep 30 2015 15:56:06) 
Copyright (c) 1997-2014 The PHP Group
Zend Engine v2.4.0, Copyright (c) 1998-2014 Zend Technologies
</code></pre>

<h2>参考</h2>

<p><a href="http://qiita.com/Chrowa3/items/6c045d952a191a1203b4">Vagrant chef/centos-6.5 に PHP 5.4 を突っ込む &ndash; Qiita</a><br/>
<a href="http://blog.ybbo.net/2014/01/22/%E3%80%90%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%80%91centos6%E3%81%ABphp5-4%E3%82%92yum%E3%81%A7%E7%B0%A1%E5%8D%98%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/">【シンプル】CentOS6にPHP5.4をyumで簡単にインストールする手順田舎に住みたいエンジニアの日記 | 田舎に住みたいエンジニアの日記</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant内でArtisanコマンドの実行とPostgreSQLの接続]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/10/13/vagrant-postgresql/"/>
    <updated>2015-10-13T18:48:30+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/10/13/vagrant-postgresql</id>
    <content type="html"><![CDATA[<p><a href="https://box.scotch.io/">Scotchbox</a>で立てたvagrant環境にてlaravelを使用している中で、<br/>
DB利用の際のartisanコマンドが実行出来なかったので調べてみた。</p>

<!-- more -->


<h2>artisan</h2>

<p>そのままvagrantを実行しているローカルのディレクトリ上でartisanコマンドを実行しても仮想環境のDBへの接続が出来ないため、エラーが出てしまう。</p>

<p>```
$ php artisan migrate
[PDOException]
  SQLSTATE[08006] [7] could not connect to server: Connection refused</p>

<pre><code>Is the server running on host "localhost" (::1) and accepting
TCP/IP connections on port 5432?
</code></pre>

<p>  could not connect to server: Connection refused</p>

<pre><code>Is the server running on host "localhost" (127.0.0.1) and accepting
TCP/IP connections on port 5432?
</code></pre>

<p>  could not connect to server: Connection refused</p>

<pre><code>Is the server running on host "localhost" (fe80::1) and accepting
TCP/IP connections on port 5432?
</code></pre>

<p>```</p>

<p>なので、vagrant内にSSHで入ってから実行する必要がある。<br/>
実行するディレクトリは、<code>/var/www</code>となる。</p>

<p><code>
$ vagrant ssh
vagrant@laravel-sample:~$ cd /var/www
vagrant@laravel-sample:/var/www$ php artisan
</code></p>

<p>これでvagrant内のpostgreSQLに対してartisanを実行してテーブルの作成が出来た。</p>

<h2>GUI接続</h2>

<p>ついでに、vagrant内のpostgreSQLをローカルのGUI環境から確認したい場合は、接続情報のSSHの項目も設定してやることで接続が可能。</p>

<p>利用しているソフトが<a href="https://eggerapps.at/postico/">Potico</a>なので、その設定内容のキャプチャ。<br/>
DBの設定内容は、Scotchboxの場合。<br/>
<a href="https://github.com/scotch-io/scotch-box#postgresql">https://github.com/scotch-io/scotch-box#postgresql</a></p>

<p><img src="/images/2015/10/postico.png" alt="" /></p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Host </td>
<td align="left"> localhost</td>
</tr>
<tr>
<td></td>
<td align="left"> User </td>
<td align="left"> root</td>
</tr>
<tr>
<td></td>
<td align="left"> Password </td>
<td align="left"> root</td>
</tr>
<tr>
<td></td>
<td align="left"> Database </td>
<td align="left"> scotchbox</td>
</tr>
<tr>
<td></td>
<td align="left"> SSH Host </td>
<td align="left"> 192.168.33.10</td>
</tr>
<tr>
<td></td>
<td align="left"> (SSH) User </td>
<td align="left"> vagrant</td>
</tr>
<tr>
<td></td>
<td align="left"> (SSH) Password </td>
<td align="left"> vagrant</td>
</tr>
</tbody>
</table>


<h2>参考</h2>

<p><a href="https://laravel10.wordpress.com/2015/02/21/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/">初めてのLaravel 5.1 : (6) データベースの環境設定 | ララ帳</a><br/>
<a href="http://laravel.io/forum/02-11-2014-artisan-error-on-migrate-using-vagrant">aravel.io &ndash; The Laravel Community Portal</a><br/>
<a href="https://snakeycode.wordpress.com/2015/01/02/vagrant-postgresql-and-pgadmin/">Vagrant, PostgreSQL and pgAdmin | Snakey Code</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrantを1.7.2にアップデートしたら起動しなくなったメモ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/07/01/update-vagrant/"/>
    <updated>2015-07-01T18:55:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/07/01/update-vagrant</id>
    <content type="html"><![CDATA[<p>Vagrantを1.3くらいから1.7.2にアップデートしたら起動しなくなった。<br/>
解決方法をメモ。</p>

<!-- more -->


<h2>対処方法</h2>

<p>以下のファイルを書き換えた。</p>

<p><code>~/.vagrant.d/setup_version</code><br/>
元は、<code>1.5</code>という文字列が入っていたが、それを、<br/>
<code>1.1</code>という文字に変更した。<br/>
追記ではなく、変更。</p>

<h2>実行</h2>

<p>で、任意のディレクトリで<code>vagrant up</code>すると以下の文言が。</p>

<blockquote><p>Vagrant is upgrading some internal state for the latest version.
Please do not quit Vagrant at this time. While upgrading, Vagrant
will need to copy all your boxes, so it will use a considerable
amount of disk space. After it is done upgrading, the temporary disk
space will be freed.</p>

<p>Press ctrl-c now to exit if you want to remove some boxes or free
up some disk space.</p>

<p>Press the Enter or Return key to continue.</p></blockquote>

<p>そのまま<code>Enter</code>キー叩く。<br/>
しばらく待つと何やら表示されるが、無事、起動。</p>

<pre><code>$ vagrant up
default                   running (virtualbox)
</code></pre>

<p>そもそもvagrantのアップデートやインストールがパッケージってのがめんどくさい。。</p>

<h2>参考</h2>

<p><a href="http://qiita.com/hgsk/items/520b4160804d7299eb34">Vagrant1.5.1へのアップグレード後にvagrant upに失敗する場合の直し方 &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerをvagrantに入れてwebサーバーを立ち上げるまで]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/09/my-first-docker/"/>
    <updated>2015-06-09T20:21:19+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/09/my-first-docker</id>
    <content type="html"><![CDATA[<p>dockerは話にはよく聞くけど全くわからなかったので、とりあえずインストールして動かすところまでやってみた。</p>

<!-- more -->


<h2>Ubuntu</h2>

<p>Dockerはlinux環境でのみ動作可能、ということで、Vagrantにlinux環境を作って、そこにdockerをインストールする。<br/>
さらに、dockerはUbuntuで開発されているとのことなので、同じくUbuntuにインストールしてやるのが一番無難っぽい。</p>

<h3>VagrantBoxの作成</h3>

<p>Ubuntu14の64bit版を使ってvagrantboxを作成する。<br/>
<a href="http://www.vagrantbox.es/">http://www.vagrantbox.es/</a><br/>
このページ内で、<code>trusty</code>で検索。<br/>
(Ubuntu14はtrustyと呼ばれているらしい)</p>

<p>その64bit版のURLをコピー。ちなみに以下のURL。</p>

<blockquote><p><a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box">https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box</a></p></blockquote>

<h3>VagratBoxの追加</h3>

<p>vagrantに追加する。</p>

<pre><code>$ vagrant box add trusty64 https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box
</code></pre>

<p><code>box add</code>で先程コピーしたURLから追加する。<br/>
<code>trusty64</code>としたところはboxの名前なので任意でよい。</p>

<p>10分くらい待つと完了した。</p>

<h3>初期化</h3>

<p>導入したいディレクトリに移動して、初期化する。</p>

<pre><code>$ vagrant init trusty64
</code></pre>

<p>先程指定したboxの名前を使用する。<br/>
ここでもしばらく待つと完了。<br/>
<code>Vagrantfile</code>というファイルが作成される。<br/>
特に編集する必要はないが、IPアドレスのみ変更した。</p>

<h3>起動</h3>

<p>で、起動。</p>

<pre><code>$ vagrant up
</code></pre>

<p>sshで入ってみる。</p>

<p><code>
$ vagrant ssh
Welcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-53-generic x86_64)
...
vagrant@vagrant-ubuntu-trusty-64:~$
</code></p>

<h2>Doker</h2>

<h3>インストール</h3>

<p>で、Dockerをインストール。<br/>
公式に沿って実行する。<br/>
<a href="https://docs.docker.com/installation/ubuntulinux/">https://docs.docker.com/installation/ubuntulinux/</a></p>

<p>まずは必要なパッケージをインストール。</p>

<p><code>
$ sudo apt-get update
$ sudo apt-get install linux-image-generic-lts-trusty
$ sudo reboot
</code></p>

<p>再起動後、dockerのインストール。<br/>
<code>wget</code>がインストールされているかを確認。<br/>
インストールされていたので、そのまま進む。</p>

<pre><code>$ which wget
/usr/bin/wget
</code></pre>

<p>で、dockerパッケージをダウンロードし、インストールする。</p>

<pre><code>$ wget -qO- https://get.docker.com/ | sh
</code></pre>

<p>しばらく待つと完了。</p>

<pre><code>$ docker --version
Docker version 1.6.2, build 7c8fca2
</code></pre>

<h2>Docker image</h2>

<h3>pull</h3>

<p><a href="https://registry.hub.docker.com/">https://registry.hub.docker.com/</a><br/>
上記サイトから任意のimageを引っ張ってくる。<br/>
<code>centos</code>のイメージを入れてみる。<br/>
<a href="https://registry.hub.docker.com/search?q=centos&amp;searchfield=">centosの検索結果</a></p>

<pre><code>$ sudo docker pull centos
</code></pre>

<p>入っているimageのリストは以下で確認できる。</p>

<pre><code>$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
centos              latest              fd44297e2ddb        6 weeks ago         215.7 MB
</code></pre>

<h3>Container</h3>

<p>で、落としてきたimageからcontainerを作成して、その上で簡単なコマンドを走らせてみる。</p>

<pre><code>$ sudo docker run centos echo "hello world!"
hello world!
</code></pre>

<p><code>docker run</code>で指定したimageからcontainerを作成。<br/>
その後に続くコマンドをそのcontainer上で実行している。</p>

<p>実行されたcontainerを確認スルには以下。<br/>
(<code>-a</code>のオプションを外すすと実行中のcontainerが表示される。)</p>

<pre><code>$ sudo docker ps -a
CONTAINER ID        IMAGE               COMMAND                CREATED              STATUS                          PORTS               NAMES
0a84f937b7c        centos:latest       "echo 'hello world!'   About a minute ago   Exited (0) About a minute ago                       agitated_banach
</code></pre>

<h2>Webサーバーの立ち上げ</h2>

<h3>dockerfile</h3>

<p>dockerfileを作る。</p>

<pre><code>$ vim Dockerfile
</code></pre>

<p>中身は簡単に以下のように。</p>

<p>```
FROM centos
MAINTAINER xxx</p>

<p>RUN yum install -y httpd
ADD ./index.html /var/www/html/
EXPOSE 80
CMD [&ldquo;/usr/sbin/httpd&rdquo;, &ldquo;-D&rdquo;, &ldquo;FOREGROUND&rdquo;]
```</p>

<p><code>MAINTAINER</code>は作成者の名前などを書いてやるのが習慣らしい。</p>

<p>index.htmlを適当に作成。</p>

<p><code>
&lt;html&gt;
&lt;body&gt;
hello docker world!
&lt;/body&gt;
&lt;/html&gt;
</code></p>

<h3>build</h3>

<p>で、ビルドする。<br/>
ビルドで、imageからdockerfile内のコマンドを使用してcontainerを作成し、さらにその結果を新しくimageに出力する、ところまでをやってくれるコマンドのよう。</p>

<pre><code>$ sudo docker build -t test/httpd .
</code></pre>

<p><code>test/httpd</code>はcontainerの名前。任意でよい。<br/>
最後の<code>.</code>は現在のディレクトリでビルド、ということ。</p>

<p>しばらく待って完了…と行きたいところだけど、どうやらエラーが出て止まってしまってるよう。</p>

<p><code>
Complete!
INFO[0012] The command [/bin/sh -c yum install -y httpd] returned a non-zero code: 1
</code></p>

<p>Complete!って出てるけど、その先のStepに進まない…。</p>

<h3>エラー回避</h3>

<p>ググってみると以下がヒット。<br/>
<a href="http://fujita222.hateblo.jp/entry/2015/03/10/163657">Dockerのcentosでapacheインストール失敗する。rpmがうんちゃらとか言われる</a></p>

<p>どうやらpullしてきたcentOSがあたらしすぎてダメだったよう。<br/>
なので、この記事どおりcentos6をpullして使う。</p>

<pre><code>$ sudo docker pull centos:centos6
$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
centos              centos6             b9aeeaeb5e17        6 weeks ago         202.6 MB
</code></pre>

<p>で、<code>Dockerfile</code>の中身をcentos6を使うように修正。</p>

<p>```
FROM centos:centos6
MAINTAINER xxx</p>

<p>RUN yum install -y httpd
ADD ./index.html /var/www/html/
EXPOSE 80
CMD [&ldquo;/usr/sbin/httpd&rdquo;, &ldquo;-D&rdquo;, &ldquo;FOREGROUND&rdquo;]
```</p>

<p>これで再度実行。</p>

<pre><code>$ sudo docker build -t test/httpd .
</code></pre>

<p>ようやく無事、完了。</p>

<pre><code>$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
test/httpd          latest              74ea9508c04c        52 seconds ago      271.2 MB
centos              centos6             b9aeeaeb5e17        6 weeks ago         202.6 MB
</code></pre>

<h3>run</h3>

<p>ポートを指定してバックグラウンドで実行。</p>

<pre><code>$ sudo docker run -p 8080:80 -d test/httpd
</code></pre>

<p>起動している。</p>

<pre><code>$ sudo docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                  NAMES
4aca4268ffa3        test/httpd:latest   "/usr/sbin/httpd -D    15 seconds ago      Up 15 seconds       0.0.0.0:8080-&gt;80/tcp   compassionate_poincare
</code></pre>

<p>Vagrantfileで指定したIPアドレスに8080のポートをつけてやればアクセスが出来る。</p>

<blockquote><p><a href="http://192.168.33.30:8080/">http://192.168.33.30:8080/</a></p></blockquote>

<p>アクセスすると、先程作成した<code>index.html</code>が表示された。</p>

<p>なんだかんだで大変だったけどとりあえず起動できた。</p>

<h2>参考</h2>

<p><a href="http://dotinstall.com/lessons/basic_docker">Docker入門 (全11回) &ndash; プログラミングならドットインストール</a><br/>
<a href="http://tech.lexues.co.jp/archives/1569">【社内勉強会】Docker入門してみました | LexTech</a></p>
]]></content>
  </entry>
  
</feed>
