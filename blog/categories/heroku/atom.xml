<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2017-01-05T18:25:25+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[herokuにComodoで取得したSSL証明書を反映させる]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/07/heroku-comodo-ssl/"/>
    <updated>2016-09-07T10:27:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/07/heroku-comodo-ssl</id>
    <content type="html"><![CDATA[<p>ちょっとつなげ方とかが特殊だったのでメモ。</p>

<!-- more -->


<p><a href="https://comodo.jp/">トップページ | COMODO JAPAN  | SSL 証明書</a></p>

<p>通常の流れであれば、取得した証明書の末尾に、対応している中間CA証明書をくっつけて、秘密鍵と共にアップすればOK。<br/>
<a href="http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain/">[heroku]herokuでのSSL設定とカスタムサブドメインの適用方法 &ndash; KayaMemo</a></p>

<p>しかし、Comodoという発行会社で取得したSSLの場合は以下のような内容で4つのファイルが送られてくる。</p>

<ul>
<li>AddTrustExternalCARoot.crt (ルート証明書)</li>
<li>COMODORSAAddTrustCA.crt    (中間証明書 その1)</li>
<li>COMODORSADomainValidationSecureServerCA.crt (中間証明書 その2)</li>
<li>STAR_example_com.crt   (サーバ証明書)</li>
</ul>


<p>アップする際にはこれらを全てつなげたファイルが必要になるよう。<br/>
そしてそのつなげ方にも順番があるようで、下から順番に末尾に追加していく形。<br/>
コマンドは以下となる。</p>

<p><code>
$ cat STAR_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt &gt; STAR_example_com-bundle.pem
</code></p>

<p>これで全てつなげたファイル、 <code>STAR_example_com-bundle.pem</code> が出来上がる。<br/>
あとは、秘密鍵と共にアップするだけ。<br/>
(秘密鍵は、 <code>server.key</code> とする）</p>

<p><code>
$ heroku certs:add STAR_example_com-bundle.pem server.key -a YOUR_APP
</code></p>

<h2>参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/26100642/heroku-comodo-ssl-and-it-not-working">Heroku Comodo SSL and it not working? &ndash; Stack Overflow</a></li>
<li><a href="http://qiita.com/white_aspara25/items/d9a1f99e8abdee0b5450">ELB の ComodoSSL 証明書を更新 &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku] confファイルでのリダイレクトを設定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/01/heroku-cgi-bin-redirect/"/>
    <updated>2016-09-01T19:51:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/01/heroku-cgi-bin-redirect</id>
    <content type="html"><![CDATA[<p>herokuで構築したサイトで、ドキュメントルートにある、 <code>/cgi-bin/</code> 以下にある特定のファイルへのアクセスがあった場合に、別のディレクトリへリダイレクトさせて欲しい、という要件があった。<br/>
普通に設定しようと思ったらかなり深い話になったので備忘録。</p>

<!-- more -->


<p><code>/cgi-bin/hoge/hoge.php</code> を、<br/>
<code>/abc/hoge/hoge.php</code> へリダイレクトするとする。<br/>
(cgi-binディレクトリからabcディレクトリへリダイレクト)</p>

<h1>htacessでリダイレクト</h1>

<p>まずは何も考えずに <code>.htaccess</code> を利用してのリダイレクトを設定する。</p>

<p><code>
RewriteEngine on
RewriteRule ^cgi-bin/hoge/hoge.php$ /abc/hoge/hoge.php [R=301,L]
</code></p>

<p>これでアクセスしてみるも、 Not Found の表示。</p>

<p>試しに、<code>/cgi-bin/</code> のディレクトリを作り、その中にファイルを設置してアクセスしてみるも、同じくNot Found。<br/>
リダイレクト以前に、<code>/cgi-bin/</code> ディレクトリ自体にアクセスが出来ていない。</p>

<h1>cgi-bin</h1>

<p>apacheのデフォルト設定では、 <code>/cgi-bin/</code> ディレクトリは別のディレクトリへエイリアスが貼られている事が多いような記述があった。<br/>
セキュリティ的にドキュメントルートのcgi-binには直接アクセスさせないようになっているらしい。</p>

<p><a href="http://www.adminweb.jp/apache/cgi/index1.html">CGI用エイリアスの設定(ScriptAlias) &ndash; CGIの利用 &ndash; Apache入門</a></p>

<p>Herokuもこの設定が行われているらしく、PHP環境のherokuのconfファイルを確認すると、以下のような設定が書かれている。</p>

<p><code>
ScriptAlias /cgi-bin/ "/app/.heroku/php//share/apache2/cgi-bin/"
</code></p>

<p>そのため、ドキュメントルート以下のcgi-binディレクトリにファイルをおいても、上記ディレクトリには該当のファイルがなく、not foundとなっていたよう。</p>

<p>さらに、htaccessよりも、confファイルの方が早く呼ばれるため、htaccessでのリダイレクトが効く前に上記にエイリアスで飛ばされ、htaccessによるリダイレクトも効かなかった事が原因だった。</p>

<h1>confファイル</h1>

<p>herokuのPHPのビルドパックでは、Procfileにて任意のconfファイルを読みこませる事が出来るよう。
そこで、そのconfファイルにてリダイレクト設定を書くことで対応する。</p>

<h2>Procfile</h2>

<p>Procfileでの設定内容のオプションなどは、PHPのビルドパックのソース内に書かれている。</p>

<p><a href="https://github.com/heroku/heroku-buildpack-php/blob/master/bin/heroku-php-apache2#L46">https://github.com/heroku/heroku-buildpack-php/blob/master/bin/heroku-php-apache2#L46</a></p>

<p>このヘルプの通り、以下の書式で記述することが可能。</p>

<p><code>
web: vendor/bin/heroku-php-apache2 [options] [&lt;DOCUMENT_ROOT&gt;]
</code></p>

<h2>confファイルの読み込み</h2>

<p>任意のconfファイルを読みこませるには、2つのオプションがある。<br/>
一つは、全く新しいconfファイルを読みこませる方法。これには、小文字のcを使用する。</p>

<p><code>
-c &lt;httpd.conf&gt;
</code></p>

<p>これは既存の設定を全て上書きするため、正しく設定出来ていない場合はアプリケーションの起動に失敗するので注意が必要。<br/>
デフォルトで読み込まれているconfファイルは以下となる。</p>

<p><a href="https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/heroku.conf">https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/heroku.conf</a></p>

<p>これはあまり指定することはないと思われる。</p>

<p>もう一つは、既存のconfファイルに追加するもの。<br/>
こちらは、大文字のCを使う。</p>

<p><code>
-C &lt;httpd.inc.conf&gt;
</code></p>

<p>デフォルトで読み込まれているファイルは以下となる。
<a href="https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/default_include.conf">https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/default_include.conf</a></p>

<p>このファイルではディレクトリインデックスの設定のみが書かれている状態。
このように、設定したい内容を記述したファイルを作成し、大文字のCオプションで読み込ませることで既存の設定に追加で反映が出来る。</p>

<h2>Procfileでの設定</h2>

<p>アプリのルートに、 <code>my_app.conf</code> ファイルを作成し読み込ませるとする。<br/>
また、ドキュメントルートは <code>htdocs</code> で設定したい場合は、以下の様な内容となる。</p>

<p><code>
web: vendor/bin/heroku-php-apache2 -C ./my_app.conf htdocs
</code></p>

<p>ファイルのパスは、 <code>/app</code> からの相対パスでの指定となる。<br/>
これでアプリの起動時に、 <code>my_app.conf</code> ファイルが読み込まれることとなる。</p>

<h2>confファイルでのリダイレクト</h2>

<p>そういうわけで、confファイル内に直接リダイレクトの設定を記述する。<br/>
１点注意点としては、 <code>htaccess</code>による設定の場合は、相対パスで記述する場合は先頭の <code>/</code> が必要ないのだが、<br/>
confファイルによる設定の場合は、先頭に <code>/</code> が必要となる。</p>

<p><a href="http://ysklog.net/mod-rewrite/related05.html">【mod_rewrite】「.htaccess」と「httpd.conf」での設定による違い &#8211; mod rewrite</a></p>

<p>よって、以下のように記述する。</p>

<p><code>
RewriteEngine on
RewriteRule ^/cgi-bin/hoge/hoge.php$ /abc/hoge/hoge.php [R=301,L]
</code></p>

<p>ちなみに、デフォルトで読み込まれているファイルに記述されている、ディレクトリインデックスの設定を記述せずに読み込ませると、その設定が消えてしまい、<code>/</code> でアクセスした場合には、 <code>index.html</code> が最初に呼び出されるようになってしまう。<br/>
よって、ディレクトリインデックスの設定も合わせて書いておくと挙動が変わらずに設定できる。
一応、全文は以下。</p>

<p>```
DirectoryIndex index.php index.html index.htm</p>

<p>RewriteEngine on
RewriteRule ^/cgi-bin/hoge/hoge.php$ /abc/hoge/hoge.php [R=301,L]
```</p>

<h2>参考</h2>

<ul>
<li><a href="http://ysklog.net/mod-rewrite/related02.html">【mod_rewrite】「httpd.conf」での設定方法 &#8211; mod rewrite</a></li>
<li><a href="https://devcenter.heroku.com/articles/custom-php-settings#apache">Customizing Web Server and Runtime Settings for PHP | Heroku Dev Center</a></li>
</ul>


<h1>まとめ</h1>

<p>cgi-binディレクトリからリダイレクト、というのは実際の要件としてはめったにあることではないけれど、herokuのPHPの設定として、confファイルをカスタマイズしたい要件はあると思う。<br/>
実際、htaccessでのリダイレクトより、confファイルでのリダイレクトのほうが早いようなので出来るならそっちの方がよかったりするだろうし。<br/>
herokuは簡単に利用出来る反面、設定が触れずガチガチだと思われガチだけど、結構設定はいじれたりする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku] タイムゾーンの設定各種]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/01/heroku-timezone/"/>
    <updated>2016-09-01T10:02:04+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/01/heroku-timezone</id>
    <content type="html"><![CDATA[<p>heroku環境でタイムゾーンの設定が色々あったのでまとめ。</p>

<!-- more -->


<h1>サーバー時間</h1>

<p>まずは、herokuのサーバー時間のタイムゾーン設定。<br/>
これは簡単で、環境変数に入れてやるだけ。</p>

<blockquote><p>TZ : Asia/Tokyo</p></blockquote>

<p>コマンドで入れる場合は以下。</p>

<p><code>
$ heroku config:add TZ=Asia/Tokyo -a APP_NAME
</code></p>

<p>きちんと反映されているかどうかは下記コマンドから参照可能。<br/>
意図した時間が返ってきてればOK。</p>

<p><code>
$ heroku run date -a APP_NAME
Running date on ⬢ APP_NAME... up, run.1198
Thu Sep  1 10:06:57 JST 2016
</code></p>

<h2>参考</h2>

<ul>
<li><a href="http://blog.skktmlab.info/blog/2015_03_02_2">Herokuでホスティングしているブログのタイムゾーンを設定する</a></li>
</ul>


<h1>PHP</h1>

<p>PHPの設定でタイムゾーンを指定する場合。<br/>
通常は、 <code>php.ini</code> で設定するが、herokuの場合は、 <code>.user.ini</code> ファイルを使う。</p>

<p>ドキュメントルート直下に <code>.user.ini</code> ファイルを設置。<br/>
中に以下を記述。</p>

<p><code>
date.timezone = "Asia/Tokyo"
</code></p>

<p>この設定ではその他にはアップロードの最大容量なんかを指定する場合が多い。<br/>
参考 : <a href="http://kayakuguri.github.io/blog/2014/02/18/change-max-filesize/">[PHP][heroku]upload_max_filesizeを変更する &ndash; KayaMemo</a></p>

<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/hiro_y/items/bc631a27c9701f81a4f9#runtime-settings">HerokuでPHPを使うときに気を付けるところ &ndash; Qiita</a></li>
<li><a href="https://devcenter.heroku.com/articles/custom-php-settings#php-runtime-settings-ini-settings">Customizing Web Server and Runtime Settings for PHP | Heroku Dev Center</a></li>
</ul>


<h1>WordPress</h1>

<p>最後はherokuと直接は関係ないけれど、wordpressのタイムゾーン。<br/>
WordPressのタイムゾーンはデフォルトで標準時になるようにしてある、とのこと。<br/>
しかしこれは設定で変更するものではなく、取得する際に調整するもののよう。</p>

<p>一番簡易なものとしては、 <code>date</code> 関数で取得していた箇所をWordPress関数である、 <code>date_i18n</code> を利用して取得するようにする、というもの。<br/>
これだけで、日本時間で取得できるようになる。</p>

<p><code>
date_i18n('Y-m-d H:i:s');
</code></p>

<p>その他では、 <code>datetime</code> クラスを使用してタイムゾーンを指定する方法もあり。</p>

<p><code>
$now = new DateTime('', new DateTimeZone('Asia/Tokyo'));
$now-&gt;format('Y-m-d H:i:s');
</code></p>

<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/yousan/items/a385f794a9bb433aecbb">WordPressで現在時刻を利用すると9時間ずれてしまう問題 &ndash; Qiita</a></li>
</ul>


<h1>まとめ</h1>

<p>WordPressはともかく、herokuとPHPのタイムゾーン設定はherokuでPHPを使うのなら、デフォルトで設定しておいた方が後々間違いがなさそう。<br/>
環境構築の際にまず設定しておくとよさげ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Heroku] アドオンを共有機能を使って管理する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/05/16/heroku-addon-attach/"/>
    <updated>2016-05-16T16:51:59+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/05/16/heroku-addon-attach</id>
    <content type="html"><![CDATA[<p>herokuでPostgreSQLやRedisなどを他のアプリでも共有したい場合、環境変数をコピペして使っていたのだけれど、
それだとちょっとマズイ場合もあるらしく、attacheing add-on を使ってみた。</p>

<!-- more -->


<h1>共有する理由</h1>

<p>環境変数にパスワードなどをコピペするよりも確実、という理由もあるが、一番大きなところとしては、
メンテナンスなどでアドオンのDB名やユーザー名などの情報が変わってしまうことがあるよう。<br/>
その時に、直接入れているアプリの方では自動的に環境変数も書き換わるため支障はないが、
コピペで設定している他のアプリが合った場合には参照が出来なくなってしまう。
その時に共有設定していれば、設定しているアプリの環境変数も自動で書き換わるためメンテナンスの手間がなくなる。
なによりも突然アクセスできなくなる事がなくなる、というわけ。</p>

<p>コピペなんていう不確定な方法よりもherokuの公式機能に乗った方が確実に安全。</p>

<h1>アドオンの追加</h1>

<p>例えば今回は、<code>dog</code>、というアプリにheroku postgresを入れてみる。</p>

<p><code>
$ heroku addons:create heroku-postgresql:hobby-dev -a dog
Creating postgresql-opaque-93277... done, (free)
Adding postgresql-opaque-93277 to dog... done
Setting DATABASE_URL and restarting dog... done, v10
Database has been created and is available
</code></p>

<p><a href="https://devcenter.heroku.com/articles/heroku-postgresql">https://devcenter.heroku.com/articles/heroku-postgresql</a></p>

<p>DBの設定内容は、環境変数の<code>DATABASE_URL</code>に保存されている。</p>

<h1>アドオンの共有</h1>

<p>作ったアドオンを別のアプリでも利用してみる。<br/>
その際にアドオンの名前が必要になる。<br/>
上記作成時に名前が返ってきており、<code>postgresql-opaque-93277</code>が今回の名前になる。<br/>
後から確認するには、アプリの一覧を見ればわかる。</p>

<p>```
$ heroku addons -a dog</p>

<p>Add-on                                       Plan       Price
───────────────────────────────────────────  ─────────  ─────
heroku-postgresql (postgresql-opaque-93277)  hobby-dev  free
 └─ as DATABASE
```</p>

<p>名前がわかったところで、この名前を利用して他のアプリと共有させる。<br/>
例えば今回は<code>cat</code> というアプリに共有させたとする。</p>

<p><code>
$ heroku addons:attach -a cat postgresql-opaque-93277
Attaching postgresql-opaque-93277 to cat... done
Setting DATABASE vars and restarting cat... done, v17
</code></p>

<p>ここでアドオンの名前を指定する。<br/>
アドオン一覧で確認すると<code>dog</code>アプリから共有されていることがわかる。</p>

<p>```
$ heroku addons -a cat</p>

<p>Add-on                                       Plan       Price
───────────────────────────────────────────  ─────────  ────────────────────
heroku-postgresql (postgresql-opaque-93277)  hobby-dev  (billed to dog app)
 ├─ as DATABASE
 └─ as DATABASE on dog app
```</p>

<p>DBの設定内容は、環境変数の<code>DATABASE_URL</code>に保存されている。</p>

<p>heorkuのダッシュボード上では以下のように共有されている事がわかるようになっている。</p>

<p><img src="/images/2016/05/attach01.jpg" alt="" /></p>

<h1>アドオンの削除</h1>

<h2>共有の解除</h2>

<p>共有の解除は、<code>detach</code>を使う。</p>

<p><code>
$ heroku addons:detach -a cat postgresql-opaque-93277
Removing DATABASE attachment to postgresql-opaque-93277 from cat... done
Unsetting DATABASE vars and restarting cat... done, v18
</code></p>

<h2>削除</h2>

<p>削除には、<code>destroy</code>を使う。<br/>
共有をしている場合は、先に共有設定を全て解除しておく必要がある。<br/>
途中、確認のためにアプリ名の入力を求められるので入力する。</p>

<p>```
$ heroku addons:destroy postgresql-opaque-93277</p>

<p> !    WARNING: Destructive Action
 !    This command will affect the app: dog
 !    To proceed, type &ldquo;dog&rdquo; or re-run this command with &mdash;confirm dog</p>

<blockquote><p>dog
Destroying postgresql-opaque-93277 on dog&hellip; done, (free)
Removing vars for DATABASE from dog and restarting&hellip; done, v13
```</p></blockquote>

<h1>アドオン名の指定</h1>

<p>ここまでで一通りのアドオンの設定方法は終わりだけど、それぞれのアドオンを追加、共有する時に名前を変更できる。</p>

<h2>追加時</h2>

<p><code>
$ heroku addons:create heroku-postgresql:hobby-dev -a dog --name dog-database --as DOG_DATABASE
Creating dog-database... done, (free)
Adding dog-database to dog... done
Setting DOG_DATABASE_URL and restarting dog... done, v16
Database has been created and is available
</code></p>

<p><code>--name</code>は、アドオンの名前を指定している。<br/>
<code>--as</code>は環境変数に追加する名前を指定している。<br/>
<code>as</code>で指定する名前は、アルファベットの大文字で、使用できる記号も決まっている。(<code>-</code>ハイフンは使用できない)</p>

<p>この場合、DBの設定内容は、環境変数の<code>DOG_DATABASE_URL</code>に保存されている。</p>

<p><code>
$ heroku config -a dog
=== dog Config Vars
DOG_DATABASE_URL: postgres://yo....
</code></p>

<h2>共有時</h2>

<p>共有時にはアドオンの名前は設定出来ない(元を参照するので)が、<code>as</code>の指定は可能。</p>

<p><code>
$ heroku addons:attach -a cat dog-database --as CAT_DATABASE
Attaching dog-database as CAT_DATABASE to cat... done
Setting CAT_DATABASE vars and restarting cat... done, v19
</code></p>

<h1>参考</h1>

<ul>
<li><a href="https://devcenter.heroku.com/articles/heroku-postgresql">Heroku Postgres | Heroku Dev Center</a></li>
<li><a href="https://devcenter.heroku.com/articles/managing-add-ons">Managing Add-ons | Heroku Dev Center</a></li>
<li><a href="http://blog.flect.co.jp/labo/2015/01/addon-a943.html">Addon のアプリ間共有 &ndash; フレクトのHeroku Lab</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku アドオン] Filepickerを試してみた]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/10/08/filepicker/"/>
    <updated>2015-10-08T10:44:27+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/10/08/filepicker</id>
    <content type="html"><![CDATA[<p>ファイルストレージサービスである、Filepickerを試してみた。</p>

<!-- more -->


<p><img src="/images/2015/10/filepicker01.jpg" alt="" /></p>

<p><a href="https://www.filepicker.com/">Easy, Powerful File Uploads | Filepicker</a><br/>
<a href="https://addons.heroku.com/filepicker">Filepicker | Add-ons | Heroku</a></p>

<p>売りとしては、簡単に様々なクラウドサービスと連携出来る事、らしい。<br/>
サポートされているサービスは以下のよう。</p>

<ul>
<li>Alfresco</li>
<li>Amazon Cloud Drive</li>
<li>Box</li>
<li>Cloudapp</li>
<li>Dropbox</li>
<li>Evernote</li>
<li>Facebook</li>
<li>Flickr</li>
<li>Github</li>
<li>Google Drive</li>
<li>Instagram</li>
<li>One Drive</li>
<li>Picasa</li>
</ul>


<h2>インストール</h2>

<p>herokuにインストール。</p>

<pre><code>$ heroku addons:create filepicker
</code></pre>

<p>フリープランの場合は、1ファイル20MBの、月500ファイルまで利用可能。<br/>
herokuのプラントは少し違うけれど、値段は以下。</p>

<p><img src="/images/2015/10/filepicker02.jpg" alt="" /></p>

<h2>導入</h2>

<p>インストール後、herokuのダッシュボードからfilepickerのアドオンをクリックして、filepickerのダッシュボードに遷移すると、使い方の説明が色々出てきて最後に貼り付けるべきコードが表示される。<br/>
後から表示させる場合は、アプリケーションを選んだ後、DachbordのGet Startedをクリックすると表示出来る。</p>

<p><img src="/images/2015/10/filepicker03.jpg" alt="" /></p>

<p>ここで表示されるFor Engineersのコードを貼り付けるだけ。</p>

<p><img src="/images/2015/10/filepicker04.jpg" alt="" /></p>

<pre><code>&lt;script type="text/javascript" src="http://kayakuguri.github.io//api.filepicker.io/v2/filepicker.js"&gt;&lt;/script&gt;
&lt;input type="filepicker" data-fp-apikey="xxx" onchange="alert(event.fpfile.url)"&gt;
</code></pre>

<p>これを貼り付けたHTMLをアップすれば完了。以上。<br/>
アップしてアクセスすると以下の画面となる。</p>

<p><img src="/images/2015/10/filepicker05.jpg" alt="" /></p>

<p>ボタンをクリックするとダイアログが表示される。</p>

<p><img src="/images/2015/10/filepicker06.jpg" alt="" /></p>

<p>アップロードすると、URLがアラートで表示。</p>

<p><img src="/images/2015/10/filepicker07.jpg" alt="" /></p>

<p>FilepickerのAssets、にて確認が出来る。</p>

<p><img src="/images/2015/10/filepicker08.jpg" alt="" /></p>

<p>たった２行追加するだけで完成。本当に簡単すぎてやることがない。</p>

<p>フリープランでは1ファイル20Mの制限があるように書かれていたのだけど、<br/>
試しに200Mくらいのファイルを上げてみても問題なくアップ出来た。<br/>
アップ時に制限をかけているわけではなく、そのまま利用していると注意やプラン変更の指示がくる仕様なのかもしれない。</p>

<p>とにかく、herokuからでも何の問題もなく大きいファイルをアップロード出来た。<br/>
(クライアントから直接アップしているので、サーバーの環境は関係ない）</p>

<h2>参考</h2>

<p>様々な環境に組み込めるようにプラグインが用意されている。<br/>
<a href="https://www.filepicker.com/documentation/integrations/libraries">Integration Libraries | Filepicker</a></p>

<p>様々なツールを利用出来るようにしたりするカスタマイズなんかも詳しく説明されてる。<br/>
ドキュメントも豊富っぽい。<br/>
<a href="https://www.filepicker.com/documentation/">Documentation | Filepicker</a></p>
]]></content>
  </entry>
  
</feed>
