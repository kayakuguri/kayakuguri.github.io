<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: laravel | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/laravel/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2018-12-13T21:44:34+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[s3互換のローカルストレージ環境minioにLaravelから保存する(vagrant)]]></title>
    <link href="http://kayakuguri.github.io/blog/2018/04/13/s3-minio-laravel/"/>
    <updated>2018-04-13T16:44:33+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2018/04/13/s3-minio-laravel</id>
    <content type="html"><![CDATA[<p>Laravelからの保存先に実際のS3を使わずに、ローカルに疑似S3環境を作成してそこに保存させてみる。</p>

<!-- more -->


<h1>minio</h1>

<p><a href="https://www.minio.io/">Minio： Private cloud storage</a></p>

<p>S3互換のオブジェクトストレージ環境。今回はVagrant上のCentOS7にいれた。<br/>
入れかたはまんま以下を参考に。</p>

<ul>
<li><a href="https://qiita.com/rerofumi/items/21f7a22b8b824859754f">S3 互換のシンプルなオブジェクトストレージ Minio を使う &ndash; Qiita</a></li>
</ul>


<p>インストールはダウンロードして配置するだけ。</p>

<p><code>
$ sudo curl https://dl.minio.io/server/minio/release/linux-amd64/minio -o /usr/local/bin/minio
$ sudo chmod +x /usr/local/bin/minio
$ sudo curl https://raw.githubusercontent.com/minio/minio-service/master/linux-systemd/minio.service -o /etc/systemd/system/minio.service
$ sudo useradd -s /sbin/nologin minio-user
</code></p>

<p>オブジェクト保存先のディレクトリを作成してユーザを指定する。</p>

<p><code>
$ sudo mkdir -p /var/lib/minio
$ sudo chown minio-user:minio-user /var/lib/minio
</code></p>

<p><code>/etc/default/minio</code> に設定ファイルを作成して記述。<br/>
アクセスキーとシークレットは後でログインや接続などに使用する。適当な値を入れておく。</p>

<p>```</p>

<h1>Local export path.</h1>

<p>MINIO_VOLUMES=&ldquo;/var/lib/minio/&rdquo;</p>

<h1>Use if you want to run Minio on a custom port.</h1>

<p>MINIO_OPTS=&ldquo;&mdash;address :9000&rdquo;</p>

<h1>Access Key of the server.</h1>

<p>MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE</p>

<h1>Secret key of the server.</h1>

<p>MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
```</p>

<p>自動起動設定と起動。</p>

<p><code>
$ sudo systemctl enable minio
$ sudo systemctl start minio
</code></p>

<p>ブラウザからアクセス出来るGUIが用意されている。<br/>
Vagrant経由でのアクセスは、Vagrantで指定しているIPに9000ポート(デフォルト。指定したポートで）でアクセスすると確認出来る。(httpなので注意）</p>

<p>例) <code>http://192.168.33.33:9000/</code></p>

<p>画面右下にあるプラスボタンからバケットを作成出来る。<br/>
ここからファイルを直接アップすることも可能。<br/>
バケットは適当に作っておく。</p>

<h1>Laravel</h1>

<p>以下を参考にさせてもらった。</p>

<ul>
<li><a href="https://laravel-news.com/minio-s3-compliant-storage?utm_medium=feed&amp;utm_source=facebook.com&amp;utm_campaign=Feed%3A+laravelnews">Minio： An Open-Source S3 Compliant Storage Service &ndash; Laravel News</a></li>
</ul>


<p>laravelから保存してみる。<br/>
基本的には環境の設定を渡してやるだけで動作する。</p>

<p>S3への保存をさせるのと、Formヘルパーを使ったのでそれぞれのパッケージを入れた。</p>

<p><code>
$ composer require "laravelcollective/html":"^5.6.0"
$ composer require league/flysystem-aws-s3-v3
</code></p>

<p><code>filesystems.php</code>でドライバーの設定をする。<br/>
S3の場合と微妙に違うため、<code>minio</code>用として分けておく方がよいと思われる。</p>

<p><code>config/filesystems.php</code></p>

<p>```
&lsquo;minio&rsquo; => [</p>

<pre><code>'driver' =&gt; 's3',
'endpoint' =&gt; env('MINIO_ENDPOINT', 'http://127.0.0.1:9000'),
'use_path_style_endpoint' =&gt; true,
'key' =&gt; env('AWS_KEY'),
'secret' =&gt; env('AWS_SECRET'),
'region' =&gt; env('AWS_REGION'),
'bucket' =&gt; env('AWS_BUCKET'),
</code></pre>

<p>],
```</p>

<p>デフォルトのS3用の設定は以下のようになっている。<br/>
<a href="https://github.com/laravel/laravel/blob/master/config/filesystems.php#L58-L65">デフォルトの設定</a></p>

<p><code>.env</code>ファイルで値を設定する。</p>

<p><code>
FILESYSTEM_DRIVER=minio
MINIO_ENDPOINT="http://127.0.0.1:9000"
AWS_KEY=AKIAIOSFODNN7EXAMPLE
AWS_SECRET=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
AWS_REGION=us-east-1
AWS_BUCKET=sample-storage
</code></p>

<ul>
<li><code>FILESYSTEM_DRIVER</code> : 設定したminioを指定</li>
<li><code>MINIO_ENDPOINT</code> : vagrantの内部からアクセスすることになるので、ローカルホストにポート番号をつけた形で指定する</li>
<li><code>AWS_KEY</code> : 設定した値</li>
<li><code>AWS_SECRET</code> : 設定した値</li>
<li><code>AWS_REGION</code> : なんでもよい</li>
<li><code>AWS_BUCKET</code> : 作ったバケット</li>
</ul>


<p>これであとは普通にs3に投げる方法で実装してやるだけでOK。<br/>
以下のような感じで作って試してみた。</p>

<p>ビュー (抜粋)</p>

<p>```
{!! Form::open([&lsquo;files&rsquo; => true]) !!}</p>

<pre><code>{!! Form::file('file_data') !!}
{!! Form::submit('送信') !!}
</code></pre>

<p>{!! Form::close() !!}
```</p>

<p>コントローラー (抜粋)</p>

<p>```
public function fileUpload(Request $request)
{</p>

<pre><code>$file = $request-&gt;file('file_data');
if(!is_null($file)){
    $filename = $file-&gt;store('hoge/fuga');
    return redirect('/')-&gt;with('success', $filename.'を保存しました。');
}else{
    return redirect('/')-&gt;back();
}
</code></pre>

<p>}
```</p>

<h1>感想</h1>

<p>アップしたものがGUIで確認出来たり、s3互換ということで、aws-cliが使えたりするらしく、がっつりテストしたりするなら便利かもしれない。<br/>
とはいえ、Laravelでの開発となると、ストレージにlocalを指定してやっても処理部分は全く同じ書き方で対応が出来るため、わざわざストレージを立ち上げてまでやる必要はないかもしれない…。</p>

<h1>参考</h1>

<ul>
<li><a href="https://qiita.com/rerofumi/items/21f7a22b8b824859754f">S3 互換のシンプルなオブジェクトストレージ Minio を使う &ndash; Qiita</a></li>
<li><a href="https://laravel-news.com/minio-s3-compliant-storage?utm_medium=feed&amp;utm_source=facebook.com&amp;utm_campaign=Feed%3A+laravelnews">Minio： An Open-Source S3 Compliant Storage Service &ndash; Laravel News</a></li>
<li><a href="https://qiita.com/makies/items/0684dad04a6008891d0d">Laravelで画像ファイルアップロードをする簡単なサンプル &ndash; Qiita</a></li>
<li><a href="https://qiita.com/aozora0000/items/30c139164610c5799484">Laravel5からMinioObjectStorageに接続する &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel+mySQLでマイグレーションのやり直しのデータリストア]]></title>
    <link href="http://kayakuguri.github.io/blog/2018/03/26/laravel-mysql-refresh/"/>
    <updated>2018-03-26T12:29:45+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2018/03/26/laravel-mysql-refresh</id>
    <content type="html"><![CDATA[<p>Laravelで開発をしていて、途中でDBの項目が増えたりしてマイグレーションのやり直しが発生することがちょくちょくある。<br/>
直接<code>alter</code>してもいいけど、ちゃんとマイグレーションファイルも動くか確認したい。<br/>
けど、今あるデータは削除したくない、って場合。</p>

<!-- more -->


<p>パッケージでよしなにバックアップ取ったりしてくれるものはあるようだけど、postgreSQLのものが多かったり、そのためにパッケージインストールするのも、、と思ってしまう。</p>

<ul>
<li><a href="https://www.lancard.com/blog/2017/11/27/laravel-5-5-%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9dump%E3%82%92%E3%81%8A%E6%89%8B%E8%BB%BD%E3%81%AB%E3%81%A8%E3%81%A3%E3%81%9F%E3%82%8A%E3%82%82%E3%81%A9%E3%81%97%E3%81%9F/">Laravel 5.5 でデータベースdumpをお手軽にとったりもどしたり &laquo;  LANCARD.LAB｜ランカードコムのスタッフブログ</a></li>
</ul>


<p>それならコマンドで叩いたほうが早い、というわけで、備忘録。</p>

<h1>エクスポート</h1>

<p>テーブル情報を抜いたデータ情報のみをエクスポート。<br/>
（作業はvagrant内に入った状態で）</p>

<p><code>
mysqldump -uroot -proot -t DATABASE_NAME &gt; all.dump
</code></p>

<p>エクスポートされたデータから、<code>migrations</code>テーブルのインサート情報の部分だけは削除しておくこと。<br/>
(laravelのmigrateで自動作成されるので、インポート時にID重複のエラーが出る）</p>

<h2>```</h2>

<h2>&mdash; Dumping data for table <code>migrations</code></h2>

<p>(このセクションを削除)
```</p>

<h1>再マイグレーション</h1>

<p>Laravelに用意されている。</p>

<p><code>
$ php artisan migrate:fresh
</code></p>

<h1>インポート</h1>

<p>あとはインポートするだけ。</p>

<p><code>
$ mysql -uroot -proot DATABASE_NAME &lt; all.dump
</code></p>

<p>完了。</p>

<h1>参考</h1>

<ul>
<li><a href="https://qiita.com/rato303/items/2e614f23e5feee150ffc">MySQLのデータインポート・エクスポート &ndash; Qiita</a></li>
<li><a href="https://www.dbonline.jp/mysql/insert/index10.html">データの削除(DELETE文) &ndash; データの追加と削除 &ndash; MySQLの使い方</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LaravelのEloquentモデルでupdated_atがないテーブルを使う]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/12/13/eloquent-updated-at-null/"/>
    <updated>2017-12-13T11:37:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/12/13/eloquent-updated-at-null</id>
    <content type="html"><![CDATA[<p>Laravelのバージョンは5.5で確認。<br/>
Eloquentモデルは作成時に自動で<code>created_at</code>と<code>updated_at</code>を更新してくれる。<br/>
しかし、仕様の都合上、<code>updated_at</code>カラムがないテーブルを利用したかったのでその方法。</p>

<!-- more -->


<h1>定数でのカラム指定</h1>

<p>Eloquentモデル内で定数を使用することで明示的にカラム名を指定する事が可能。</p>

<p><code>
const CREATED_AT = 'date_created';
const UPDATED_AT = 'date_modified';
</code></p>

<ul>
<li><a href="https://www.larajapan.com/2016/11/26/laravel-5-3-%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%97%E3%81%AEdb%E9%A0%85%E7%9B%AE%E5%90%8D%E3%81%AE%E6%8C%87%E5%AE%9A/">Laravel 5.3 タイムスタンプのDB項目名の指定</a></li>
</ul>


<p>これを利用し、更新カラムはない事を指定してやればよい。</p>

<p><code>
const UPDATED_AT = null;
</code></p>

<p>これだけ。</p>

<h3>情報元</h3>

<ul>
<li><a href="https://www.neontsunami.com/posts/eloquent-model-without-updated_at-laravel-55">Eloquent model without updated_at (Laravel 5.5) &mdash; Neon Tsunami</a></li>
</ul>


<h2>無効化</h2>

<p>ちなみに、<code>created_at</code>、<code>updated_at</code>を自動で更新させたくない場合は以下のように指定してやればよいよう。<br/>
自動で更新しなくなるので、それらのカラムがないテーブルでもEloquentモデルを利用出来るようになる。</p>

<p><code>
public $timestamps = false;
</code></p>

<ul>
<li><a href="http://laravel.hatenablog.com/entry/2013/10/19/004831">timestampを無効にする場合 &ndash; ふたりはララベル （Laravel PHP Framework）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HerokuでLaravel-Mixを利用する際の環境変数]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/12/13/laravel-mix-heroku-env/"/>
    <updated>2017-12-13T11:08:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/12/13/laravel-mix-heroku-env</id>
    <content type="html"><![CDATA[<p>HerokuでLaravel Mixを使っている際に、ビルドに失敗する時があり調べた結果、環境変数を追加するだけで対策出来たのでメモ。</p>

<!-- more -->


<h1>症状</h1>

<p>Herokuのビルドパックには <code>heroku/nodejs</code>と<code>heroku/php</code>を入れておき、順番はnode.jsが先。</p>

<p><code>
$ heroku buildpacks -a app-name
=== app-name Buildpack URLs
1. heroku/nodejs
2. heroku/php
</code></p>

<p>この状態でpushしてデプロイするも、npmのインストールなどは走るがLaravel Mixのコンパイルが走らない状態(たぶん）。<br/>
ビルドログを見ると以下のようなエラーが出ている。</p>

<p><code>
Additional dependencies must be installed. This will only take a moment.
warning " &gt; browser-sync-webpack-plugin@1.2.0" has unmet peer dependency "webpack@^1 || ^2 || ^3".
Finished. Please run Mix again.
</code></p>

<p>依存関係が解消出来てないとかなんとか？</p>

<h1>解決策</h1>

<p>ググると以下の情報。</p>

<p>環境変数に、<code>YARN_PRODUCTION</code>を<code>false</code>で追加してやるだけ。</p>

<ul>
<li><a href="https://www.neontsunami.com/posts/using-laravel-mix-on-heroku">Using Laravel Mix on Heroku &mdash; Neon Tsunami</a></li>
</ul>


<p>環境変数を追加してやることで、<code>devDependencies</code>から依存関係を取得するように指示してやる事が出来るよう。</p>

<blockquote><p>First, set <code>YARN_PRODUCTION</code> to false using the following command. This tells Heroku to install the devDependencies in your package.json, but leaves NODE_ENV as production.</p></blockquote>

<p>Google翻訳</p>

<blockquote><p>まず、次のコマンドを使用して<code>YARN_PRODUCTION</code>をfalseに設定します。これは、あなたのpackage.jsonにdevDependenciesをインストールするようにHerokuに指示しますが、NODE_ENVをプロダクションとして残します。</p></blockquote>

<p>記事の通り、上手く行ってなかった環境に環境変数を追加してやると無事、コンパイルされるようになった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel5.5でajaxでPOST通信する時のCSRFトークン]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/12/06/laravel-ajax-csrf/"/>
    <updated>2017-12-06T20:46:06+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/12/06/laravel-ajax-csrf</id>
    <content type="html"><![CDATA[<p>Laravel5.5にて、ajaxでPOST通信する際にCSRFトークンも送る方法のメモ。</p>

<!-- more -->


<h1>概要</h1>

<p>LaravelではデフォルトではPOST通信には全てCSRFトークンをつけてやる必要がある。<br/>
ajaxでの通信でも例外ではない。<br/>
なので、そのまま何も考えずにajaxを使うとそこで引っかかってしまう。</p>

<h1>方法</h1>

<p>方法としては(主に)2つ。</p>

<ul>
<li>送信するURLはCSRFトークンの対象外としてやる</li>
<li>ajax通信の際にもCSRFトークンを送る</li>
</ul>


<p>もちろん後者の方が安全。</p>

<h1>CSRFトークンの追加</h1>

<p>HTMLのmetaタグにCSRFトークンをおいてやり、それを取得して送る。<br/>
POST送信の<code>_token</code>パラメータに入れてやるだけでよい。</p>

<ul>
<li><a href="https://laracasts.com/discuss/channels/requests/laravel-5-cant-use-ajax-post-request">Laravel 5 can&#039;t use ajax post request</a></li>
</ul>


<p>```
<meta name="csrf-token" content="{{ csrf_token() }}" /></p>

<p>var CSRF_TOKEN = $(&lsquo;meta[name=&ldquo;csrf-token&rdquo;]&rsquo;).attr(&lsquo;content&rsquo;);</p>

<p>$.ajax({</p>

<pre><code>url: '/home/upload/',
type: 'POST',
data: {_token: CSRF_TOKEN},
dataType: 'JSON',
success: function (data) {
    console.log(data);
}
</code></pre>

<p>});
```</p>

<p>公式のドキュメントにも方法は載っているが、これは、Axios HTTPライブラリを使った方法？のよう。<br/>
上記でないと上手く動作しなかったが…やり方が悪いのかもしれない。</p>

<ul>
<li><a href="https://readouble.com/laravel/5.5/ja/csrf.html#csrf-x-csrf-token">X-CSRF-TOKEN | Laravel 5.5 CSRF保護</a></li>
</ul>


<h1>トークン対象外</h1>

<p>一応、トークンの対象外とする方法も。</p>

<p><code>app/http/Middleware/VerifyCsrfToken.php</code>内にて指定してやる。</p>

<p>```
protected $except = [</p>

<pre><code>'ajax/post/path/*',
</code></pre>

<p>];
```</p>

<ul>
<li><a href="https://readouble.com/laravel/5.5/ja/csrf.html#csrf-excluding-uris">URIの除外 | Laravel5.5 CSRF通信</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
