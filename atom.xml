<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2014-10-06T18:29:19+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mavericksにアップデートしたらターミナルが起動しなくなった]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/10/06/zsh-reinstall/"/>
    <updated>2014-10-06T12:24:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/10/06/zsh-reinstall</id>
    <content type="html"><![CDATA[<p>今更ながらですが、Mavericksにアップデートしたらターミナルが起動しなくなりましたよ。<br/>
これが嫌でアップデートしてなかったのですが、やはり起こってしまったので、対応したメモ。</p>

<!-- more -->


<p>まずは、ここの通りに。</p>

<p><a href="http://qiita.com/crispy/items/70367cd7e97dd4e0a60d">Maverickに上げたらターミナルが起動しない問題</a></p>

<p>ターミナルのアプリの環境設定から、<br/>
<code>起動 -&gt; 開くシェル -&gt; コマンド(完全パス)</code><br/>
に、<code>/bin/zsh</code>を指定。</p>

<p>これで、ターミナルは動作するようになるので、以下の通りに叩いた。</p>

<pre><code>$ brew update
$ brew upgrade
</code></pre>

<p>これがかなり時間がかかった。<br/>
しかしまだエラーが。</p>

<pre><code>dyld: Library not loaded: /usr/local/lib/libgdbm.4.dylib
  Referenced from: /usr/local/bin/zsh
  Reason: image not found
zsh: trace trap  tmux
</code></pre>

<p>次は以下を参考。</p>

<p><a href="http://umegusa.hatenablog.jp/entry/2012/07/21/155637">teminalが動かなくなってしまいました</a></p>

<p>最新版は、1.11ってことで、以下で追加</p>

<pre><code>$ wget ftp://ftp.gnu.org/pub/gnu/gdbm/gdbm-1.11.tar.gz 
$ tar zxfv gdbm-1.11.tar.gz
</code></pre>

<p>手順に従って、インストール。</p>

<pre><code>$ cd gdbm-1.11
$ ./configure --prefix=/usr/local
$ make
$ make install
</code></pre>

<p>これで解決したけれど、また別のエラーが。</p>

<pre><code>dyld: Library not loaded: /usr/local/lib/libpcre.1.dylib
  Referenced from: /usr/local/bin/zsh
  Reason: image not found
zsh: trace trap  tmux
</code></pre>

<p>次は以下を参考</p>

<p><a href="http://chaika.hatenablog.com/entry/2014/06/11/170441">Mac OS10.9にしたらHomebrewで入れていたコマンドとか、いろいろ動かなくなった。</a></p>

<p>最後の方の部分だけを叩かせてもらう。</p>

<pre><code>$ brew uninstall pcre
$ brew install pcre
</code></pre>

<p>これでようやく起動できた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]herokuでのSSL設定とカスタムサブドメインの適用方法]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain/"/>
    <updated>2014-09-30T19:24:37+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain</id>
    <content type="html"><![CDATA[<p>herokuでのSSL設定とカスタムサブドメインの設定をさっくりと調べてみた。</p>

<!-- more -->


<h2>SSL</h2>

<h3>手順</h3>

<ol>
<li>プライベートキーを作成</li>
<li>CSRを作成</li>
<li>CSRを契約の際に業者に提出</li>
<li>証明書が発行される</li>
<li>証明書 + 中間証明書 + プライベートキーをherokuに設定</li>
</ol>


<p>1はローカルPC上にて作成<br/>
2の作成方法は以下、など。
<a href="https://jp.globalsign.com/support/ssl/list.php?cat=csr">https://jp.globalsign.com/support/ssl/list.php?cat=csr</a><br/>
5のみ、heroku上。</p>

<h3>herokuでの操作</h3>

<p>SSLのアドオン($20/mo)<br/>
<a href="https://addons.heroku.com/ssl">https://addons.heroku.com/ssl</a></p>

<p>アドオンの追加</p>

<pre><code>$ heroku addons:add ssl:endpoint
</code></pre>

<p>サーバー証明書と中間証明書を合体させる</p>

<pre><code>$ cat chain_ca.pem &gt;&gt; server.crt
</code></pre>

<p>プライベートキーのパスフレーズが解除されていない場合は解除する。</p>

<pre><code>$ openssl rsa -in site.key -out server.key
Enter pass phrase for site.key:
writing RSA key
</code></pre>

<p>で、合体させた証明書とキーをアップする。</p>

<pre><code>$ heroku certs:add server.crt server.key
</code></pre>

<p>アップロード結果で返ってくるURLが証明書が適応されたURLとなる。<br/>
<code>hokkaido-1212.herokussl.com</code><br/>
この状態でアクセスすると、<code>No such app</code>と出るがこれで正しい。</p>

<h3>参考</h3>

<p><a href="http://qiita.com/yu1ch1/items/290efb666209354e8fb3">herokuのssl証明書を更新する</a><br/>
<a href="http://interu.hatenablog.com/entry/2012/07/25/184812">HerokuでカスタムドメインのSSL endpointを利用する方法</a><br/>
<a href="http://d.hatena.ne.jp/install-memo/20110906/1315291837">SSL証明書のKEYファイル・CSRファイル・CRTファイルのチェック方法</a></p>

<h2>サブドメイン</h2>

<h3>herokuでの操作</h3>

<p>herokuのアプリのSettings内にある、<br/>
Domains、から設定したいドメインを指定する。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/Settings___Heroku.jpg" alt="Settings___Heroku" /></p>

<p>契約しているドメイン業者のCNAMEに、適用したいアプリのURLを指定する。<br/>
例：<code>hoge.herokuapp.com</code></p>

<h3>SSLの場合</h3>

<p>SSLをカスタムドメインで使用したい場合は、上記SSLの項で設定した、<br/>
<code>hokkaido-1212.herokussl.com</code>のドメインをCNAMEに指定する。</p>

<p>反映後、設定の確認は以下で出来る。</p>

<pre><code>$ heroku certs
Endpoint                     Common Name(s)            Expires               Trusted
---------------------------  ------------------------  --------------------  -------
hokkaido-1212.herokussl.com  secure.example.co.jp  2015-06-24 23:59 UTC  True
</code></pre>

<p>詳細は、<code>heroku certs:info</code>で確認できる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apigeeを使用してAPIの動作を確認する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/30/apigee/"/>
    <updated>2014-09-30T17:46:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/30/apigee</id>
    <content type="html"><![CDATA[<p>apigeeというサービスを使用すれば、様々なAPIの動作をブラウザ上から気軽に試せる、<br/>
ということなので実際に試してみました。</p>

<!-- more -->


<p><img src="http://kayakuguri.github.io/images/2014/09/apigee01.jpg" alt="apigee" /></p>

<p><a href="http://apigee.com/about/">apigee</a></p>

<p>トップページからAPIを試すサービスへの動線がわからなかったので、<br/>
以下から一覧ページに直接アクセスして下さい。<br/>
(サインアップすれば簡単にアクセス出来ます。)<br/>
(サインアップしなくても試すことは出来ます。)</p>

<p><a href="https://apigee.com/providers">API Providers</a></p>

<p>この一覧から各サービスのAPIに接続出来るわけですが、<br/>
今回はsalesforceのsandboxで試してみました。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee02.jpg" alt="salesforce" /></p>

<p>クリックすると、APIの一覧ページに飛ぶので、とりあえず素通りしてコンソールへ。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee03.jpg" alt="API Refarence" /></p>

<p>コンソール画面で実際に叩くAPIを指定したりパラメータを設定したり出来ます。<br/>
このままだと、認証がいらないものしか叩けないので、salesforceと認証させます。</p>

<p><code>Authentication</code>から、<code>OAuth2</code>を選択します。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee04.jpg" alt="API Refarence" /></p>

<p>すると確認ダイアログが出ますので、<code>Sign in Salesforce Snadbox</code>をクリックしてログインし、認証させます。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee05.jpg" alt="API Refarence" /></p>

<p>認証後は以下のようになります。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee06.jpg" alt="API Refarence" /></p>

<p>GETの場合は、この状態で下の入力エリアに叩きたいAPIを入れ、<br/>
<code>?</code>でパラメータを設定していけば試すことができます。<br/>
POSTの場合は、以下のように、POSTに設定しAPIを入力します。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee07.jpg" alt="API Refarence" /></p>

<p>しかしこのままではパラメータを入力出来ません。<br/>
なので、左側にある三角をクリックし、API一覧を表示させます。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee08.jpg" alt="API Refarence" /></p>

<p>で、適当にAPIを選択すると、下図のようにタブが出現し、<br/>
その中の、<code>Body</code>でパラメータを設定する事が出来ます。<br/>
(ちなみにQueryではGETの値を設定出来ます)</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee09.jpg" alt="API Refarence" /></p>

<p>試しにこれはGETでversionを取得しただけですが、<br/>
実行すると以下の様な形でレスポンスを取得することができます。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee10.jpg" alt="API Refarence" /></p>

<p>サインアップするとその他にも色々機能があるようで、もっと使い込めば便利かもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]QuotaGuard Staticを使ってHerokuでのIP固定を試してみる]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/26/static-ip-heroku/"/>
    <updated>2014-09-26T17:59:42+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/26/static-ip-heroku</id>
    <content type="html"><![CDATA[<p>herokuでのIP固定といえば、<a href="https://addons.heroku.com/proximo">Proximo</a>の方が有名っぽいけど、<br/>
QuotaGuard Staticというのでも同じく固定できるようなので試してみた。</p>

<!-- more -->


<p><img src="http://kayakuguri.github.io/images/2014/09/quotaguard1.jpg" alt="QuotaGuard Static add-on" /></p>

<p><a href="https://addons.heroku.com/quotaguardstatic">QuotaGuard Static</a></p>

<p>アプリへのセットアップをコマンドラインからする場合は以下。<br/>
無料プランがあるので、それで試してみる。</p>

<pre><code>$ heroku addons:add quotaguardstatic
</code></pre>

<p>以下のように結果が返ってくる。<br/>
その中にIPアドレスも含まれる。</p>

<pre><code>Adding quotaguardstatic on static-ip-test... done, v4 (free)
Your static IPs are [54.88.136.216, 54.84.188.199]
Use `heroku addons:docs quotaguardstatic` to view documentation.
</code></pre>

<p>Proximoでも同じ仕組のようだけど、<br/>
入れたアドオンによって指定されたURLを介してアクセスすることで<br/>
固定IPを実現しているよ。<br/>
アドオンがプロキシの役目を果たす。<br/>
このプロキシ経由でのアクセス数に制限があり、その数で値段が変わる仕組み。</p>

<p>そのアクセス用のURLは環境変数に格納されている。</p>

<pre><code>$ heroku config
QUOTAGUARDSTATIC_URL: http://username:pass@us-east-1-static-brooks.quotaguard.com:9293
</code></pre>

<p>上記、<code>IPs</code>となっているのは、２つのIPのうちどちらかでアクセスされる、とのこと。<br/>
負荷分散のよう。<br/>
一応、公式の理由。</p>

<blockquote><p>We believe all apps should be built for scalability and high availability. Our commitment to this means we only provide load balanced, high availability services. Load balancing our nodes allows one node to fail or be brought down for maintenance with no impact to your application. Each IP you are given represents one proxy node that is running behind a load balancer.</p></blockquote>

<p>IPアドレスはアドオンのダッシュボードからも確認できる。<br/>
以下、ダッシュボードを開くコマンド</p>

<pre><code>$ heroku addons:open quotaguardstatic
</code></pre>

<p>公式にPHPでの動作サンプルが載っていたのでそのまま使用して試してみた。<br/>
以下、転載。</p>

<p><a href="https://devcenter.heroku.com/articles/quotaguardstatic#using-with-php">PHPのサンプル</a></p>

<pre><code>&lt;?php

function lookup(){
  $quotaguard_env = getenv("QUOTAGUARDSTATIC_URL");
  $quotaguard = parse_url($quotaguard_env);

  $proxyUrl       = $quotaguard['host'].":".$quotaguard['port'];
  $proxyAuth       = $quotaguard['user'].":".$quotaguard['pass'];

  $url = "http://ip.jsontest.com/";

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_PROXY, $proxyUrl);
  curl_setopt($ch, CURLOPT_PROXYAUTH, CURLAUTH_BASIC);
  curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyAuth);
  $response = curl_exec($ch);
  return $response;
}

$res = lookup();
print_r($res);

?&gt;
</code></pre>

<p>ここでアクセスしている<code>http://ip.jsontest.com/</code>のURLは、接続元のIPアドレスをJsonで返してくれるサービスのよう。</p>

<p>アクセスすると、以下のようなJSONが返ってきた。</p>

<pre><code>{"ip": "54.84.188.199"}
</code></pre>

<p>リロードすると以下のものとランダムに切り替わっているのが確認できる。</p>

<pre><code>{"ip": "54.88.136.216"}
</code></pre>

<p>管理画面を確認すると、アクセス数と残りアクセス数がわかる。<br/>
アクセス数は、１月の制限のよう。<br/>
無料の場合は250/月。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/quotaguard2.jpg" alt="管理画面" /></p>

<p>冒頭のProximoと比較すべく、料金表を抜き出してみた。</p>

<p><strong>QuotaGuard Static</strong></p>

<table>
<thead>
<tr>
<th>プラン </th>
<th> 値段(月) </th>
<th> アクセス数(月) </th>
<th> 帯域幅</th>
</tr>
</thead>
<tbody>
<tr>
<td>Starter </td>
<td> 無料 </td>
<td> 250 </td>
<td> 100MB</td>
</tr>
<tr>
<td>Spike </td>
<td> $5 </td>
<td> 500 </td>
<td> 250MB</td>
</tr>
<tr>
<td>Micro </td>
<td> $19 </td>
<td> 10,000 </td>
<td> 1GB</td>
</tr>
<tr>
<td>Medium </td>
<td> $49 </td>
<td> 50,000 </td>
<td> 10GB</td>
</tr>
<tr>
<td>Large </td>
<td> $89 </td>
<td> 1000,000 </td>
<td> 50GB</td>
</tr>
<tr>
<td>Enterprise </td>
<td> $219 </td>
<td> 1,000,000 </td>
<td> 1TB</td>
</tr>
<tr>
<td>Premium </td>
<td> $399 </td>
<td> 5,000,000 </td>
<td> 無制限</td>
</tr>
</tbody>
</table>


<p><strong>Proximo</strong></p>

<table>
<thead>
<tr>
<th>プラン </th>
<th> 値段(月) </th>
<th> アクセス数(月) </th>
<th> 帯域幅</th>
</tr>
</thead>
<tbody>
<tr>
<td>Development </td>
<td> $5 </td>
<td> 1,000 </td>
<td> 500MB</td>
</tr>
<tr>
<td>Starter </td>
<td> $25 </td>
<td> 20,000 </td>
<td> 2GB</td>
</tr>
<tr>
<td>Professional </td>
<td> $75 </td>
<td> 200,000 </td>
<td> 100GB</td>
</tr>
<tr>
<td>Dedicated </td>
<td> $250 </td>
<td> 1,000,000 </td>
<td> 1TB</td>
</tr>
<tr>
<td>Elite </td>
<td> $500 </td>
<td> 5,000,000 </td>
<td> 5TB</td>
</tr>
<tr>
<td>Enterprise </td>
<td> $1250 </td>
<td> 無制限 </td>
<td> 無制限</td>
</tr>
</tbody>
</table>


<p>QuotaGuardは無料があるのがやはりお手軽。<br/>
しかし、安いうちはProximoの方がお得。<br/>
増えてくるとQuotaGuardの方がお得かも。<br/>
他の機能もあったりするので一概には言えないけれど。</p>

<h3>参考</h3>

<p><a href="https://devcenter.heroku.com/articles/quotaguardstatic">QuotaGuard Static 公式ドキュメント</a><br/>
<a href="https://devcenter.heroku.com/articles/proximo">Proximo 公式ドキュメント</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Salesforce]Mass Actionsでリードを一括編集]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/26/mass-edit-salesforce/"/>
    <updated>2014-09-26T14:44:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/26/mass-edit-salesforce</id>
    <content type="html"><![CDATA[<p>リードのリストビュー画面から抽出したリードを一括編集できるが、<br/>
そこで編集できる項目は限られている。<br/>
なので、好きな項目の編集を可能にするアドオンがあったのでご紹介。</p>

<p><a href="https://appexchange.salesforce.com/listingDetail?listingId=a0N30000003J6KcEAK">Mass Edit + Mass Update + Mass Delete &ndash; VersatileCapitalist, Inc &ndash; AppExchange</a></p>

<!-- more -->


<p>上記AppExchangeの画面から、<code>Get It Now!</code>をクリックして、インストールする。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass01.jpg" alt="Get It Now" /></p>

<p>ログインしていない場合は自身のアカウントでログイン。<br/>
sandboxかプロダクションへのインストールを選択。<br/>
今回はプロダクションへインストールした。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass02.jpg" alt="Install" /></p>

<p>内容を確認して、<code>Confilm and Install!</code>。<br/>
再度、ID、パスワードを聞かれるので、入力する。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass03.jpg" alt="Confilm and Install!" /></p>

<p>インストールする内容を確認して、<code>次へ</code>。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass04.jpg" alt="パッケージインストールの詳細" /></p>

<p>ユーザーごとの権限を設定し、<code>次へ</code>。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass05.jpg" alt="権限" /></p>

<p>セキュリティレベルを設定し、<code>次へ</code>。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass06.jpg" alt="セキュリティレベル" /></p>

<p>最後の確認をされるので、<code>インストール</code>。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass07.jpg" alt="インストール確認" /></p>

<p>少し待つと、インストールが完了。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass08.jpg" alt="インストール完了" /></p>

<p>使用するには、リードの<code>検索レイアウト</code>にMassActionのボタンを追加してやる必要がある。<br/>
<code>設定 -&gt; カスタマイズ -&gt; リード -&gt; 検索レイアウト</code>を開く。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass09.jpg" alt="リード検索レイアウト" /></p>

<p>その中の、<code>リードリストビュー</code>に追加するので、<code>編集</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass10.jpg" alt="リードリストビュー" /></p>

<p>利用可能なボタン、の中にMassActionのボタンがあるので、<br/>
今回は全て選択して、追加し、保存。</p>

<blockquote><p>Mass Delete<br/>
Mass Edit<br/>
Mass Update</p></blockquote>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass11.jpg" alt="リードリストビューの編集" /></p>

<p>後は通常通り、リードからビューを選択する。<br/>
新規ビューを作成するときに、<code>表示する項目を選択</code>できるが、<br/>
ここで選択したものが後で更新出来る項目となる。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass12.jpg" alt="表示する項目" /></p>

<p>リストビューを表示すると、上部に先程追加したMassのボタンが表示されている。<br/>
変更したいリードをチェックボックスで選択し、その上部のボタン、今回は<code>Mass Edit</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass13.jpg" alt="Mass Edit" /></p>

<p>選択したリードがリストで表示されるので、変更したい箇所を編集し、saveをクリックすると反映される。<br/>
今回は<code>会社名</code>を変更してみた。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass14.jpg" alt="編集" /></p>

<p>結果が反映される。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass15.jpg" alt="結果" /></p>

<p>このように、リードの項目をまとめて編集したりする場合にはこれは非常に便利だと思う。<br/>
いちいち詳細、編集画面に遷移しなくてよいので楽。</p>

<h3>参考</h3>

<p><a href="http://synergylead.jp/support/faq-salesforce-mass-update-edit-delete/">一覧表示画面からチェックボックスで選択して削除・更新を行うには？｜Synergy!LEAD</a><br/>
<a href="https://www.youtube.com/watch?v=xZCyhuTmaWE">Mass Edit and Mass Update in Salesforce.com &ndash; YouTube</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SalesForce]キャンペーンメンバーの状況を追加する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/12/campaignmemberstatus/"/>
    <updated>2014-09-12T11:40:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/12/campaignmemberstatus</id>
    <content type="html"><![CDATA[<p>キャンペーンメンバーオブジェクトのデフォルト項目である、<br/>
<code>状況</code>は、デフォルトでは、</p>

<blockquote><p>送信<br/>
レスポンスあり</p></blockquote>

<p>の２つになっている。<br/>
これを独自で追加したい。</p>

<!-- more -->


<p>結論から言うと、仕様上、無理だった。<br/>
以下に同じような質問があった。</p>

<p><a href="https://developer.salesforce.com/forums/ForumsMain?id=906F00000009B5HIAU">キャンペーンメンバーの状況に値を追加したい &ndash; Salesforce Developer Community</a></p>

<blockquote><p>レコードを横断した設定ではなく、キャンペーンレコード毎に状況を設定する必要があります。</p></blockquote>

<ol>
<li>キャンペーンタブから、状況を追加したいキャンペーンレコードの詳細画面を表示</li>
<li>「高度な設定」ボタン押下</li>
<li>メンバーの状況の値の「編集」ボタン押下</li>
<li>メンバー状況の一番下にある、「さらに追加」リンク押下</li>
</ol>


<p>この仕様は謎仕様としても有名？なよう。</p>

<blockquote><p>キャンペーンメンバーの「状況」のクソ仕様(?)を質問した。<br/>
デフォルト値を変更できない件となぜか手入力な仕様について。<br/>
キャンペーンを作るたびに「状況」の選択肢を追加しないとダメな上に、手入力だから後からの集計がヒドイことになる。<br/>
<a href="https://twitter.com/realichiro5221/status/337413167804203009">https://twitter.com/realichiro5221/status/337413167804203009</a></p></blockquote>

<p>解決策としては、同じ<code>状況</code>項目をカスタム項目として作成するしかないよう。<br/>
それでもデフォルトの<code>状況</code>は必須項目になるので、運用がややこしくなりそうだけれど。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOQLクエリの結果をJSONで出力する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/09/create-json-in-apex/"/>
    <updated>2014-09-09T15:54:29+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/09/create-json-in-apex</id>
    <content type="html"><![CDATA[<p>SOQLで取得したクエリ内容をJSONにパースして出力する方法。</p>

<!-- more -->


<p>Apexクラス</p>

<pre><code>public class sample
{
    public String text1 {get;set;}

    public sample()
    {

    }    
    public void parseJson()
    {
        String soql = 'SELECT Name FROM Lead';
        List&lt;Account&gt; acct = Database.Query(soql); 
        text1 = JSON.serialize(acct);
    }    
} 
</code></pre>

<p>VisualForceページ</p>

<pre><code>&lt;apex:page showHeader="false" controller="ShowCampaignListController" action="{!parseJson}"&gt;
    {!text1}
&lt;/apex:page&gt;
</code></pre>

<p>出力結果例</p>

<pre><code>[{
    "attributes":
    {
        "type":"Lead",
        "url":"/services/data/v32.0/sobjects/Lead/00QO0000002xxxxxxx"
    },
    "Name":"テストユーザー3",
    "Id":"00QO0000002xxxxxxx"
},
{
    "attributes":
    {
        "type":"Lead",
        "url":"/services/data/v32.0/sobjects/Lead/00QO0000002ooooooo"
    },
    "Name":"テストユーザー2",
    "Id":"00QO0000002ooooooo"
}]
</code></pre>

<p>参考：<a href="http://www.infallibletechie.com/2012/10/generating-json-in-visualforce-page-in.html">Infallible Techie: Generating JSON in Visualforce page in Salesforce</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SalesForce]ApexでカスタムREST APIを作成する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/08/apex-restapi/"/>
    <updated>2014-09-08T22:30:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/08/apex-restapi</id>
    <content type="html"><![CDATA[<p>apexにて、自作のRestAPIを作成してみました。<br/>
そして、作成したAPIをPHPから叩いてみました。</p>

<!-- more -->


<p>まずは、Salesforce側の設定。<br/>
今回は、GETで指定されたIDのリードデータを取得するもの。</p>

<pre><code>@RestResource(urlMapping='/CustomLead/*')
global with sharing class CustomLeadSample {
    @HttpGet
    global static sObject doGet() {
        RestRequest req = RestContext.request;
        Id LeadID = req.params.get('id');
        try {
            Lead acc = [SELECT Id, Name FROM Lead WHERE Id = :LeadID LIMIT 1];
            return acc;
        } catch (exception e) {
            return null;
        }
    }
}
</code></pre>

<p>公式の解説の最後に載っているものほぼそのままです。<br/>
<a href="https://developer.salesforce.com/page/Creating_REST_APIs_using_Apex_REST">Creating REST APIs using Apex REST &ndash; developer.force.com</a></p>

<p>で、これをPHP側から呼び出します。<br/>
oauth認証は以下の記事のものを使用させてもらっています。<br/>
<a href="http://www.nkjmkzk.net/?p=2328">nkjmkzk.net &raquo; 新しくなったForce.com OAuth Toolkit for phpの使い方 のコメントのフィード</a><br/>
<a href="https://github.com/nkjm/Force.com-OAuth-Toolkit-for-PHP">nkjm/Force.com-OAuth-Toolkit-for-PHP</a></p>

<p><code>@RestResource</code>で作成したAPIは、<code>/services/apexrest/</code>から始まるURLで定義されています。<br/>
また、外部から接続する場合には、<code>接続アプリケーション</code>の設定が必要になります。<br/>
<a href="https://help.salesforce.com/HTViewHelpDoc?id=connected_app_create.htm&amp;language=ja">接続アプリケーションの作成</a><br/>
コールバックURLは今回は必要ないので、適当なローカルURLを指定しています。<br/>
また、パスワードは、(特定のIPアドレスからのアクセスに制限しなかった場合には)<br/>
パスワード＋セキュリティトークン、の形で渡す必要があります。</p>

<pre><code>require_once('sf_oauth.php');
$app_token = 'xxx';
$app_secret = 'xxx';
$app_callback = 'http://localhost:9000/';
$sf_id = 'xxx';
$sf_pass = 'password+security-token';

$oauth = new oauth($app_token, $app_secret, $app_callback);
$oauth-&gt;auth_with_password($sf_id, $sf_pass);

$url = "$oauth-&gt;instance_url/services/apexrest/CustomLead/?id=".'リードのID';
$curl = curl_init($url);
curl_setopt($curl, CURLOPT_HEADER, false);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_HTTPHEADER,
    array("Authorization: OAuth $oauth-&gt;access_token",
        "Content-type: application/json"));
$json_response = curl_exec($curl);
$status = curl_getinfo($curl, CURLINFO_HTTP_CODE);
</code></pre>

<p>レスポンスは以下のような形です。</p>

<pre><code>{
    "attributes":
    {
        "type":"Lead",
        "url":"/services/data/v32.0/sobjects/Lead/ユーザーID"
    },
    "Name":"ユーザー名",
    "Id":"ユーザーID"
}
</code></pre>

<p>参考サイト：<br/>
<a href="http://magnet88jp.hateblo.jp/entry/2014/07/09/105848">Salesforce 外部サイトからApexメソッドを呼び出したい &ndash; まぐねっとのブログ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeformのAPI]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/01/typeform-api/"/>
    <updated>2014-09-01T14:53:57+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/01/typeform-api</id>
    <content type="html"><![CDATA[<p><a href="http://kayakuguri.github.io/blog/2014/08/29/typeform/">前回、Typeformを触ってみた</a>けれど、<br/>
APIがあるとのことなので見てみました。</p>

<!-- more -->


<p>公式ページ(英語)<br/>
<a href="http://helpcenter.typeform.com/hc/en-us/articles/200071986-Data-API">http://helpcenter.typeform.com/hc/en-us/articles/200071986-Data-API</a></p>

<p>認証や何やらは全くなくて、<br/>
取得したAPIキーとアンケートIDを使用して、URLから直接JSONを取得する形式。<br/>
逆に言えば、URLさえわかれば誰でもアクセス出来てしまうので、<br/>
あまり個人情報的な内容を書かせてしまうと、セキュリティ的にまずいのかもしれない。<br/>
(キーはどちらも推測はされにくいとは思いますが)</p>

<p>APIキーは、<code>My Account</code>内の、<code>Your API Key</code>にあります。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/Typeform__-_My_typeforms.jpg" alt="myaccount" /><br/>
<img src="http://kayakuguri.github.io/images/2014/09/Typeform__-_Account.jpg" alt="myAPIkey" /></p>

<p>このキーを利用して、以下のよう書式で記述します。</p>

<pre><code>https://api.typeform.com/v0/form/アンケートID?key=自分のAPIキー
</code></pre>

<p>すると、以下の様なレスポンスがあります。</p>

<pre><code>{
    "http_status": 200, 
    "questions": [
        {
            "id": "rating_1595673", 
            "question": "イベントを評価して下さい"
        }, 
        {
            "id": "list_1595676_choice", 
            "question": "面白かったですか？"
        }, 
        {
            "id": "textarea_1595680", 
            "question": "何かあれば記入して下さい"
        }
    ], 
    "responses": [
        {
            "answers": {
                "list_1595676_choice": "楽しかった", 
                "rating_1595673": "3", 
                "textarea_1595680": "ぜひまた開催をお願い致します。"
            }, 
            "completed": "1", 
            "hidden": [], 
            "id": "3", 
            "locked": "0", 
            "metadata": {
                "browser": "default", 
                "date_land": "2014-08-29 13:00:43", 
                "date_submit": "2014-08-29 13:01:09", 
                "network_id": "xxxxxx", 
                "platform": "other", 
                "referer": "", 
                "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5)   AppleWebKit/537.75.14 (KHTML, like Gecko) Version/6.1.3 Safari/537.75.14"
            }, 
            "token": "xxxxxx"
        }, 
         {
            …中略
        }
    ], 
    "stats": {
        "responses": {
            "completed": 2, 
            "locked": 0, 
            "showing": 2, 
            "total": 10
        }
    }
}
</code></pre>

<p>オプションは以下。</p>

<table>
<thead>
<tr>
<th>項目 </th>
<th> 型 </th>
<th> 説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>completed </td>
<td> boolean </td>
<td> true:完了している項目のみ false:完了していないもののみ</td>
</tr>
<tr>
<td>since </td>
<td> number (Unix time/Timestamp) </td>
<td> 指定した日付より後</td>
</tr>
<tr>
<td>until </td>
<td> number (Unix time/Timestamp) </td>
<td> 指定した日付まで</td>
</tr>
<tr>
<td>offset </td>
<td> number </td>
<td> (ページがある場合)何ページ目から始めるか</td>
</tr>
<tr>
<td>limit </td>
<td> number </td>
<td> 1ページの表示件数</td>
</tr>
</tbody>
</table>


<p>アンケート作成用のAPIは現在開発中だそうです。<br/>
<a href="http://helpcenter.typeform.com/hc/en-us/articles/200070236-Build-API-coming-soon-">http://helpcenter.typeform.com/hc/en-us/articles/200070236-Build-API-coming-soon-</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[モダンで軽量、作成も簡単と話題のTypeformを試してみた]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/08/29/typeform/"/>
    <updated>2014-08-29T20:30:06+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/08/29/typeform</id>
    <content type="html"><![CDATA[<p>簡単にモダンなフォームが作成出来る、<br/>
typeformを触ってみた。</p>

<!-- more -->


<p>基本機能は無料。<br/>
しかも、フォームの作成数に制限はないよう。<br/>
ただし、機能の制限は色々とある。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform00.jpg" alt="アカウント" /></p>

<h3>出来上がりサンプル</h3>

<p>実際に作成されるアンケートは以下のようになります。<br/>
(サンプル)</p>

<ul>
<li><a href="https://s3-eu-west-1.amazonaws.com/share.typeform.com/typeform_embed_widget_en.html">iframe埋め込み</a></li>
<li><a href="https://s3-eu-west-1.amazonaws.com/share.typeform.com/typeform_embed_full_en.html">ページ全体に埋め込み</a></li>
</ul>


<h3>Build</h3>

<p><code>+</code>をクリックして新しくフォームを作成。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform01.jpg" alt="新規作成" /></p>

<p>すると、その場で小さいモーダルが開くので、<br/>
タイトルと言語とプランを選択。<br/>
言語は日本語もあった。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform02.jpg" alt="入力" /></p>

<p><code>Build it now</code>をクリックすると、<br/>
フォームの編集画面が開く。<br/>
左側のメニューから追加したいものをドラッグして追加していく。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform03.jpg" alt="作成" /></p>

<p>上部の<code>Welcom Screen</code>は、フォーム前の説明画面で、<br/>
真ん中がフォーム画面。<br/>
一番下は完了画面、となっている。</p>

<p>例えば、<code>Multiple choice</code>をドラッグすると、下記のような編集画面が開く。<br/>
日本語もばっちり使える。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform04.jpg" alt="項目の編集" /></p>

<p>左メニューのオプションのらへんで、必須か、複数選択できるか、など<br/>
諸々の設定ができる。<br/>
この辺は英語での説明だけれど、苦にならないくらいUIが簡単でわかりやすい。</p>

<p>完了画面に画像を入れてみたところ。<br/>
画像は以下の素材を使わせてもらいました。</p>

<p><a href="http://www.irasutoya.com/2013/06/thank-you.html">http://www.irasutoya.com/2013/06/thank-you.html</a></p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform05.jpg" alt="完了画面" /></p>

<p>下部にある、<code>Hidden fields</code>を使用すれば、URLにGETパラメータを持たせて、<br/>
個人の特定などが出来るよう。<br/>
これにはProアカウントが必要。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform14.jpg" alt="Hidden Fields" /></p>

<h3>Design</h3>

<p>上部メニューの<code>Design</code>から、色の変更をしたり、<br/>
フォントを変更したり、<br/>
背景に画像を引いたりが出来る。<br/>
反映は、右下の、<code>Apply to typeform</code>をクリックする。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform06.jpg" alt="デザイン" /></p>

<h3>Configure</h3>

<p><code>Configure</code>は、諸々の設定。<br/>
アンケートから、Typeformのロゴを消すにはProアカウントのアップデートが必要(有料)。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform07.jpg" alt="設定" /></p>

<p><code>Self Notifications</code>は、回答があった際に自身にお知らせするメールの内容をカスタマイズできる。<br/>
ここのテキストエリアの編集が若干使いにくかった。<br/>
(消えてほしくない箇所が消えてしまったり)<br/>
<code>Respondent notifications</code>は、回答者への自動返信のよう。ここもProアカウントが必要。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform08.jpg" alt="受付メール" /></p>

<p>回答されたデータを、<a href="https://zapier.com/">Zapier</a>を使用して、他サービスへ連動もできる。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform09.jpg" alt="Zapier" /></p>

<h3>Distribute</h3>

<p>アンケートの表示方法を色々と選べる。</p>

<ul>
<li>直接URLを表示</li>
<li>ポップアップや、横から開く形のボタンやリンクを追加</li>
<li>iframeを使った埋め込み</li>
</ul>


<p><img src="http://kayakuguri.github.io/images/2014/08/typeform10.jpg" alt="表示方法" /></p>

<h3>Analyze</h3>

<p>ここで、アクセス状況や、回答内容が見れる。</p>

<p><strong>アクセス状況</strong>
<img src="http://kayakuguri.github.io/images/2014/08/typeform11.jpg" alt="アクセス状況" /></p>

<p><strong>回答内容一覧</strong>
<img src="http://kayakuguri.github.io/images/2014/08/typeform12.jpg" alt="回答内容" /></p>

<p>GoogleAnalyticsのコードを埋め込んだりも簡単に出来る。</p>

<p><code>Reports</code>で、回答内容のレポートを実際の設問に重ねて表示することが出来る。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform13.jpg" alt="レポート" /></p>

<p>右下のボタンで、LiveのReportが確認出来るよう。</p>

<h3>まとめ</h3>

<p>すごくモダンで使いやすい。<br/>
さくさくできる。<br/>
zapierとの連携もあって、使いようによってはなんでも出来そう。</p>

<p>作成されるフォームは、完全にスマホファーストで、<br/>
PCではちょっと使いづらかった。<br/>
その代わり、スマホではサクサク答えられる。</p>

<p>zapierとともに有料アカウント持ってたらこれらだけでかなり<br/>
有用なツールとして使えそう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebookでテストユーザーを使用してログイン]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/08/07/facebook-test-user/"/>
    <updated>2014-08-07T16:44:44+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/08/07/facebook-test-user</id>
    <content type="html"><![CDATA[<p>Facebookのアプリを作成している際に、<br/>
テストユーザーを使用してログインする方法のメモ。</p>

<!-- more -->


<p>以前まではアプリのメニューからポチポチっと設定出来ましたが、<br/>
今は、URLを作成してそこにアクセスする、<br/>
facebookページのタブにアプリを追加するような多少めんどくさいものになっているようです。</p>

<h3>準備</h3>

<h4>アプリのID</h4>

<p>作成したアプリのIDを取得しておきます。</p>

<h4>アプリに接続する際のアクセストークンの取得</h4>

<p>以下のGraph API Explorerにアクセスし、そこからテストしたいアプリを選択し、<br/>
その後、「Get App Token」(右側。Get Access Tokenではない)を取得しておく。<br/>
<a href="https://developers.facebook.com/tools/explorer/">https://developers.facebook.com/tools/explorer/</a></p>

<p><img src="http://kayakuguri.github.io/images/2014/08/test-user01.jpg" alt="Get App Token" /></p>

<h3>ログイン</h3>

<h4>ログインURLを取得</h4>

<p>取得した２つの情報から以下のURLを作成し、アクセスする。</p>

<pre><code>https://graph.facebook.com/アプリのID/accounts/test-users?installed=true&amp;name=ユーザー名(任意の名前)&amp;locale=ja_JP&amp;permissions=read_stream&amp;method=post&amp;access_token=アプリトークン
</code></pre>

<p>ブラウザでアクセスすると、JSONが返ってくる。</p>

<pre><code>{
   "id": "xxIDxx",
   "email": "testtamsanuser_rrfidrb_testtamsanuser\u0040tfbnw.net",
   "access_token":  "xxACCESS_TOKENxx",
   "login_url": "https://developers.facebook.com/checkpoint/test-user-login/xxx/",
   "password": "xxPASSWORDxx"
}
</code></pre>

<p>この中の、<code>login_url</code>でアクセス。<br/>
この時に、自分のアカウントでログインした状態でアクセスすること。</p>

<h4>ログイン</h4>

<p>しつこく確認される。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/test-user02.jpg" alt="Get App Token" /><br/>
<img src="http://kayakuguri.github.io/images/2014/08/test-user03.jpg" alt="Get App Token" /></p>

<p>OKOKすると、以下のような形でログインできる。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/test-user04.jpg" alt="Get App Token" /></p>

<p>終了したい場合は、ログアウトしてログインしなおせばよい。</p>

<h3>参考サイト</h3>

<p>参考、というか、ほぼ以下のままです。<br/>
ありがとうございます。<br/>
<a href="http://qiita.com/se_ino/items/a96449cd25886a6d05fb">Facebookアプリのテストユーザーの作り方手順 &ndash; Qiita</a></p>

<p>公式ドキュメント<br/>
<a href="https://developers.facebook.com/docs/graph-api/reference/v2.0/test-user">Graph API Reference Test User /test-user</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebookのphp-sdk-v4をcomposerを使ってインストールした時のメモ]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/08/04/facebook-sdk-v4-composer/"/>
    <updated>2014-08-04T19:26:37+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/08/04/facebook-sdk-v4-composer</id>
    <content type="html"><![CDATA[<p>今更ながらFacebookのAPIがv2.0にアップデートされた事による<br/>
影響範囲の大きさにショックを受けています。</p>

<p><a href="http://kuneko.hatenadiary.com/entry/facebook_search_public_post">Facebookの全体公開投稿は2015年に完全に検索できなくなるかも &ndash; ku:neko ism</a><br/>
<a href="http://snowadays.jp/2014/05/2762">Facebookログイン Version2.0（アプリのパーミッション仕様変更）</a><br/>
<a href="http://qiita.com/hilotter/items/b88402505faeebbbce89">Facebook Graph API 2.0について &ndash; Qiita</a></p>

<!-- more -->


<p>で、新しいものに対応したアプリを作成するべく、<br/>
PHPのSDKをダウンロードしてきて、、と思ったのですが、composerに対応しているということで、<br/>
composerでインストールしてみることに。</p>

<p><a href="https://developers.facebook.com/docs/php/gettingstarted/4.0.0">Getting Started php-sdk-v4</a><br/>
この公式によると、以下のようにしてインストールする、だけ。</p>

<pre><code>{
  "require" : {
    "facebook/php-sdk-v4" : "4.0.*"
  }
}
</code></pre>

<p>しかしエラーが。</p>

<pre><code>Your requirements could not be resolved to an installable set of packages.
  Problem 1
- facebook/php-sdk-v4 4.0.9 requires php &gt;=5.4.0 -&gt; no matching package found.
</code></pre>

<p>バージョンの指定を、<code>4.0.9</code>としたり、<code>*</code>としてみても同じ。<br/>
ググってみると以下の情報に当たる。</p>

<p><a href="http://stackoverflow.com/questions/24269649/composer-not-installing-latest-facebook-php-sdk-due-to-multiple-php-versions">composer not installing latest facebook php sdk due to multiple php versions &ndash; Stack Overflow</a></p>

<p>どうやら、php-sdk-v4は、PHPのバージョンが5.4からの対応、なのだけれど、<br/>
PCにインストールしているPHPのバージョンが低いとエラーが出るらしい。</p>

<p>ターミナルからPHPのバージョンを調べてみると、きっちり、<code>5.3.28</code>。</p>

<pre><code>$ php -v
PHP 5.3.28 (cli) (built: Jan 23 2014 18:02:48)
</code></pre>

<p>調べてみると、下記が一番簡単そうだったので、この方法でインストールした。</p>

<p><a href="http://kimikimi714.hatenablog.com/entry/2013/07/06/233518">macのphpをアップデート &ndash; わすれっぽいきみえ</a></p>

<pre><code>$ curl -s http://php-osx.liip.ch/install.sh | bash -s 5.5
</code></pre>

<p>で、このままではデフォルトにはならないので、パスを通す、と。<br/>
<code>~/.bashrc</code>の冒頭に下記を追加しておいた。</p>

<pre><code>export PATH=/usr/local/php5/bin:$PATH
</code></pre>

<p>で、バージョンを再度確認してみると、無事、アップデートされていた。</p>

<pre><code>$ php -v
PHP 5.5.14 (cli) (built: Jun 28 2014 10:29:43)
</code></pre>

<p>で、再度、composerをインストールしてみると、無事、完了した。<br/>
これでようやく環境が整ったことになる。</p>

<pre><code>  - Installing facebook/php-sdk-v4 (4.0.9)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[エラー] bad line length character: Sysl]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/28/git-heroku-error/"/>
    <updated>2014-07-28T12:39:54+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/28/git-heroku-error</id>
    <content type="html"><![CDATA[<p>とあるタイミングでheroku上のgitからフェッチしようとすると、<br/>
タイトルのようなエラーが出た。</p>

<!-- more -->


<p>エラー内容。</p>

<pre><code>$ git fetch staging
Fetching repositoryfatal: protocol error: bad line length character: Sysl
</code></pre>

<p>環境は、herokuで、<a href="http://kayakuguri.github.io/blog/2014/07/02/heroku-staging/">ここで書いた</a>とおり、ローカルでブランチを切って、<br/>
それぞれのブランチでリモートのプッシュ先を変えて管理している。<br/>
ここでは、staging環境の分をフェッチしたかった。</p>

<p>heroku関連として全く同じ内容のエラーがStackOverFlowに投稿されていたが、<br/>
どうやら解決はしていないよう。</p>

<p><a href="http://stackoverflow.com/questions/23034100/git-error-bad-line-length-character-sysl">Git Error: bad line length character: Sysl</a></p>

<p>ググってみると、リモート先のサーバーにsshでログインする時に表示されるメッセージが悪いとか、<br/>
ssh関連で、<code>.bashrc</code>とか<code>.zshrc</code>とかの設定を見なおしたよ、というような内容が多い。</p>

<p><a href="http://d.hatena.ne.jp/kuromoyo/20120217/1329460576">protocol error: bad line length character と出たら &ndash; #9 Backyard</a><br/>
<a href="http://verytired.hateblo.jp/entry/2013/07/10/191324">gitのエラー解決方法 &ndash; Shut the fuck up and write some code</a><br/>
<a href="http://kimoi.hatenadiary.com/entry/20130701/1372693974">fatal: protocol error: bad line length character: # Us &ndash; きもい交換日記</a></p>

<p>しかしどれもピンと来ない。</p>

<p>とりあえず、master環境に切り替えてみよう(理由はない)と思い、変更してみると以下のエラー。</p>

<pre><code>$ git checkout master
fatal: This operation must be run in a work tree
</code></pre>

<p>ググると以下の情報が。<br/>
<a href="http://dqn.sakusakutto.jp/2012/09/git-bare-checkout-This-operation-must-be-run-in-a-work-tree.html">#git bareレポジトリでcheckoutしようとして&quot;This operation must be run in a work tree&quot;の対処法 &ndash; DQNEO起業日記</a></p>

<p>内容通り、以下のコマンドで切り替えは出来た。</p>

<pre><code>$ git symbolic-ref HEAD refs/heads/master
</code></pre>

<p>ただし、またstagingに戻そうとすると、上記のコマンドが必要になる。。</p>

<p>ターミナルだけでなく、gitはsourceTreeでも管理しているのだけれど、<br/>
そのソフト上では、ブランチの切り替えはダブルクリックだけで簡単に出来た。</p>

<p>そんな感じで、ブランチの切り替えをしていると、自動的にstaging環境でフェッチが行われていた。<br/>
流れとしてはこんな感じ。</p>

<blockquote><p>stagigブランチ<br/>
masterブランチに切り替え<br/>
stagingブランチに切り替え<br/>
自動的にフェッチが行われる<br/>
 (全てsourcetree上での作業)</p></blockquote>

<p>その後、ターミナル上でも<code>fetch</code>してみたが、何事もなく動作した。</p>

<pre><code>$ git fetch staging
Fetching repository, done.
</code></pre>

<hr />

<p>結局、原因は不明で、修正手順も不明、なのだけれど、<br/>
ちょっと情報が少なかったのでメモとして残しておく。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macの空き容量を増やす]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/24/mac-storage/"/>
    <updated>2014-07-24T12:28:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/24/mac-storage</id>
    <content type="html"><![CDATA[<p>空き容量を増やすべく、色々対応してみた。<br/>
実行は自己責任でお願いします。</p>

<!-- more -->


<p>参考にしたページ：<br/>
<a href="https://note.mu/akikazutakenaka/n/n362c8c79193b">Mac の SSD 空き容量がガッツリ減ったのであれこれ対応した話 | 竹中 彰一 | note</a></p>

<p>以下のコマンドを実行してサイズの大きい(5ギガ以上)ディレクトリを検索。</p>

<pre><code>$ sudo du -g -x -d 5 / | awk '$1 &gt;= 5{print}'
</code></pre>

<p>なんだかよくわからないファイル達が次々とヒット。</p>

<h3>メモリ関連？</h3>

<p><code>/private/var/vm/sleepimage</code>が8Gほど食っていた。<br/>
このファイルは、スリープ状態のまま電源が切れた場合のバックアップとして取られているらしい。<br/>
<strong>これは消して問題なし。</strong><br/>
作らなくする方法は以下参照。<br/>
<a href="http://yoonchulkoh.hatenablog.com/entry/20110903/1315063179">MacBook Proを圧迫するsleepimageをどうにかする &ndash; 悪あがきプログラマー</a><br/>
<a href="http://blog.livedoor.jp/gf8d/archives/52159018.html">MacBook Airを圧迫するsleepimageをどうにかする : まるたけ食堂</a></p>

<p>詳しい説明は以下。<br/>
<a href="http://inforati.jp/apple/mac-tips-techniques/system-hints/how-to-change-the-sleep-mode-of-mac.html">MacBookやMacBook Proのスリープ方式を切り替えてバッテリー消費を減らす方法 / Inforati</a></p>

<p>同じフォルダ内にある、swapfile、はメモリ関連のファイルの模様。<br/>
基本的には、再起動したら消えるらしい。<br/>
再起動せずに消したい場合などは以下を参照。<br/>
<a href="http://d.hatena.ne.jp/kazuhooku/20130207/1360226719">Mac OS Xで、再起動せずにスワップを解放する方法 &ndash; kazuhoのメモ置き場</a></p>

<h3>Adobeのキャッシュ</h3>

<p>以下、参照。<br/>
<a href="http://helpx.adobe.com/jp/x-productkb/multi/cpsid_84648.html"> ハードディスクの空き領域が徐々に減っていく （Premiere Pro/Encore）</a></p>

<p>ここで、1.9Gくらいありました。</p>

<h3>Macのキャッシュ</h3>

<p>macのキャッシュは3つあるよう。<br/>
以下、それぞれの自分の状態。</p>

<p>・システムキャッシュ<br/>
<code>/System/Library/Caches</code> : 24Mb</p>

<p>・ローカルキャッシュ<br/>
<code>/Library/Caches</code> : 1.4Gb</p>

<p>・ユーザーキャッシュ<br/>
<code>/Users/ユーザ名/Library/Caches</code> : 9.48Gb</p>

<p>ユーザーキャッシュがかなり食っている。</p>

<p>ターミナルからワンライナーで削除。</p>

<pre><code>$ sudo rm -dfR /System/Library/Caches/* /Library/Caches/* ~/Library/Caches/*
</code></pre>

<p>削除後は再起動が推奨されるよう。</p>

<p>参考：<br/>
<a href="http://fumie-mac.blog.so-net.ne.jp/2012-07-07">Mac OS Xのメンテナンス：Mac おぼえがき Intel 編：So-netブログ</a><br/>
<a href="http://www.gadgetlunatic.com/post/803/">Macを高速化！キャッシュを削除。 | Gadget Lunatic</a></p>

<h3>コアダンプ</h3>

<p>以下のページを最初に見つけて容量改善を試みたのだけど、<br/>
このコアダンプのディレクトリは空だった。<br/>
ここが容量食ってる人は消したらいいと思う。</p>

<p><a href="http://eiyan.net/diary/mac-%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B8-%E3%81%9D%E3%81%AE%E4%BB%96-%E3%81%AE%E5%9C%A7%E8%BF%AB%E3%82%92%E3%82%B5%E3%82%AF%E3%83%83%E3%81%A8%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B%E6%96%B9/">mac ストレージ その他 の圧迫をサクッと解決する方法 &ndash; ゆるぶろ</a></p>

<hr />

<h3>結果</h3>

<p>他に音楽や動画など、いらないファイルがあったので、それらも削除。<br/>
結局、50Gくらい増やすことが出来ました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[勉強] Ruby on Rails #02]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/18/rails-study02/"/>
    <updated>2014-07-18T17:49:50+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/18/rails-study02</id>
    <content type="html"><![CDATA[<p><a href="http://railstutorial.jp/">Ruby on Rails チュートリアル：実例を使って Rails を学ぼう</a></p>

<p>web上では無料で公開されているこちらを利用して勉強していく上での備忘録です。</p>

<!-- more -->


<h3>最初のアプリケーション</h3>

<blockquote><p>どんなRailsアプリケーションも最初の作成手順は同じです。rails newコマンドを実行して作成します。</p></blockquote>

<pre><code>$ rails new first_app
</code></pre>

<p>(<code>Permission denied</code>がたくさん出ているのは、もしかしたら<code>sudo</code>が必要なのかも。。)</p>

<h3>Bundler</h3>

<p><code>Gemfile</code>を編集して、bundlerを再実行してみる。<br/>
[内容]</p>

<pre><code>source 'https://rubygems.org'
ruby '2.0.0'
#ruby-gemset=rails4

gem 'rails', '4.1.4'

group :development do
  gem 'sqlite3', '1.3.8'
end

gem 'sass-rails', '4.0.2'
gem 'uglifier', '2.1.1'
gem 'coffee-rails', '4.0.1'
gem 'jquery-rails', '3.0.4'
gem 'turbolinks', '1.1.1'
gem 'jbuilder', '1.0.2'

group :doc do
  gem 'sdoc', '0.3.20', require: false
end
</code></pre>

<blockquote><p>SQLiteをdevelopment環境でのみ使用するための指定も行なっていることに注目してください。こうすることで、Herokuで使用するデータベースソフトウェアと衝突する可能性を避けられます。</p></blockquote>

<p>元の内容の説明。<br/>
<code>gem 'uglifier', '&gt;= 1.3.0'</code> : uglifierのバージョンが1.3.0以上であれば最新バージョンのgemがインストールされる<br/>
<code>gem 'coffee-rails', '~&gt; 4.0.0'</code> : 4.0.0から4.0.1へのアップグレードは行われますが、4.0から4.1へのアップグレードは行われません</p>

<blockquote><p>経験上、残念ながらマイナーアップグレードですら問題を引き起こすことがあります。このため、Railsチュートリアルでは基本的にすべてのgemでバージョンをピンポイントで指定しています。</p></blockquote>

<p>アップデートして、インストール。</p>

<blockquote><p>bundle updateの手順が必要となるのは、Rails gemのバージョンを変更した場合に限られます。</p></blockquote>

<p><code>sudo</code>をつけないと実行出来なかった。</p>

<pre><code>$ sudo bundle update
$ sudo bundle install
</code></pre>

<h3>rails server</h3>

<blockquote><p>Railsには開発マシンでのみブラウズできるローカルWebサーバーを起動するためのコマンドラインプログラム (スクリプト) が付属しているので、以下のコマンドを実行するだけで簡単に起動することができます。</p></blockquote>

<pre><code>$ rails server
</code></pre>

<p>これでサーバーが起動。<br/>
<a href="http://localhost:3000/">http://localhost:3000/</a><br/>
ここで、確認出来る。<br/>
<img src="http://kayakuguri.github.io/images/2014/07/ror01.jpg" alt="rails server" /></p>

<p><code>control + c</code>で終了出来る。</p>

<h3>MVC</h3>

<p>この流れになっているよう。<br/>
(画像は引用)</p>

<p><img src="http://railstutorial.jp/images/figures/mvc_schematic.png" alt="MVC" /></p>

<h3>Gitによるバージョン管理</h3>

<p>ここは飛ばそうか悩んだけれど、この後にherokuにアップする流れだったので、<br/>
ここで管理しておくことにした。</p>

<p>Gitについて詳しくは以下参照のこと、と。<br/>
<a href="http://git-scm.com/book/ja/">Pro Git</a></p>

<p>リポジトリを作成。</p>

<pre><code>$ git init
</code></pre>

<blockquote><p>たとえば、Railsによって作成されるログファイルは頻繁に内容が変わるので、いちいちバージョン管理に更新させたくありません。<br/>
railsコマンドを実行した時にRailsアプリケーションのルートディレクトリに.gitignoreファイルが作成されています</p>

<p>しかし、以下のリストの方がさらに便利で、セキュリティ上も有利なのでお勧めです。この.gitignoreでは、Railsドキュメントファイル、VimやEmacsのスワップファイル、そしてOS Xユーザーにはお馴染みの、あのいまいましい.DS_Storeディレクトリ (MacのFinder操作で作成される隠しディレクトリ) も管理対象から除外されます。</p></blockquote>

<pre><code># Ignore bundler config.
/.bundle

# Ignore the default SQLite database.
/db/*.sqlite3
/db/*.sqlite3-journal

# Ignore all logfiles and tempfiles.
/log/*.log
/tmp

# Ignore other unneeded files.
doc/
*.swp
*~
.project
.DS_Store
.idea
.secret
</code></pre>

<p>で、追加して、コミットする。</p>

<pre><code>$ git add .
$ git commit -m "Initialize repository"
</code></pre>

<h3>GitHub</h3>

<p>githubアカウントに追加する。</p>

<pre><code>$ git remote add origin https://github.com/USER-NAME/railstutorial.git
$ git push -u origin master
</code></pre>

<blockquote><p>コミットメッセージは現在形で書くようにしましょう。<br/>
そのコミットが「何をしたのか」と履歴スタイルで書くよりも「何をする」ためのものなのかを書く方が、後から見返したときにわかりやすくなります。</p>

<p>大抵のシステムではgit pushを実行するときにorigin masterを省略できます。</p></blockquote>

<h3>Heroku</h3>

<blockquote><p>HerokuではPostgreSQLデータベースを使用します</p></blockquote>

<p><code>Gemfile</code>に本番用の設定を追記する。</p>

<pre><code>group :production do
  gem 'pg', '0.15.1'
  gem 'rails_12factor', '0.0.2'
end
</code></pre>

<p>Gemfileを更新したので、installしておく。</p>

<pre><code>$ bundle install --without production
</code></pre>

<blockquote><p>&mdash;without productionオプションを追加すると、 本番用のgem (この場合はpgとrails_12factor) はローカルの環境にはインストールされません。<br/>
このコマンドを実行するのは、後の本番環境に備えてGemfile.lockを更新し、pg gemとrails_12factor gem、Rubyバージョンの指定を含めておく必要があるためです。</p></blockquote>

<p>herokuのアプリを作成して、プッシュして、デプロイ。</p>

<pre><code>$ heroku create rails-myfirstapp
$ git push heroku master
</code></pre>

<p>以下に作成した。</p>

<p><a href="http://rails-myfirstapp.herokuapp.com/">http://rails-myfirstapp.herokuapp.com/</a></p>

<p>エラーがでてる！と思いきや、仕様のよう。</p>

<blockquote><p>残念ながら、Rails 4.0では技術的な理由によりエラーページが表示されます。Rails 4.0のデフォルトページはHerokuでは表示できません。サンプルアプリケーションの一環として、ルートへのルーティングを追加すればこのエラーは解消しますのでご安心ください。</p></blockquote>

<hr />

<p>これでようやく開発環境が一通り整った、という事になる。<br/>
チュートリアルサイトの冒頭にあった言葉が身にしみる。。。</p>

<blockquote><p>本書の第1章は、さしずめロースクールで言うところの「淘汰期間」(訳注: そこで生き残れるかどうかを選別する期間) のようなものである。本章で開発環境の構築に成功できた人ならば、最後までやり通すことは難しくありません。
—Bob Cavezza (Railsチュートリアル読者)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[勉強] Ruby on Rails #01]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/18/rails-study01/"/>
    <updated>2014-07-18T15:43:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/18/rails-study01</id>
    <content type="html"><![CDATA[<p><a href="http://railstutorial.jp/">Ruby on Rails チュートリアル：実例を使って Rails を学ぼう</a></p>

<p>web上では無料で公開されているこちらを利用して勉強していく上での備忘録です。</p>

<!-- more -->


<h3>はじめに〜読者の皆さまへ</h3>

<p>印象に残った箇所を引用させてもらいます。</p>

<blockquote><p>チュートリアルが統合的に構成されていることにより、本書を最後まで完了することができれば、現時点のWeb開発の知識量に関わらず、より高度な情報源を難なく読みこなす実力が身につき、上に挙げたJavaScriptなどのRails以外のトピックについても理解しやすくなります。</p>

<p>「最初からテストを書かないといけないでしょうか？」<br/>
Railsチュートリアルでは最初からテスト駆動開発 (TDD) を採用しています。<br/>
ただし、テスト駆動開発を全面的に採用したことにより、本チュートリアルはその分複雑になり、読者の負担も増えています。<br/>
そこで、もしテストで行き詰まってしまった場合には、そこで長々と悩むよりも思い切って (一周目は) その箇所をスキップしてしまいましょう。</p>

<p>(Rubyでは行末にセミコロンを置いても置かなくても問題なく動きますので、行末にセミコロンがないとどうしても落ち着かない方はそうしてみてもよいかもしれません。お勧めはしませんが。)</p>

<p>「Railsはスケールアップできない」という主張について<br/>
Webサイトをスケールさせるのはあなたが行わなければいけない作業であって、フレームワークがWebサイトをスケールさせるのではない</p></blockquote>

<h5>表記について</h5>

<blockquote><p>Railsで作成するWebアプリケーションが置かれているディレクトリのルート (root) を、Railsルートと呼ぶことにします。<br/>
多くの人がRailsルートを「Railsというアプリケーションそのものがインストールされているディレクトリのルート」だと勘違いします。</p></blockquote>

<h3>開発環境</h3>

<h4>IDE</h4>

<ul>
<li><a href="http://www.aptana.com/products/radrails">Aptana RadRails</a></li>
<li><a href="http://www.jetbrains.com/ruby/index.html">RubyMine</a></li>
</ul>


<p><a href="http://blog.mah-lab.com/2013/12/09/rubymine/">イマドキ、Ruby on Railsで開発するならエディタはRubyMineだよね？ 6出たよー！</a><br/>
PHPStromは使っているので、RubyMineがいいけど、お値段が。。。<br/>
(統合できて、安くなる仕組みになってたらいいのに)</p>

<h4>エディタ</h4>

<p>上記IDEは開発からコマンド実行、アップロードなどもオールインワンで行えるものだけれど、<br/>
テキストエディタ+ターミナルでのコマンド実行、でも大丈夫。<br/>
<a href="http://www.sublimetext.com/">Sublime Text</a> と ターミナル、(とりあえず)無料で始められる。</p>

<p><a href="https://github.com/mhartl/rails_tutorial_sublime_text">SublimeTextでRailsの開発環境を整える(英語)</a></p>

<h4>インストール</h4>

<p>rvmはインストール済だったので、最新版にアップデートしておいた。</p>

<pre><code>$ rvm get stable
</code></pre>

<blockquote><p>Rubyをインストールしたら、Railsのアプリケーションを実行するために必要な他のソフトウェア向けにシステムを構成する必要があります。<br/>
gemとは自己完結型のRubyコードのパッケージです。<br/>
一連のgemを自己完結的にまとめたgemsetというものを作成してバージョンを使い分けるのが便利です。<br/>
本書向けに、以下を実行してrailstutorial_rails_4_0という名前のgemsetを作成しておく</p></blockquote>

<pre><code>$ rvm use 2.0.0@railstutorial_rails_4_0 --create
</code></pre>

<p>これを実行すると、<code>ruby-2.0.0-p481 is not installed.</code>と怒られた。<br/>
ので、インストールしておく。</p>

<pre><code>$ rvm install 2.0.0 --with-openssl-dir=$HOME/.rvm/usr
. . .
Install of ruby-2.0.0-p481 - #complete
</code></pre>

<p>再度、gemsetを作成。<br/>
チュートリアル内ではこれをデフォルトに、とあるけど、<br/>
他に影響が出そうなので、とりあえず、セットを作って、必要に応じて適応させるようにする。<br/>
で、このままだとセット名が長いので、セット名を<code>rails4</code>など簡単なものにしておいた。</p>

<p>一旦削除して、</p>

<pre><code>$ rvm gemset delete railstutorial_rails_4_0
Are you SURE you wish to remove the entire gemset directory 'railstutorial_rails_4_0'
(anything other than 'yes' will cancel) &gt; 
</code></pre>

<p>再度作成。</p>

<pre><code>$ rvm use 2.0.0@rails4 --create
</code></pre>

<p>これで作成されたので、次回起動時にはこのセットを適用、、、すればいいのだけれど、<br/>
現状、デフォルトは、<code>ruby-1.9.3-p484</code>にしている。<br/>
この状態で、<code>rvm gemset use rails4</code>としても、ファイルがない、と言われて実行出来ない。<br/>
一度、<code>rvm use 2.0.0</code>にしてやれば実行できた。(それだとセットを適用させる意味がないけど。。)</p>

<p>参考：<a href="http://transitive.info/article/ruby/rvm/gemset/">transitive.info &ndash; RVM の gemset を使う</a></p>

<p><strong>RubyGems</strong></p>

<blockquote><p>RVMをインストールしてあれば、既にRubyGemsも同時にインストールされているはずです。</p></blockquote>

<p>だけれど、<code>which gem</code>とすると、パスがそのままは出なかった。<br/>
とりあえず、下記のコマンドを実行すると、無事インストールされたよう。<br/>
(権限上、<code>sudo</code>が必要だった)</p>

<pre><code>$ sudo gem update --system 2.0.3
. . .
RubyGems 2.0.3 installed
. . .
RubyGems installed the following executables:
    /Users/xxx/.rvm/rubies/ruby-2.0.0-p481/bin/gem
</code></pre>

<p>2種類のドキュメント、riやrdocの自動生成を抑制するために、<code>.gemrc</code>に追記。</p>

<blockquote><p>sublはOS XでSublime Textを起動するコマンドです</p></blockquote>

<pre><code>$ subl ~/.gemrc
</code></pre>

<p>以下を追記</p>

<pre><code>install: --no-rdoc --no-ri
update:  --no-rdoc --no-ri
</code></pre>

<p>このチュートリアルを始める前にすでに入れてしまってたので、<br/>
バージョンを確認しようとしたらエラーが出た。</p>

<pre><code>$ rails -v
/usr/local/Cellar/ruby/2.1.2_2/lib/ruby/2.1.0/rubygems/dependency.rb:298:in `to_specs': Could not find 'railties' (&gt;= 0) among 15 total gem(s) (Gem::LoadError)
    from /usr/local/Cellar/ruby/2.1.2_2/lib/ruby/2.1.0/rubygems/dependency.rb:309:in `to_spec'
    from /usr/local/Cellar/ruby/2.1.2_2/lib/ruby/2.1.0/rubygems/core_ext/kernel_gem.rb:53:in `gem'
    from /usr/local/bin/rails:22:in `&lt;main&gt;'
</code></pre>

<p>以下で解決した。</p>

<pre><code>$ sudo gem install railties
</code></pre>

<p>参考：<a href="http://undersourcecode.blog62.fc2.com/blog-entry-173.html">Ruby 2.0.0-p0 でRailsを動かす</a></p>

<p>バージョンは、<code>4.1.4</code>だった。<br/>
チュートリアルは<code>4.0.5</code>だけど、とりあえずこのままにしておく。</p>

<p>次回、いよいよアプリの作成です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mailgun APIを使ってメールを送る Composer版]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/15/mailgunapi/"/>
    <updated>2014-07-15T14:13:12+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/15/mailgunapi</id>
    <content type="html"><![CDATA[<p>いくつか書いているmailgunを使用したメール送信の件ですが、<br/>
たぶん正しいと思われる方法がわかったのでメモしておきます。</p>

<!-- more -->


<h3>composerでインストール</h3>

<p><a href="https://github.com/mailgun/mailgun-php">mailgun/mailgun-php · GitHub</a></p>

<p>composerを使用して、ライブラリをインストールします。<br/>
Composerのインストールは以下などを参照に。<br/>
<a href="http://tech.basicinc.jp/php/2013/08/18/php_composer/">PHPのパッケージ管理Composerを使う</a></p>

<p>Windowsの場合は以下に書きました。<br/>
<a href="http://kayakuguri.github.io/blog/2014/07/15/win7-composer/">Windows7でComposerのインストール</a></p>

<p><code>composer.json</code>に以下のように記述。</p>

<pre><code>{
    "require": {
        "mailgun/mailgun-php": "~1.7.1"
    }
}
</code></pre>

<p>で、インストール。</p>

<pre><code>$ composer install
</code></pre>

<p>これでライブラリなどがダウンロードされ、mailgunの依存関係が出来上がります。</p>

<h3>Mailgun</h3>

<h4>インストール</h4>

<p>アドオンのインストール。</p>

<pre><code>$ heroku addons:add mailgun
</code></pre>

<h4>セットアップ</h4>

<p>PHPの冒頭で初期化して送信。<br/>
初期化するためにはAPIキーとドメインが必要。<br/>
これは環境変数に入っている。</p>

<pre><code>MAILGUN_API_KEY:       key-xxx
MAILGUN_SMTP_LOGIN:    postmaster@xxx.mailgun.org
MAILGUN_SMTP_PASSWORD: xxx
MAILGUN_SMTP_PORT:     587
MAILGUN_SMTP_SERVER:   smtp.mailgun.org
</code></pre>

<p>ドメインは、<code>MAILGUN_SMTP_LOGIN</code>の<code>@</code>より後ろ、になるので、それを使用する。</p>

<pre><code>require 'vendor/autoload.php';
use Mailgun\Mailgun;

$mgClient = new Mailgun(getenv('MAILGUN_API_KEY'));
$domain = getenv('MAILGUN_SMTP_LOGIN');
$domain = substr($domain, strpos($domain, '@') + 1);
</code></pre>

<h4>送信</h4>

<p>通常の送信は以下。</p>

<pre><code>$result = $mgClient-&gt;sendMessage($domain, array(
    'from'    =&gt; 'Excited User &lt;me@samples.mailgun.org&gt;',
    'to'      =&gt; 'Baz &lt;baz@example.com&gt;',
    'subject' =&gt; 'Hello',
    'text'    =&gt; 'Testing some Mailgun awesomness!'
));
</code></pre>

<h4>パラメータを個別に設定</h4>

<p>上記では送信時に一括で指定しているけれど、これを個別に設定するには、<br/>
<code>Message Builder</code>というものを使用します。<br/>
<a href="https://github.com/mailgun/mailgun-php/blob/master/src/Mailgun/Messages/README.md#usage---message-builder">Usage &ndash; Message Builder</a></p>

<p>上記のセットをバラすと以下のようになります。</p>

<pre><code>$msgBldr = $mgClient-&gt;MessageBuilder();
$msgBldr-&gt;setFromAddress('Excited User &lt;me@samples.mailgun.org&gt;');
$msgBldr-&gt;addToRecipient('Baz &lt;baz@example.com&gt;');
$msgBldr-&gt;setSubject('Hello');
$msgBldr-&gt;setTextBody('Testing some Mailgun awesomness!'); 
$result = $mgClient-&gt;post("{$domain}/messages", $msgBldr-&gt;getMessage(), $msgBldr-&gt;getFiles());
</code></pre>

<h4>キューにまとめて登録</h4>

<p>また、キューにまとめて登録する場合は、<code>Batch Message</code>を使用します。<br/>
<a href="https://github.com/mailgun/mailgun-php/blob/master/src/Mailgun/Messages/README.md#usage---batch-message">Usage &ndash; Batch Message</a></p>

<p>これを使用して、toを複数登録すると、それぞれのtoにバラバラに同じメールが送られます。</p>

<pre><code>$msgBldr = $mgClient-&gt;BatchMessage($domain);
$msgBldr-&gt;addToRecipient('test1 &lt;test1@example.com&gt;');
$msgBldr-&gt;addToRecipient('test2 &lt;test2@example.com&gt;');
// 他のパラメータ設定は同じ
$result = $msgBldr-&gt;finalize();
</code></pre>

<p><code>finalize</code>で、キューに登録されるようでした。</p>

<hr />

<p>今までのmailgun関連の記事はこちら</p>

<ul>
<li><a href="http://kayakuguri.github.io/blog/2014/02/17/send-mail-from-heroku-with-mailgun/">PHPでMailgunを使ってherokuでメール送信する</a></li>
<li><a href="http://kayakuguri.github.io/blog/2014/02/18/php-heroku-sendattachmail/">[PHP]herokuで添付ファイル付きメールを送る</a></li>
<li><a href="http://kayakuguri.github.io/blog/2014/02/19/attachment-use-mailgunapi/">[PHP][heroku]Mailgun APIを使って添付ファイルを送る</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows7でComposerのインストール]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/15/win7-composer/"/>
    <updated>2014-07-15T10:37:53+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/15/win7-composer</id>
    <content type="html"><![CDATA[<p>windows7でheroku+php環境を整えたかったので、<br/>
composerをインストールしてみた。</p>

<!-- more -->


<h3>準備</h3>

<h4>XAMPP</h4>

<p>phpを使用するので、XAMPPを入れておくのが手取り早い。<br/>
<a href="https://www.apachefriends.org/jp/index.html">XAMPP</a></p>

<p>ページからインストーラーをダウンロード。<br/>
<img src="http://kayakuguri.github.io/images/2014/07/composer-win11.jpg" alt="XAMPP" /></p>

<p>クリックして起動。<br/>
ウイルス対策ソフトを起動している場合、動作が遅くなるかも、などの注意文が出るので、OKをクリック。<br/>
<img src="http://kayakuguri.github.io/images/2014/07/composer-win12.jpg" alt="warning" /></p>

<p>そのあとにも警告文が表示されました。<br/>
内容は、</p>

<blockquote><p>これはWindows Vista/7のユーザーアカウント制御(UAC)機能によってXAMPPの機能が制限される場合があるので、<br/>
1) C:\Program Filesフォルダ以外にインストールする<br/>
2) UACをオフにする<br/>
のいずれかで対応せよという警告</p></blockquote>

<p>という事のようです。<br/>
<a href="http://jubei.co.jp/kouza/setup/xampp.html">XAMPPのインストール (Windows) &ndash; 講座用PCの準備</a></p>

<p>Componentsは特に気にせずデフォルトのままで。<br/>
<img src="http://kayakuguri.github.io/images/2014/07/composer-win13.jpg" alt="Components" /></p>

<p>スカイプとポートが被っている場合は、以下。<br/>
<a href="http://degital-zakki.blogspot.jp/2009/08/xamppskype.html">xamppとskypeの共存</a></p>

<h3>Composer</h3>

<h4>ダウンロード</h4>

<p>公式サイトからインストーラをダウンロードする。<br/>
<a href="https://getcomposer.org/">Composer</a></p>

<p><code>Downlaod</code>をクリック。<br/>
<img src="http://kayakuguri.github.io/images/2014/07/composer-win01.jpg" alt="Composer" /></p>

<p><code>Windows Installer</code>から、<code>Composer-Setup.exe</code>をダウンロード。<br/>
<img src="http://kayakuguri.github.io/images/2014/07/composer-win02.jpg" alt="Setup.exe" /></p>

<h4>インストール</h4>

<p>ダウンロードした、<code>Composer-Setup.exe</code>を起動。<br/>
<code>Next</code>をクリック。<br/>
<img src="http://kayakuguri.github.io/images/2014/07/composer-win03.jpg" alt="Next" /></p>

<p>オプションでツールを入れるか、とあったので、<br/>
デフォルトのまま、<code>Do not Install</code>を選択して、<code>Next</code>。<br/>
<img src="http://kayakuguri.github.io/images/2014/07/composer-win05.jpg" alt="Shell" /></p>

<p>次に<code>php.exe</code>の場所を聞かれるので、<br/>
XAMPP でインストールされたphp.exeの場所を指定します。</p>

<pre><code>C:\xampp\php\php.exe
</code></pre>

<p><img src="http://kayakuguri.github.io/images/2014/07/composer-win06.jpg" alt="PHP.exe" /></p>

<p>設定内容を確認して、<code>Install</code>。<br/>
で、インストール完了。<br/>
<img src="http://kayakuguri.github.io/images/2014/07/composer-win15.jpg" alt="PHP.exe" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Herokuでデプロイエラーが起きた]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/09/heroku-r10/"/>
    <updated>2014-07-09T17:13:26+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/09/heroku-r10</id>
    <content type="html"><![CDATA[<p>いつものようにさくっとpushすると、サイトにアクセス出来ない。。<br/>
とりあえず、<code>rollback</code>で戻しておいたが、原因を探った。</p>

<!-- more -->


<p>ログを見ると以下のようになっていた。</p>

<pre><code>heroku/web.1:  State changed from up to starting 
app/web.1:  Going down, terminating child processes... 
heroku/web.1:  Stopping all processes with SIGTERM 
heroku/web.1:  Process exited with status 0 
heroku/web.1:  State changed from starting to crashed
heroku/web.1:  State changed from crashed to starting 
heroku/web.1:  Error R10 (Boot timeout) -&gt; Web process failed to bind to $PORT within 60 seconds of launch 
heroku/web.1:  Stopping process with SIGKILL 
heroku/web.1:  Process exited with status 137 
</code></pre>

<p>どうやら、<code>R10 (Boot timeout)</code>なるエラーが発生しているよう。</p>

<p><a href="https://devcenter.heroku.com/articles/error-codes#r10-boot-timeout">R10 &ndash; Boot timeout</a></p>

<blockquote><p>A web process took longer than 60 seconds to bind to its assigned <code>$PORT</code>. When this happens, the dyno’s process is killed and the dyno is considered crashed. Crashed dynos are restarted according to the dyno manager’s restart policy.</p></blockquote>

<p>Webプロセスは、割り当てられた<code>$PORT</code>にバインドするために60秒以上かかった。これが発生すると、dynoのプロセスは強制終了され、dynoがクラッシュしたと考えられている。ダウンしたdynoは、dynoマネージャの再起動ポリシーに応じて再起動されます。</p>

<blockquote><p>This error is often caused by a process being unable to reach an external resource, such as a database, or the application doing too much work, such as parsing and evaluating numerous, large code dependencies, during startup.</p></blockquote>

<p>このエラーは、多くの場合、データベース、または起動時に、非常に多くの、大規模なコードの依存関係を解析し、評価するようなあまりにも多くの処理を行なっているアプリケーションなどの外部リソースに到達することができないというプロセスが原因で発生します。</p>

<blockquote><p>Common solutions are to access external resources asynchronously, so they don’t block startup, and to reduce the amount of application code or its dependencies.</p></blockquote>

<p>一般的な解決策は非同期に外部リソースにアクセスすることなので、起動をブロックしないように、アプリケーションコードまたはその依存関係の量を低減する事です。</p>

<p>サポートに問い合わせることで、この60秒制限を120秒にすることもできるそう。</p>

<hr />

<h3>Heroku::Forward</h3>

<p>R10エラーが起きる主な原因は存在しない外部リソースへのアクセスや、使用しているgemの量が増えている事が挙げられるらしい。<br/>
それを自動で整理？してくれるようなものが以下のよう。</p>

<p><a href="https://github.com/dblock/heroku-forward">dblock/heroku-forward · GitHub</a></p>

<p>しかしこれは<code>Ruby</code>。今回は<code>PHP</code>。</p>

<hr />

<h3>原因</h3>

<p>で、テストアプリを作って全く同じ構成にして検証してみたところ、<br/>
NewRelicが重くなってしまっているようだった。<br/>
試しにそれを外すとエラーが出なくなった。</p>

<hr />

<h3>対策</h3>

<p>NewRelicはアプリを起動し続けるためのpingとしての使用がメインだったので、<br/>
(ログなどが見られるのは嬉しかったが)<br/>
同じように定期的にpingを飛ばす方法を探してみた。</p>

<h4>Heroku Schedulerで叩き起こす</h4>

<p><a href="http://blog.mah-lab.com/2013/05/16/heroku-commons-16/">知っておきたい！Herokuを使う上では当たり前？の16の常識 | mah365</a></p>

<blockquote><p>1時間毎に<code>curl http://your-app-name.herokuapp.com/</code>というコマンドを叩くように設定すれば、起き続けます。</p></blockquote>

<p><a href="https://addons.heroku.com/scheduler">Heroku Scheduler</a><br/>
アドオンを追加</p>

<pre><code>$ heroku addons:add scheduler
</code></pre>

<p>この状態でデプロイが通るかを確認。→ OK。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/scheduler01.jpg" alt="Phpstrom diff" /></p>

<p>以下を追加</p>

<pre><code>curl http://your-app-name.herokuapp.com/
</code></pre>

<p>FREQUENCY(頻度)を、<code>Hourly</code>にして、save。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/scheduler02.jpg" alt="Phpstrom diff" /></p>

<p>これで1時間毎に指定のURLを叩いてくれる。</p>

<hr />

<h3>Dyno Hour</h3>

<p>Herokuの料金は、1Dynoで起動時間が月750時間までは無料。<br/>
通常であれば、1日 x 24時間 x 31日 = 744時間 で、無料範囲ない。<br/>
ただし、Heroku Schedulerで実行した時間もDynoの起動時間に含まれる。</p>

<p>単純にURLを叩くだけ、なら大丈夫かと思うけれど、<br/>
重めのバッチ処理をスケジューラーでこまめに起動していると請求が発生する可能性があるので注意。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuで独自ドメインをRoute53で設定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/07/heroku-set-domain/"/>
    <updated>2014-07-07T15:12:29+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/07/heroku-set-domain</id>
    <content type="html"><![CDATA[<p>ドメインはムームードメインで取得してた。<br/>
そのドメインをherokuに割り当てる。</p>

<!-- more -->


<p>内容は全く以下のままなんだけど、メモとして。。</p>

<p><a href="http://www.workabroad.jp/posts/2002">heroku で 独自ドメインを使う際の最善策を考えた | Workabroad.jp</a></p>

<h3>herokuにドメインを登録</h3>

<p>herokuに独自ドメインをwwwありなし２つ登録</p>

<pre><code>$ heroku domains:add example.com
$ heroku domains:add www.example.com
</code></pre>

<h3>Amazon Route53 CNAMEの設定</h3>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws01.jpg" alt="Route53" /></p>

<p>画面上部から<code>Create Hosted Zone</code>を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws02.jpg" alt="Create Hosted Zone" /></p>

<p>ドメインを入力。wwwなし。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws03.jpg" alt="Domain Name" /></p>

<p>作成したレコードをダブルクリック。<br/>
<code>Create Record Set</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws04.jpg" alt="Create Record Set" /></p>

<p>作成。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws05.jpg" alt="Create Record Set" /></p>

<p>Name：www<br/>
Type：CNAME<br/>
value：xxx.herokuapp.com</p>

<h3>S3の設定</h3>

<p>S3でBucketを作成</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws06.jpg" alt="Create Bucket" /></p>

<p>nameはルートドメインにする。<br/>
RegionはTokyoにしといたらいいと思う。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws07.jpg" alt="name" /></p>

<p>Createした後、<code>Properties</code>の<code>Static Website Hosting</code>を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws08.jpg" alt="Properties" /></p>

<p><code>Redirect all requests to another host name</code>を選択。<br/>
最初から<code>www</code>付きのURLが入力されているので、そのままSave。<br/>
これでwwwサブドメインへのリダイレクトが完了。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws09.jpg" alt="Redirect all requests to another host name" /></p>

<h3>Amazon Route53 ANAMEの設定</h3>

<p>Route53に戻り、先ほど作成したレコードをダブルクリックして、<code>Create Record Set</code>をクリック。<br/>
以下のようにして作成。</p>

<p>Name：空<br/>
Type：A &ndash; IPv4 address<br/>
Alias：Yes<br/>
Alias Target：先ほどS3で作成したBucketが選択できるのでそれを選択。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws10.jpg" alt="A name" /></p>

<h3>DNSサーバの設定</h3>

<p>ドメインはムームードメインで取得しているので、<br/>
ネームサーバーの設定をする。<br/>
Route53の作成したレコードを選択すると右側にネームサーバーが表示される。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws11.jpg" alt="name saever" /></p>

<p>ムームードメインの「取得したドメインで使用する」を選択し、<br/>
上記のネームサーバーを記入。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws12.jpg" alt="mu-mu-domain" /></p>

<p>完了。</p>

<h3>料金</h3>

<p>気になるお値段ですが、今現在は月、$0.51。<br/>
現在のレートでは、52円くらい。安い。</p>

<p><a href="https://www.google.co.jp/search?q=%240.51&amp;oq=%240.51&amp;aqs=chrome..69i57j0l5.755j0j7&amp;sourceid=chrome&amp;es_sm=91&amp;ie=UTF-8&amp;qscrl=1#q=%240.51+%E5%86%86&amp;qscrl=1&amp;safe=off">現在のレートで見る</a></p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws13.jpg" alt="spend money" /></p>

<p>ただし、新規にアカウントを作成したので、S3などが無料期間中かもしれません。<br/>
１年後には数円上がるかもしれません。</p>

<h3>結果</h3>

<p>22時くらいに作業していたけれど、完了後、15分後くらいで切り替わりを確認出来た。<br/>
ただし、その後元に戻ったり、と、不安定だった。<br/>
翌朝には安定し、無事切り替わっていた。<br/>
丸１日くらいかかると思っていたので結構早かった。</p>

<h3>参考サイト</h3>

<p>参考サイト：<br/>
<a href="http://tsumazuki.hatenadiary.jp/entry/2013/12/11/174038">Herokuで独自ドメインを設定する方法</a><br/>
<a href="http://tanukiti1987.hatenablog.com/entry/2013/01/24/233140">Herokuで独自のドメインを設定する[ムームードメイン]</a><br/>
<a href="http://tech.tanaka733.net/entry/2013/09/15/%E3%81%8A%E5%90%8D%E5%89%8D.com_%E3%81%A7%E5%8F%96%E3%81%A3%E3%81%9F%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%82%92_Amazon_Route53%E3%81%A7%E7%AE%A1%E7%90%86%E3%81%97%E3%80%81%E3%82%B5%E3%83%96%E3%83%89">お名前.com で取ったドメインを Amazon Route53で管理し、サブドメインをはてなブログに割り当てるまで</a></p>
]]></content>
  </entry>
  
</feed>
