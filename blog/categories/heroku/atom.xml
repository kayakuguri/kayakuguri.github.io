<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2014-07-07T15:28:44+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[herokuで独自ドメインをRoute53で設定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/07/heroku-set-domain/"/>
    <updated>2014-07-07T15:12:29+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/07/heroku-set-domain</id>
    <content type="html"><![CDATA[<p>ドメインはムームードメインで取得してた。<br/>
そのドメインをherokuに割り当てる。</p>

<!-- more -->


<p>内容は全く以下のままなんだけど、メモとして。。</p>

<p><a href="http://www.workabroad.jp/posts/2002">heroku で 独自ドメインを使う際の最善策を考えた | Workabroad.jp</a></p>

<h3>herokuにドメインを登録</h3>

<p>herokuに独自ドメインをwwwありなし２つ登録</p>

<pre><code>$ heroku domains:add example.com
$ heroku domains:add www.example.com
</code></pre>

<h3>Amazon Route53 CNAMEの設定</h3>

<p><img src="/images/2014/07/aws01.jpg" alt="Route53" /></p>

<p>画面上部から<code>Create Hosted Zone</code>を選択。</p>

<p><img src="/images/2014/07/aws02.jpg" alt="Create Hosted Zone" /></p>

<p>ドメインを入力。wwwなし。</p>

<p><img src="/images/2014/07/aws03.jpg" alt="Domain Name" /></p>

<p>作成したレコードをダブルクリック。<br/>
<code>Create Record Set</code>をクリック。</p>

<p><img src="/images/2014/07/aws04.jpg" alt="Create Record Set" /></p>

<p>作成。</p>

<p><img src="/images/2014/07/aws05.jpg" alt="Create Record Set" /></p>

<p>Name：www<br/>
Type：CNAME<br/>
value：xxx.herokuapp.com</p>

<h3>S3の設定</h3>

<p>S3でBucketを作成</p>

<p><img src="/images/2014/07/aws06.jpg" alt="Create Bucket" /></p>

<p>nameはルートドメインにする。<br/>
RegionはTokyoにしといたらいいと思う。</p>

<p><img src="/images/2014/07/aws07.jpg" alt="name" /></p>

<p>Createした後、<code>Properties</code>の<code>Static Website Hosting</code>を選択。</p>

<p><img src="/images/2014/07/aws08.jpg" alt="Properties" /></p>

<p><code>Redirect all requests to another host name</code>を選択。<br/>
最初から<code>www</code>付きのURLが入力されているので、そのままSave。<br/>
これでwwwサブドメインへのリダイレクトが完了。</p>

<p><img src="/images/2014/07/aws09.jpg" alt="Redirect all requests to another host name" /></p>

<h3>Amazon Route53 ANAMEの設定</h3>

<p>Route53に戻り、先ほど作成したレコードをダブルクリックして、<code>Create Record Set</code>をクリック。<br/>
以下のようにして作成。</p>

<p>Name：空<br/>
Type：A &ndash; IPv4 address<br/>
Alias：Yes<br/>
Alias Target：先ほどS3で作成したBucketが選択できるのでそれを選択。</p>

<p><img src="/images/2014/07/aws10.jpg" alt="A name" /></p>

<h3>DNSサーバの設定</h3>

<p>ドメインはムームードメインで取得しているので、<br/>
ネームサーバーの設定をする。<br/>
Route53の作成したレコードを選択すると右側にネームサーバーが表示される。</p>

<p><img src="/images/2014/07/aws11.jpg" alt="name saever" /></p>

<p>ムームードメインの「取得したドメインで使用する」を選択し、<br/>
上記のネームサーバーを記入。</p>

<p><img src="/images/2014/07/aws12.jpg" alt="mu-mu-domain" /></p>

<p>完了。</p>

<h3>料金</h3>

<p>気になるお値段ですが、今現在は月、$0.51。<br/>
現在のレートでは、52円くらい。安い。</p>

<p><a href="https://www.google.co.jp/search?q=%240.51&amp;oq=%240.51&amp;aqs=chrome..69i57j0l5.755j0j7&amp;sourceid=chrome&amp;es_sm=91&amp;ie=UTF-8&amp;qscrl=1#q=%240.51+%E5%86%86&amp;qscrl=1&amp;safe=off">現在のレートで見る</a></p>

<p><img src="/images/2014/07/aws13.jpg" alt="spend money" /></p>

<p>ただし、新規にアカウントを作成したので、S3などが無料期間中かもしれません。<br/>
１年後には数円上がるかもしれません。</p>

<h3>結果</h3>

<p>22時くらいに作業していたけれど、完了後、15分後くらいで切り替わりを確認出来た。<br/>
ただし、その後元に戻ったり、と、不安定だった。<br/>
翌朝には安定し、無事切り替わっていた。<br/>
丸１日くらいかかると思っていたので結構早かった。</p>

<h3>参考サイト</h3>

<p>参考サイト：<br/>
<a href="http://tsumazuki.hatenadiary.jp/entry/2013/12/11/174038">Herokuで独自ドメインを設定する方法</a><br/>
<a href="http://tanukiti1987.hatenablog.com/entry/2013/01/24/233140">Herokuで独自のドメインを設定する[ムームードメイン]</a><br/>
<a href="http://tech.tanaka733.net/entry/2013/09/15/%E3%81%8A%E5%90%8D%E5%89%8D.com_%E3%81%A7%E5%8F%96%E3%81%A3%E3%81%9F%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%82%92_Amazon_Route53%E3%81%A7%E7%AE%A1%E7%90%86%E3%81%97%E3%80%81%E3%82%B5%E3%83%96%E3%83%89">お名前.com で取ったドメインを Amazon Route53で管理し、サブドメインをはてなブログに割り当てるまで</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Herokuでステージング環境をブランチを切って作成する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/02/heroku-staging/"/>
    <updated>2014-07-02T15:18:31+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/02/heroku-staging</id>
    <content type="html"><![CDATA[<p>herokuでステージング環境を作成してみた。<br/>
ブランチを切って、切り替えできるようにした。</p>

<!-- more -->


<p>アプリの作成はブラウザ上で行い、<br/>
そこに後からpushしていく想定とする。<br/>
(使用していてターミナル上でアプリを作成することが少なかったので)<br/>
アプリ名(ID)は以下とする</p>

<p>本番：sampleapp<br/>
ステージング：sampleapp-staging</p>

<p>ターミナルでアプリ用のファイルが入ったディレクトリに移動する。<br/>
(以降はそのディレクトリでの作業となる。)<br/>
まず、本番環境の分にアプリをサクっとプッシュ＆デプロイ。</p>

<pre><code>$ git init
$ git add .
$ git remote add heroku git@heroku.com:sampleapp.git
$ git commit -m 'init'
$ git push heroku master
</code></pre>

<p>３つ目の<code>remote add</code>でプッシュ先のリモートリポジトリを設定しているわけだけれど、<br/>
このaddの後の、<code>heroku</code>が本番用のリモートリポジトリ名となる。</p>

<p>で。ローカルのリポジトリのブランチをステージング用に切る。<br/>
その後、stagingリポジトリに移動。</p>

<pre><code>$ git branch
* master

$ git branch staging
$ git checkout staging  
Switched to branch 'staging'
$ git branch
  master
* staging
</code></pre>

<p>で、ステージング環境のリモートリポジトリを追加。</p>

<pre><code>$ git remote add staging git@heroku.com:sampleapp-staging.git
</code></pre>

<p>確認。</p>

<pre><code>$ git remote --v
heroku  git@heroku.kano:sampleapp.git (fetch)
heroku  git@heroku.kano:sampleapp.git (push)
staging git@heroku.com:sampleapp-staging.git (fetch)
staging git@heroku.com:sampleapp-staging.git (push)
</code></pre>

<p>で、ステージング環境にプッシュ、するわけだけれど、通常の感覚で、<br/>
ローカルのstagingリポジトリをリモートのstagingリポジトリに追加、とすると、<br/>
<code>$ git push staging staging</code>になるわけだけれど、<br/>
そうすると、ステージング環境用のアプリがデプロイされない。</p>

<pre><code>$ git push staging staging
. . .
Pushed to non-master branch, skipping build.
. . .
</code></pre>

<p>書いてある通り、masterブランチにプッシュしないとデプロイされない。<br/>
以下に情報があった。<br/>
<a href="http://www.ownway.info/Ruby/index.php?heroku%2Fhow%2Fmanagement%2Fapplication">Heroku アプリケーションの管理 &ndash; 君の瞳はまるでルビー &ndash; Ruby 関連まとめサイト</a></p>

<blockquote><p>アプリケーションとして認識されるのは master ブランチにあるソースコードだけです。</p></blockquote>

<p>同サイト内に解決方法も載っていた。</p>

<blockquote><p>master 以外のブランチやタグにあるソースコードを既存の Heroku アプリケーションとしてデプロイするには git push に &mdash;force オプションを使う必要があります。<br/>
git push heroku beta_1:master &mdash;force<br/>
これはローカルリポジトリのブランチ beta_1 の内容を heroku リモートリポジトリの master に強制的に入れるためのものです。</p></blockquote>

<p>というわけで、以下のようにしてステージング環境にプッシュ。</p>

<pre><code>$ git push staging staging:master --force
</code></pre>

<p>これでステージング環境が作成できた。</p>

<p>主な作業はstagingブランチで作業し、上記の<code>--force</code>付きpushでステージングアプリに反映。<br/>
確認後、masterブランチに切り替えてstagingブランチとマージして、<br/>
通常の<code>$ git push heroku master</code>で、本番アプリに反映する、<br/>
という流れになる予定。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuでPHP環境の構築]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/06/11/heroku-php/"/>
    <updated>2014-06-11T16:35:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/06/11/heroku-php</id>
    <content type="html"><![CDATA[<p>herokuがphpを公式にサポートしました。<br/>
以前に<a href="http://kayakuguri.github.io/blog/2014/02/18/create-php-heroku-mbstring/">ビルドパックのを使用した環境の構築方法</a>を書きましたが、<br/>
公式の作成方法も試してみました。</p>

<!-- more -->


<p><a href="https://devcenter.heroku.com/articles/php-support">Heroku PHP Support | Heroku Dev Center</a></p>

<p>herokuでは基本、アップされたファイルからherokuが自動的に判定して環境を構築してくれます。<br/>
で、PHPの場合は、<br/>
<code>composer.json</code><br/>
ファイルがルートにあれば、PHP環境と判定されて構築してくれる。</p>

<p>現時点では作成されるバージョンはデフォルトでは、以下。</p>

<blockquote><p>By default, Heroku runs PHP 5.5 (5.5.12, 64-bit).</p></blockquote>

<p>バージョンを指定してやる場合は<code>composer.json</code>に以下のように記述。</p>

<pre><code>{
  "require": {
    "php": "~5.5.12"
  }
}
</code></pre>

<p>ただし、サポートしているバージョンは以下のみ。</p>

<ul>
<li>5.5.11</li>
<li>5.5.12</li>
<li>5.5.13</li>
</ul>


<p>facebookが開発したというphpを高速に動作させる環境である、HipHop VMもサポートされており、<br/>
(実験的に、と書いてあるので使用には注意)<br/>
これもデフォルトではバージョンは以下。</p>

<blockquote><p>HipHop VM (HHVM) (3.1.0, 64-bit)</p></blockquote>

<p>使用する場合は以下のように記述。</p>

<pre><code>{
  "require": {
    "hhvm": "~3.1.0"
  }
}
</code></pre>

<p>サポートしているバージョンは以下。</p>

<ul>
<li>3.0.1</li>
<li>3.1.0</li>
</ul>


<hr />

<p>mbStringはデフォルトでは有効になっていないので、以下のように記述することで有効に出来る。</p>

<pre><code>{
    "require": {
        "ext-mbstring": "*"
    }
}
</code></pre>

<p>デプロイ結果</p>

<pre><code>-----&gt; PHP app detected
-----&gt; Setting up runtime environment...
       - PHP 5.5.12
       - Apache 2.4.9
       - Nginx 1.4.6
-----&gt; Installing PHP extensions:
       - opcache (automatic; bundled, using 'ext-opcache.ini')
       - mbstring (composer.json; bundled)
. . .
</code></pre>

<p>デフォルトで有効になっている環境や拡張機能は以下を参考。<br/>
<a href="https://devcenter.heroku.com/articles/php-support#php-5-5">https://devcenter.heroku.com/articles/php-support#php-5-5</a></p>

<p>拡張機能はリストのカッコ内の単語を、<code>ext-</code>をつけて並べていく。<br/>
ちなみに、<code>*</code>の部分はバージョンを指定する箇所で、<code>*</code>は自動で指定されるようになる。<br/>
ドキュメント内には、<code>*</code>での指定が推奨されている。<br/>
理由は、PHPのバージョンアップとは別に、各機能のバージョンアップが不定期に行われる可能性があるから、だそう。</p>

<blockquote><p>It is strongly recommended that you use “*” as the version selector when specifying extensions, as their version numbers can be extremely inconsistent (most of them report their version as “0”) and Heroku will sometimes update extensions outside the regular PHP update cycles.</p></blockquote>

<p>　</p>

<hr />

<p>ドキュメントルートの設定は、<code>Procfile</code>で指定する事ができる。<br/>
<code>Procfile</code>ファイルは、heroku起動時に実行してくれるファイル。<br/>
拡張子もなしで、<code>Procfile</code>という名前のファイルをルートに設置することで動作する。<br/>
<a href="https://devcenter.heroku.com/articles/procfile">Process Types and the Procfile | Heroku Dev Center</a></p>

<p>PHPを動作させるwebサーバを、Apacheか、Nginxを指定出来る。<br/>
Apacheで動作させ、ドキュメントルートを<code>public/</code>にする場合は以下の記述を<code>Procfile</code>に追加する。</p>

<pre><code>web: vendor/bin/heroku-php-apache2 public/
</code></pre>

<p>これで、public/がwebのドキュメントルートになる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[heokuで既存アプリにビルドパックを適用させる]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/05/14/heroku-set-build-pack/"/>
    <updated>2014-05-14T11:04:44+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/05/14/heroku-set-build-pack</id>
    <content type="html"><![CDATA[<p>新規アプリを作成時にビルドパックを適用する方法は<br/>
<a href="http://kayakuguri.github.io/blog/2014/02/18/create-php-heroku-mbstring/">以前に書いた</a>のですが、すでに作成しているいアプリに適用させる必要が出たので<br/>
調べてみました。</p>

<!-- more -->


<p>結論から言うと、公式にありました。</p>

<p><a href="https://devcenter.heroku.com/articles/buildpacks">Buildpacks | Heroku Dev Center</a></p>

<p>実際に適用させてみます。<br/>
(<code>myapp</code>となっている箇所は変更して下さい。)</p>

<p>まず、適用したいアプリを任意のフォルダに<code>clone</code>。</p>

<pre><code>$ git clone git@heroku.com:myapp.git
</code></pre>

<p>で、上記のURLを参考に、ビルドパックを適用させる。<br/>
PHPでmbStringが使いたいので、以下のカスタムビルドパックを指定した。<br/>
(PHPが<a href="https://blog.heroku.com/archives/2014/4/29/introducing_the_new_php_on_heroku">公式にサポート</a>されたけれど、mbStringは入ってないっぽい。<br/>
 公式分でのmb環境構築方法がわかればまたメモします。)</p>

<pre><code>heroku config:set BUILDPACK_URL=https://github.com/iphoting/heroku-buildpack-php-tyler.git#php/5.4.9
</code></pre>

<p>適当にファイルを作って、コミットして、プッシュ。<br/>
プッシュ時にデプロイされるので、そこでビルドパックも適用される。</p>

<pre><code>$ echo '&lt;?php phpinfo();' &gt; index.php
$ git add .
$ git commit -m 'initial commit'
$ git push heroku master
</code></pre>

<p>しかし、このpushの段階で怒られる。</p>

<pre><code>fatal: Could not read from remote repository.
</code></pre>

<p>ググると、herokuにremoteでaddしないといけない模様。<br/>
参考：<a href="http://d.hatena.ne.jp/s-0samu/20110416/1302890751">Railsでtwitterサービスをつくる（続きの続き） &ndash; ありえないなど、ありえない</a></p>

<pre><code>$ git remote add heroku git@heroku.com:myapp.git
$ git push heroku master
</code></pre>

<p>再度pushすると無事、デプロイが完了し、PHP環境が出来上がりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apexからPOSTでファイルを送信する 改訂版]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/27/submit-base64/"/>
    <updated>2014-02-27T13:41:16+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/27/submit-base64</id>
    <content type="html"><![CDATA[<p><a href="http://kayakuguri.github.io/blog/2014/02/26/submit-callout-with-multipart/">前回のファイル送信</a>の動作確認版。</p>

<!-- more -->


<p>まず、やりたいこととして、<br/>
saleseforceで作成したページからファイルをherokuで作成したapiに送信して、<br/>
herokuのapiからそのファイルを添付で送信したかった。</p>

<p>結論としては以下の手順で動作した。</p>

<ol>
<li>visualforceで<code>apex:inputFile</code>を使用してファイルをアプロード</li>
<li>apexでファイルを受け取り、そのファイルを<code>base64エンコード</code>。</li>
<li>base64エンコードした文字列をPOSTのパラメータとして送信</li>
<li>herokuにアップしているphpでPOSTデータを受け取る</li>
<li>受け取ったbase64データをデコードして保存(一時的)</li>
<li>保存されたファイルからQdmailを使用してメールを送信</li>
</ol>


<hr />

<p>1) visualforceで<code>apex:inputFile</code>を使用してファイルをアプロード<br/>
visualforceページでのinputの書き方</p>

<pre><code>&lt;apex:input value="{!Email}" /&gt;
&lt;apex:inputFile value="{!FileBody}" filename="{!FileName}"/&gt;
</code></pre>

<p>2) apexでファイルを受け取り、そのファイルを<code>base64エンコード</code>。<br/>
3) base64エンコードした文字列をPOSTのパラメータとして送信<br/>
apex側で受け取る</p>

<pre><code>public String FileName { get; set; }
public Blob FileBody { get; set; }
public String Email { get; set; }

public Pagereference submit() {
    HttpRequest request = new HttpRequest();
    request.setEndpoint('送信先のphp');
    request.setMethod('POST');
    request.setHeader('Accept-Language', 'ja');
    //パラメータ
    Map&lt;String, String&gt; params = new Map&lt;String, String&gt;();
    params.put('to', Email);  //送信先
    params.put('attachName', FileName); //ファイル名
    params.put('attach', EncodingUtil.base64Encode(FileBody)); //ファイル内容
    Set&lt;String&gt; keys = params.keySet();
    String r = '';
    for(String key : keys) {
        //body用にパラメータを整形 to=xx&amp;attach=xx のように
        String val = params.get(key);
        r += key + '=';
        if(val != null) r += val;
        r += '&amp;';
    }
    r = r.removeEnd('&amp;');
    request.setBody(r);

    //送信
    Http http = new Http();
    HttpResponse response = http.send(request);
    ResResult = response.getBody(); //結果を受け取る
}
</code></pre>

<p>4) herokuにアップしているphpでPOSTデータを受け取る<br/>
5) 受け取ったbase64データをデコードして保存(一時的)<br/>
6) 保存されたファイルからQdmailを使用してメールを送信</p>

<p><a href="http://kayakuguri.github.io/blog/2014/02/18/php-heroku-sendattachmail/">Qdmailでの送信方法は以前の投稿を参照。</a></p>

<pre><code>require_once('../lib/qdmail.php');
require_once('../lib/qdsmtp.php');

//送信内容
$to          = $_POST['to'];
$subject     = '件名';
$body        = '本文';
$fromname    = '送り先名';
$fromaddress = '送り先アドレス';
$attachname  = $_POST['attachName'];
$attach      = $_POST['attach'];

$mail = new Qdmail();
$mail -&gt; smtp(true);
$param = array(
    'host'=&gt; $_ENV['MAILGUN_SMTP_SERVER'],
    'port'=&gt; $_ENV['MAILGUN_SMTP_PORT'],
    'from'=&gt; $fromaddress,
    'protocol'=&gt;'SMTP_AUTH',
    'user'=&gt; $_ENV['MAILGUN_SMTP_LOGIN'],
    'pass' =&gt; $_ENV['MAILGUN_SMTP_PASSWORD']
);
$mail -&gt;smtpServer($param);
$mail -&gt;to($to);
$mail -&gt;subject($subject);
$mail -&gt;from($fromaddress,$fromname);
$mail -&gt;text($body);

//添付ファイル
$bin = base64_decode(str_replace(' ', '+', $_POST['attach'][0])); //注意
$fp = fopen( "./" . $_POST['attachName'][0], "w" );
fwrite( $fp, $bin );
fclose( $fp );
$attach = array();
$attach[] = array( "./" . $_POST['attachName'][0] , $_POST['attachName'][0] );

//送信
echo $mail -&gt;send(); //成功の場合は「1」が返ってくる
</code></pre>

<p>Base64デコードしてファイルに保存する方法は以下を参考にしました。<br/>
<a href="http://blog.nipx.jp/archives/4137">Flashからアップロードする方法いろいろ</a><br/>
ただし、そのままではエラーになることがあるよう。</p>

<blockquote><p>どうやら、POSTでデータを渡すと、Base64の「+」記号が勝手にスペースに変換されてしまうらしい。<br/>
<a href="http://pontago.hatenablog.com/entry/20091028/1256743421">http://pontago.hatenablog.com/entry/20091028/1256743421</a></p></blockquote>

<p>(ヘッダ分を差し引く、の部分は無視しても問題なかった)</p>
]]></content>
  </entry>
  
</feed>
