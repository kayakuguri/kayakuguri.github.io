<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: wordpress | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/wordpress/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2018-05-09T12:48:30+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Wordpress] 記事更新前後の内容を取得したい]]></title>
    <link href="http://kayakuguri.github.io/blog/2018/05/09/wp-post-updated/"/>
    <updated>2018-05-09T12:43:55+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2018/05/09/wp-post-updated</id>
    <content type="html"><![CDATA[<p>Wordpressにて、記事を更新した時に、更新前と更新後の内容を比較したくて調べたのだけど、案外なかなか情報にたどり着けなかったのでメモしておく。</p>

<!-- more -->


<p><code>post_updated</code> のアクションフックの引数に更新前後のでデータが渡されてくるので、そこから取得できるよう。</p>

<ul>
<li><a href="https://developer.wordpress.org/reference/hooks/post_updated/">post_updated | Hook | WordPress Developer Resources</a></li>
</ul>


<p>これを使えば比較可能。<br/>
例えば、スラッグが変更された時に処理をする場合は以下のようになる。</p>

<p>```
add_action(&lsquo;post_updated&rsquo;, function ($post_ID, $post_after, $post_before) {</p>

<pre><code>if($post_before-&gt;post_name !== $post_after-&gt;post_name){
    //処理
}
</code></pre>

<p>}, 10, 3);
```</p>

<h2>参考</h2>

<ul>
<li><a href="https://teratail.com/questions/75634">WordPress &ndash; 記事保存前後の値の取得について(75634)｜teratail</a></li>
<li><a href="https://wordpress.stackexchange.com/questions/213825/how-to-use-the-post-updated-hook-before-and-after-arguments">actions &ndash; How to use the post_updated hook before and after arguments &ndash; WordPress Development Stack Exchange</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScotchboxでWordPressのローカル環境をサクッと構築する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/11/15/scotchbox-wordpress/"/>
    <updated>2016-11-15T18:50:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/11/15/scotchbox-wordpress</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/flurinduerst/WPDistillery">WPDisillery</a>というScotch BoxのWordPress用キットを利用して簡単にローカルにWordPress環境を作る。</p>

<!-- more -->


<p>手順は以下のままで試してみた。</p>

<p><a href="https://box.scotch.io/">https://box.scotch.io/</a><br/>
[Installing WordPress]</p>

<h1>Setup</h1>

<p><code>WPDistillery</code>のリポジトリをクローンする。<br/>
実質、必要なものは、<code>config.yml</code>と<code>setup.sh</code>の2ファイルだけなので、それを引き上げて他は削除する。</p>

<p><code>
$ git clone git@github.com:flurinduerst/WPDistillery.git
$ mv WPDistillery/config.yml config.yml
$ mv WPDistillery/setup.sh setup.sh
$ rm -rf WPDistillery
</code></p>

<p><code>Scotch Box</code>をクローンする。<br/>
必要なものは<code>Vagrantfile</code>と<code>public</code>フォルダなので引き上げて、その他は削除する。</p>

<p><code>
$ git clone https://github.com/scotch-io/scotch-box.git
$ mv scotch-box/public public
$ mv scotch-box/Vagrantfile Vagrantfile
$ rm -rf scotch-box
</code></p>

<p>この時点で以下のような構造になっているはず。</p>

<p><code>
Vagrantfile
config.yml
public/
setup.sh
</code></p>

<p>ここまでをワンライナーで実行するコマンド。</p>

<p><code>
git clone https://github.com/scotch-io/scotch-box.git &amp;&amp; mv scotch-box/public public &amp;&amp; mv scotch-box/Vagrantfile Vagrantfile &amp;&amp; rm -rf scotch-box &amp;&amp; git clone --depth 1 https://github.com/flurinduerst/WPDistillery.git &amp;&amp; mv WPDistillery/config.yml config.yml &amp;&amp; mv WPDistillery/setup.sh setup.sh &amp;&amp; rm -rf WPDistillery
</code></p>

<h1>Config.yml</h1>

<p>WordPressの設定のために、<code>Config.yml</code>を編集する。</p>

<p>デフォルトでは以下のような内容になっている。<br/>
<a href="https://github.com/flurinduerst/WPDistillery/blob/master/config.yml">https://github.com/flurinduerst/WPDistillery/blob/master/config.yml</a></p>

<h2>言語とタイムゾーン</h2>

<p>デフォルトではアメリカになっているので日本に変更する。<br/>
localeは日本版の場合は、<code>ja</code>となる。(<code>ja_JP</code>ではない)</p>

<p>```</p>

<h1>language/timezone</h1>

<p>wplocale: ja
timezone: &ldquo;Asia/Tokyo&rdquo;
```</p>

<h2>ユーザ</h2>

<p>初期ユーザの設定。(ローカルだし)そのままでも構わない。
```</p>

<h1>admin user settings</h1>

<p>admin:
  user: admin
  password: admin
  email: <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#109;&#97;&#x69;&#x6c;&#64;&#x64;&#x6f;&#x6d;&#97;&#105;&#x6e;&#x2e;&#x74;&#x6c;&#x64;">&#x6d;&#x61;&#105;&#108;&#64;&#x64;&#111;&#109;&#97;&#105;&#x6e;&#46;&#116;&#x6c;&#x64;</a>
  first_name: &ldquo;&rdquo;
  last_name: &ldquo;&rdquo;
```</p>

<h2>サイトの設定</h2>

<p>サイトのタイトルや説明、パーマリンクの設定など、ブログ全般の設定関係。<br/>
<strong>urlだけ、ホスト名で指定したURLを記入する</strong>。<br/>
その他はそのままで問題なし。</p>

<p>```
wpsettings:
  url: scotchbox
  title: Example Title
  description: Example Description
  permalink_structure: &ldquo;/%postname%/&rdquo;
  thumbnail_width: 150
  thumbnail_height: 150
  medium_width: 300
  medium_height: 300
  large_width: 1024
  large_height: 1024
  # use page as frontpage
  page_on_front: true</p>

<pre><code>frontpage_name: Example Front Page
</code></pre>

<p>  # automatic conversion of smilies
  convert_smilies: false
```</p>

<h2>テーマ</h2>

<p>デフォルトでは、<code>WPSeed</code>というテーマが指定されている。<br/>
<a href="https://github.com/flurinduerst/WPSeed/">flurinduerst/WPSeed: WordPress starter Theme + sage Workflow</a></p>

<p>これはテーマ作成の元になるようなものを集めた、テーマのフレームワーク？みたいなもののよう。</p>

<p>```</p>

<h1>theme to install, choose new name in &lsquo;rename&rsquo; or leave empty</h1>

<p>theme:
  name: WPSeed
  rename: &ldquo;&rdquo;
  url: &ldquo;<a href="https://github.com/flurinduerst/WPSeed/archive/master.zip">https://github.com/flurinduerst/WPSeed/archive/master.zip</a>&rdquo;
  # add branch (e.g. master) or leave empty (&ldquo;&rdquo;) if theme is not downloaded from a git repository
  source_branch: master
```</p>

<p>デフォルトのプラグイン、Twenthsixteenはそのまま入っていた。</p>

<h2>プラグイン</h2>

<p>有効化するものと有効化しないで入れておくものをそれぞれ選択出来る。</p>

<p>インストールして有効化するものは以下。</p>

<p>```</p>

<h1>plugins to install &amp; activate</h1>

<p>plugins_active:
  &ndash; disable-comments
  &ndash; duplicate-post
  &ndash; enable-media-replace
  &ndash; favicon-by-realfavicongenerator
  &ndash; regenerate-thumbnails
  &ndash; simple-page-ordering
  &ndash; user-switching
  &ndash; google-sitemap-generator
```</p>

<p>インストールだけするものは以下。</p>

<p>```</p>

<h1>plugins to install</h1>

<p>plugins_inactive:
  #development
  &ndash; custom-post-type-ui
  &ndash; search-and-replace
  &ndash; capability-manager-enhanced
  #administration
  &ndash; adminimize
  &ndash; admin-menu-editor
  &ndash; admin-menu-reorder
  &ndash; wordpress-seo
  #security/backup
  &ndash; wp-security-audit-log
  &ndash; backwpup
```</p>

<p>好きなものを追加したい場合はここに正式な名前でリストに追加すればよさそう。<br/>
( <code>https://ja.wordpress.org/plugins/</code> の後ろに付くもの)</p>

<p>とりあえず、長くなるけどデフォルトで入っているものを調べてみる。</p>

<h3>有効化されるもの</h3>

<ul>
<li><a href="https://ja.wordpress.org/plugins/disable-comments/">disable-comments</a> &ndash; コメント停止用</li>
<li><a href="https://ja.wordpress.org/plugins/duplicate-post/">duplicate-post</a> &ndash; 記事を複製する</li>
<li><a href="https://ja.wordpress.org/plugins/enable-media-replace/">enable-media-replace</a> &ndash; アップされている画像の置換</li>
<li><a href="https://ja.wordpress.org/plugins/favicon-by-realfavicongenerator/">favicon-by-realfavicongenerator</a> &ndash; ファビコン設定用</li>
<li><a href="https://ja.wordpress.org/plugins/regenerate-thumbnails/">regenerate-thumbnails</a> &ndash; アップロード済みの画像のサムネイルを一括再生成</li>
<li><a href="https://ja.wordpress.org/plugins/simple-page-ordering/">simple-page-ordering</a> &ndash; ページ・カスタム投稿タイプの並び順を入れ替える</li>
<li><a href="https://ja.wordpress.org/plugins/user-switching/">user-switching</a> &ndash; ユーザー切り替え</li>
<li><a href="https://ja.wordpress.org/plugins/google-sitemap-generator/">google-sitemap-generator</a> &ndash; sitemapを自動で作成</li>
</ul>


<h3>インストールのみ</h3>

<ul>
<li><a href="https://ja.wordpress.org/plugins/custom-post-type-ui/">custom-post-type-ui</a> &ndash; カスタム投稿タイプを作成</li>
<li><a href="https://ja.wordpress.org/plugins/search-and-replace/">search-and-replace</a> &ndash; DB内のデータを検索・置換する</li>
<li><a href="https://ja.wordpress.org/plugins/capability-manager-enhanced/">capability-manager-enhanced</a> &ndash; ユーザ権限の管理</li>
<li><a href="https://ja.wordpress.org/plugins/adminimize/">adminimize</a> &ndash; ユーザ権限の管理</li>
<li><a href="https://ja.wordpress.org/plugins/admin-menu-editor/">admin-menu-editor</a> &ndash; 管理画面メニューのカスタマイズ</li>
<li><a href="https://ja.wordpress.org/plugins/admin-menu-reorder/">admin-menu-reorder</a> &ndash; 管理画面メニューの並び替え</li>
<li><a href="https://ja.wordpress.org/plugins/wordpress-seo/">wordpress-seo</a> &ndash; SEO管理</li>
<li><a href="https://ja.wordpress.org/plugins/wp-security-audit-log/">wp-security-audit-log</a> &ndash; 作業ログ管理</li>
<li><a href="https://ja.wordpress.org/plugins/backwpup/">backwpup</a> &ndash; バックアップ</li>
</ul>


<p>一部、重複していたり、更新が止まってたりするものもあるので、実際本番アップする際には精査した方がよさそう。</p>

<h3>設定をスキップする設定</h3>

<p>最後の <code># WPDISTILLERY SETUP</code> のセクションは、自動セットアップをするかどうかの設定。デフォルトでは全てオン(<code>true</code>)になっている。</p>

<p>```
setup:
  wp: true
  settings: true
  theme: true
  plugins: true
  cleanup: true</p>

<pre><code>comment: true
posts: true
files: true
themes: true
</code></pre>

<p>```</p>

<h1>ホスト</h1>

<p><code>Vagrantfile</code>にてホストの設定をする。<br/>
デフォルトでは以下のように、<code>192.168.33.10</code>のIPで、<code>scotchbox</code>というホスト名になっている。<br/>
これを必要ならば、任意のものに変更する。</p>

<p><code>
config.vm.network "private_network", ip: "192.168.33.10"
config.vm.hostname = "scotchbox"
</code></p>

<h1>Vagrantを起動</h1>

<p>ここまでで設定が完了したので、Vagrantを起動する。</p>

<p><code>
$ vagrant up
</code></p>

<h1>設定を実行</h1>

<p>Vagrantが起動したら、WordPressの自動設定を起動するためにVagrantにsshで入る。</p>

<p><code>
$ vagrant ssh
</code></p>

<p>自動設定の前に、<code>WP CLI</code>を最新版に更新し、その後、<code>setup.sh</code>のシェルスクリプトを起動する。</p>

<p>```
$ sudo wp cli update &mdash;allow-root
You have version 0.20.3. Would you like to update to 0.25.0? [y/n] y
Downloading from <a href="https://github.com/wp-cli/wp-cli/releases/download/v0.25.0/wp-cli-0.25.0.phar...">https://github.com/wp-cli/wp-cli/releases/download/v0.25.0/wp-cli-0.25.0.phar...</a>
New version works. Proceeding to replace.
Success: Updated WP-CLI to 0.25.0</p>

<p>$ cd ../../var/www/ &amp;&amp; bash setup.sh
========== WPDISTILLERY START ==========
&hellip;
Do you want to continue anyway? (y/n) y
&hellip;
&hellip;
========== WPDISTILLERY FINISHED ==========
```</p>

<h1>アクセス</h1>

<p>設定したホスト名かIPでアクセスすると、トップページが表示される。<br/>
<code>/wp-login.php</code>でログイン画面が開き、設定したユーザでログインが出来る。
これで無事、起動出来た。</p>

<h1>簡易インストール</h1>

<p>デフォルトのままだとプラグインやテーマが入ってかなり時間がかかるので、さくっと起動するために、ほとんどの設定をオフにしてインストールしてみる。</p>

<p>```
setup:
  wp: true
  settings: false
  theme: false
  plugins: false
  cleanup: false</p>

<pre><code>comment: false
posts: false
files: false
themes: false
</code></pre>

<p>```</p>

<p>これだと、サイトの名前やユーザの設定以外はデフォルトのまま起動できた。<br/>
デフォルトのフルの状態のものよりかなり早いのでこちらの方がよいかもしれない。</p>

<h1>参考</h1>

<ul>
<li><a href="https://box.scotch.io/">Scotch Box ♥ A Vagrant LAMP Stack That Just Works</a></li>
<li><a href="https://github.com/flurinduerst/WPDistillery#setup">flurinduerst/WPDistillery: WordPress Setup runner for Scotch Box</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku] タイムゾーンの設定各種]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/01/heroku-timezone/"/>
    <updated>2016-09-01T10:02:04+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/01/heroku-timezone</id>
    <content type="html"><![CDATA[<p>heroku環境でタイムゾーンの設定が色々あったのでまとめ。</p>

<!-- more -->


<h1>サーバー時間</h1>

<p>まずは、herokuのサーバー時間のタイムゾーン設定。<br/>
これは簡単で、環境変数に入れてやるだけ。</p>

<blockquote><p>TZ : Asia/Tokyo</p></blockquote>

<p>コマンドで入れる場合は以下。</p>

<p><code>
$ heroku config:add TZ=Asia/Tokyo -a APP_NAME
</code></p>

<p>きちんと反映されているかどうかは下記コマンドから参照可能。<br/>
意図した時間が返ってきてればOK。</p>

<p><code>
$ heroku run date -a APP_NAME
Running date on ⬢ APP_NAME... up, run.1198
Thu Sep  1 10:06:57 JST 2016
</code></p>

<h2>参考</h2>

<ul>
<li><a href="http://blog.skktmlab.info/blog/2015_03_02_2">Herokuでホスティングしているブログのタイムゾーンを設定する</a></li>
</ul>


<h1>PHP</h1>

<p>PHPの設定でタイムゾーンを指定する場合。<br/>
通常は、 <code>php.ini</code> で設定するが、herokuの場合は、 <code>.user.ini</code> ファイルを使う。</p>

<p>ドキュメントルート直下に <code>.user.ini</code> ファイルを設置。<br/>
中に以下を記述。</p>

<p><code>
date.timezone = "Asia/Tokyo"
</code></p>

<p>この設定ではその他にはアップロードの最大容量なんかを指定する場合が多い。<br/>
参考 : <a href="http://kayakuguri.github.io/blog/2014/02/18/change-max-filesize/">[PHP][heroku]upload_max_filesizeを変更する &ndash; KayaMemo</a></p>

<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/hiro_y/items/bc631a27c9701f81a4f9#runtime-settings">HerokuでPHPを使うときに気を付けるところ &ndash; Qiita</a></li>
<li><a href="https://devcenter.heroku.com/articles/custom-php-settings#php-runtime-settings-ini-settings">Customizing Web Server and Runtime Settings for PHP | Heroku Dev Center</a></li>
</ul>


<h1>WordPress</h1>

<p>最後はherokuと直接は関係ないけれど、wordpressのタイムゾーン。<br/>
WordPressのタイムゾーンはデフォルトで標準時になるようにしてある、とのこと。<br/>
しかしこれは設定で変更するものではなく、取得する際に調整するもののよう。</p>

<p>一番簡易なものとしては、 <code>date</code> 関数で取得していた箇所をWordPress関数である、 <code>date_i18n</code> を利用して取得するようにする、というもの。<br/>
これだけで、日本時間で取得できるようになる。</p>

<p><code>
date_i18n('Y-m-d H:i:s');
</code></p>

<p>その他では、 <code>datetime</code> クラスを使用してタイムゾーンを指定する方法もあり。</p>

<p><code>
$now = new DateTime('', new DateTimeZone('Asia/Tokyo'));
$now-&gt;format('Y-m-d H:i:s');
</code></p>

<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/yousan/items/a385f794a9bb433aecbb">WordPressで現在時刻を利用すると9時間ずれてしまう問題 &ndash; Qiita</a></li>
</ul>


<h1>まとめ</h1>

<p>WordPressはともかく、herokuとPHPのタイムゾーン設定はherokuでPHPを使うのなら、デフォルトで設定しておいた方が後々間違いがなさそう。<br/>
環境構築の際にまず設定しておくとよさげ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WP REST API v2にてカスタムエンドポイントを追加するまとめ]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/07/12/wp-rest-api-custom-endpoint/"/>
    <updated>2016-07-12T19:15:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/07/12/wp-rest-api-custom-endpoint</id>
    <content type="html"><![CDATA[<p>カスタムエンドポイントの作り方全般をまとめてみた。</p>

<!-- more -->


<h1>環境など</h1>

<ul>
<li>PHP 5.6</li>
<li>WordPress ver.4.5.3

<ul>
<li>WP REST API ver.2.0-beta13.1</li>
</ul>
</li>
<li>ドメイン : <code>http://wprest.local</code></li>
</ul>


<h1>GET</h1>

<p>まずは基本的な追加方法として<code>GET</code>メソッドのエンドポイントを追加する。</p>

<p>```
add_action( &lsquo;rest_api_init&rsquo;, &lsquo;add_custom_endpoint&rsquo; );
function add_custom_endpoint() {</p>

<pre><code>register_rest_route( 'custom/v0', '/show', array(
    'methods' =&gt; 'GET',
    'callback' =&gt; 'create_item'
) );
</code></pre>

<p>}
function show_item(){</p>

<pre><code>//何かしらの処理
$data = ['apple'=&gt;'りんご', 'peach'=&gt;'もも', 'pear'=&gt;'なし'];

$response = new WP_REST_Response($data);
$response-&gt;set_status(200);
$domain = (empty($_SERVER["HTTPS"]) ? "http://" : "https://") . $_SERVER["HTTP_HOST"];
$response-&gt;header( 'Location', $domain );
return $response;
</code></pre>

<p>}
```</p>

<p><code>rest_api_init</code>のフックでREST APIが初期化されたタイミングで追加する。<br/>
呼びだされた<code>add_custom_endpoint</code>関数内でAPIのエンドポイントを追加している。<br/>
エンドポイントを追加するには、<code>register_rest_route</code>を利用する。</p>

<ul>
<li>第一引数 : 名前空間</li>
<li>第二引数 : エンドポイント</li>
<li>第三引数 : メソッドなどの設定配列</li>
</ul>


<p>第一引数と第二引数を合わせたものがエンドポイントとなる。<br/>
エンドポイントは(デフォルトでは) <code>/wp-json/</code>がルートとなるのでこの指定はそれ以下の分、となる。</p>

<p>なので、このエンドポイントへのアクセスは以下のURLのようになる。<br/>
<code>http://wprest.local/wp-json/custom/v0/show</code></p>

<p>第三引数の<code>callback</code>で指定した関数がAPIアクセス時に呼び出される。<br/>
返却する内容は実はなんでも構わないが、<code>WP_REST_Response</code>クラスを利用することでヘッダーなどの設定が出来るよう。<br/>
ここでは、ステータス200、ヘッダーにドメインをロケーションで追加、などしている。</p>

<p>返ってくる内容は以下。</p>

<p><code>
{
  "apple": "りんご",
  "peach": "もも",
  "pear": "なし"
}
</code></p>

<h2>パラメータの追加</h2>

<p>REST APIらしく、URLにIDなどのパラメータを含める事ができる。<br/>
<code>register_rest_route</code>でエンドポイントを指定する時に以下のようにする。</p>

<p>```
register_rest_route( &lsquo;custom/v0&rsquo;, &lsquo;/show/(?P<id>\d+)&rsquo;, array(</p>

<pre><code>'methods' =&gt; 'GET',
'callback' =&gt; 'show_item_id'
</code></pre>

<p>) );
```</p>

<p>受け取る際は、コールバックの関数内で以下のようにする。</p>

<p>```
function show_item_id($data){</p>

<pre><code>$posts = get_posts( array(
    'author' =&gt; $data['id'],
) );
</code></pre>

<p>//(後略)
```</p>

<h1>メソッドの指定方法</h1>

<p>メソッドの指定方法は<code>GET</code>や<code>POST</code>など文字列での指定も可能だが、<code>WP_REST_Server</code>クラスを指定して複数いっぺんに指定が出来たりもする。</p>

<p>```
register_rest_route( &lsquo;custom/v0&rsquo;, &lsquo;/show&rsquo;, array(</p>

<pre><code>'methods' =&gt; WP_REST_Server::READABLE,
'callback' =&gt; 'show_item'
</code></pre>

<p>) );
```</p>

<ul>
<li>READABLE = &lsquo;GET&rsquo;</li>
<li>CREATABLE = &lsquo;POST&rsquo;</li>
<li>EDITABLE = &lsquo;POST, PUT, PATCH&rsquo;</li>
<li>DELETABLE = &lsquo;DELETE&rsquo;</li>
<li>ALLMETHODS = &lsquo;GET, POST, PUT, PATCH, DELETE&rsquo;</li>
</ul>


<h1>エラーの追加</h1>

<p>指定されたIDの投稿がないなど、エラーを返したい場合は以下のようにする。<br/>
(404エラーの場合の例）</p>

<p>```
function show_item_id($data){</p>

<pre><code>if($data['id'] == 0){
    return new WP_Error( 'awesome_no_author', 'Invalid author', array( 'status' =&gt; 404 ) );
}
</code></pre>

<p>}
<code>``
</code>/custom/v0/show/0`でアクセスすると以下のように返ってくる。</p>

<p>```
{</p>

<pre><code>code: "awesome_no_author",
message: "Invalid author",
data: {
    status: 404
}
</code></pre>

<p>}
```</p>

<h1>POST</h1>

<p>ポストでの送信、データ取得は以下。ほぼ、GETの時と変わらない。<br/>
送られたデータはどうやって取得するのかすごく悩んだのだが、単純に<code>$_POST</code>で取得、でよかった。</p>

<p>```
add_action( &lsquo;rest_api_init&rsquo;, &lsquo;add_custom_endpoint&rsquo; );
function add_custom_endpoint() {</p>

<pre><code>register_rest_route( 'custom/v0', '/create', array(
    'methods' =&gt; 'POST',
    'callback' =&gt; 'create_item'
) );
</code></pre>

<p>}</p>

<p>function create_item() {</p>

<pre><code>$data = $_POST;
$response = new WP_REST_Response( $data );
$response-&gt;set_status( 201 );
$domain = (empty($_SERVER["HTTPS"]) ? "http://" : "https://") . $_SERVER["HTTP_HOST"];
$response-&gt;header( 'Location', $domain );

return $response;
</code></pre>

<p>}
```</p>

<p>送った内容を表示させているだけ、の内容。<br/>
bodyで、<code>id=2</code>, <code>body=test</code>の２つを送ってみると、返ってくる値は以下。</p>

<p><code>
{
  "id": "2",
  "body": "test"
}
</code></p>

<h1>権限</h1>

<p>特にPOSTなどは実行するには認証を必要としたい場合が多いと思う。<br/>
そういう時には、実行前に権限をチェックする関数を呼び出すものとして、<code>permission_callback</code>が用意されている。<br/>
<code>register_rest_route</code>の第三引数の中で以下のように指定する。</p>

<p>```
register_rest_route( &lsquo;custom/v0&rsquo;, &lsquo;/create&rsquo;, array(</p>

<pre><code>'methods' =&gt; 'POST',
'permission_callback' =&gt; 'create_permissions_check',
'callback' =&gt; 'create_item'
</code></pre>

<p>) );
```</p>

<p>この呼びだされた関数で、<code>true</code>を返すと通り、<code>false</code>を返すとエラーとなる。<br/>
エラーは以下のように返却される。</p>

<p>```
{
  &ldquo;code&rdquo;: &ldquo;rest_forbidden&rdquo;,
  &ldquo;message&rdquo;: &ldquo;この操作を行う権限がありません。&rdquo;,
  &ldquo;data&rdquo;: {</p>

<pre><code>"status": 403
</code></pre>

<p>  }
}
```</p>

<p>この権現の確認は、<code>current_user_can</code>関数で行う。</p>

<p>```
function create_permissions_check(){</p>

<pre><code>return current_user_can('publish_posts');
</code></pre>

<p>}
```</p>

<p>OAuthやアプリケーションパスワードを使った認証部分はこの手前で完了しているため、実際に接続しに来たユーザーの権限をここでチェックしてやるだけで良い。<br/>
権限は以下を参考に。</p>

<p>参考: <a href="http://elearn.jp/wpman/function/current_user_can.html">current_user_can:WordPress私的マニュアル</a></p>

<h1>参考</h1>

<ul>
<li><a href="http://ja.wp-api.org/extending/adding/">Adding Custom Endpoints | WP REST API v2 Documentation</a></li>
<li><a href="http://ginzanomama.hatenablog.com/entry/2016/02/04/212826">WordPress REST API v2にendpointを追加する &ndash; みんなのちからになりたい</a></li>
<li><a href="https://wpshout.com/using-custom-rest-routes-wordpress-4-4-beyond/">Making Custom REST Routes In WordPress 4.4 and Beyond | WPShout</a></li>
<li><a href="http://qiita.com/kuck1u/items/c879271aa280da62c573">WordPress 4.4 で追加された REST API の停止やエンドポイントの変更など</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SalesforceからWP REST APIへOAuth認証を利用して投稿する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/06/30/sf-callout-wp-rest-api-oauth1/"/>
    <updated>2016-06-30T17:36:44+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/06/30/sf-callout-wp-rest-api-oauth1</id>
    <content type="html"><![CDATA[<p>salesforceからWP REST APIのエンドポイントへコールアウトして投稿する。<br/>
投稿の際には、OAuth認証を利用する。</p>

<!-- more -->


<h1>前提</h1>

<p>WordPress側にで、OAuth 1.0a Serverを導入してアプリケーションを作成しておく。<br/>
また、そのアプリケーションを使用して、アクセストークンまで取得しているものとする。</p>

<p>通常は承認のフローなどはユーザー側が行うため、アクセストークンまでもった状態からスタートすることはないと思うが、今回は最後の投稿部分だけに絞って試してみた。</p>

<p>WP REST APIでアクセストークンを取得するには、前回書いたこの記事を参考にどうぞ。<br/>
<a href="http://kayakuguri.github.io/blog/2016/06/30/wp-rest-oauth/">WordPress REST APIにOAuth1.0aで認証して投稿する &ndash; KayaMemo</a></p>

<h1>リモートサイトの登録</h1>

<p>コールアウトする先のドメインを事前に許可しておいてやる必要がある。<br/>
<code>設定 -&gt; セキュリティのコントロール -&gt; リモートサイトの設定</code> から、<code>新規リモートサイト</code>をクリック。</p>

<ul>
<li>リモートサイト名 : 適当な名前</li>
<li>リモートさサイトのURL : 接続先ドメイン</li>
<li>プロトコルセキュリティの無効化 : HTTPでも接続を許可するか</li>
<li>説明 : 適当な説明</li>
<li>有効 : オンに</li>
</ul>


<p>通常では当然だが、HTTPSでの通信が推奨されている。
しかし、リスクを承知、もしくはテストでの接続の場合など、HTTPでも接続させる場合はこの項目にチェックをつけると許可する事が可能。
今回はテストってことでオンにした。</p>

<p><img src="/images/2016/06/sf_wprest01.jpg" alt="" /></p>

<p>ちなみに、このリモートサイトへの登録をせずにコールアウトしようとすると、以下のようなエラーが出力される。</p>

<blockquote><p>Unauthorized endpoint, please check Setup->Security->Remote site settings. endpoint =xxx</p></blockquote>

<h1>OAuth1.0a認証</h1>

<p>今回は、WP REST API + OAuth 1.0a Server　の設定で投稿するため、OAuth1.0aでの認証になる。<br/>
OAuth 1.0a での認証をするためには、アクセストークンやシグネチャなどの情報をヘッダーに付与してやる必要がある。<br/>
参考: <a href="https://syncer.jp/how-to-make-signature-of-oauth-1">OAuth1.0の署名(Signature)を作成する方法</a></p>

<p>これらの処理をするためのクラスがあったのでこちらを参考にさせてもらった。</p>

<p><a href="https://gist.github.com/surjikal/7539745">Apex 2-legged OAuth 1.0</a></p>

<p>ただし、このままでは足りない情報があったため、アクセストークンなどを送信するように修正させてもらったものが以下となる。</p>

<p><a href="https://gist.github.com/k-usk/894760237c73e47ed4c7333c30ce0b91">k-usk/OAuth.cls</a></p>

<h1>コールアウトを実装</h1>

<p>上記のクラスを利用して実際にコールアウトしてやる。</p>

<p>```
public class PostWPCallout {</p>

<pre><code>@Future(callout=true)
public static void wpCalloutOAuth(){
    String WP_URL = 'http://example.com';
    String client_key = 'IdZQC4OG1Ppi';
    String client_secret = 'S14spr4ny50fN4mjlEfvoBl4d9dWmIyqobp60DvWAD6b0j5g';
    String oauth_token = '1IRo5QV2itt7BSeVA9m14yMQ';
    String oauth_token_secret = 'MPDAnRor5Ajxr7z1N7JF2EOr7vCZqqJE48iYjgolQ1cD0Jm9';

    //リクエストを作成
    HttpRequest req = new HttpRequest();
    req.setMethod('POST');
    req.setEndpoint(WP_URL + '/wp-json/wp/v2/posts'); //新規投稿
    req.setHeader('Content-Type','application/json');
    Map&lt;String,String&gt; mapEmp = new Map&lt;String,String&gt;();
    mapEmp.put('title','タイトル');
    mapEmp.put('content', '本文');
    String jsonString = JSON.serialize(mapEmp);
    req.setBody(jsonString);

    //クラスを利用して、OAuth用のヘッダを作る
    req = OAuth.signRequest(req, client_key, client_secret, oauth_token, oauth_token_secret);

    //コールアウト
    Http http = new Http();
    try{
        HttpResponse res = http.send(req);

        System.debug(Logginglevel.INFO, '*** BODY : ' + res.getBody());
        System.debug(Logginglevel.INFO, '*** STATUS : ' + res.getStatus());
        System.debug(Logginglevel.INFO, '*** STATUS_CODE : ' + res.getStatusCode());
    }catch(System.CalloutException e){
        System.debug(Logginglevel.INFO,'*** ERROR_MESSAGE : ' + e.getMessage());
        System.debug(Logginglevel.INFO,'*** ERROR_LINE_NUMBER : ' + e.getLineNumber());
    }
}
</code></pre>

<p>}
```</p>

<p>コールアウトしたレスポンスがJSONで返ってくるので、投稿した記事IDを取得したい場合はここから取得したりも出来る。<br/>
(JSONでの取得はややこしいので、パースすることになるが）</p>
]]></content>
  </entry>
  
</feed>
