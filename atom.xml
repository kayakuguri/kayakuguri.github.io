<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-04-20T12:05:41+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[CakePHP]ページタイトルを設定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/20/cakephp-pagetitle/"/>
    <updated>2015-04-20T11:16:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/20/cakephp-pagetitle</id>
    <content type="html"><![CDATA[<p>変な所でハマってしまったのでメモ。</p>

<!-- more -->


<p>cakephpでタイトルの設定をするべくググっていると、どうやら以下で変更が出来る、とのこと。</p>

<pre><code>$this-&gt;set('title_for_layout', 'ページタイトル');
</code></pre>

<p>しかし一向に反映されない。<br/>
それもそのはずで、デフォルトのテンプレート内の<code>title</code>タグ部分を変更してしまっていて、<br/>
固定にしていたので変更が効かなかった。<br/>
そもそも、<code>$this-&gt;set</code>はviewに変数セットするためだけの関数なので、View側と記述を合わせれば<code>title_for_layout</code>である必要がない、ということになる。</p>

<p>ちなみデフォルトテンプレートの初期設定は以下になっているよう。<br/>
<a href="http://ameblo.jp/itboy/entry-11510932141.html">http://ameblo.jp/itboy/entry-11510932141.html</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;title&gt;
</span><span class='line'>    &lt;?php echo $title_for_layout; ?&gt;
</span><span class='line'>&lt;/title&gt;</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://book.cakephp.org/2.0/ja/views.html#view-layouts">ビュー &mdash; CakePHP Cookbook 2.x ドキュメント &ndash; レイアウト</a><br/>
<a href="http://www.t-net.ne.jp/~cyfis/cakephp/controller/pageTitle.html">ページタイトルを設定する &ndash; CakePHPの部屋</a><br/>
<a href="http://satoshi14.hatenablog.com/entry/2013/05/13/125421">CakePHP ページタイトルを一括管理する方法 &ndash; Autumn Like Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[htaccessを使ったリダイレクトを学ぶ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/18/htaccess-redirect/"/>
    <updated>2015-04-18T00:30:30+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/18/htaccess-redirect</id>
    <content type="html"><![CDATA[<p>htaccessを使ったリダイレクトはたまに設定するけれど、いつもよくわからないままだったのでちょっと調べてみた。</p>

<!-- more -->


<h2>やりたかった事</h2>

<p>今回やりたかった事は、<br/>
特定のサブドメインにアクセスがあった場合に、別のサブドメインに転送する、というもの。<br/>
<code>hoge.sample.com</code>を、<code>redirect.sample.com</code>にリダイレクトするとする。</p>

<p>なので今回はこれを実現する部分のみの調査となってます。</p>

<h2>RewriteCond</h2>

<p>書式はこんな感じ。</p>

<pre><code>RewriteCond %変数名(テスト文字列) 条件パターン(正規表現) [フラグ]
</code></pre>

<p>変数名は、<code>{}</code>で囲んで記述する。<br/>
特定のサブドメインにアクセスがあったら、という条件なので、変数は、<br/>
<code>HTTP_HOST</code>を使用。<code>HTTP_HOST</code>はホスト名、<br/>
例えば、<code>http://test.example.com/test.html</code>というアドレスにアクセスがあった場合は、<code>test.example.com</code>のみを取得する。<br/>
変数を入れると以下。</p>

<pre><code>RewriteCond %{HTTP_HOST} 条件パターン(正規表現) [フラグ]
</code></pre>

<p>条件パターンはこの場合は特定のサブドメイン、というものだけなので、そのまま書けば良い。</p>

<pre><code>RewriteCond %{HTTP_HOST} ^hoge.sample.com$ [フラグ]
</code></pre>

<p>ただしそのままとは言っても全くそのままではなく、先頭と末尾の指定がいるよう。<br/>
<code>^</code>が行頭を表す記号。<code>$</code>が行末を表す記号。となる。</p>

<p>残ったフラグ、は、AND、OR、大文字小文字の区別、を記述する。<br/>
RewriteCondを複数行指定し、ここに条件を書くことになる。</p>

<pre><code>RewriteCond %{xx} ^条件1$ [OR]
RewriteCond %{oo} ^条件2$
</code></pre>

<p>こうすれば、条件１か条件２がヒットすれば、となる。</p>

<p>大文字小文字の区別は、<strong>区別しない場合に</strong><code>NC</code>と書く。<br/>
デフォルトでは区別する。<br/>
今回は区別するってことで指定なしで。</p>

<h2>RewriteRule</h2>

<p>書式はこんな感じ。</p>

<pre><code>RewriteRule URL書換＆転送の記述 [オプション]
</code></pre>

<p>今回はドキュメントルートにアクセスされたら、指定のサブドメインにリダイレクト、となるので、以下のように。</p>

<pre><code>RewriteRule ^/$ http://redirect.sample.com
</code></pre>

<p>行頭行末で<code>/</code>を囲んで、ドキュメントルートを指定。<br/>
リダイレクト先に別のサブドメインを指定。<br/>
ただし、ドキュメントルートの指定は<code>/</code>で始める場合と始めない場合があるよう。<br/>
<a href="http://weblabo.oscasierra.net/apache-rewrite-base/">ApacheのRewriteを設定する前に知っておくべきこと | WEB ARCH LABO</a></p>

<p>サーバー環境によって変わってくるって事はわかった。<br/>
今回はどうやら<code>/</code>は必要ないようだったのでなしで設定した。</p>

<p>あとはオプション。<br/>
リダイレクトの方法は今回は恒久的なリダイレクト、ってことで、<code>301</code>を指定。
<a href="https://www.suzukikenichi.com/blog/difference-between-301-redirect-and-302-redirect/">301リダイレクトと302リダイレクトの違い | 海外SEO情報ブログ</a><br/>
特に理由がない限りは301でよさそう。</p>

<p>もう一つ、オプションとして、<code>L</code>をつけておく。<br/>
<code>L</code>をつけておくとこのルールが適用された場合はこれ以降のルールは使用しない、という設定となる。<br/>
その他のオプションについては以下。<br/>
<a href="http://blog.dawgsdk.org/weblog/archives/411011">Apache : mod_rewriteリファレンス &ndash; dawgsdk.org</a></p>

<p>最終的なルールは以下。</p>

<pre><code>RewriteRule ^$ https://ssl.cp.4143.com [R=301,L]
</code></pre>

<p>今回は使用していないが、もし複数のルールが合った場合はどうなるかと言うと、条件に対しては一つしかルールは設定出来ないよう。</p>

<pre><code>RewriteCond 条件1
RewriteRule ルール1
RewriteRule ルール2
</code></pre>

<p>上記のような記述があった場合、条件1が満たされる場合はルール1が適応され、それ以外はルール2が適応される。<br/>
なので条件を指定する場合は、<code>RewriteCond</code>と<code>RewriteRule</code>をセットで書く必要がある。</p>

<h2>結果</h2>

<p>完成。</p>

<pre><code>RewriteCond %{HTTP_HOST} ^cp.4143.com$
RewriteRule ^$ https://ssl.cp.4143.com [R=301,L]
</code></pre>

<h2>最終的な記述</h2>

<pre><code>&lt;IfModule mod_rewrite.c&gt;
    RewriteEngine on
    RewriteBase /
    RewriteCond %{HTTP_HOST} ^cp.4143.com$
    RewriteRule ^$ https://ssl.cp.4143.com [R=301,L]
&lt;/IfModule&gt;
</code></pre>

<h2>参考</h2>

<p><a href="http://weblabo.oscasierra.net/apache-rewritecond-base/">Apache RewriteCond の基礎知識 | WEB ARCH LABO</a><br/>
<a href="http://www.ksknet.net/apache/rewritecond_rew.html">RewriteCond &ndash; RewriteRuleの条件を設定</a><br/>
<a href="http://noshirossi.blog.fc2.com/blog-entry-203.html">.htaccess　mod_rewriteで画像直リンク禁止 &ndash; 趣味を綴る日記</a><br/>
<a href="http://blog.livedoor.jp/tak_bon/archives/6508443.html">ステム覚書帳 : [Apache]RewriteCondとRewriteRuleは抱き合わせで</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[apex][SF]InboundEmailHandlerを使ったリードの作成]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/17/inboundemailhandler-apex/"/>
    <updated>2015-04-17T14:47:20+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/17/inboundemailhandler-apex</id>
    <content type="html"><![CDATA[<p>salesforceでメールを受け取って、そのメールアドレスでリードを作る方法と、<br/>
エラーで返信するときの方法。</p>

<!-- more -->


<h2>apex</h2>

<p>メールサービスを作成する際にapexクラスを指定するので、先に作成しておきます。</p>

<p>例えば今回は、送信元のメールアドレスを使用してリードを作成するとします。<br/>
また、すでに登録されているメールアドレスの場合、エラーメールを返信するとします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global class MailCreateLead implements Messaging.InboundEmailHandler {
</span><span class='line'>  global Messaging.InboundEmailResult handleInboundEmail(Messaging.InboundEmail email, Messaging.InboundEnvelope envelope) {
</span><span class='line'>      Messaging.InboundEmailResult result = new Messaging.InboundEmailresult();
</span><span class='line'>      
</span><span class='line'>      //メールが重複しているかどうかをチェック
</span><span class='line'>      String mail_str = email.fromAddress;
</span><span class='line'>      List&lt;Lead&gt; check = [SELECT id FROM Lead WHERE Email=:mail_str LIMIT 1];
</span><span class='line'>      if(check.size() != 0){
</span><span class='line'>          result.message = '送信されたメールアドレスはすでに登録済です。';
</span><span class='line'>          result.success = false;
</span><span class='line'>      }else{
</span><span class='line'>          Lead l = new Lead();
</span><span class='line'>          l.Company = '-'; //(必須)
</span><span class='line'>          l.LastName = (email.fromName == null) ? 'メール会員' : email.fromName;
</span><span class='line'>          l.Email = email.fromAddress;
</span><span class='line'>          insert l;
</span><span class='line'>          result.success = true;
</span><span class='line'>      }
</span><span class='line'>      
</span><span class='line'>      return result;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>Messaging.InboundEmailResult</code>を返却するが、<code>success</code>がfalseの場合は、<br/>
受信を拒否し、設定されたエラーメッセージ(<code>message</code>)を送信元のメールアドレスに返す。<br/>
この時返信されるメールは、<code>noreply@salesforce.com</code>となっており、これは変更できないっぽい。</p>

<p>重複していない場合は、送信元のメールアドレスと名前(あれば)を使用してリードを作っている。</p>

<h3>テストコード</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@isTest
</span><span class='line'>public class MailCreateLead_Test {
</span><span class='line'>  //正常時
</span><span class='line'>  private static testMethod void execute_success() {
</span><span class='line'>      Test.startTest();
</span><span class='line'>      
</span><span class='line'>      Messaging.InboundEmail email = new Messaging.InboundEmail() ;
</span><span class='line'>        Messaging.InboundEnvelope env = new Messaging.InboundEnvelope();
</span><span class='line'>        email.subject = 'Test Success';
</span><span class='line'>        email.fromname = 'FirstName LastName';
</span><span class='line'>        email.fromAddress = 'someaddress@email.com';
</span><span class='line'>        email.plainTextBody = '';
</span><span class='line'>        
</span><span class='line'>        MailServiceToCreateLead emailService = new MailServiceToCreateLead();
</span><span class='line'>        Messaging.InboundEmailResult res = emailService.handleInboundEmail(email, env);
</span><span class='line'>        
</span><span class='line'>        Test.stopTest();
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  //エラー時
</span><span class='line'>  private static testMethod void execute_fail(){
</span><span class='line'>      //重複チェック
</span><span class='line'>      Lead le = new Lead();
</span><span class='line'>        le.Company = '-';
</span><span class='line'>        le.LastName = 'failed test';
</span><span class='line'>        le.Email = 'test@test.com';
</span><span class='line'>        Insert le;
</span><span class='line'>        
</span><span class='line'>        Test.startTest();
</span><span class='line'>        
</span><span class='line'>        Messaging.InboundEmail email = new Messaging.InboundEmail() ;
</span><span class='line'>        Messaging.InboundEnvelope env = new Messaging.InboundEnvelope();
</span><span class='line'>        email.subject = 'Test Failed';
</span><span class='line'>        email.fromname = 'FirstName LastName';
</span><span class='line'>        email.fromAddress = 'test@test.com'; //上記メールアドレスと被せる
</span><span class='line'>        email.plainTextBody = '';
</span><span class='line'>        MailServiceToCreateLead emailService = new MailServiceToCreateLead();
</span><span class='line'>        Messaging.InboundEmailResult res = emailService.handleInboundEmail(email, env);
</span><span class='line'>        
</span><span class='line'>        Test.stopTest();
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>メールサービス</h2>

<p><code>設定 &gt; 開発 &gt; メールサービス</code>から作成します。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/inboundemailhandler01.jpg" alt="メールサービス" /></p>

<p>設定内容は、サービス名と、先程作成したapexクラスを指定してやるくらいです。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/inboundemailhandler02.jpg" alt="新規作成" /></p>

<p>作成後、ユニークなメールアドレスが割り当てられるので、<br/>
そのアドレス宛てに送信するとメールサービスが起動します。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/inboundemailhandler03.jpg" alt="設定内容" /></p>

<h2>参考</h2>

<p><a href="https://help.salesforce.com/HTViewHelpDoc?id=code_inbound_email.htm&amp;language=ja">InboundEmail &#12458;&#12502;&#12472;&#12455;&#12463;&#12488;&#12398;&#20351;&#29992;</a><br/>
<a href="https://developer.salesforce.com/page/An_Introduction_To_Email_Services_on_Force.com">An Introduction To Email Services on Force.com &ndash; developer.force.com</a><br/>
<a href="http://tyoshikawa1106.hatenablog.com/entry/2013/07/31/213518">SFDC：Messaging.InboundEmailHandlerについて &ndash; tyoshikawa1106のブログ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Herokuアドオン]TransloaditでFTPアップロード]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/16/heroku-transloadit-2/"/>
    <updated>2015-04-16T17:08:38+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/16/heroku-transloadit-2</id>
    <content type="html"><![CDATA[<p>アップロード先をFTPに指定する方法と、<br/>
その内容をテンプレート化するまでのメモ。</p>

<!-- more -->


<p><code>steps</code>内の<code>robot</code>で、<code>/ftp/store</code>を指定する。<br/>
詳しいパラメータは以下。</p>

<p><a href="https://transloadit.com/docs/conversion-robots/#export-to-your-ftp-server-with-the-ftpexport-robot">6.3 Export to your FTP Server with the /ftp/export robot</a></p>

<p>設定ファイル部分は以下のようにした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$transloadit-&gt;createAssemblyForm([
</span><span class='line'>    'params' =&gt; [
</span><span class='line'>        'steps' =&gt; [
</span><span class='line'>            'export' =&gt; [
</span><span class='line'>                'use' =&gt; ':original',
</span><span class='line'>                'robot' =&gt; '/ftp/store',
</span><span class='line'>                'user' =&gt; 'ユーザー名',
</span><span class='line'>                'password' =&gt; 'パスワード',
</span><span class='line'>                'host' =&gt; 'ホスト名',
</span><span class='line'>                'path' =&gt; '/ディレクトリ/test.jpg'
</span><span class='line'>            ]
</span><span class='line'>        ],
</span><span class='line'>        'redirect_url' =&gt; $redirectUrl
</span><span class='line'>    ]
</span><span class='line'>]);</span></code></pre></td></tr></table></div></figure>


<p>フォームから入力されたファイルがアップロードされる。</p>

<ul>
<li> <code>export</code>：ここは名前をつけているだけなので、なんでもよい。</li>
<li><code>use</code>：どの時点のファイルを使用するか。<code>:original</code>だとオリジナルのファイル。複数のパターンを指定する場合は配列で指定する。<br>ただし、その場合、パスは１つしか指定出来ないので、後に書いたほうが上書きされる。<br>(２つ書かないといけないと思われる)</li>
<li><code>user</code>：ユーザー名</li>
<li><code>password</code>：パスワード</li>
<li><code>host</code>：ホスト</li>
<li><code>path</code>：保存先のパス。ファイル名まで指定しないといけない</li>
</ul>


<p>ファイル名は、<code>${file.url_name}</code>と指定することで、ユーザーが選択したファイル名でアップロード出来る。<br/>
この書き方の種類は以下にあった。<br/>
<a href="https://transloadit.com/docs/conversion-robots/#available-job-variables">https://transloadit.com/docs/conversion-robots/#available-job-variables</a></p>

<p>実行後は即時にアップロードされるわけではなく、多少の処理が必要になるよう。<br/>
なので実際にはキューを出している状態。<br/>
数秒後にサーバー上にアップロードが行われる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/transloadit05.jpg" alt="Executing" /></p>

<p>なので、クライアント側で完了を検知するには、transloaditから通知させるか(まだよくわかってない)、<br/>
定期的に確認しにいくか、などの処理が必要と思われる。</p>

<h2>テンプレート化</h2>

<p>上記の設定内容をテンプレート化して保存してみる。<br/>
テンプレート化することによってアカウント情報などをソース上から分離出来、セキュリティを高める効果があるよう。</p>

<p>herokuのアドオンからtranloaditの管理画面に遷移後、<code>TEMPLATES</code>を選択。<br/>
<code>+NES</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/transloadit06.jpg" alt="Executing" /></p>

<p>で、以下のようにテンプレートを作成する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "steps": {
</span><span class='line'>    "export": {
</span><span class='line'>      "use": ":original",
</span><span class='line'>      "robot": "/ftp/store",
</span><span class='line'>      "user": "ユーザー名",
</span><span class='line'>      "password": "パスワード",
</span><span class='line'>      "host": "ホスト名",
</span><span class='line'>      "path": "/ディレクトリ/${file.url_name}"
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>適当に名前をつけて保存。<br/>
保存後、テンプレートの一覧画面から、IDを確認できるようになるので、これを覚えておく。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/transloadit07.jpg" alt="Template list" /></p>

<p>で、このIDを使用して以下のように書き換える。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$transloadit-&gt;createAssemblyForm([
</span><span class='line'>    'params' =&gt; [
</span><span class='line'>        'template_id' =&gt; 'テンプレートのID',
</span><span class='line'>        'redirect_url' =&gt; $redirectUrl
</span><span class='line'>    ]
</span><span class='line'>]);</span></code></pre></td></tr></table></div></figure>


<p>これで実行すると上記のテンプレートが使用されて、FTPアップロードが行われる。<br/>
テンプレートを使用してアップロードした場合は、結果のリストにもその旨が表示される。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/transloadit08.jpg" alt="Assemblies" /></p>

<h2>コード</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require '../vendor/autoload.php';
</span><span class='line'>
</span><span class='line'>use transloadit\Transloadit;
</span><span class='line'>$transloadit = new Transloadit([
</span><span class='line'>    'key' =&gt; getenv('TRANSLOADIT_AUTH_KEY'),
</span><span class='line'>    'secret' =&gt; getenv('TRANSLOADIT_SECRET_KEY')
</span><span class='line'>]);
</span><span class='line'>
</span><span class='line'>$response = Transloadit::response();
</span><span class='line'>if ($response) {
</span><span class='line'>    echo '&lt;h1&gt;Assembly status:&lt;/h1&gt;';
</span><span class='line'>    echo '&lt;pre&gt;';
</span><span class='line'>    print_r($response);
</span><span class='line'>    echo '&lt;/pre&gt;';
</span><span class='line'>    exit;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>$redirectUrl = sprintf(
</span><span class='line'>    'http://%s%s',
</span><span class='line'>    $_SERVER['HTTP_HOST'],
</span><span class='line'>    $_SERVER['REQUEST_URI']
</span><span class='line'>);
</span><span class='line'>
</span><span class='line'>echo $transloadit-&gt;createAssemblyForm([
</span><span class='line'>    'params' =&gt; [
</span><span class='line'>        'template_id' =&gt; 'テンプレートのID',
</span><span class='line'>        'redirect_url' =&gt; $redirectUrl
</span><span class='line'>    ]
</span><span class='line'>]);
</span><span class='line'>
</span><span class='line'>?&gt;
</span><span class='line'>
</span><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>&lt;html lang="ja"&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>    &lt;meta charset="utf-8"&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>
</span><span class='line'>&lt;form method="post" action="upload_select_sample.php"&gt;
</span><span class='line'>    &lt;input name="example_upload" type="file" accept="image/*,video/*"&gt;
</span><span class='line'>    &lt;input type="submit" value="Upload"&gt;
</span><span class='line'>&lt;/form&gt;
</span><span class='line'>
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>参考</h2>

<p><a href="https://transloadit.com/demos/ftp-store/store-uploaded-files">Store the originally uploaded files on your FTP server | Transloadit</a><br/>
<a href="https://transloadit.com/docs/#how-to-use-a-template">How to use a template</a><br/>
<a href="https://transloadit.com/docs/conversion-robots/#available-job-variables">Available job variables</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Herokuアドオン]Transloaditアドオンを使ってPHPでファイルアップロード]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/16/heroku-transloadit-1/"/>
    <updated>2015-04-16T10:32:46+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/16/heroku-transloadit-1</id>
    <content type="html"><![CDATA[<p>動画をアップロード + エンコードしてくれるというTransloaditのherokuアドオンを使ってみた。</p>

<!-- more -->


<h2>herokuへのインストール</h2>

<p>無料プランがあるので、とりあえずそれで。</p>

<pre><code>$ heroku addons:add transloadit:sandbox
</code></pre>

<p>無料プランの場合は、Encoding Volumeが1GB、の制限がある。</p>

<p>transloaditの料金体系は少しややこしくなっているようで、<br/>
無料のsandboxプランだと、トータルで1GBになっているよう。</p>

<p><a href="https://addons.heroku.com/transloadit">Transloadit | Add-ons | Heroku</a><br/>
<img src="http://kayakuguri.github.io/images/2015/04/transloadit02.jpg" alt="heroku料金" /></p>

<p>公式ページのプランでも値段は一緒。</p>

<p><a href="https://transloadit.com/pricing/">Pricing &amp; Signup | Transloadit</a><br/>
<img src="http://kayakuguri.github.io/images/2015/04/transloadit01.jpg" alt="公式料金" /></p>

<p>この1GBとうのは何が含まれるかというと、公式で説明があった。<br/>
エンコードした場合、する前とした後と両方のサイズが合算されてカウントされるよう。</p>

<p>例えば、0.8MBの画像ファイルをエンコードして0.2MBしたとすれば、それで1MBを使用した事になる。<br/>
で、これを1024回繰り返すと、1GBになるので無料枠は終了。</p>

<p>ファイルの閲覧自体には加算されないよう。</p>

<h2>PHP SDKのインストール</h2>

<p>公式どおり、Composerでインストールする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "require": {
</span><span class='line'>    "transloadit/php-sdk": "dev-master"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ローカルで<code>composer install</code>しておく。<br/>
この際、php5.6以上でないとインストール出来ないので注意。<br/>
(自分の環境ではphp5.4だったので、<a href="http://kayamemo.mrlittlebig.com/blog/2015/04/15/mac-update-php/">アップデートした</a>)</p>

<h2>ファイルのアップロード</h2>

<p>公式に載っていたママだけど、<br/>
アクセスするとheroku上の同じディレクトリに置いたファイルをアップロードするだけ、のサンプルを実行してみる。</p>

<p><strong>PHP全コード</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require '../vendor/autoload.php';
</span><span class='line'>
</span><span class='line'>use transloadit\Transloadit;
</span><span class='line'>$transloadit = new Transloadit(array(
</span><span class='line'>    'key' =&gt; getenv('TRANSLOADIT_AUTH_KEY'),
</span><span class='line'>    'secret' =&gt; getenv('TRANSLOADIT_SECRET_KEY')
</span><span class='line'>));
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>$response = $transloadit-&gt;createAssembly(array(
</span><span class='line'>    'files' =&gt; array(dirname(__FILE__).'/160x160.png'),
</span><span class='line'>    'params' =&gt; array(
</span><span class='line'>        'steps' =&gt; array(
</span><span class='line'>            'resize' =&gt; array(
</span><span class='line'>                'robot' =&gt; '/image/resize',
</span><span class='line'>                'width' =&gt; 100,
</span><span class='line'>                'height' =&gt; 100,
</span><span class='line'>            )
</span><span class='line'>        )
</span><span class='line'>    ),
</span><span class='line'>));
</span><span class='line'>
</span><span class='line'>// Show the results of the assembly we spawned
</span><span class='line'>echo '&lt;pre&gt;';
</span><span class='line'>print_r($response);
</span><span class='line'>echo '&lt;/pre&gt;';</span></code></pre></td></tr></table></div></figure>


<p><strong>レスポンス</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>transloadit\TransloaditResponse Object
</span><span class='line'>(
</span><span class='line'>    [data] =&gt; Array
</span><span class='line'>        (
</span><span class='line'>            [ok] =&gt; ASSEMBLY_EXECUTING
</span><span class='line'>            [message] =&gt; The assembly is currently being executed.
</span><span class='line'>            [assembly_id] =&gt; id
</span><span class='line'>            [parent_id] =&gt; 
</span><span class='line'>            [account_id] =&gt; id
</span><span class='line'>            [template_id] =&gt; 
</span><span class='line'>            [instance] =&gt; xxx.transloadit.com
</span><span class='line'>            [assembly_url] =&gt; http://api2.karima.transloadit.com/assemblies/xxx
</span><span class='line'>            [assembly_ssl_url] =&gt; https://karima.transloadit.com/assemblies/xxx
</span><span class='line'>            [bytes_received] =&gt; 1107
</span><span class='line'>            [bytes_expected] =&gt; 1107
</span><span class='line'>            [upload_duration] =&gt; 1.477
</span><span class='line'>            [client_agent] =&gt; Transloadit PHP SDK v2.0.0
</span><span class='line'>            [client_ip] =&gt; 10.166.13.48
</span><span class='line'>            [client_referer] =&gt; 
</span><span class='line'>            [start_date] =&gt; 2015/04/16 01:29:02 GMT
</span><span class='line'>            [is_infinite] =&gt; 
</span><span class='line'>            [has_dupe_jobs] =&gt; 
</span><span class='line'>            [execution_start] =&gt; 2015/04/16 01:29:03 GMT
</span><span class='line'>            [execution_duration] =&gt; 0.002
</span><span class='line'>            [notify_start] =&gt; 
</span><span class='line'>            [notify_url] =&gt; 
</span><span class='line'>            [notify_status] =&gt; 
</span><span class='line'>            [notify_response_code] =&gt; 
</span><span class='line'>            [notify_duration] =&gt; 
</span><span class='line'>            [last_job_completed] =&gt; 
</span><span class='line'>            [fields] =&gt; Array
</span><span class='line'>                (
</span><span class='line'>                )
</span><span class='line'>
</span><span class='line'>            [running_jobs] =&gt; Array
</span><span class='line'>                (
</span><span class='line'>                )
</span><span class='line'>
</span><span class='line'>            [bytes_usage] =&gt; 0
</span><span class='line'>            [executing_jobs] =&gt; Array
</span><span class='line'>                (
</span><span class='line'>                    [0] =&gt; resize
</span><span class='line'>                )
</span><span class='line'>
</span><span class='line'>            [started_jobs] =&gt; Array
</span><span class='line'>                (
</span><span class='line'>                    [0] =&gt; resize:::original
</span><span class='line'>                )
</span><span class='line'>
</span><span class='line'>            [parent_assembly_status] =&gt; 
</span><span class='line'>            [params] =&gt; {"steps":{"resize":{"robot":"/image/resize","width":100,"height":100}},"auth":{"key":"****","expires":"2015/04/16 03:29:01+00:00"}}
</span><span class='line'>            [template] =&gt; 
</span><span class='line'>            [uploads] =&gt; Array
</span><span class='line'>                (
</span><span class='line'>                    [0] =&gt; Array
</span><span class='line'>                        (
</span><span class='line'>                            [id] =&gt; xxx
</span><span class='line'>                            [name] =&gt; 160x160.png
</span><span class='line'>                            [basename] =&gt; 160x160
</span><span class='line'>                            [ext] =&gt; png
</span><span class='line'>                            [size] =&gt; 494
</span><span class='line'>                            [mime] =&gt; image/png
</span><span class='line'>                            [type] =&gt; image
</span><span class='line'>                            [field] =&gt; file_1
</span><span class='line'>                            [md5hash] =&gt; xxx
</span><span class='line'>                            [original_id] =&gt; xxx
</span><span class='line'>                            [original_basename] =&gt; 160x160
</span><span class='line'>                            [original_md5hash] =&gt; xxx
</span><span class='line'>                            [url] =&gt; http://tmp.transloadit.com.s3.amazonaws.com/xxx.png
</span><span class='line'>                            [ssl_url] =&gt; https://s3.amazonaws.com/tmp.transloadit.com/xxx.png
</span><span class='line'>                            [meta] =&gt; Array
</span><span class='line'>                                (
</span><span class='line'>                                    [width] =&gt; 160
</span><span class='line'>                                    [height] =&gt; 160
</span><span class='line'>                                    [date_recorded] =&gt; 
</span><span class='line'>                                    [date_file_created] =&gt; 
</span><span class='line'>                                    [date_file_modified] =&gt; 2015/04/16 01:29:02 GMT
</span><span class='line'>                                    [title] =&gt; 
</span><span class='line'>                                    [description] =&gt; 
</span><span class='line'>                                    [location] =&gt; 
</span><span class='line'>                                    [aspect_ratio] =&gt; 1
</span><span class='line'>                                    [city] =&gt; 
</span><span class='line'>                                    [state] =&gt; 
</span><span class='line'>                                    [country] =&gt; 
</span><span class='line'>                                    [country_code] =&gt; 
</span><span class='line'>                                    [keywords] =&gt; 
</span><span class='line'>                                    [aperture] =&gt; 
</span><span class='line'>                                    [exposure_compensation] =&gt; 
</span><span class='line'>                                    [exposure_mode] =&gt; 
</span><span class='line'>                                    [exposure_time] =&gt; 
</span><span class='line'>                                    [flash] =&gt; 
</span><span class='line'>                                    [focal_length] =&gt; 
</span><span class='line'>                                    [f_number] =&gt; 
</span><span class='line'>                                    [iso] =&gt; 
</span><span class='line'>                                    [light_value] =&gt; 
</span><span class='line'>                                    [metering_mode] =&gt; 
</span><span class='line'>                                    [shutter_speed] =&gt; 
</span><span class='line'>                                    [white_balance] =&gt; 
</span><span class='line'>                                    [device_name] =&gt; 
</span><span class='line'>                                    [device_vendor] =&gt; 
</span><span class='line'>                                    [device_software] =&gt; 
</span><span class='line'>                                    [latitude] =&gt; 
</span><span class='line'>                                    [longitude] =&gt; 
</span><span class='line'>                                    [orientation] =&gt; 
</span><span class='line'>                                    [has_clipping_path] =&gt; 
</span><span class='line'>                                    [creator] =&gt; 
</span><span class='line'>                                    [author] =&gt; 
</span><span class='line'>                                    [copyright] =&gt; 
</span><span class='line'>                                    [copyright_notice] =&gt; 
</span><span class='line'>                                    [frame_count] =&gt; 1
</span><span class='line'>                                    [colorspace] =&gt; Gray
</span><span class='line'>                                    [average_color] =&gt; #686868
</span><span class='line'>                                )
</span><span class='line'>
</span><span class='line'>                        )
</span><span class='line'>
</span><span class='line'>                )
</span><span class='line'>
</span><span class='line'>            [results] =&gt; Array
</span><span class='line'>                (
</span><span class='line'>                )
</span><span class='line'>
</span><span class='line'>        )
</span><span class='line'>
</span><span class='line'>    [curlInfo] =&gt; Array
</span><span class='line'>        (
</span><span class='line'>            [url] =&gt; https://karima.transloadit.com/assemblies
</span><span class='line'>            [content_type] =&gt; application/json; charset=utf-8
</span><span class='line'>            [http_code] =&gt; 200
</span><span class='line'>            [header_size] =&gt; 371
</span><span class='line'>            [request_size] =&gt; 220
</span><span class='line'>            [filetime] =&gt; -1
</span><span class='line'>            [ssl_verify_result] =&gt; 0
</span><span class='line'>            [redirect_count] =&gt; 0
</span><span class='line'>            [total_time] =&gt; 1.91859
</span><span class='line'>            [namelookup_time] =&gt; 0.012709
</span><span class='line'>            [connect_time] =&gt; 0.421413
</span><span class='line'>            [pretransfer_time] =&gt; 0.435759
</span><span class='line'>            [size_upload] =&gt; 1107
</span><span class='line'>            [size_download] =&gt; 2527
</span><span class='line'>            [speed_download] =&gt; 1317
</span><span class='line'>            [speed_upload] =&gt; 576
</span><span class='line'>            [download_content_length] =&gt; -1
</span><span class='line'>            [upload_content_length] =&gt; 1107
</span><span class='line'>            [starttransfer_time] =&gt; 0.43577
</span><span class='line'>            [redirect_time] =&gt; 0
</span><span class='line'>            [redirect_url] =&gt; 
</span><span class='line'>            [primary_ip] =&gt; 10.234.41.26
</span><span class='line'>            [certinfo] =&gt; Array
</span><span class='line'>                (
</span><span class='line'>                )
</span><span class='line'>
</span><span class='line'>            [primary_port] =&gt; 443
</span><span class='line'>            [local_ip] =&gt; 172.18.203.90
</span><span class='line'>            [local_port] =&gt; 41591
</span><span class='line'>        )
</span><span class='line'>
</span><span class='line'>    [curlErrorNumber] =&gt; 0
</span><span class='line'>    [curlErrorMessage] =&gt; 
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>画像のURLはレスポンスの、<code>data &gt; uploads &gt; url(ssl_url)</code>に入っている。</p>

<h2>結果</h2>

<p>herokuのアドオンからTransloadit上で確認すると以下のようにファイルがアップロードされていた。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/transloadit03.jpg" alt="結果" /></p>

<p>ファイル名をクリックする事で詳細を確認出来る。<br/>
ファイルの確認やダウンロードもここから可能。<br/>
<img src="http://kayakuguri.github.io/images/2015/04/transloadit04.jpg" alt="詳細" /></p>

<p>アップロードされたファイルは上記からダウンロード可能だが、この保存ファイルは一時的なもののよう。<br/>
24時間後には消える。らしい。</p>

<blockquote><p>Please keep in mind that we store files only for 24 hours after they were created. To persist your files, please use one of our <a href="https://transloadit.com/docs/conversion-robots/#file-export-robots">file export robots</a>.</p></blockquote>

<p>なので、<code>file export robots</code>を使用してどこかしらにエクスポートしてやる必要がある。<br/>
エクスポート先として用意されているものは以下のよう。</p>

<ul>
<li>Amazon S3</li>
<li>SFTP</li>
<li>FTP</li>
<li>Rackspace</li>
<li>YouTube</li>
</ul>


<h2>参考</h2>

<p><a href="https://addons.heroku.com/transloadit">Transloadit | Add-ons | Heroku</a><br/>
<a href="https://devcenter.heroku.com/articles/transloadit">Transloadit | Heroku Dev Center</a><br/>
<a href="https://transloadit.com/">File upload processing web service | Transloadit</a><br/>
<a href="https://github.com/transloadit/php-sdk">transloadit/php-sdk</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[mac]macのPHPのバージョンをアップデートする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/15/mac-update-php/"/>
    <updated>2015-04-15T20:15:38+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/15/mac-update-php</id>
    <content type="html"><![CDATA[<p>とあるSDKをcomposer経由でインストールしようとすると、PHPのバージョンが古い、と怒られてしまった。<br/>
なので、macで5.6にしたメモ。</p>

<!-- more -->


<p>アップデート前。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php -v
</span><span class='line'>PHP 5.4.38 (cli) (built: Mar 19 2015 14:49:15)
</span><span class='line'>Copyright (c) 1997-2014 The PHP Group
</span><span class='line'>Zend Engine v2.4.0, Copyright (c) 1998-2014 Zend Technologies</span></code></pre></td></tr></table></div></figure>


<hr />

<p>基本的に以下のママ。<br/>
<code>homebrew</code>でインストールした。</p>

<p><a href="http://takemaru123.hatenablog.jp/entry/2014/11/27/224037">macにhomebrewでPHP5.6環境をインストールしてみる &ndash; たけまるの日記</a></p>

<p>まず、xcode-selectをインストールしておく。<br/>
(Xcode自体がインストールされていない場合はインストールが必要)<br/>
(理由はわかてない)</p>

<pre><code>$ xcode-select --install
</code></pre>

<p>すると、以下のメッセージが表示されて、ダイアログが表示された。</p>

<blockquote><p>xcode-select: note: install requested for command line developer tools</p></blockquote>

<p><img src="http://kayakuguri.github.io/images/2015/04/mac_php_update_1.png" alt="ダイアログ" /></p>

<p>インストール、を押すと規約同意画面に進み、インストールが始まる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/04/mac_php_update_2.png" alt="規約同意" /><br/>
<img src="http://kayakuguri.github.io/images/2015/04/mac_php_update_3.png" alt="インストール中" /></p>

<p>インストール後に以下でhomebrewのリポジトリを作成。<br/>
(ここもよくわかってない)</p>

<pre><code>$ brew tap homebrew/php
$ brew tap homebrew/dupes
</code></pre>

<p>で、いよいよPHP5.6のインストール。</p>

<pre><code>$ brew install php56 --with-apxs2=/usr/sbin/apxs
~~~~~
==&gt; Summary
🍺  /usr/local/Cellar/php56/5.6.7: 500 files, 51M
</code></pre>

<p>で、ターミナルを再起動すると、無事、アップデートされました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php -v
</span><span class='line'>PHP 5.6.7 (cli) (built: Mar 22 2015 19:03:55)
</span><span class='line'>Copyright (c) 1997-2015 The PHP Group
</span><span class='line'>Zend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[apex]トリガーのインサートエラーのテストコードを書く]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/14/apex-test-trigger/"/>
    <updated>2015-04-14T17:31:36+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/14/apex-test-trigger</id>
    <content type="html"><![CDATA[<p>言われてみれば当たり前なんですが、メモ。</p>

<!-- more -->


<p>レコードがインサートされた際にデータ内容をチェックして、間違っていればエラーを返す、というトリガーを作成した。<br/>
要するに、自前のバリデーションチェックみたいなもの。<br/>
このテストコードを書いた際に、そのエラー部分も通るように作ってしまうと、テストコード自体がエラーになってしまってチェック出来なかった。</p>

<p>で、解決策としては単純で、<code>try〜catch</code>を使う。</p>

<p>以下、例。</p>

<h3>apex</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>trigger SampleLeadTrigger on Lead (before insert) {
</span><span class='line'>    for(Lead obj : Trigger.New){
</span><span class='line'>        if(obj.LastName == 'test'){
</span><span class='line'>            obj.addError('testという名前は使えません');
</span><span class='line'>            continue;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>姓に、<code>test</code>という文字列の使用をエラーとするトリガーです。</p>

<h3>テストコード</h3>

<p>以下にようにそのままテストコードを書いてみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@isTest
</span><span class='line'>private class Test_SampleLeadTrigger {
</span><span class='line'>    static testMethod void excute(){
</span><span class='line'>        Lead test_obj = new Lead();
</span><span class='line'>        test_obj.Company = 'hoge co.';
</span><span class='line'>        test_obj.LastName = 'test';
</span><span class='line'>        
</span><span class='line'>        insert test_obj;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>すると、以下のようなエラーが出てしまい、テストコードが実行できません。</p>

<blockquote><p>18:14:44:833 FATAL_ERROR System.DmlException: Insert failed. First exception on row 0; first error: FIELD_CUSTOM_VALIDATION_EXCEPTION, testという名前は使えません: []</p></blockquote>

<p>なので、<code>insert</code>する部分を<code>try-catch</code>で例外をキャッチするようにします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@isTest
</span><span class='line'>private class Test_SampleLeadTrigger {
</span><span class='line'>    static testMethod void excute(){
</span><span class='line'>        Lead test_obj = new Lead();
</span><span class='line'>        test_obj.Company = 'hoge co.';
</span><span class='line'>        test_obj.LastName = 'test';
</span><span class='line'>        
</span><span class='line'>        try{
</span><span class='line'>          insert test_obj;
</span><span class='line'>        }catch(Exception e){
</span><span class='line'>            
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これでエラーで止まらなくなるので実行は出来るようになります。<br/>
catchの部分は今回で言えば、<code>DmlException</code>なので、それでもよいですが、より広いエラーで、<code>Exception</code>にしています。<br/>
この辺はあまり深く追求してません。。</p>

<p>で、これだとテストは通りますが、テストの意味はあまりないと思うので、意図したエラーが返ってくるかを確認するために、以下のように変更します。</p>

<p><code>try-catch</code>部分</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try{
</span><span class='line'>    insert test_obj;
</span><span class='line'>}catch(Exception e){
</span><span class='line'>    Boolean expectedExceptionThrown =  e.getMessage().contains('testという名前は使えません') ? true : false;
</span><span class='line'>  System.AssertEquals(expectedExceptionThrown, true);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これで指定したエラーが返ってきたかどうかがチェックできます。<br/>
もし指定したエラー以外のものが返ってきた場合は以下のようなエラーが出てテストコードが実行できなくなってしまうので間違いに気付くことが出来ます。</p>

<blockquote><p>System.AssertException: Assertion Failed: Expected: false, Actual: true</p></blockquote>

<p>（<code>e.getMessage()</code>は、 System.DmlException:〜の文言を含んだ内容となるので、<code>contains</code>関数で指定の文字列が<strong>含まれている</strong>かどうかをチェックしている。）</p>

<h3>参考</h3>

<p><a href="https://developer.salesforce.com/forums/ForumsMain?id=906F00000008xGuIAI">How do I test for an exception(&lsquo;addError&rsquo;) in a Trigger ? &ndash; Salesforce Developer Community</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePHP]400系エラーが発生した場合にトップページにリダイレクトさせる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/13/cake-php-404-redirect/"/>
    <updated>2015-04-13T15:35:00+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/13/cake-php-404-redirect</id>
    <content type="html"><![CDATA[<p>ググると色々と方法が出てくるので今更ですが、<br/>
記事によって微妙に違ったので、最終的に上手くいったものをメモ。</p>

<!-- more -->


<p>cakephpがエラーをハンドリングしているControllerは以下。<br/>
<code>/lib/Cake/Error/ExceptionRenderer.php</code></p>

<p>この中の、219行目あたりにある、<code>error400</code>の処理が400系エラー時の処理にあたる。<br/>
なので、これをオーバーライドしてやる形でリダイレクト処理を書く。<br/>
(直接編集してもいいが、コアシステムになるのでなるべく触らないほうがよさげ)</p>

<p>まずエラーの際の処理をオーバーライドするためのクラスファイルを作成。<br/>
<code>/lib/Cake/Error/AppExceptionRenderer.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>App::uses('ExceptionRenderer', 'Error');
</span><span class='line'>
</span><span class='line'>class AppExceptionRenderer extends ExceptionRenderer {
</span><span class='line'>    public function error400($error) { // 400番台のエラー時に呼ばれるメソッドを上書き
</span><span class='line'>        $this-&gt;controller-&gt;redirect(array('controller' =&gt; 'users', 'action' =&gt; 'index'), 301);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>この時に注意点は、<code>redirect</code>関数を呼び出すときに、<code>$this-&gt;controller</code>経由で呼び出さないとエラーになってしまった。<br/>
<code>$this-&gt;redirect()</code>ではダメだった。</p>

<p>で、coreクラスでエラー時に呼び出すクラスを作成したクラスに変更。</p>

<p><code>/app/Config/core.php</code> 79行目付近</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'renderer' =&gt; 'ExceptionRenderer',
</span><span class='line'>↓↓
</span><span class='line'>'renderer' =&gt; 'AppExceptionRenderer',</span></code></pre></td></tr></table></div></figure>


<p>後はコントローラーなどがないページへアクセスすれば、指定のページにリダイレクトが発生する。</p>

<h3>参考</h3>

<p><a href="https://www.markernet.co.jp/blog/2014/06/12/post-1622/">CakePHP2.Xで404 Not Foundエラーをリダイレクトする方法 | WEB制作ブログ</a><br/>
<a href="http://studio-faust.com/programming/258/">CakePHP2 404エラーの場合にトップページにリダイレクト | Web Studio Faust</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[apex]Date型のフォーマット]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/10/format-date/"/>
    <updated>2015-04-10T10:55:07+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/10/format-date</id>
    <content type="html"><![CDATA[<p>何回かググっているので、備忘録。</p>

<!-- more -->


<p>Date型のフォーマットは一応用意されているが、フォーマット内容を指定が出来ないよう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Date d = Date.newInstance(2015, 4, 10);
</span><span class='line'>System.debug(d); //2015-04-10 00:00:00
</span><span class='line'>String d_str = d.format();
</span><span class='line'>System.debug(d_str); //2015/04/10</span></code></pre></td></tr></table></div></figure>


<p><code>format('yyyy-MM-dd')</code>とか書くと怒られる。<br/>
<a href="https://www.salesforce.com/us/developer/docs/apexcode/Content/apex_methods_system_date.htm#apex_System_Date_format">Date Class &ndash; format()</a></p>

<p>代わりにDatetime型の場合はフォーマットを指定して出力が可能。<br/>
なので、Date型のものをフォーマット指定して出力したい場合は、一度Datetime型に変換してやる必要がある。</p>

<p>apexのDatetime型の扱いには注意が必要で、そのまま変換してDatetime型のまま使用しているとタイムゾーンが標準時になって９時間戻ってしまう。<br/>
ただしそれをフォーマットして文字列にするとまた元に戻る。
指定するならする、しないならしない、で統一しているとややこしくならなくてすみそう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Date d = Date.newInstance(2015, 4, 10);
</span><span class='line'>System.debug(d);  //2015-04-10 00:00:00
</span><span class='line'>Datetime dt = Datetime.newInstance(d.year(), d.month(), d.day());
</span><span class='line'>System.debug(dt);  //2015-04-09 15:00:00
</span><span class='line'>String dt_str = dt.format('yyyy-MM-dd');
</span><span class='line'>System.debug(dt_str);  //2015-04-10</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<p><a href="https://www.salesforce.com/us/developer/docs/apexcode/Content/apex_methods_system_date.htm#apex_System_Date_format">Date Class &ndash; format()</a><br/>
<a href="https://www.salesforce.com/us/developer/docs/apexcode/Content/apex_methods_system_datetime.htm#apex_System_Datetime_format_2">Datetime Class &ndash; format(string)</a><br/>
<a href="http://stackoverflow.com/questions/11834873/salesforce-apex-validating-date-for-format-and-value">validation &ndash; Salesforce Apex: Validating date for format and value &ndash; Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]ssl設定時のエラーについてのメモ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/09/ssl-error/"/>
    <updated>2015-04-09T13:03:29+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/09/ssl-error</id>
    <content type="html"><![CDATA[<p>簡単な事だったのですが、情報が見つけられなかったのでメモ。</p>

<!-- more -->


<p>herokuにsslを適用させる場合、証明書と秘密鍵をアドオンにアップロードします。<br/>
具体的には以下のコマンド。</p>

<pre><code>$ heroku certs:add 証明書 秘密鍵
</code></pre>

<p>その際に、以下のエラーが返って来た。</p>

<blockquote><p>Unable to parse certificate. Please ensure the certificate is in PEM format.</p></blockquote>

<p>内容は特に間違っているとは思えず、何度見返しても正しい。</p>

<p>結局原因は、有効期間前、というなんとも単純な事だった。<br/>
取得した時点ではまだ開始前の状態で、期限前。<br/>
あまり期限を先にして取得することってないのか、ググっても特に出てこず。<br/>
期限外だったらそう怒ってくれればいいのに、上記のエラー内容ではその事が特にわからなかったのもハマりポイントでした。</p>

<p>ちなみに有効期間の確認は以下。</p>

<pre><code>$ openssl x509 -in 証明書 -noout -dates
</code></pre>

<p>以下のような形で返ってくる。</p>

<pre><code>notBefore=Apr  8 15:00:00 2015 GMT
notAfter=Apr  8 14:59:59 2016 GMT
</code></pre>

<p>期間内だと問題なくアップ出来ました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]テスト実行時に組織化の全てのデータにアクセスする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/07/sf-seealldata-test/"/>
    <updated>2015-04-07T14:40:33+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/07/sf-seealldata-test</id>
    <content type="html"><![CDATA[<p>salesforceでテストコードを実行させる場合、通常であればデータはテスト用にコード内で作成する必要があります。<br/>
しかし、組織内のデータを直接使用してテストしたい場合もあります。あります。<br/>
そんな時のメモ。</p>

<!-- more -->


<p>テストアノテーションメソッドを以下のようにすればよいだけ。</p>

<pre><code>@isTest(SeeAllData=true)
</code></pre>

<p>これで組織化にある全データを使用してテストの実行が行えます。<br/>
ですが、もちろんsandboxと本番環境に差異がある場合はsandboxで通ったテストが本番では通らない、カバー率が低い、ということがありえますので注意です。</p>

<p>これを使用するシュチエーションとしては、活動履歴(<code>ActivityHistory</code>)を使用する場合があります。<br/>
活動履歴は直接SOQLでは作成できず、テストコード内で作成したデータには紐付いて作成されません。<br/>
要するに、テスト実行する手段がない、よう。<br/>
その際に上記メソッドを使う事で組織内に作成されたデータを使用してのテストが必要になってきます。</p>

<p>もともとsalesforceは<code>Spring '12</code>リリースまでは(<code>API 24.0</code>より古いもの)では全データにアクセスが出来たよう。<br/>
それだと組織内のデータに依存してしまって上手くテスト実行が出来ない、という状態だったため、デフォルトでは組織内のデータにはアクセス出来ないように変更されたようです。<br/>
で、アクセスしたい場合は上記のコードを書けばよい、と。<br/>
上手く使えばテストが非常に落になりそうです(違う)。</p>

<p>上記メソッドを使用しなくても以下のデータは組織内のデータを使用してテスト実行が可能なようです。</p>

<ul>
<li>User</li>
<li>Profile</li>
<li>Organization</li>
<li>RecordType</li>
<li>ApexClass</li>
<li>ApexTrigger</li>
<li>ApexComponent</li>
<li>ApexPage</li>
</ul>


<h3>参考</h3>

<p><a href="http://dackdive.hateblo.jp/entry/2014/07/05/100926">[Salesforce]活動履歴(ActivityHistory)がテストで取得できない？ &ndash; dackdive&#39;s blog</a><br/>
<a href="http://blog.flect.co.jp/salesforce/2012/05/post-9aec.html">セールスフォースの豆知識: テストメソッドがアクセスできるデータが変わりました</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakaPHP]ラジオボタンの必須チェック]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/06/cakephp-radio-validation/"/>
    <updated>2015-04-06T12:58:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/06/cakephp-radio-validation</id>
    <content type="html"><![CDATA[<p>またもやバリデーションネタ。<br/>
ラジオボタンにたいして未選択のチェックを入れる方法。</p>

<!-- more -->


<p>モデルのバリデーションルールに、<code>'required' =&gt; true</code>とかを入れればよいだけかとおもいきや、なかなか一筋縄ではいかなった。</p>

<h3>&lsquo;required&rsquo; => true</h3>

<p><code>'required' =&gt; true</code>を設定しただけではバリデーションルールが適用されないよう。<br/>
ルールを同時に設定する必要があるとか。<br/>
このオプションの意味は、指定のキーデータがない場合にチェックされるよう。(たぶん)</p>

<p>ルールには空だとエラー、ということで、<code>notEmpty</code>を追加。<br/>
これで必須のチェックのみは完了。</p>

<h3>required属性</h3>

<p>モデルでバリデーションを指定すると、自動的にinputタグの属性に、<code>required</code>が追加されてしまう。<br/>
このまま送信しようとすると、Chrome限定だと思うが、エラーが出た送信出来ない。</p>

<blockquote><p>An invalid form control with name=&lsquo;xxx&rsquo; is not focusable.</p></blockquote>

<p>Chromeでは<code>required</code>属性が入ったinputでデータがなかった場合は、吹き出しのようなものを出すような仕様になっているが、<br/>
radioボタンの場合はその吹き出しを出す場所がなくてエラーになってしまうみたい。</p>

<h4>回避方法</h4>

<p>回避方法はいくつかあるよう。</p>

<p>１）<br/>
なのでradioボタンの場合はこの属性を入れてはいけない。<br/>
cakeの場合、オプションに<code>'required' =&gt; false</code>を指定してやることで出さないように出来た。</p>

<p>２）<br/>
<code>form</code>タグの生成時に<code>novalidate</code>をtrueでセットしてやればその中のinputタグには、<code>required</code>属性がつかなくなるよう。<br/>
全部にセット出来るという意味ではこれが一番お手軽かも。</p>

<h3>ソース</h3>

<p>最終的なソースの抜粋は以下。</p>

<h4>モデル</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'radio_data' =&gt; array(
</span><span class='line'>    array(
</span><span class='line'>        'rule' =&gt; 'notEmpty',
</span><span class='line'>        'message' =&gt; '選択して下さい'
</span><span class='line'>    ),
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<h4>ビュー</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php echo $this-&gt;Form-&gt;input('radio_data', array(
</span><span class='line'>  'type' =&gt; 'radio',
</span><span class='line'>  'options' =&gt; array('OK', 'NG'),
</span><span class='line'>  'required' =&gt; false
</span><span class='line'>));?&gt;</span></code></pre></td></tr></table></div></figure>


<p>もしくは、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php echo $this-&gt;Form-&gt;create('Model', array('novalidate' =&gt; true));  ?&gt;
</span><span class='line'>~~~中略~~~
</span><span class='line'>&lt;?php echo $this-&gt;Form-&gt;input('radio_data', array(
</span><span class='line'>  'type' =&gt; 'radio',
</span><span class='line'>  'options' =&gt; array('OK', 'NG'),
</span><span class='line'>));?&gt;</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<p><a href="http://stackoverflow.com/questions/7168645/invalid-form-control-only-in-google-chrome">html &ndash; &quot;Invalid form control&quot; only in Google Chrome &ndash; Stack Overflow</a><br/>
<a href="http://d.hatena.ne.jp/cakephper/20130211/1360589926">CakePHP2.3からinputタグにhtml5のrequired属性がつくようになった &ndash; cakephperの日記(CakePHP, Laravel, PHP)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePHP]URLからパラメータを受け取る]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/03/cakephp-routing-params/"/>
    <updated>2015-04-03T14:37:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/03/cakephp-routing-params</id>
    <content type="html"><![CDATA[<p>cake記法？で書かれたURLからパラメータを取得するメモ。</p>

<!-- more -->


<h2>コントローラーのみで制御</h2>

<p>cakephpでのURLの基本は以下。</p>

<blockquote><p>コントローラー名/アクション名</p></blockquote>

<p>これにパラメータをつけたければ、その後ろに並べるのみ。</p>

<blockquote><p>コントローラー名/アクション名/パラメータ1/パラメータ2</p></blockquote>

<p>このパラメータを取得する方法は以下。</p>

<pre><code>//URL - ctrl/act/param1/param2

$this-&gt;params['pass'][0]; //param1
$this-&gt;params['pass'][1]; //param2
</code></pre>

<p>で、指定の名前を付けたい場合は、以下のように。</p>

<blockquote><p>コントローラー名/アクション/パラメータ名1:パラメータ/パラメータ名2:パラメータ</p></blockquote>

<pre><code>//URL - ctrl/act/param1:hoge/param2:fuga

$this-&gt;params['named']['param1'];
$this-&gt;params['named']['param2'];
</code></pre>

<p>で、View側でこのリンクを作る方法は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php echo $this-&gt;Html-&gt;link('リンクテキスト', array(
</span><span class='line'>  'controller' =&gt; 'ctrl',
</span><span class='line'>  'action' =&gt; 'act',
</span><span class='line'>  'param1' =&gt; 'hoge'
</span><span class='line'>)) ?&gt;</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>これで上記の、<code>/ctrl/act/param1:hoge</code>が生成される</p>

<h2>ルーティング</h2>

<p>このままだとURLが冗長になるので、ルーティングを設定して、スッキリさせる。<br/>
さらに予めパラメータ名を指定してやる。</p>

<h4>ルーティング</h4>

<pre><code>Router::connect('/ctrl/act/:param1', array('controller' =&gt; 'ctrl', 'action' =&gt; 'act'));
</code></pre>

<p>こうすると、上記で記述したリンクを貼ると、以下のURLが生成される。</p>

<pre><code>/ctrl/act/hoge
</code></pre>

<p>これを取得するには以下。</p>

<pre><code>$this-&gt;params['param1']
</code></pre>

<p>これの方が見た目も取得方法もすっきりしててよさげ。</p>

<h2>参考</h2>

<p><a href="http://creazy.net/2009/05/cakephp_routing.html">http://creazy.net/2009/05/cakephp_routing.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePHP]Transitionコンポーネントでバリデーションを効かせるモデルを指定]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/01/cakephp-transition-validate/"/>
    <updated>2015-04-01T19:22:30+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/01/cakephp-transition-validate</id>
    <content type="html"><![CDATA[<p>またバリデーションネタ。<br/>
cakephpでフォーム作成の際に、Transitionコンポーネントを使用するとすこぶる便利。<br/>
以下が使い方としてはわかりやすかった。<br/>
<a href="http://endoyuta.com/2013/05/18/cakephp-transition%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%881-0/">cakePHP Transitionコンポーネント &ndash; Logicky Blog</a></p>

<!-- more -->


<p>で、その中で、入力画面から確認画面に遷移する際に指定したバリデーションルールを適用させたかった。<br/>
たいていのサイトでは、<code>$this-&gt;Transition-&gt;checkData('xxx')</code>を使えばよい、と書いてあったのだが、それだと効かなかった。<br/>
原因を探していると、どうやら使用しているコントローラーで複数のモデルを使用していると効かないよう。<br/>
そんなときは<code>checkData</code>の第２引数でモデルを明示的に指定してやると効くようになった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class FormController extends AppController
</span><span class='line'>{
</span><span class='line'>  public $uses = array('User', 'Hoge', 'Fuga');
</span><span class='line'>  
</span><span class='line'>  public function input(){
</span><span class='line'>      $this-&gt;Transition-&gt;checkData('confirm','Hoge');
</span><span class='line'>      ...
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上記のように書くと、<code>Hoge</code>モデルで記述したバリデーションが適用される。<br/>
ここを配列にして複数のモデルを指定してやることも可能だそう。</p>

<p><a href="http://d.hatena.ne.jp/kunit/20101005#1286265311">[PHP][CakePHP] Transitionコンポーネント &ndash; checkData() について</a></p>

<p>それにしてもこのコンポーネントはびっくりするくらい便利。ほんとに。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePHP]手動でフォームのバリデーションチェックにかける]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/31/cake-php-validates/"/>
    <updated>2015-03-31T21:06:40+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/31/cake-php-validates</id>
    <content type="html"><![CDATA[<p>最近cakephpを触るようになりました。ようやく。<br/>
で、コントローラーから明示的にバリデーションにかける方法を調べたのでメモ。</p>

<!-- more -->


<p>まず準備として、<code>Model</code>にルールを記述します。<br/>
今回は<code>User</code>というモデル内に記述したとします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var $validate = array(
</span><span class='line'>  'password' =&gt; array(
</span><span class='line'>        'rule' =&gt; array('minLength', 8),
</span><span class='line'>        'message' =&gt; 'パスワードは8文字以上で入力してください'
</span><span class='line'>    )
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<p>で、次に<code>View</code>で入力欄を作成します。<br/>
作成の際に、先程作ったルールの<code>password</code>を<code>type</code>として指定してやります。</p>

<pre><code>&lt;?php echo $this-&gt;Form-&gt;input('User.password', array('type' =&gt; 'password', 'value' =&gt; '','label' =&gt; false)); ?&gt;
</code></pre>

<p>HTMLは以下のように表示されます。</p>

<pre><code>&lt;input name="data[User][password]" value="" type="password" id="UserPassword" required="required"&gt;
</code></pre>

<p>最後に<code>Controller</code>からバリデーションにデータを送信します。<br/>
記述する箇所は、フォームを送信した後に実行されるアクション内です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$this-&gt;User-&gt;set($this-&gt;request-&gt;data); //モデルにデータをセット
</span><span class='line'>if(!$this-&gt;User-&gt;validates()){
</span><span class='line'>  //エラー時の挙動
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これで8文字以下で送信するとエラーが表示されます。</p>

<h3>参考</h3>

<p><a href="http://book.cakephp.org/2.0/ja/models/data-validation/validating-data-from-the-controller.html">http://book.cakephp.org/2.0/ja/models/data-validation/validating-data-from-the-controller.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]Apex REST作成時のtips]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/27/apex-rest-tips/"/>
    <updated>2015-03-27T19:45:44+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/27/apex-rest-tips</id>
    <content type="html"><![CDATA[<p>最近よくApexRESTを作成していて、<br/>
その中でちょっとしたtipsというかメモをメモっておきます。</p>

<!-- more -->


<h2>エンドポイント</h2>

<p>エンドポイントの指定には以下のように書きます。</p>

<pre><code>@RestResource(urlMapping='/User/Login')
</code></pre>

<p>この時に、<code>*</code>を使う事も出来ます。</p>

<pre><code>@RestResource(urlMapping='/User/*')
</code></pre>

<p>なので、ここにユーザーIDを入れたりして、そのIDを取得することで、<br/>
よりREST APIらしい(?)挙動でAPIを作成する事が出来ます。<br/>
apex側で送信されたIDを取得するには、以下のように<code>/</code>で区切って取得します。</p>

<pre><code>String accountId = req.requestURI.substring(req.requestURI.lastIndexOf('/')+1);
</code></pre>

<p>公式のドキュメントに正にこのままの内容が載っていました。</p>

<p><a href="https://www.salesforce.com/us/developer/docs/apexcode/Content/apex_rest_code_sample_basic.htm">Apex REST Basic Code Sample</a></p>

<h2>JSON</h2>

<p>返却するJSONの形式ですが、クラスの入れ子や、<code>List</code>を活用することで<br/>
かなり自由度高く作成出来ます。</p>

<p>例えば、以下のようなJSONを返すとします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"success":1,
</span><span class='line'>"User" : {
</span><span class='line'>  "user_id": xxx,
</span><span class='line'>  "hobby":[
</span><span class='line'>      {"name":"映画", "level":"3"},
</span><span class='line'>      {"name":"サッカー", "level":"1"}
</span><span class='line'>  ]
</span><span class='line'>},
</span><span class='line'>"request_time": "2015-3-27 12:33"</span></code></pre></td></tr></table></div></figure>


<p>この場合、以下のようにクラスを複数作り、入れ子構造を作る事で作成出来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global class UserData{
</span><span class='line'>  global String user_id;
</span><span class='line'>  global HobbyData hobby
</span><span class='line'>}
</span><span class='line'>global class HobbyData{
</span><span class='line'>  global String name;
</span><span class='line'>  global String level;
</span><span class='line'>}
</span><span class='line'>global class resultData{
</span><span class='line'>  global Integer success;
</span><span class='line'>  global UserData User;
</span><span class='line'>  global String request_time;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>作成するときは以下のような感じで。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;HobbyData&gt; hobbies = new List&lt;HobbyData&gt;();
</span><span class='line'>HobbyData hobby1 = new HobbyData();
</span><span class='line'>hobby1.name = '映画';
</span><span class='line'>hobby1.level = '3';
</span><span class='line'>hobbies.add(hobby1);
</span><span class='line'>HobbyData hobby2 = new HobbyData();
</span><span class='line'>hobby2.name = 'サッカー';
</span><span class='line'>hobby2.level = '1';
</span><span class='line'>hobbies.add(hobby2);
</span><span class='line'>
</span><span class='line'>UserData user = new UserData();
</span><span class='line'>user.user_id = 'xxx';
</span><span class='line'>user.hobby = hobbies;
</span><span class='line'>
</span><span class='line'>resultData result = new resultData();
</span><span class='line'>result.success = 1;
</span><span class='line'>result.User = user;
</span><span class='line'>result.request_time = '2015-3-27 12:33';
</span><span class='line'>
</span><span class='line'>return result;</span></code></pre></td></tr></table></div></figure>


<p>地道な作業にはなりますが、これでわりかし綺麗なJSONが返せました。<br/>
もっと簡単な方法があったらまた書きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[command+Qという危険なショートカットを変更する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/26/cmd-q/"/>
    <updated>2015-03-26T14:22:21+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/26/cmd-q</id>
    <content type="html"><![CDATA[<p>Chromeを使用している時に、タブを閉じようとショートカットである、<code>cmd + w</code>を押したつもりが、<br/>
手が滑って横の<code>Q</code>を押してしまいブラウザが落ちる…。</p>

<!-- more -->


<p>そんな事が結構あって、その度に机に突っ伏していたので、<br/>
ショートカットを変更出来ないものかと思い、調べて実行してみました。</p>

<p>まずは現状の確認。<br/>
以下の通り、アプリを閉じるショートカットは、<code>cmd+q</code>です。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/comd_q_01.jpg" alt="cmd+q" /></p>

<p>これを変更するには、<code>システム環境設定</code>から、<code>キーボード</code>を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/comd_q_02.jpg" alt="キーボード" /></p>

<p><code>ショートカット</code>のタブを選択し、<code>アプリケーション</code>のメニューを選択。<br/>
その下に出る、<code>+</code>をクリックして、ショートカットを追加。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/comd_q_03.jpg" alt="アプリケーション" /></p>

<p>ここで出てくる入力エリアにショートカットの名前を入力するが、<br/>
現状設定されているメニュー名を正確に入力する必要がある。<br/>
Chromeを終了の場合は、以下。</p>

<pre><code>Google Chrome を終了
</code></pre>

<p><img src="http://kayakuguri.github.io/images/2015/03/comd_q_04.jpg" alt="メニュー名" /></p>

<p><code>アプリケーション</code>は、<code>Google Chrome</code>を選択し、<br/>
入力欄には、上記のメニュー名を入力。<br/>
ショートカットには、今回は、<code>option+command+Q</code>を設定。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/comd_q_05.jpg" alt="設定" /></p>

<p><code>追加</code>をクリックして追加すると、設定完了。<br/>
chrome側を見てもきっちり設定されている。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/comd_q_06.jpg" alt="ショートカット" /></p>

<p>これで押し間違いの悲劇がなくなりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]PG Backupsのアドオンが廃止されherokuコマンドに組み込まれる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/17/new-pg-backups/"/>
    <updated>2015-03-17T16:34:50+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/17/new-pg-backups</id>
    <content type="html"><![CDATA[<p>タイトルの通り。<br/>
今までアドオンとして提供されていたPG Backupsがアドオンとしての提供が廃止され、<br/>
標準のherokuコマンドに組み込まれた、とのこと。</p>

<!-- more -->


<p><a href="https://blog.heroku.com/archives/2015/3/11/pgbackups-levels-up">Heroku | PG Backups Levels Up</a></p>

<h2>スケジューリング</h2>

<p>今まではアドオンの種類で選んでいた定期バックアップですが、時間を指定しての定期バックアップが可能になったとのこと。<br/>
タイムゾーンも指定できる。</p>

<pre><code>heroku pg:backups schedule HEROKU_POSTGRESQL_GOLD --at="02:00 PDT" --app sushi
</code></pre>

<p>ちなみにデフォルトで１日に１回のバックアップが行われており、それをあえて止めるには、<code>heroku pg:backups unschedule DATABASE_URL --app sushi</code>とするとのこと。</p>

<h2>コマンド</h2>

<p>旧アドオン時に使用していたコマンドは使えなくなっており、新しく<code>pg:backups</code>が基本になったよう。  <br/>
以下、抜粋。</p>

<h3>バックアップの作成</h3>

<pre><code>//旧
$ heroku pgbackups:capture --app sushi

//新
$ heroku pg:backups capture --app sushi
</code></pre>

<h3>バックアップのダウンロード</h3>

<pre><code>//旧
$ heroku pgbackups:url

//新
$ heroku pg:backups public-url
</code></pre>

<p>その他は以下の対応ページにて。<br/>
<a href="https://devcenter.heroku.com/articles/mapping-pgbackups-commands">Converting PGBackups Add-on Commands | Heroku Dev Center</a></p>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/heroku-postgres-backups">Heroku PGBackups | Heroku Dev Center</a><br/>
<a href="https://devcenter.heroku.com/articles/heroku-postgresql">Heroku Postgres | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Route53を使用してGithubページにサブドメインを設定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/10/set-subdomain/"/>
    <updated>2015-03-10T23:51:46+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/10/set-subdomain</id>
    <content type="html"><![CDATA[<p>長らくgithub.ioのデフォルトドメインで運用してきましたが、<br/>
この度ふと思い立ってサブドメインを割り当ててみました。</p>

<!-- more -->


<p>もともとherokuで作成したブログに独自ドメインを割り当てており、<br/>
そのDNS設定にRoute53を使用していたので、今回もそれを使用してみる。<br/>
(というか、外部サービスを使用している事になるので、それしかできない)</p>

<p>簡単に全体の流れを説明すると、<br/>
Route53でCNAMEの設定をして、Githubページでリダイレクトする設定をかける、だけ。</p>

<h2>Route53の設定</h2>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain01.jpg" alt="route53" /></p>

<p>すでに設定している<code>Resouces</code>があるので、そちらをクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain02.jpg" alt="Resouces" /></p>

<p>設定しているドメインをクリック</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain03.jpg" alt="Domain Name" /></p>

<p>新しくCNAMEレコードを作成するので<code>Create Record Set</code>をクリック</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain04.jpg" alt="Create Record" /></p>

<p>右側に設定画面が表示されるので、設定するサブドメイン、TypeはCNAME、valueにgithub.ioのデフォルトドメインを入れる。<br/>
設定できたら、<code>Create</code>をクリックして作成。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain05.jpg" alt="Create" /></p>

<p>これでRoute53の設定は完了</p>

<h2>Github pagesの設定</h2>

<p><strong>このブラウザから作成する方法は間違いでした。下部に正しい方法を記述しています</strong></p>

<p>githubページにアクセスされた際にリダイレクトさせる設定は簡単で、<br/>
masterリポジトリ直下に<code>CNAME</code>というファイルを設置するだけ。<br/>
もちろんgitで追加してもいいけれど、ブラウザからGUIで追加してみる。</p>

<p>設定したいGithubページのリポジトリに行き、masterブランチを選択し、+マークをクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain06.jpg" alt="Create file" /></p>

<p>名前は<strong>大文字</strong>で<code>CNAME</code>。<br/>
内容は、設定したいサブドメイン。<code>http://</code>は必要なし。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain07.jpg" alt="CNAME" /></p>

<p>正しく設定されたかどうかを確認するには、リポジトリの<code>setting</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain08.jpg" alt="setting" /></p>

<p><code>GitHub Pages</code>の欄で設定したドメインが表示されていればOK。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain09.jpg" alt="github pages" /></p>

<p>DNSが浸透するまでに少し時間がかかるので気長に待ちましょう。。<br/>
(反映されるまでページにアクセス出来なくなってしまいますが…)</p>

<h2>正しいCNAMEファイルの作り方</h2>

<p>すみません、上記、ブラウザから<code>CNAME</code>ファイルを作成する方法は間違いでした。<br/>
というのも、<code>rake gen_deploy</code>した際に<code>source</code>リポジトリからdeployしたデータを<code>master</code>ブランチにpushしているようで、<br/>
その際にブランチ側でファイルを作成してしまうと差異が出来てpushが出来なくなってしまいました。</p>

<p>なので、以下の方法で強制的にpushを試みると、当然、ブラウザ上で作成したCNAMEが消えてしまいました。<br/>
<a href="http://qiita.com/takuma7/items/2d6f6e786eb6c0afbefb">Octopressでrake deployした際にrejectedされた場合の対処 &ndash; Qiita</a></p>

<p>なのでローカルで作成してやる必要がありますが、その場所が、<code>source/</code>以下となるようです。<br/>
<code>source/CNAME</code>でファイルを作成し、同じようにサブドメインのみを記述します。</p>

<p>その状態で<code>gen_deploy</code>してやりブラウザ上で確認すると見事、masterブランチ上の直下にCNAMEファイルが作成されました。<br/>
これでOKなはず</p>

<h2>参考</h2>

<p>公式のチュートリアルが英語だけど一番わかりやすいかも。<br/>
<a href="https://help.github.com/articles/adding-a-cname-file-to-your-repository/">Adding a CNAME file to your repository</a></p>

<p>その他<br/>
<a href="http://blog.hello-world.jp.net/git-2/2612/">GitHub Pagesで独自ドメインを使う | hello-world.jp.net</a><br/>
<a href="http://tech.tanaka733.net/entry/2013/09/15/%E3%81%8A%E5%90%8D%E5%89%8D.com_%E3%81%A7%E5%8F%96%E3%81%A3%E3%81%9F%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%82%92_Amazon_Route53%E3%81%A7%E7%AE%A1%E7%90%86%E3%81%97%E3%80%81%E3%82%B5%E3%83%96%E3%83%89">お名前.com で取ったドメインを Amazon Route53で管理し、サブドメインをはてなブログに割り当てるまで &ndash; 銀の光と碧い空</a><br/>
<a href="http://blog.shiroyama.us/blog/2014/02/26/octopress/">エンジニアのブログは Octopress が最適 &ndash; $shiroyama->($blog);</a></p>

<p><a href="http://aws.amazon.com/jp/route53/">Amazon Route53</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ビュー画面に出るチャターフォローボタンを非表示にする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/10/chatter-follow/"/>
    <updated>2015-03-10T16:13:23+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/10/chatter-follow</id>
    <content type="html"><![CDATA[<p>キャンペーンやリードなどのビュー画面を表示した時にアクションの列に表示される、<br/>
緑の＋ボタンは、このリード(やキャンペーンなど)をチャターでフォローする、というボタンなのですが、<br/>
特に使用しないので非表示にする方法を調べました。</p>

<!-- more -->


<p>このボタンを非表示にしたい。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/chatter1.jpg" alt="チャターフォローボタン" /></p>

<p>これは、フィード追跡、という機能で制御できます。<br/>
<code>カスタマイズ</code> &ndash;> <code>Chatter</code> &ndash;> <code>フィード追跡</code> を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/chatter2.jpg" alt="フィード追跡" /></p>

<p>追跡をやめたいオブジェクトを選択します。<br/>
上部にある、「フィード追跡の有効化」のチェックを外します。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/chatter3.jpg" alt="" /></p>

<p>保存します。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/chatter4.jpg" alt="" /></p>

<p>これでビュー画面からボタンが非表示になりました。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/chatter5.jpg" alt="" /></p>

<p>このフィード追跡機能はフォローしたレコードにどういう変更があった時に通知するか、を設定できるので、<br/>
上手く使えば便利になるのかもしれません。</p>
]]></content>
  </entry>
  
</feed>
