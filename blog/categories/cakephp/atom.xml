<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cakephp | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/cakephp/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-04-20T12:04:29+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[CakePHP]ページタイトルを設定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/20/cakephp-pagetitle/"/>
    <updated>2015-04-20T11:16:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/20/cakephp-pagetitle</id>
    <content type="html"><![CDATA[<p>変な所でハマってしまったのでメモ。</p>

<!-- more -->


<p>cakephpでタイトルの設定をするべくググっていると、どうやら以下で変更が出来る、とのこと。</p>

<pre><code>$this-&gt;set('title_for_layout', 'ページタイトル');
</code></pre>

<p>しかし一向に反映されない。<br/>
それもそのはずで、デフォルトのテンプレート内の<code>title</code>タグ部分を変更してしまっていて、<br/>
固定にしていたので変更が効かなかった。<br/>
そもそも、<code>$this-&gt;set</code>はviewに変数セットするためだけの関数なので、View側と記述を合わせれば<code>title_for_layout</code>である必要がない、ということになる。</p>

<p>ちなみデフォルトテンプレートの初期設定は以下になっているよう。<br/>
<a href="http://ameblo.jp/itboy/entry-11510932141.html">http://ameblo.jp/itboy/entry-11510932141.html</a></p>

<p><code>
&lt;title&gt;
&lt;/title&gt;
</code></p>

<h2>参考</h2>

<p><a href="http://book.cakephp.org/2.0/ja/views.html#view-layouts">ビュー &mdash; CakePHP Cookbook 2.x ドキュメント &ndash; レイアウト</a><br/>
<a href="http://www.t-net.ne.jp/~cyfis/cakephp/controller/pageTitle.html">ページタイトルを設定する &ndash; CakePHPの部屋</a><br/>
<a href="http://satoshi14.hatenablog.com/entry/2013/05/13/125421">CakePHP ページタイトルを一括管理する方法 &ndash; Autumn Like Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePHP]400系エラーが発生した場合にトップページにリダイレクトさせる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/13/cake-php-404-redirect/"/>
    <updated>2015-04-13T15:35:00+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/13/cake-php-404-redirect</id>
    <content type="html"><![CDATA[<p>ググると色々と方法が出てくるので今更ですが、<br/>
記事によって微妙に違ったので、最終的に上手くいったものをメモ。</p>

<!-- more -->


<p>cakephpがエラーをハンドリングしているControllerは以下。<br/>
<code>/lib/Cake/Error/ExceptionRenderer.php</code></p>

<p>この中の、219行目あたりにある、<code>error400</code>の処理が400系エラー時の処理にあたる。<br/>
なので、これをオーバーライドしてやる形でリダイレクト処理を書く。<br/>
(直接編集してもいいが、コアシステムになるのでなるべく触らないほうがよさげ)</p>

<p>まずエラーの際の処理をオーバーライドするためのクラスファイルを作成。<br/>
<code>/lib/Cake/Error/AppExceptionRenderer.php</code></p>

<p>```
&lt;?php
App::uses(&lsquo;ExceptionRenderer&rsquo;, &lsquo;Error&rsquo;);</p>

<p>class AppExceptionRenderer extends ExceptionRenderer {</p>

<pre><code>public function error400($error) { // 400番台のエラー時に呼ばれるメソッドを上書き
    $this-&gt;controller-&gt;redirect(array('controller' =&gt; 'users', 'action' =&gt; 'index'), 301);
}
</code></pre>

<p>}
```</p>

<p>この時に注意点は、<code>redirect</code>関数を呼び出すときに、<code>$this-&gt;controller</code>経由で呼び出さないとエラーになってしまった。<br/>
<code>$this-&gt;redirect()</code>ではダメだった。</p>

<p>で、coreクラスでエラー時に呼び出すクラスを作成したクラスに変更。</p>

<p><code>/app/Config/core.php</code> 79行目付近</p>

<p><code>
'renderer' =&gt; 'ExceptionRenderer',
↓↓
'renderer' =&gt; 'AppExceptionRenderer',
</code></p>

<p>後はコントローラーなどがないページへアクセスすれば、指定のページにリダイレクトが発生する。</p>

<h3>参考</h3>

<p><a href="https://www.markernet.co.jp/blog/2014/06/12/post-1622/">CakePHP2.Xで404 Not Foundエラーをリダイレクトする方法 | WEB制作ブログ</a><br/>
<a href="http://studio-faust.com/programming/258/">CakePHP2 404エラーの場合にトップページにリダイレクト | Web Studio Faust</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakaPHP]ラジオボタンの必須チェック]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/06/cakephp-radio-validation/"/>
    <updated>2015-04-06T12:58:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/06/cakephp-radio-validation</id>
    <content type="html"><![CDATA[<p>またもやバリデーションネタ。<br/>
ラジオボタンにたいして未選択のチェックを入れる方法。</p>

<!-- more -->


<p>モデルのバリデーションルールに、<code>'required' =&gt; true</code>とかを入れればよいだけかとおもいきや、なかなか一筋縄ではいかなった。</p>

<h3>&lsquo;required&rsquo; => true</h3>

<p><code>'required' =&gt; true</code>を設定しただけではバリデーションルールが適用されないよう。<br/>
ルールを同時に設定する必要があるとか。<br/>
このオプションの意味は、指定のキーデータがない場合にチェックされるよう。(たぶん)</p>

<p>ルールには空だとエラー、ということで、<code>notEmpty</code>を追加。<br/>
これで必須のチェックのみは完了。</p>

<h3>required属性</h3>

<p>モデルでバリデーションを指定すると、自動的にinputタグの属性に、<code>required</code>が追加されてしまう。<br/>
このまま送信しようとすると、Chrome限定だと思うが、エラーが出た送信出来ない。</p>

<blockquote><p>An invalid form control with name=&lsquo;xxx&rsquo; is not focusable.</p></blockquote>

<p>Chromeでは<code>required</code>属性が入ったinputでデータがなかった場合は、吹き出しのようなものを出すような仕様になっているが、<br/>
radioボタンの場合はその吹き出しを出す場所がなくてエラーになってしまうみたい。</p>

<h4>回避方法</h4>

<p>回避方法はいくつかあるよう。</p>

<p>１）<br/>
なのでradioボタンの場合はこの属性を入れてはいけない。<br/>
cakeの場合、オプションに<code>'required' =&gt; false</code>を指定してやることで出さないように出来た。</p>

<p>２）<br/>
<code>form</code>タグの生成時に<code>novalidate</code>をtrueでセットしてやればその中のinputタグには、<code>required</code>属性がつかなくなるよう。<br/>
全部にセット出来るという意味ではこれが一番お手軽かも。</p>

<h3>ソース</h3>

<p>最終的なソースの抜粋は以下。</p>

<h4>モデル</h4>

<p>```
&lsquo;radio_data&rsquo; => array(</p>

<pre><code>array(
    'rule' =&gt; 'notEmpty',
    'message' =&gt; '選択して下さい'
),
</code></pre>

<p>)
```</p>

<h4>ビュー</h4>

<p>```
&lt;?php echo $this->Form->input(&lsquo;radio_data&rsquo;, array(</p>

<pre><code>'type' =&gt; 'radio',
'options' =&gt; array('OK', 'NG'),
'required' =&gt; false
</code></pre>

<p>));?>
```</p>

<p>もしくは、</p>

<p>```
&lt;?php echo $this->Form->create(&lsquo;Model&rsquo;, array(&lsquo;novalidate&rsquo; => true));  ?>
<del>中略</del>
&lt;?php echo $this->Form->input(&lsquo;radio_data&rsquo;, array(</p>

<pre><code>'type' =&gt; 'radio',
'options' =&gt; array('OK', 'NG'),
</code></pre>

<p>));?>
```</p>

<h3>参考</h3>

<p><a href="http://stackoverflow.com/questions/7168645/invalid-form-control-only-in-google-chrome">html &ndash; &quot;Invalid form control&quot; only in Google Chrome &ndash; Stack Overflow</a><br/>
<a href="http://d.hatena.ne.jp/cakephper/20130211/1360589926">CakePHP2.3からinputタグにhtml5のrequired属性がつくようになった &ndash; cakephperの日記(CakePHP, Laravel, PHP)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePHP]URLからパラメータを受け取る]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/03/cakephp-routing-params/"/>
    <updated>2015-04-03T14:37:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/03/cakephp-routing-params</id>
    <content type="html"><![CDATA[<p>cake記法？で書かれたURLからパラメータを取得するメモ。</p>

<!-- more -->


<h2>コントローラーのみで制御</h2>

<p>cakephpでのURLの基本は以下。</p>

<blockquote><p>コントローラー名/アクション名</p></blockquote>

<p>これにパラメータをつけたければ、その後ろに並べるのみ。</p>

<blockquote><p>コントローラー名/アクション名/パラメータ1/パラメータ2</p></blockquote>

<p>このパラメータを取得する方法は以下。</p>

<pre><code>//URL - ctrl/act/param1/param2

$this-&gt;params['pass'][0]; //param1
$this-&gt;params['pass'][1]; //param2
</code></pre>

<p>で、指定の名前を付けたい場合は、以下のように。</p>

<blockquote><p>コントローラー名/アクション/パラメータ名1:パラメータ/パラメータ名2:パラメータ</p></blockquote>

<pre><code>//URL - ctrl/act/param1:hoge/param2:fuga

$this-&gt;params['named']['param1'];
$this-&gt;params['named']['param2'];
</code></pre>

<p>で、View側でこのリンクを作る方法は以下。</p>

<p><code>
&lt;?php echo $this-&gt;Html-&gt;link('リンクテキスト', array(
  'controller' =&gt; 'ctrl',
  'action' =&gt; 'act',
  'param1' =&gt; 'hoge'
)) ?&gt;
</code></p>

<p>これで上記の、<code>/ctrl/act/param1:hoge</code>が生成される</p>

<h2>ルーティング</h2>

<p>このままだとURLが冗長になるので、ルーティングを設定して、スッキリさせる。<br/>
さらに予めパラメータ名を指定してやる。</p>

<h4>ルーティング</h4>

<pre><code>Router::connect('/ctrl/act/:param1', array('controller' =&gt; 'ctrl', 'action' =&gt; 'act'));
</code></pre>

<p>こうすると、上記で記述したリンクを貼ると、以下のURLが生成される。</p>

<pre><code>/ctrl/act/hoge
</code></pre>

<p>これを取得するには以下。</p>

<pre><code>$this-&gt;params['param1']
</code></pre>

<p>これの方が見た目も取得方法もすっきりしててよさげ。</p>

<h2>参考</h2>

<p><a href="http://creazy.net/2009/05/cakephp_routing.html">http://creazy.net/2009/05/cakephp_routing.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePHP]Transitionコンポーネントでバリデーションを効かせるモデルを指定]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/01/cakephp-transition-validate/"/>
    <updated>2015-04-01T19:22:30+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/01/cakephp-transition-validate</id>
    <content type="html"><![CDATA[<p>またバリデーションネタ。<br/>
cakephpでフォーム作成の際に、Transitionコンポーネントを使用するとすこぶる便利。<br/>
以下が使い方としてはわかりやすかった。<br/>
<a href="http://endoyuta.com/2013/05/18/cakephp-transition%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%881-0/">cakePHP Transitionコンポーネント &ndash; Logicky Blog</a></p>

<!-- more -->


<p>で、その中で、入力画面から確認画面に遷移する際に指定したバリデーションルールを適用させたかった。<br/>
たいていのサイトでは、<code>$this-&gt;Transition-&gt;checkData('xxx')</code>を使えばよい、と書いてあったのだが、それだと効かなかった。<br/>
原因を探していると、どうやら使用しているコントローラーで複数のモデルを使用していると効かないよう。<br/>
そんなときは<code>checkData</code>の第２引数でモデルを明示的に指定してやると効くようになった。</p>

<p>```
class FormController extends AppController
{</p>

<pre><code>public $uses = array('User', 'Hoge', 'Fuga');

public function input(){
    $this-&gt;Transition-&gt;checkData('confirm','Hoge');
    ...
}
</code></pre>

<p>}
```</p>

<p>上記のように書くと、<code>Hoge</code>モデルで記述したバリデーションが適用される。<br/>
ここを配列にして複数のモデルを指定してやることも可能だそう。</p>

<p><a href="http://d.hatena.ne.jp/kunit/20101005#1286265311">[PHP][CakePHP] Transitionコンポーネント &ndash; checkData() について</a></p>

<p>それにしてもこのコンポーネントはびっくりするくらい便利。ほんとに。</p>
]]></content>
  </entry>
  
</feed>
