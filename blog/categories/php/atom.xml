<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-04-30T10:50:52+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Salesforce]承認申請のアウトバウンドメッセージをPHPで受け取る]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/28/approval-process-outbound-massage/"/>
    <updated>2015-04-28T20:20:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/28/approval-process-outbound-massage</id>
    <content type="html"><![CDATA[<p>salesforceからのアウトバウンドメッセージの内容をPHPで受け取ってみた。</p>

<!-- more -->


<h2>アウトバウンドメッセージの設定</h2>

<p>前回作成したものの申請時のアクション部分に<code>アウトバウンドメッセージ</code>を追加。<br/>
<img src="/images/2015/04/outbound01.jpg" alt="" /></p>

<p>以下のように設定した。<br/>
<img src="/images/2015/04/outbound02.jpg" alt="" /></p>

<p>設定完了<br/>
<img src="/images/2015/04/outbound03.jpg" alt="" /></p>

<h2>PHPで受け取る</h2>

<p>アウトバウンドメッセージは<code>SOAP</code>で通信が行われる。<br/>
なので、XML。<br/>
以下のようにアクセスが記録されていた。</p>

<pre><code>at=info method=POST path="/liam_dnes.php?id=1" host=shrouded-island-xxxx.herokuapp.com request_id=01b99464-c9dc-4e15-aa19-xxxxxxx fwd="xxx.xxx.78.8" dyno=web.1 connect=1ms service=4ms status=200 bytes=189
</code></pre>

<p>どうやらPOSTでアクセスされているよう。<br/>
<code>$_POST</code>のままでは取得できなかった。<br/>
どうやら生のPOSTデータを取得する必要があるらしい。</p>

<p>以下で取得した。</p>

<pre><code>$data = file_get_contents( 'php://input' );
</code></pre>

<p>取得すると、以下のようなXMLが取得できた。</p>

<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;soapenv:Envelope xmlns:soapenv=&ldquo;<a href="http://schemas.xmlsoap.org/soap/envelope/">http://schemas.xmlsoap.org/soap/envelope/</a>&rdquo; xmlns:xsd=&ldquo;<a href="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</a>&rdquo; xmlns:xsi=&ldquo;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&rdquo;></p>

<pre><code>&lt;soapenv:Body&gt;
    &lt;notifications xmlns="http://soap.sforce.com/2005/09/outbound"&gt;
        &lt;OrganizationId&gt;00D10000000Zyxxxxx&lt;/OrganizationId&gt;
        &lt;SessionId xsi:nil="true"/&gt;
        &lt;PartnerUrl&gt;https://ap.salesforce.com/services/Soap/u/33.0/00D100000xxxxx&lt;/PartnerUrl&gt;
        &lt;ActionId&gt;04k100000008STGAA2&lt;/ActionId&gt;
        &lt;EnterpriseUrl&gt;https://ap.salesforce.com/services/Soap/c/33.0/00D100000xxxxx&lt;/EnterpriseUrl&gt;
        &lt;Notification&gt;
            &lt;Id&gt;04l1000000xxxxxx&lt;/Id&gt;
            &lt;sObject xsi:type="sf:Opportunity" xmlns:sf="urn:sobject.enterprise.soap.sforce.com"&gt;
                &lt;sf:Id&gt;0061000000cxxxxx&lt;/sf:Id&gt;
                &lt;sf:Name&gt;アウトバウンドのテスト商談&lt;/sf:Name&gt;
                &lt;sf:StageName&gt;Prospecting&lt;/sf:StageName&gt;
                &lt;sf:IsClosed&gt;false&lt;/sf:IsClosed&gt;
            &lt;/sObject&gt;
        &lt;/Notification&gt;
    &lt;/notifications&gt;
&lt;/soapenv:Body&gt;
</code></pre>

<p>&lt;/soapenv:Envelope>
```</p>

<p>アウトバウンドの設定は以下のような形。</p>

<p>ここからXMLをパースして、名前など設定した値を取得するには以下。</p>

<p>```
&lt;?php</p>

<p>$data = file_get_contents(&lsquo;php://input&rsquo;);
$xml = simplexml_load_string($data);</p>

<p>//ID
$notification = $xml->children(&lsquo;<a href="http://schemas.xmlsoap.org/soap/envelope/">http://schemas.xmlsoap.org/soap/envelope/</a>&rsquo;)&ndash;>Body->children(&lsquo;<a href="http://soap.sforce.com/2005/09/outbound">http://soap.sforce.com/2005/09/outbound</a>&rsquo;)&ndash;>notifications->Notification;
echo $notification->Id;</p>

<p>//パラメータ
$params = $notification->sObject->children(&lsquo;urn:sobject.enterprise.soap.sforce.com&rsquo;);
echo $params->Id;
echo $params->Name;
echo $params->IsClosed;
```</p>

<h2>参考</h2>

<p><a href="http://php.net/manual/ja/wrappers.php.php#wrappers.php.input">php://input</a><br/>
<a href="http://ivystar.jp/programming/php/what-is-phpinput/">「php://input」とは何？－POSTの生データ？ | アイビースター</a><br/>
<a href="https://amigotechnotes.wordpress.com/2013/11/16/parse-xml-with-namespace-by-simplexml-in-php/">Parse XML with namespace by SimpleXML in PHP | Amigo&#039;s Technical Notes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel5をpostgresqlでHerokuにデプロイ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/21/laravel5-on-heroku/"/>
    <updated>2015-04-21T10:59:17+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/21/laravel5-on-heroku</id>
    <content type="html"><![CDATA[<p>Laravel5をherokuに入れてみました。<br/>
ブラウザやディレクトリでの操作は一切なしで、黒い画面のみで作成してみました。</p>

<!-- more -->


<h2>mcrypt</h2>

<p>ローカルにてインストールしようとするとないと怒られたので導入。<br/>
また、PHPのバージョンが古い場合は、<a href="http://kayamemo.mrlittlebig.com/blog/2015/04/15/mac-update-php/">アップデートが必要</a>。</p>

<p>```
$ php -v                                                                                                           [ruby-2.1.2]
PHP 5.6.7 (cli) (built: Mar 22 2015 19:03:55)
Copyright &copy; 1997-2015 The PHP Group
Zend Engine v2.6.0, Copyright &copy; 1998-2015 Zend Technologies</p>

<p>$ brew search mcrypt                                                                                               [ruby-2.1.2]
libtomcrypt    mcrypt         php53-mcrypt   php54-mcrypt   php55-mcrypt   php56-mcrypt</p>

<p>$ brew install php56-mcrypt
&hellip;略&hellip;
==> Summary
  /usr/local/Cellar/php56-mcrypt/5.6.7: 3 files, 56K, built in 116 seconds
```</p>

<h2>laravelの導入</h2>

<p>インストール</p>

<p><code>
$ composer create-project laravel/laravel --prefer-dist laravel-sample-on-heroku
...略...
$ cd laravel-sample-on-heroku
</code></p>

<p>ドキュメントルートの設定</p>

<p><code>
$ touch Procfile
$ echo 'web: vendor/bin/heroku-php-apache2 public' &gt;&gt; Procfile
</code></p>

<p>Gitを作成</p>

<p><code>
$ git init
$ git add .
$ git commit -m 'init laravel'
</code></p>

<p>herokuアプリの作成</p>

<p><code>
$ heroku create laravel-sample-on-heroku
Creating laravel-sample-on-heroku... done, stack is cedar-14
https://laravel-sample-on-heroku.herokuapp.com/ | https://git.heroku.com/laravel-sample-on-heroku.git
Git remote heroku added
</code></p>

<p>このままデプロイすると、<code>package.json</code>がルートディレクトリにあるため、<code>nodejs</code>のアプリになってしまう。<br/>
なので、phpのビルドパックを追加。<br/>
<a href="https://github.com/heroku/heroku-buildpack-php">https://github.com/heroku/heroku-buildpack-php</a></p>

<p><code>
$ heroku config:set BUILDPACK_URL=https://github.com/heroku/heroku-buildpack-php
Setting config vars and restarting laravel-sample-on-heroku... done, v4
BUILDPACK_URL: https://github.com/heroku/heroku-buildpack-php
</code></p>

<blockquote><p>アプリの作成と同時にするには、<code>create</code>の後に、<code>--buildpack URL</code>を追加してやると一回で設定できる。<br/>
$ heroku create laravel-sample-on-heroku &mdash;buildpack URL xxx</p></blockquote>

<p>すでにリモートリポジトリに追加されているので、pushしてデプロイ。</p>

<pre><code>$ git push heroku master
</code></pre>

<p>ページを開くとすでに動作する状態。</p>

<pre><code>$ heroku open
</code></pre>

<p>完了！</p>

<h2>DBの設定</h2>

<p>アドオンを追加(無料)</p>

<pre><code>$ heroku addons:add heroku-postgresql:dev
</code></pre>

<p>DBの情報を取得</p>

<pre><code>$ heroku config | grep HEROKU_POSTGRESQL
HEROKU_POSTGRESQL_CRIMSON_URL: postgres://UserName:Password@Host.compute-1.amazonaws.com:Port/DatabaseName  
</code></pre>

<p>生成したDBをプライマリーに設定</p>

<pre><code>$ heroku pg:promote HEROKU_POSTGRESQL_CRIMSON_URL
Promoting HEROKU_POSTGRESQL_CRIMSON_URL (DATABASE_URL) to DATABASE_URL... done
</code></pre>

<p>ここからはファイル編集</p>

<pre><code>$ vi config/database.php
---
//29行目
'default' =&gt; 'mysql',
↓
'default' =&gt; 'pgsql',
---
//冒頭に追加
$url = parse_url(getenv("DATABASE_URL"));

$host = $url["host"];
$username = $url["user"];
$password = $url["pass"];
$database = substr($url["path"], 1);
---
//67行目から
'pgsql' =&gt; [
    'driver'   =&gt; 'pgsql',
    'host'     =&gt; $host,
    'database' =&gt; $database,
    'username' =&gt; $username,
    'password' =&gt; $password,
    'charset'  =&gt; 'utf8',
    'prefix'   =&gt; '',
    'schema'   =&gt; 'public',
],
</code></pre>

<p>pushしてデプロイ</p>

<pre><code>$ git add .
$ git commit -m 'setup Heroku PostgreSQL'
$ git push heroku master
</code></pre>

<p>最後に<a href="http://laravel3.kore1server.com/docs/database/migrations">マイグレーション</a>を実行</p>

<p><code>``
$ heroku run php artisan migrate
Running</code>php artisan migrate` attached to terminal&hellip; up, run.4728</p>

<hr />

<ul>
<li>  Application In Production!     *</li>
</ul>


<hr />

<p>Do you really wish to run this command? [y/N]y
Migration table created successfully.
Migrated: 2014_10_12_000000_create_users_table
Migrated: 2014_10_12_100000_create_password_resets_table
<code>``
</code>/auth/register<code>で、ユーザー登録画面。  
</code>/auth/login<code>でログイン。  
</code>/password/email`でパスワードリセットになる。<br/>
(メール送信は設定していないので出来ない)</p>

<p>一通りの設定はこれで完了！<br/>
あとはセッション保持に<a href="https://addons.heroku.com/memcachier">MemCachier</a>か<a href="https://addons.heroku.com/?q=redi">Redis To Go</a>の設定や、<br/>
メール送信用に<a href="https://addons.heroku.com/sendgrid">SendGrid</a>などが必要になると思う。</p>

<h2>サンプル</h2>

<p>作成したアプリは以下。</p>

<p><a href="http://laravel-sample-on-heroku.herokuapp.com">http://laravel-sample-on-heroku.herokuapp.com</a></p>

<h2>参考</h2>

<p><a href="http://qiita.com/MasatoYoshioka@github/items/1b4de4249dc40ff1d902">macosxのphpにmcryptをインストール &ndash; Qiita</a><br/>
<a href="http://www.slideshare.net/esolves/deploy-laravel-on-heroku">Deploy Laravel on Heroku</a><br/>
<a href="https://mattstauffer.co/blog/laravel-on-heroku-using-a-postgresql-database">Laravel on Heroku &ndash; Using a PostgreSQL database &ndash; MattStauffer.co</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[mac]macのPHPのバージョンをアップデートする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/15/mac-update-php/"/>
    <updated>2015-04-15T20:15:38+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/15/mac-update-php</id>
    <content type="html"><![CDATA[<p>とあるSDKをcomposer経由でインストールしようとすると、PHPのバージョンが古い、と怒られてしまった。<br/>
なので、macで5.6にしたメモ。</p>

<!-- more -->


<p>アップデート前。</p>

<p><code>
$ php -v
PHP 5.4.38 (cli) (built: Mar 19 2015 14:49:15)
Copyright (c) 1997-2014 The PHP Group
Zend Engine v2.4.0, Copyright (c) 1998-2014 Zend Technologies
</code></p>

<hr />

<p>基本的に以下のママ。<br/>
<code>homebrew</code>でインストールした。</p>

<p><a href="http://takemaru123.hatenablog.jp/entry/2014/11/27/224037">macにhomebrewでPHP5.6環境をインストールしてみる &ndash; たけまるの日記</a></p>

<p>まず、xcode-selectをインストールしておく。<br/>
(Xcode自体がインストールされていない場合はインストールが必要)<br/>
(理由はわかてない)</p>

<pre><code>$ xcode-select --install
</code></pre>

<p>すると、以下のメッセージが表示されて、ダイアログが表示された。</p>

<blockquote><p>xcode-select: note: install requested for command line developer tools</p></blockquote>

<p><img src="/images/2015/04/mac_php_update_1.png" alt="ダイアログ" /></p>

<p>インストール、を押すと規約同意画面に進み、インストールが始まる。</p>

<p><img src="/images/2015/04/mac_php_update_2.png" alt="規約同意" /><br/>
<img src="/images/2015/04/mac_php_update_3.png" alt="インストール中" /></p>

<p>インストール後に以下でhomebrewのリポジトリを作成。<br/>
(ここもよくわかってない)</p>

<pre><code>$ brew tap homebrew/php
$ brew tap homebrew/dupes
</code></pre>

<p>で、いよいよPHP5.6のインストール。</p>

<pre><code>$ brew install php56 --with-apxs2=/usr/sbin/apxs
~~~~~
==&gt; Summary
🍺  /usr/local/Cellar/php56/5.6.7: 500 files, 51M
</code></pre>

<p>で、ターミナルを再起動すると、無事、アップデートされました。</p>

<p><code>
$ php -v
PHP 5.6.7 (cli) (built: Mar 22 2015 19:03:55)
Copyright (c) 1997-2015 The PHP Group
Zend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebookのphp-sdk-v4をcomposerを使ってインストールした時のメモ]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/08/04/facebook-sdk-v4-composer/"/>
    <updated>2014-08-04T19:26:37+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/08/04/facebook-sdk-v4-composer</id>
    <content type="html"><![CDATA[<p>今更ながらFacebookのAPIがv2.0にアップデートされた事による<br/>
影響範囲の大きさにショックを受けています。</p>

<p><a href="http://kuneko.hatenadiary.com/entry/facebook_search_public_post">Facebookの全体公開投稿は2015年に完全に検索できなくなるかも &ndash; ku:neko ism</a><br/>
<a href="http://snowadays.jp/2014/05/2762">Facebookログイン Version2.0（アプリのパーミッション仕様変更）</a><br/>
<a href="http://qiita.com/hilotter/items/b88402505faeebbbce89">Facebook Graph API 2.0について &ndash; Qiita</a></p>

<!-- more -->


<p>で、新しいものに対応したアプリを作成するべく、<br/>
PHPのSDKをダウンロードしてきて、、と思ったのですが、composerに対応しているということで、<br/>
composerでインストールしてみることに。</p>

<p><a href="https://developers.facebook.com/docs/php/gettingstarted/4.0.0">Getting Started php-sdk-v4</a><br/>
この公式によると、以下のようにしてインストールする、だけ。</p>

<pre><code>{
  "require" : {
    "facebook/php-sdk-v4" : "4.0.*"
  }
}
</code></pre>

<p>しかしエラーが。</p>

<pre><code>Your requirements could not be resolved to an installable set of packages.
  Problem 1
- facebook/php-sdk-v4 4.0.9 requires php &gt;=5.4.0 -&gt; no matching package found.
</code></pre>

<p>バージョンの指定を、<code>4.0.9</code>としたり、<code>*</code>としてみても同じ。<br/>
ググってみると以下の情報に当たる。</p>

<p><a href="http://stackoverflow.com/questions/24269649/composer-not-installing-latest-facebook-php-sdk-due-to-multiple-php-versions">composer not installing latest facebook php sdk due to multiple php versions &ndash; Stack Overflow</a></p>

<p>どうやら、php-sdk-v4は、PHPのバージョンが5.4からの対応、なのだけれど、<br/>
PCにインストールしているPHPのバージョンが低いとエラーが出るらしい。</p>

<p>ターミナルからPHPのバージョンを調べてみると、きっちり、<code>5.3.28</code>。</p>

<pre><code>$ php -v
PHP 5.3.28 (cli) (built: Jan 23 2014 18:02:48)
</code></pre>

<p>調べてみると、下記が一番簡単そうだったので、この方法でインストールした。</p>

<p><a href="http://kimikimi714.hatenablog.com/entry/2013/07/06/233518">macのphpをアップデート &ndash; わすれっぽいきみえ</a></p>

<pre><code>$ curl -s http://php-osx.liip.ch/install.sh | bash -s 5.5
</code></pre>

<p>で、このままではデフォルトにはならないので、パスを通す、と。<br/>
<code>~/.bashrc</code>の冒頭に下記を追加しておいた。</p>

<pre><code>export PATH=/usr/local/php5/bin:$PATH
</code></pre>

<p>で、バージョンを再度確認してみると、無事、アップデートされていた。</p>

<pre><code>$ php -v
PHP 5.5.14 (cli) (built: Jun 28 2014 10:29:43)
</code></pre>

<p>で、再度、composerをインストールしてみると、無事、完了した。<br/>
これでようやく環境が整ったことになる。</p>

<pre><code>  - Installing facebook/php-sdk-v4 (4.0.9)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mailgun APIを使ってメールを送る Composer版]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/15/mailgunapi/"/>
    <updated>2014-07-15T14:13:12+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/15/mailgunapi</id>
    <content type="html"><![CDATA[<p>いくつか書いているmailgunを使用したメール送信の件ですが、<br/>
たぶん正しいと思われる方法がわかったのでメモしておきます。</p>

<!-- more -->


<h3>composerでインストール</h3>

<p><a href="https://github.com/mailgun/mailgun-php">mailgun/mailgun-php · GitHub</a></p>

<p>composerを使用して、ライブラリをインストールします。<br/>
Composerのインストールは以下などを参照に。<br/>
<a href="http://tech.basicinc.jp/php/2013/08/18/php_composer/">PHPのパッケージ管理Composerを使う</a></p>

<p>Windowsの場合は以下に書きました。<br/>
<a href="http://kayakuguri.github.io/blog/2014/07/15/win7-composer/">Windows7でComposerのインストール</a></p>

<p><code>composer.json</code>に以下のように記述。</p>

<pre><code>{
    "require": {
        "mailgun/mailgun-php": "~1.7.1"
    }
}
</code></pre>

<p>で、インストール。</p>

<pre><code>$ composer install
</code></pre>

<p>これでライブラリなどがダウンロードされ、mailgunの依存関係が出来上がります。</p>

<h3>Mailgun</h3>

<h4>インストール</h4>

<p>アドオンのインストール。</p>

<pre><code>$ heroku addons:add mailgun
</code></pre>

<h4>セットアップ</h4>

<p>PHPの冒頭で初期化して送信。<br/>
初期化するためにはAPIキーとドメインが必要。<br/>
これは環境変数に入っている。</p>

<pre><code>MAILGUN_API_KEY:       key-xxx
MAILGUN_SMTP_LOGIN:    postmaster@xxx.mailgun.org
MAILGUN_SMTP_PASSWORD: xxx
MAILGUN_SMTP_PORT:     587
MAILGUN_SMTP_SERVER:   smtp.mailgun.org
</code></pre>

<p>ドメインは、<code>MAILGUN_SMTP_LOGIN</code>の<code>@</code>より後ろ、になるので、それを使用する。</p>

<pre><code>require 'vendor/autoload.php';
use Mailgun\Mailgun;

$mgClient = new Mailgun(getenv('MAILGUN_API_KEY'));
$domain = getenv('MAILGUN_SMTP_LOGIN');
$domain = substr($domain, strpos($domain, '@') + 1);
</code></pre>

<h4>送信</h4>

<p>通常の送信は以下。</p>

<pre><code>$result = $mgClient-&gt;sendMessage($domain, array(
    'from'    =&gt; 'Excited User &lt;me@samples.mailgun.org&gt;',
    'to'      =&gt; 'Baz &lt;baz@example.com&gt;',
    'subject' =&gt; 'Hello',
    'text'    =&gt; 'Testing some Mailgun awesomness!'
));
</code></pre>

<h4>パラメータを個別に設定</h4>

<p>上記では送信時に一括で指定しているけれど、これを個別に設定するには、<br/>
<code>Message Builder</code>というものを使用します。<br/>
<a href="https://github.com/mailgun/mailgun-php/blob/master/src/Mailgun/Messages/README.md#usage---message-builder">Usage &ndash; Message Builder</a></p>

<p>上記のセットをバラすと以下のようになります。</p>

<pre><code>$msgBldr = $mgClient-&gt;MessageBuilder();
$msgBldr-&gt;setFromAddress('Excited User &lt;me@samples.mailgun.org&gt;');
$msgBldr-&gt;addToRecipient('Baz &lt;baz@example.com&gt;');
$msgBldr-&gt;setSubject('Hello');
$msgBldr-&gt;setTextBody('Testing some Mailgun awesomness!'); 
$result = $mgClient-&gt;post("{$domain}/messages", $msgBldr-&gt;getMessage(), $msgBldr-&gt;getFiles());
</code></pre>

<h4>キューにまとめて登録</h4>

<p>また、キューにまとめて登録する場合は、<code>Batch Message</code>を使用します。<br/>
<a href="https://github.com/mailgun/mailgun-php/blob/master/src/Mailgun/Messages/README.md#usage---batch-message">Usage &ndash; Batch Message</a></p>

<p>これを使用して、toを複数登録すると、それぞれのtoにバラバラに同じメールが送られます。</p>

<pre><code>$msgBldr = $mgClient-&gt;BatchMessage($domain);
$msgBldr-&gt;addToRecipient('test1 &lt;test1@example.com&gt;');
$msgBldr-&gt;addToRecipient('test2 &lt;test2@example.com&gt;');
// 他のパラメータ設定は同じ
$result = $msgBldr-&gt;finalize();
</code></pre>

<p><code>finalize</code>で、キューに登録されるようでした。</p>

<hr />

<p>今までのmailgun関連の記事はこちら</p>

<ul>
<li><a href="http://kayakuguri.github.io/blog/2014/02/17/send-mail-from-heroku-with-mailgun/">PHPでMailgunを使ってherokuでメール送信する</a></li>
<li><a href="http://kayakuguri.github.io/blog/2014/02/18/php-heroku-sendattachmail/">[PHP]herokuで添付ファイル付きメールを送る</a></li>
<li><a href="http://kayakuguri.github.io/blog/2014/02/19/attachment-use-mailgunapi/">[PHP][heroku]Mailgun APIを使って添付ファイルを送る</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
