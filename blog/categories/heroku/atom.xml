<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-04-03T14:52:24+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[heroku]PG Backupsのアドオンが廃止されherokuコマンドに組み込まれる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/17/new-pg-backups/"/>
    <updated>2015-03-17T16:34:50+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/17/new-pg-backups</id>
    <content type="html"><![CDATA[<p>タイトルの通り。<br/>
今までアドオンとして提供されていたPG Backupsがアドオンとしての提供が廃止され、<br/>
標準のherokuコマンドに組み込まれた、とのこと。</p>

<!-- more -->


<p><a href="https://blog.heroku.com/archives/2015/3/11/pgbackups-levels-up">Heroku | PG Backups Levels Up</a></p>

<h2>スケジューリング</h2>

<p>今まではアドオンの種類で選んでいた定期バックアップですが、時間を指定しての定期バックアップが可能になったとのこと。<br/>
タイムゾーンも指定できる。</p>

<pre><code>heroku pg:backups schedule HEROKU_POSTGRESQL_GOLD --at="02:00 PDT" --app sushi
</code></pre>

<p>ちなみにデフォルトで１日に１回のバックアップが行われており、それをあえて止めるには、<code>heroku pg:backups unschedule DATABASE_URL --app sushi</code>とするとのこと。</p>

<h2>コマンド</h2>

<p>旧アドオン時に使用していたコマンドは使えなくなっており、新しく<code>pg:backups</code>が基本になったよう。  <br/>
以下、抜粋。</p>

<h3>バックアップの作成</h3>

<pre><code>//旧
$ heroku pgbackups:capture --app sushi

//新
$ heroku pg:backups capture --app sushi
</code></pre>

<h3>バックアップのダウンロード</h3>

<pre><code>//旧
$ heroku pgbackups:url

//新
$ heroku pg:backups public-url
</code></pre>

<p>その他は以下の対応ページにて。<br/>
<a href="https://devcenter.heroku.com/articles/mapping-pgbackups-commands">Converting PGBackups Add-on Commands | Heroku Dev Center</a></p>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/heroku-postgres-backups">Heroku PGBackups | Heroku Dev Center</a><br/>
<a href="https://devcenter.heroku.com/articles/heroku-postgresql">Heroku Postgres | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]herokuのPostgreSQLでバージョンを指定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/04/heroku-postgres-version/"/>
    <updated>2015-03-04T17:38:54+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/04/heroku-postgres-version</id>
    <content type="html"><![CDATA[<p>herokuのpostgreSQLを入れる際にバージョンの指定が出来たのでメモ。</p>

<!-- more -->


<p><a href="https://devcenter.heroku.com/articles/heroku-postgresql#version-support-and-legacy-infrastructure">Version Support and Legacy Infrastructure &ndash; Heroku Postgres</a></p>

<p>選べるバージョン配下。</p>

<ul>
<li>9.4(beta)</li>
<li>9.3(デフォルト)</li>
<li>9.2</li>
<li>9.1</li>
</ul>


<p>指定して入れるためにはブラウザ上ではなく、コマンドラインからバージョンを指定して入れてやる必要がある。</p>

<p>まずはそのままデフォルトで入れてみる。<br/>
アプリを作るところから</p>

<p>```
$ heroku create
Creating fierce-woodland-3392&hellip; done, stack is cedar-14</p>

<p>$ heroku addons:add heroku-postgresql &mdash;app fierce-woodland-3392
Adding heroku-postgresql on fierce-woodland-3392&hellip; done, v4 (free)
Attached as HEROKU_POSTGRESQL_CRIMSON_URL
Database has been created and is available
 ! This database is empty. If upgrading, you can transfer
 ! data from another database with pgbackups:restore.
Use <code>heroku addons:docs heroku-postgresql</code> to view documentation.</p>

<p>$ heroku pg:info &mdash;app fierce-woodland-3392
=== HEROKU_POSTGRESQL_CRIMSON_URL (DATABASE_URL)
Plan:        Hobby-dev
Status:      Available
Connections: 0/20
PG Version:  9.3.6
Created:     2015-03-04 08:43 UTC
Data Size:   6.4 MB
Tables:      0
Rows:        0/10000 (In compliance)
Fork/Follow: Unsupported
Rollback:    Unsupported
```</p>

<p>アプリを作って、postgresqlの無料版を指定なしで入れて、情報を確認している。<br/>
情報内にある通り、バージョンは、<code>9.3.6</code>。</p>

<p>次に指定ありで。</p>

<p>```
$ heroku create
Creating polar-dusk-1475&hellip; done, stack is cedar-14
<a href="https://polar-dusk-1475.herokuapp.com/">https://polar-dusk-1475.herokuapp.com/</a> | <a href="https://git.heroku.com/polar-dusk-1475.git">https://git.heroku.com/polar-dusk-1475.git</a></p>

<p>$ heroku addons:add heroku-postgresql &mdash;version=9.1 &mdash;app polar-dusk-1475
Adding heroku-postgresql on polar-dusk-1475&hellip; done, v4 (free)
Attached as HEROKU_POSTGRESQL_PURPLE_URL
Database has been created and is available
 ! This database is empty. If upgrading, you can transfer
 ! data from another database with pgbackups:restore.
Use <code>heroku addons:docs heroku-postgresql</code> to view documentation.</p>

<p>$ heroku pg:info &mdash;app polar-dusk-1475
=== HEROKU_POSTGRESQL_PURPLE_URL (DATABASE_URL)
Plan:        Hobby-dev
Status:      Available
Connections: 0/20
PG Version:  9.1.11
Created:     2015-03-04 08:45 UTC
Data Size:   5.9 MB
Tables:      0
Rows:        0/10000 (In compliance)
Fork/Follow: Unsupported
Rollback:    Unsupported
```</p>

<p>結果は見ての通り。<code>9.1.11</code>で入っている。</p>

<p>実際に指定している箇所は、addonの追加の後ろにオプションとして、<code>--version=9.1</code>を追加してやるだけ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]herokuでhttpでのアクセスをhttpsへリダイレクトさせる設定]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/03/heroku-force-https/"/>
    <updated>2015-03-03T02:05:27+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/03/heroku-force-https</id>
    <content type="html"><![CDATA[<p>htaccessを使用して、httpでのアクセスを全てhttpsへリダイレクトさせる設定を書いた際に、<br/>
少し悩んだのでメモ。</p>

<!-- more -->


<h2>通常のリダイレクト</h2>

<p>ググるなどして調べるとまず出てくるのがこの方法。<br/>
実際、vagrantなんかでのローカル環境だとこれで問題なくリダイレクト出来た。</p>

<p><code>
RewriteEngine On
RewriteCond %{SERVER_PORT} !^443$
RewriteRule ^.*$ https://%{SERVER_NAME}%{REQUEST_URI} [L,R]
</code></p>

<p>もしくはこれ。</p>

<p><code>
RewriteEngine on
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R,L]
</code></p>

<p><strong>参考サイト</strong><br/>
<a href="http://takuya-1st.hatenablog.jp/entry/20101217/1292579757">HTTPSを強制する簡単な設定(htaccess)</a><br/>
<a href="http://sachips.byeto.jp/server/htaccess_http_ssl.html">.htaccessファイルでHTTPアクセスをSSLにリダイレクトする方法とその逆も</a></p>

<p>しかし、全く同じファイルをherokuにアップするとリダイレクトループが発生し、動かなくなってしまった。</p>

<h2>heroku(aws)環境でのリダイレクト</h2>

<p>herokuはaws上で動いています。<br/>
で、awsなどで使われている負荷分散ための処理、ロードバランサが設定されていると？上記のエラーは起こってしまうようです。</p>

<p><strong>参考ページ</strong><br/>
<a href="http://qiita.com/tkosuga@github/items/ee51fcd6c047b19856be">apache(htaccess)でリバースプロキシー経由のHTTP/HTTPS転送</a><br/>
<a href="http://qa.atmarkit.co.jp/q/3221">一部のページでのSSLの設定に困っています</a><br/>
<a href="http://d.hatena.ne.jp/komiyak/20130807/1375845025">AWS Elastic Load Balancer と Apache を使って HTTPS(SSL) 通信を行うための設定方法</a></p>

<p>これを回避するには、上記参考サイトにもあるように、<code>HTTP:X-Forwarded-Proto</code>を見て転送をかけるかどうかを判断してやることでループしないように出来るみたい。</p>

<p>実際に設定した内容は以下。</p>

<p><code>
RewriteEngine on
RewriteCond %{HTTP:X-Forwarded-Proto} ^http$
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R,L]
</code></p>

<p>これで無事、動作しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]SSL証明書を更新する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/20/certs-update/"/>
    <updated>2015-02-20T17:58:29+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/20/certs-update</id>
    <content type="html"><![CDATA[<p>すでにheroku上でsslを導入していて、<br/>
その証明書を更新する、という前提です。</p>

<!-- more -->


<h2>準備</h2>

<p>ファイルの準備は導入の時と同じです。<br/>
以前に書いたものを参考にどうぞ。</p>

<p><a href="http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain/">[heroku]herokuでのSSL設定とカスタムサブドメインの適用方法</a></p>

<p>準備するファイルは、以下の2つです。</p>

<ul>
<li>server.crt</li>
<li>server.key</li>
</ul>


<h2>更新</h2>

<p>以下で更新が出来ます。</p>

<pre><code>$ heroku certs:update server.crt server.key
</code></pre>

<p>SSL導入時点で割り当てられるCNAME用のコモンネームが変わってしまうんじゃないかと思いましたが大丈夫でした。<br/>
以下、ログ。</p>

<p>```
Resolving trust chain&hellip; done</p>

<p> !    WARNING: Potentially Destructive Action
 !    This command will change the certificate of endpoint xxx-9999.herokussl.herokussl.com on app-name.
 !    To proceed, type &ldquo;app-name&rdquo; or re-run this command with &mdash;confirm app-name</p>

<blockquote><p>app-name
Updating SSL Endpoint xxx-9999.herokussl.com for app-name&hellip; done
Updated certificate details:
Common Name(s): example.com
Expires At:     (期限)
Issuer:         (SSL内容)
Starts At:      (開始日)
Subject:        (SSL内容)
SSL certificate is verified by a root authority.
```</p></blockquote>

<p>途中で重要な変更ってことで、確認が入るので、アプリ名をタイプして実行します。<br/>
予め、<code>--confirm app-name</code>をつけるとスルー出来るようです。</p>

<p>また、もし間違えてアップしてしまった、などの場合は、もとに戻すコマンドも用意されているようです。</p>

<pre><code>$ heroku certs:rollback
</code></pre>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/ssl-endpoint#update-certificate">https://devcenter.heroku.com/articles/ssl-endpoint#update-certificate</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]Heroku PostgresのDBをHeroku PostgresのDBからリストアする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/20/restore-postgresql/"/>
    <updated>2015-02-20T16:59:38+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/20/restore-postgresql</id>
    <content type="html"><![CDATA[<p>タイトルの通り。<br/>
別のheroku postgres上にあるDBの内容を、そのまま別のheroku postgresに反映する方法。</p>

<!-- more -->


<h2>バックアップ</h2>

<p>以前にも書きましたが、とりあえず現状のものをバックアップ。</p>

<pre><code>$ heroku pgbackups:capture --app 元アプリ名
</code></pre>

<p>URLは以下で確認。</p>

<pre><code>$ heroku pgbackups:url --app 元アプリ名
</code></pre>

<p>表示されるamazonのURLをコピーしておく</p>

<h2>リストア</h2>

<p>リストアしたいアプリにheroku postgresを入れておく。<br/>
環境変数の<code>DATABASE_URL</code>に入っているDBへのリストアが行われる。<br/>
(アドオンを入れると自動で入っているはず)</p>

<p>上記でコピーしたURLで以下を実行。</p>

<pre><code>$ heroku pgbackups:restore DATABASE 'amazonのURL' --app 新アプリ名
</code></pre>

<p>完了。</p>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/heroku-postgres-import-export">https://devcenter.heroku.com/articles/heroku-postgres-import-export</a></p>
]]></content>
  </entry>
  
</feed>
