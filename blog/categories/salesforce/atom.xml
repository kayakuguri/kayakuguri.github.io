<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: salesforce | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/salesforce/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2014-07-09T17:32:53+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[SalesForce]テスト時にgetパラメータをセット]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/06/19/salesforce-test-getmethod/"/>
    <updated>2014-06-19T21:01:12+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/06/19/salesforce-test-getmethod</id>
    <content type="html"><![CDATA[<p>テスト実行時にページのGETパラメータをセットする方法がわからなかったので調べた。</p>

<!-- more -->


<p>まずは、テストしたいページにパラメータをセット。<br/>
その後、テストしたいクラスを実行、とする。<br/>
パラメータをセットするときには、<code>Test</code>を使う。</p>

<p>[apex]</p>

<pre><code>public with sharing class SampleController {
    public SampleController() {
    }

    public Pagereference view(){
        String pid = ApexPages.CurrentPage().getParameters().get('pid');
        if(pid == '10'){
            //処理
        }else{
            //処理
        }

        return null;
    }
}
</code></pre>

<p>[visualforce] <code>samplePage</code>という名前とする</p>

<pre><code>&lt;apex:page controller="SampleController" action="{!view}"&gt;
なにがしかの画面処理
&lt;/apex:page&gt;
</code></pre>

<p>[テストクラス]</p>

<pre><code>@isTest
private class SampleControllerTest{
    static testMethod void view() {
        PageReference pageRef = Page.samplePage;
        //パラメータをセット
        pageRef.getParameters().put('pId', '10');
        Test.setCurrentPage(pageRef);

        SampleController c = new SampleController();
        c.view();

        //セットしなおし
        pageRef.getParameters().put('pId', '0');
        Test.setCurrentPage(pageRef);

        c.view();
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SalesForce]apex:inputFileで添付されたファイルの種類をチェックする]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/05/30/apex-inputfile-contenttype/"/>
    <updated>2014-05-30T15:59:00+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/05/30/apex-inputfile-contenttype</id>
    <content type="html"><![CDATA[<p>添付されたファイルが指定のものかどうかをチェックする。</p>

<!-- more -->


<h4>1.inputタグのacceptで制限</h4>

<p>一番簡単な方法だけど、ブラウザによっては効かないものもあり。<br/>
salseforce独自の方法というわけではなく、一般的なもの。</p>

<p><a href="http://yokano-jp.blogspot.jp/2013/08/accept.html">accept 属性でアップロードするファイルフォーマットを指定</a></p>

<h4>2.contenttypeを取得</h4>

<p>以下のように指定することで、選択されたファイルのcontenttype (MIMEタイプ)を取得出来る。</p>

<p>[VisualForce]</p>

<pre><code>&lt;apex:inputFile fileName="{!upload.name}" value="{!upload.body}" contentType="{!upload.contentType}" /&gt;
</code></pre>

<p>[apexクラス]</p>

<pre><code>//Documentに保存する場合
public Document upload { get; set; }

//確認ボタンが押された場合
public Pagereference confirm() {
    String ctype = upload.ContentType; //ContentTypeを取得
    if(ctype != 'image/jpeg'){
        // エラーにする
    }
}
</code></pre>

<p>以下、主なcontenttype。(METAタイプ)</p>

<table>
<thead>
<tr>
<th>contenttype </th>
<th> 種類</th>
</tr>
</thead>
<tbody>
<tr>
<td>image/jpeg </td>
<td> JPG画像</td>
</tr>
<tr>
<td>application/pdf </td>
<td> PDF</td>
</tr>
<tr>
<td>application/vnd.ms-excel </td>
<td> エクセル(.xls)</td>
</tr>
<tr>
<td>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet </td>
<td> エクセル(.xlsx)</td>
</tr>
<tr>
<td>application/msword </td>
<td> ワード(.doc)</td>
</tr>
<tr>
<td>application/vnd.openxmlformats-officedocument.wordprocessingml.document </td>
<td> ワード(.docx)</td>
</tr>
</tbody>
</table>


<p>ただし、macでエクセルなどを添付した場合に、このcontenttypeが、<br/>
<code>application/octet-stream</code>になってしまった場合があった。<br/>
このタイプはファイルタイプが不明、の場合になるよう。<br/>
(たぶん、使用しているPCが不明なタイプと判断している場合にそうなる可能性がある)</p>

<p>その場合には、拡張子で判断するようにした。</p>

<h4>3.拡張子で判断</h4>

<p>単純に、ファイル名から、ドットで区切って文字列を取得。<br/>
その文字列と判定、とした。<br/>
上記のapexクラスに追記</p>

<pre><code>if(ctype != 'image/jpeg'){
    if(ctype == 'application/octet-stream'){
        List&lt;String&gt; names = upload.Name.split('\\.');
        String dotex = names[names.size() - 1];
        if(dotex != 'jpg'){
            //エラー
        }
    }else{
        //エラー
    }
}
</code></pre>

<h4>まとめ</h4>

<p>これで単純に、ファイルタイプと拡張子によるチェックは出来るかと思います。<br/>
が、PC側で拡張子を変更するだけで偽装できてしまうので、確実なチェックをしようと思うと、別アプローチが必要になるかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SalesForce]チェックボックス付きのテーブルリストを作る]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/05/20/pageblocktable-with-checkbox/"/>
    <updated>2014-05-20T18:11:21+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/05/20/pageblocktable-with-checkbox</id>
    <content type="html"><![CDATA[<p>チェックボックスがついたテーブルのリストを<br/>
カスタマイズされた項目で作成してみた。</p>

<!-- more -->


<p>参考サイト：<br/>
<a href="http://blog.livedoor.jp/totalsoft/archives/3017384.html">[Visualforce] チェックボックスつきリストの実現（ページング機能つき） [技術情報]</a><br/>
<a href="http://system21sf.seesaa.net/article/135800427.html">チェックボックス付きリストの作り方</a></p>

<p>２つ目の参考サイトによると、</p>

<blockquote><p>&lt;apex:listViews>を使えばあっという間に作れてしまいますが、残念ながらそこでチェックされたレコードをサーバー側で取得することができません。</p></blockquote>

<p>そうなので、任意のオブジェクトをラップしたクラスを作成してそのオブジェクトにチェックされた項目を保存することになる。<br/>
上記２つの参考サイトではページングなどで結構ややこしくなっているので、<br/>
なるべく簡易に、オブジェクトのラッパークラスを使うことだけに注目して作成してみた。</p>

<p>ちなみに、標準の<code>Attachment</code>オブジェクトではリストを作成出来なかった。<br/>
(サポートしてない、的なエラーが出た)</p>

<p>標準オブジェクトでは確認していないので、カスタムオブジェクトでの方法を例に上げる。</p>

<p>オーバーライドするオブジェクト：HogeObject__c</p>

<p><strong>オーバーライドしたクラス</strong></p>

<pre><code>public class  HogeObjectWrapper {

    public HogeObject__c Record {get; private set;}  //元のオブジェクト格納
    public Boolean selected {get; set;} //チェックボックス用
    public String hogeName {get; set;} //追加する項目(あれば)

    public HogeObjectWrapper(HogeObject__c record) {
        this.Record = record;
        this.selected = false; //デフォルト値
        this.hogeName = '';
    }
}
</code></pre>

<p>ページで指定しているapexクラスで使用する</p>

<pre><code>public class hogePageController {
    public Lead lead { get; set; }

    public List&lt;HogeObjectWrapper&gt; HogeObjectSelects; //リスト格納用

    //コンストラクタ
    public hogePageController(ApexPages.StandardController controller) {
        //コンストラクタで表示するリストを取得しておく
        AttachmentObjectSelects= new List&lt;SendmailAttachmentWrapper&gt;();

        List&lt;HogeObject__c&gt; hogeLists = [SELECT Id, Name FROM HogeObject__c];
        for(HogeObject__c h:hogeLists){
            //ラッパークラスに代入する
            HogeObjectWrapper hObj = new HogeObjectWrapper(h);
            hObj.hogeName = '何かしらの名前';
            HogeObjectSelects.add(hObj);
        }
    }

    //ページからの参照用
    public List&lt;HogeObjectWrapper&gt; getHogeObjectSelects() {
        return HogeObjectSelects;
    }
}
</code></pre>

<p><strong>VisualForceページ</strong></p>

<pre><code>&lt;apex:pageBlock &gt;
    &lt;apex:pageBlockTable value="{!HogeObjectSelects}" var="h"&gt;
        &lt;apex:column &gt;
            &lt;apex:facet name="header"&gt;チェックボックス&lt;/apex:facet&gt;
            &lt;apex:inputCheckbox value="{! a.selected }"/&gt;
        &lt;/apex:column&gt;
        &lt;apex:column &gt;
            &lt;apex:facet name="header"&gt;オブジェクトのID&lt;/apex:facet&gt;
            &lt;apex:outputText value="{! h.Record.id }" /&gt;
        &lt;/apex:column&gt;
        &lt;apex:column &gt;
            &lt;apex:facet name="header"&gt;任意の名前&lt;/apex:facet&gt;
            &lt;apex:outputText value="{! h.hogeName }" /&gt;
        &lt;/apex:column&gt;
    &lt;/apex:pageBlockTable&gt;
&lt;/apex:pageBlock&gt;
</code></pre>

<p><code>pageBlockTable</code>を使用するには、<code>pageBlock</code>で囲まないといけない。<br/>
<a href="http://www.salesforce.com/us/developer/docs/pages/Content/pages_compref_pageBlockTable.htm">apex:pageBlockTable</a><br/>
<code>apex:facet</code>は、<code>apex:column</code>内で使用し、そのテーブル内の列の見出しとなる。<br/>
<a href="https://www.salesforce.com/us/developer/docs/pages/Content/pages_compref_facet.htm">apex:facet</a><br/>
参考：<a href="http://www30304u.sakura.ne.jp/blog/?p=510">[SFDC]一覧表にリンクを表示したい（ヘッダタイトルもつける）</a></p>

<p>これで、一番左の列にチェックボックスのついたテーブルが完成した。</p>

<p>チェックして送信した場合、<code>HogeObjectSelects</code>の<code>selected</code>がtrueになる。<br/>
そこからデータを取得出来る。<br/>
forで回して、selectedがtrueになっている場合に何かしらをする、、というストーリーが想定される。</p>

<p>apexでの使用方法</p>

<pre><code>for(HogeObjectWrapper h:HogeObjectSelects){
    if(h.selected){
        //tureの時、何かの処理をする
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SalesForce]SOQLでルックアップ先データを取得する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/05/15/soql-relationship/"/>
    <updated>2014-05-15T15:34:57+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/05/15/soql-relationship</id>
    <content type="html"><![CDATA[<p>SalseforceでSOQLを使用してルックアップ先のデータを取得する方法。</p>

<!-- more -->


<p>単純に、ルックアップ先を指定している項目名を使用して指定する。<br/>
その際、通常カスタム項目の参照方法、<code>__c</code>ではなくて、<code>__r</code>を使用する。以上。</p>

<p>例：取引先(Account)で作成したカスタム項目、Companyに入っている先から取得する場合<br/>
(参照先のオブジェクト名は気にしない)</p>

<pre><code>SELECT id, name, Company__r.Name FROM Account
</code></pre>

<p>Accountのid、nameと、Companyに入っているオブジェクトのname項目を取得出来る。</p>

<p>これをapex上で使用して、Companyのname項目を取得したい場合は以下。</p>

<pre><code>List&lt;Account&gt; list= [select Name ,Company__r.Name from Account];
System.debug(list[0].Company__r.Name);
</code></pre>

<p>ちなみに、この場合は、<strong>参照関係</strong>と言うよう。<br/>
<a href="http://blog.flect.co.jp/salesforce/2010/07/post-2e88.html">参照関係と主従関係</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SalesForce]メールテンプレートの項目一覧]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/04/23/sf-mailtemplate/"/>
    <updated>2014-04-23T16:39:55+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/04/23/sf-mailtemplate</id>
    <content type="html"><![CDATA[<p>メールテンプレートは、<code>SOQL</code>を使用して、<code>EmailTemplate</code>でとってこれる。</p>

<!-- more -->


<p>参考：<a href="https://developer.salesforce.com/forums?id=906F00000009BOlIAM">https://developer.salesforce.com/forums?id=906F00000009BOlIAM</a></p>

<p>取得した<code>EmailTemplate</code>の一覧<br/>
(内容は間違っている可能性があります)</p>

<table>
<thead>
<tr>
<th>項目名 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>body </td>
<td> 本文</td>
</tr>
<tr>
<td>markup </td>
<td> </td>
</tr>
<tr>
<td>folderid </td>
<td> フォルダーのID</td>
</tr>
<tr>
<td>subject </td>
<td> 件名</td>
</tr>
<tr>
<td>developername </td>
<td> 作成者</td>
</tr>
<tr>
<td>timesused </td>
<td> 使用回数</td>
</tr>
<tr>
<td>createddate </td>
<td> 作成日</td>
</tr>
<tr>
<td>ownerid </td>
<td> オーナーのID</td>
</tr>
<tr>
<td>apiversion </td>
<td> </td>
</tr>
<tr>
<td>createdbyid </td>
<td> 作成者のID</td>
</tr>
<tr>
<td>lastmodifieddate </td>
<td> 更新日</td>
</tr>
<tr>
<td>id </td>
<td> ID</td>
</tr>
<tr>
<td>brandtemplateid </td>
<td> </td>
</tr>
<tr>
<td>lastuseddate </td>
<td> 最終使用日</td>
</tr>
<tr>
<td>templatestyle </td>
<td> </td>
</tr>
<tr>
<td>isactive </td>
<td> 有効か</td>
</tr>
<tr>
<td>namespaceprefix </td>
<td> </td>
</tr>
<tr>
<td>description </td>
<td> テンプレートの説明</td>
</tr>
<tr>
<td>name </td>
<td> テンプレートの一意の名前</td>
</tr>
<tr>
<td>templatetype </td>
<td> テンプレートのタイプ</td>
</tr>
<tr>
<td>encoding </td>
<td> 文字コード</td>
</tr>
<tr>
<td>systemmodstamp </td>
<td> </td>
</tr>
<tr>
<td>lastmodifiedbyid </td>
<td> 更新者のID</td>
</tr>
<tr>
<td>htmlvalue </td>
<td> HTMLテンプレートの場合の本文</td>
</tr>
</tbody>
</table>


<hr />

<p>以下の方法でオブジェクトの項目一覧を取得出来る。</p>

<p>参考：<br/>
<a href="http://techblog.appirio.co.jp/2012/07/forcecom-apexdescribe.html">http://techblog.appirio.co.jp/2012/07/forcecom-apexdescribe.html</a><br/>
<a href="http://www30304u.sakura.ne.jp/blog/?p=188">http://www30304u.sakura.ne.jp/blog/?p=188</a><br/>
<a href="http://vaindespair.blogspot.jp/2012/04/blog-post_04.html">http://vaindespair.blogspot.jp/2012/04/blog-post_04.html</a></p>

<p>実際に取得したapexコード</p>

<pre><code>public Pagereference getList() {
    sObject newObj = (sObject)Type.forName('EmailTemplate').newInstance();
    Schema.DescribeSObjectResult descResult = newObj.getsObjectType().getDescribe();
    String keys = concatSet(descResult.fields.getMap().keySet(), ', ');

    System.debug('***** EmailTemplate keys: ' + keys);
}

private static String concatSet(Set&lt;String&gt; strSet, String sep) {
    String retStr;
    for (String str : strSet) {
        retStr = retStr == null ? str : retStr + sep + str;
    }
    return retStr == null ? '' : retStr;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
