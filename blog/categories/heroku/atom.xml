<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-01-28T14:31:54+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Heroku Postgresデータベースのデータのバックアップをダウンロードする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/01/21/create-download-pgbackup/"/>
    <updated>2015-01-21T10:39:44+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/01/21/create-download-pgbackup</id>
    <content type="html"><![CDATA[<p>HerokuのPostgresデータベースのバックアップデータをダウンロードする方法。<br/>
いくつかコマンド叩くだけでした。</p>

<!-- more -->


<h3>アドオンのインストール</h3>

<p>何はともあれ、<code>PG Backup</code>のアドオンが必要です。<br/>
インストール方法は以下。</p>

<pre><code>$ heroku addons:add pgbackups
</code></pre>

<h3>バックアップの作成</h3>

<p>バックアップの作成は以下のコマンドで。</p>

<pre><code>$ heroku pgbackups:capture
</code></pre>

<p>現在保持しているバックアップの一覧は以下で確認出来ます。</p>

<pre><code>$ heroku pgbackups
ID   | Backup Time         | Size  | Database
-----+---------------------+-------+------------------------
a226 | 2012/02/22 20:02.19 | 5.3KB | DATABASE_URL
a227 | 2012/02/23 20:02.19 | 5.3KB | DATABASE_URL
b251 | 2012/02/24 16:08.02 | 5.3KB | HEROKU_POSTGRESQL_BLACK
b252 | 2012/02/24 16:08.53 | 5.3KB | HEROKU_POSTGRESQL_PINK
</code></pre>

<h3>バックアップURLの確認</h3>

<p>バックアップされているファイルのURLは以下で確認できます。</p>

<pre><code>$ heroku pgbackups:url
</code></pre>

<p>Amazon S3のURLが表示されます。<br/>
これは、直近のバックアップ分を参照しますが、過去分の場合はIDを指定します。</p>

<pre><code>$ heroku pgbackups:url ID
</code></pre>

<h3>ファイルのダウンロード</h3>

<p><code>curl</code>を使ってダウンロードします。(wgetでもいいです)</p>

<pre><code>$ curl -o latest.dump `URL`
</code></pre>

<h3>ダウンロードしたファイルをローカルのDBにインポート</h3>

<p>以下の<code>pg_restore</code>コマンドでインポート出来る。</p>

<pre><code>$ pg_restore --verbose --clean --no-acl --no-owner -h myhost -U myuser -d mydb b001.dump
</code></pre>

<p>ちなみに、herokuのPostgresは、9.x系のようで、8.x系でpg_restoreしようとすると、バージョン違いで怒られました。</p>

<blockquote><p>pg_restore: [アーカイバ] ファイルヘッダ内のバージョン(1.12)はサポートされていません</p></blockquote>

<h3>参考</h3>

<p><a href="https://devcenter.heroku.com/articles/heroku-postgres-import-export">Importing and Exporting Heroku Postgres Databases with PG Backups</a><br/>
<a href="https://devcenter.heroku.com/articles/pgbackups">PG Backups</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuからgitのアップグレードを促されたので対応する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/12/24/git-update-for-mac/"/>
    <updated>2014-12-24T11:56:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/12/24/git-update-for-mac</id>
    <content type="html"><![CDATA[<p>コマンドからherokuを使おうと思うと、以下のようなメッセージが。</p>

<blockquote><p>Your version of git is 2.1.2. <br/>
Which has serious security vulnerabilities.<br/>
More information here: <a href="https://blog.heroku.com/archives/2014/12/23/update_your_git_clients_on_windows_and_os_x">https://blog.heroku.com/archives/2014/12/23/update_your_git_clients_on_windows_and_os_x</a></p></blockquote>

<p><a href="https://blog.heroku.com/archives/2014/12/23/update_your_git_clients_on_windows_and_os_x">Update Git clients on Windows and OS X</a><br/>
どうやらgitが古いとセキュリティ的に危ないから最新にしてね、という事のよう。</p>

<!-- more -->


<h3>確認</h3>

<p>現行の状態を確認。</p>

<pre><code>$ git --version
git version 2.1.2
</code></pre>

<h3>homebrewで</h3>

<p><code>homebrew</code>でもアップグレード出来るよ、とあったので、コマンドをググって叩いてみた。</p>

<pre><code>$ brew upgrade git
Error: git-2.1.2 already installed
</code></pre>

<p>しかし、すでに最新が入っている、と起こられてしまう。<br/>
まだ対応していないのかな？</p>

<h3>パッケージでインストール</h3>

<p>仕方ないので、直接gitのページからインストーラーをダウンロードして、<br/>
道なりに(いい表現)インストール。</p>

<p><a href="http://sourceforge.net/projects/git-osx-installer/files/">http://sourceforge.net/projects/git-osx-installer/files/</a></p>

<p>しかし、変わらない。。</p>

<h3>パスを変更</h3>

<p>ググるとこんなパスが違う、とうい情報が。<br/>
<a href="http://qiita.com/d_nishiyama85/items/d63da1e50405abc0929c">OSX で Git をバージョンアップする</a></p>

<p>というわけで、heroku toolebeltのパスが記載されていた、<code>.bashrc</code>に以下を追記。</p>

<pre><code>export PATH="/usr/local/git/bin:$PATH"
</code></pre>

<p>で、読み込みなおす。</p>

<pre><code>$ source ~/.bashrc
</code></pre>

<p>バージョン確認。</p>

<pre><code>$ git --version
git version 2.2.1
</code></pre>

<p>無事、アップグレード完了。<br/>
herokuコマンドを叩いても注意は出なくなりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HerokuからPHPでFTPにファイルをアップしてみる]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/12/16/heroku-php-ftp/"/>
    <updated>2014-12-16T19:10:31+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/12/16/heroku-php-ftp</id>
    <content type="html"><![CDATA[<p>herokuのPHPから、FTPプロトコルで接続し、<br/>
同じディレクトリにあるファイルをアップロードしてみた。</p>

<!-- more -->


<p><code>ftp_put</code>を使用するば、接続後にアップロードが出来るよう。<br/>
<a href="http://php.net/manual/ja/function.ftp-put.php">http://php.net/manual/ja/function.ftp-put.php</a></p>

<p>以下のPHPを書いて、herokuにアップしてみた。</p>

<pre><code>ini_set( 'display_errors', 1 );

$ftp_server = 'ホスト名';
$ftp_user_name = 'ユーザー名';
$ftp_user_pass = 'パスワード';

$file = 'somefile.txt';
$remote_file = '/ディレクトリ/readme.txt';

// 接続を確立する
$conn_id = ftp_connect($ftp_server);

// ユーザー名とパスワードでログインする
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

//パッシブモードをオンにする
ftp_pasv($conn_id, true);

// ファイルをアップロードする
if (ftp_put($conn_id, $remote_file, $file, FTP_ASCII)) {
 echo "successfully uploaded $file\n";
} else {
 echo "There was a problem while uploading $file\n";
}       

// 接続を閉じる
ftp_close($conn_id);
</code></pre>

<p>ローカルではこれで動いていたのだが、herokuにアップすると、以下のエラーが出て動作しなかった。</p>

<blockquote><p>Fatal error: Call to undefined function ftp_connect() in /app/index.php on line 17</p></blockquote>

<p><code>phpinfo</code>で確認してみると、<code>FTP support</code>がなかったので、これでエラーが出ていたよう。<br/>
<a href="http://d.hatena.ne.jp/kasahi/20090206/1234198797">http://d.hatena.ne.jp/kasahi/20090206/1234198797</a></p>

<h3>追記</h3>

<p><code>FTP support</code>は、composerの設定で後から追加できた。<br/>
<code>composert.json</code>に以下を記述してdeployするとFTPサポートが追加される。</p>

<pre><code>{
    "require": {
        "ext-ftp":"*"
    }
}
</code></pre>

<p>composerで追加できるオプションは以下にある。<br/>
<a href="https://devcenter.heroku.com/articles/php-support#extensions">https://devcenter.heroku.com/articles/php-support#extensions</a></p>

<p>追加した上で、1つ目のPHPを試してみると、無事、アップロードできました。</p>

<hr />

<p>他に方法がないか探してみると、どうやら、<code>CURL</code>でも出来る、とのこと。<br/>
<a href="http://d.hatena.ne.jp/calpo/20110216/p1">PHPでPASV(passiveモード)なFTP</a></p>

<p>以下を書いてherokuにアップしてみたところ、無事、アップロードされた。</p>

<pre><code>$remote_file = 'ftp://ユーザー:パスワード@ホスト名/ディレクトリ/readme.txt';
$local_file = 'somefile.txt';

try{
    $fp = fopen($local_file, "r");
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_FTP_USE_EPSV, false);
    curl_setopt($ch, CURLOPT_UPLOAD, true);
    curl_setopt($ch, CURLOPT_URL, $remote_file);
    curl_setopt($ch, CURLOPT_INFILE, $fp);
    curl_setopt($ch, CURLOPT_INFILESIZE, filesize($local_file));
    curl_exec($ch);
    curl_close($ch);
    echo 'success';
} catch (Exception $e) {
    var_dump($e);
}
</code></pre>

<h3>参考URL</h3>

<p><a href="http://loumo.jp/wp/archive/20090813164314/">PHP の cURL を使って FTP を行う。</a></p>

<p>ライブラリもあったけど、未検証<br/>
<a href="https://github.com/dg/ftp-php">FTP for PHP</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuアプリとdropboxのファイル同期]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/11/21/heroku-dropbox-sync/"/>
    <updated>2014-11-21T20:11:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/11/21/heroku-dropbox-sync</id>
    <content type="html"><![CDATA[<p>herokuがdropboxとの同期サービスをベータ版ですが開始したようです。<br/>
記事：<a href="https://blog.heroku.com/archives/2014/11/19/announcing_beta_dropbox_sync">https://blog.heroku.com/archives/2014/11/19/announcing_beta_dropbox_sync</a><br/>
ドキュメント：<a href="https://devcenter.heroku.com/articles/dropbox-sync">https://devcenter.heroku.com/articles/dropbox-sync</a></p>

<!-- more -->


<p>で、実際に試してみました。</p>

<p>herokuで作成しているアプリの、<code>code</code>からdropboxへの接続が出来ます。</p>

<p><img src="/images/2014/11/dropbox-test1.jpg" alt="" /></p>

<p>少し下に、<code>Connect to Dropbox</code>があるので、クリック。</p>

<p><img src="/images/2014/11/dropbox-test2.jpg" alt="" /></p>

<p>ログインして認証。</p>

<p><img src="/images/2014/11/dropbox-test3.jpg" alt="" />
<img src="/images/2014/11/dropbox-test4.jpg" alt="" /></p>

<p>認証すると、接続したdropboxの中にフォルダが作成され、そこにアプリ上のソースが一式同期されます。<br/>
<code>Dropbox/Apps/heroku/アプリ名</code>のフォルダが作成されます。</p>

<p>で、ここにある通り、ここからdropbox内のファイルを使ってdeploy出来ます。<br/>
メッセージを書いて<code>deploy</code>をクリックすると、書いたメッセージで、<code>commit</code>、<code>push</code>、<code>deploy</code>が実行されます。</p>

<p><img src="/images/2014/11/dropbox-test5.jpg" alt="" /></p>

<p>実行中</p>

<p><img src="/images/2014/11/dropbox-test6.jpg" alt="" /></p>

<p>完了</p>

<p><img src="/images/2014/11/dropbox-test7.jpg" alt="" /></p>

<p>git上でもコミットメッセージが反映されています。</p>

<p><img src="/images/2014/11/dropbox-test8.jpg" alt="" /></p>

<p>シュチエーションとしては、dropboxで同期したディレクトリを他の人とコラボして、<br/>
その人が更新したファイルをブラウザ上からdeploy出来る、みたいな感じかと。<br/>
それだと、コラボ相手はgitがいらないので。</p>

<p>dropboxとの接続サービスはいっぱいあるので、他にも組み合わせれば色々出来そう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]herokuでのSSL設定とカスタムサブドメインの適用方法]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain/"/>
    <updated>2014-09-30T19:24:37+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain</id>
    <content type="html"><![CDATA[<p>herokuでのSSL設定とカスタムサブドメインの設定をさっくりと調べてみた。</p>

<!-- more -->


<h2>SSL</h2>

<h3>手順</h3>

<ol>
<li>プライベートキーを作成</li>
<li>CSRを作成</li>
<li>CSRを契約の際に業者に提出</li>
<li>証明書が発行される</li>
<li>証明書 + 中間証明書 + プライベートキーをherokuに設定</li>
</ol>


<p>1はローカルPC上にて作成<br/>
2の作成方法は以下、など。
<a href="https://jp.globalsign.com/support/ssl/list.php?cat=csr">https://jp.globalsign.com/support/ssl/list.php?cat=csr</a><br/>
5のみ、heroku上。</p>

<h3>ファイルの準備</h3>

<p>サーバー会社等から取得したデータを保存する。<br/>
テキストに文字列を貼り付けて保存すればよい。<br/>
※ファイル名の指定は特になし。拡張子もなんでもいい。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> ファイル名 </th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> 秘密鍵 </td>
<td align="left"> server.key </td>
<td></td>
</tr>
<tr>
<td></td>
<td align="left"> 証明書  </td>
<td align="left">  server.crt </td>
<td></td>
</tr>
<tr>
<td></td>
<td align="left"> 中間CA証明書  </td>
<td align="left">  chain_ca.pem </td>
<td></td>
</tr>
</tbody>
</table>


<p><a href="http://q.hatena.ne.jp/1188202204">http://q.hatena.ne.jp/1188202204</a></p>

<h3>herokuでの操作</h3>

<p>SSLのアドオン($20/mo)<br/>
<a href="https://addons.heroku.com/ssl">https://addons.heroku.com/ssl</a></p>

<p>アドオンの追加</p>

<pre><code>$ heroku addons:add ssl:endpoint
</code></pre>

<p>サーバー証明書と中間証明書を合体させる</p>

<pre><code>$ cat chain_ca.pem &gt;&gt; server.crt
</code></pre>

<p>プライベートキーのパスフレーズが解除されていない場合は解除する。</p>

<pre><code>$ openssl rsa -in site.key -out server.key
Enter pass phrase for site.key:
writing RSA key
</code></pre>

<p>で、合体させた証明書とキーをアップする。</p>

<pre><code>$ heroku certs:add server.crt server.key
</code></pre>

<p>アップロード結果で返ってくるURLが証明書が適応されたURLとなる。<br/>
<code>hokkaido-1212.herokussl.com</code><br/>
この状態でアクセスすると、<code>No such app</code>と出るがこれで正しい。</p>

<h3>参考</h3>

<p><a href="http://qiita.com/yu1ch1/items/290efb666209354e8fb3">herokuのssl証明書を更新する</a><br/>
<a href="http://interu.hatenablog.com/entry/2012/07/25/184812">HerokuでカスタムドメインのSSL endpointを利用する方法</a><br/>
<a href="http://d.hatena.ne.jp/install-memo/20110906/1315291837">SSL証明書のKEYファイル・CSRファイル・CRTファイルのチェック方法</a></p>

<h2>サブドメイン</h2>

<h3>herokuでの操作</h3>

<p>herokuのアプリのSettings内にある、<br/>
Domains、から設定したいドメインを指定する。</p>

<p><img src="/images/2014/09/Settings___Heroku.jpg" alt="Settings___Heroku" /></p>

<p>契約しているドメイン業者のCNAMEに、適用したいアプリのURLを指定する。<br/>
例：<code>hoge.herokuapp.com</code></p>

<h3>SSLの場合</h3>

<p>SSLをカスタムドメインで使用したい場合は、上記SSLの項で設定した、<br/>
<code>hokkaido-1212.herokussl.com</code>のドメインをCNAMEに指定する。</p>

<p>反映後、設定の確認は以下で出来る。</p>

<pre><code>$ heroku certs
Endpoint                     Common Name(s)            Expires               Trusted
---------------------------  ------------------------  --------------------  -------
hokkaido-1212.herokussl.com  secure.example.co.jp  2015-06-24 23:59 UTC  True
</code></pre>

<p>詳細は、<code>heroku certs:info</code>で確認できる。</p>
]]></content>
  </entry>
  
</feed>
