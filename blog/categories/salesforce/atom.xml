<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: salesforce | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/salesforce/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-06-11T11:00:35+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[salesforce]バッチスケジュールの一通りの書き方]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/11/apex-batch-schedule/"/>
    <updated>2015-06-11T10:59:41+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/11/apex-batch-schedule</id>
    <content type="html"><![CDATA[<p>複数クラスにわたってたりしてややこしかったのでメモ。</p>

<!-- more -->


<h2>バッチ</h2>

<p>まずはバッチファイル。<br/>
ここで実際に動作させたい内容を書く。<br/>
枠はこんな感じ。</p>

<p><code>Batch_sample.apex</code></p>

<p>```
global with sharing class Batch_sample implements Database.Batchable<sObject>
{</p>

<pre><code>private String query;

//コンストラクタ
global Batch_UpdatePushlist(String q){
    query = q;
}

//データ取得
global Database.QueryLocator start(Database.BatchableContext BC){
    return Database.getQueryLocator(query);
}

//開始
global void execute(Database.BatchableContext BC, List&lt;sObject&gt; scope){

    //バッチの処理を記述

}

//完了
global void finish(Database.BatchableContext BC)
{
    //完了後の処理があれば
}
</code></pre>

<p>}
```</p>

<p>バッチを起動させるには以下のようにSOQL文と件数を渡して実行する。</p>

<p><code>
String soql = 'SELECT ID FROM sObject';
Batch_sample b = new Batch_sample(soql);
Database.executeBatch(b, 200);
</code></p>

<p>実行時に指定したSOQLで取得するレコード分、バッチが動作する。<br/>
この際に取得出来る件数が、バッチの場合は500万件。<br/>
とはいえ、実際には一度の処理では指定した件数分のみ処理し、ガバナ制限がリセットされて再度実行、を繰り返す。<br/>
<code>executeBatch</code>の第二引数が一回の処理で実行する件数。<br/>
(デフォルトは200件)</p>

<p>バッチ全体の動作は10分以内、というガバナ制限もあり。<br/>
(100万件単位になってくると結構厳しい数字っぽい)</p>

<h2>スケジューラー</h2>

<p>設定したバッチをスケジューラーとして実行させる。<br/>
以下のように、<code>Schedulable</code>クラスをimplementsする。</p>

<p><code>Schedule_sample.apxc</code></p>

<p>```
global class Schedule_sample implements Schedulable {</p>

<pre><code>private final Integer BATCH_SIZE = 200;

global void execute(SchedulableContext ctx) {
    String soql = 'SELECT ID FROM sObject';
    Batch_sample b = new Batch_sample(soql);
    Database.executeBatch(b, BATCH_SIZE);
}
</code></pre>

<p>}
```</p>

<p>このクラスをジョブに追加することでバッチをスケジューリング出来る。</p>

<h2>スケジュールに追加</h2>

<p>追加方法は２つある</p>

<h3>設定画面から追加</h3>

<p><code>設定-&gt;開発-&gt;Apexクラス</code>を選択。<br/>
画面内の<code>Apexをスケジュール</code>をクリック。</p>

<p><img src="/images/2015/06/apex_schedule01.jpg" alt="" /></p>

<p>この中で毎月や毎日、などを選択できる。<br/>
終了日も設定出来るので、ずっと動作するさせるものに関しては長めに設定しておく。</p>

<p><img src="/images/2015/06/apex_schedule02.jpg" alt="" /></p>

<h3>コードで実行</h3>

<p>設定画面から追加での最大のデメリットは実行時間が毎時0分のみ、と、分の指定ができないところ。<br/>
これをさせようと思うとコードからジョブに追加してやる必要がある。</p>

<p>以下が追加させるコード</p>

<pre><code>System.schedule('ジョブ名','0 0 * * * ?', new Schedule_sample());
</code></pre>

<p>第二引数に指定しているものは、クーロン式、というもので、ここで時間指定をしている。<br/>
これは、左から、秒、分、時、日、月、曜日、年となっている。<br/>
(年は省略化)</p>

<p>例）</p>

<ul>
<li>&lsquo;0 0 13 * * ?'：毎日13時に実行</li>
<li>&lsquo;0 0 10 ? * MON-FRI'：月～金の10時に実行</li>
<li>&lsquo;0 0 * * * ?'：毎時0分に実行</li>
<li>&lsquo;0 30 * * * ?'：毎時30分に実行</li>
</ul>


<p>秒のみの指定は怖くて試してません。</p>

<p>この実行式を開発者コンソールの匿名実行から実行することでジョブに追加させられる。</p>

<p><img src="/images/2015/06/apex_schedule03.jpg" alt="" /></p>

<p>コードを書いて、実行ボタンをクリック。</p>

<p><img src="/images/2015/06/apex_schedule04.jpg" alt="" /></p>

<p>追加されたジョブは設定画面の、<code>ジョブ-&gt;スケジュール済みジョブ</code>から確認できる。</p>

<p><img src="/images/2015/06/apex_schedule05.jpg" alt="" /></p>

<h2>動作テスト</h2>

<p>実際に開発中にいちいちスケジュールさせてジョブが実行されるのを待つのはあまりにもめんどくさい。<br/>
バッチを起動させるコードを匿名実行から起動させてもよいがそれでも待ち時間が長いので、結局バッチ処理特有の部分をコメントアウトして、単なるクラスにしてそれを直接実行させる方法で確認した。</p>

<p>以下のようにコメントアウトした。</p>

<p>```
//global with sharing class Batch_sample implements Database.Batchable<sObject>
public class Batch_sample
{</p>

<pre><code>/*
private String query;   
//コンストラクタ
global Batch_UpdatePushlist(String q){
    query = q;
}

//データ取得
global Database.QueryLocator start(Database.BatchableContext BC){
    return Database.getQueryLocator(query);
}
*/

//開始
public void execute(List&lt;sObject&gt; scope){
//global void execute(Database.BatchableContext BC, List&lt;sObject&gt; scope){

    //バッチの処理を記述

}

//global void finish(Database.BatchableContext BC){}
</code></pre>

<p>}
```</p>

<p>これを匿名実行からSOQLでデータを取得してからそれを渡してやりつつ実行する。</p>

<p><code>
String soql = 'SELECT ID FROM sObject';
List&lt;sObject&gt; data = Database.query(soql);
Batch_sample batch = new Batch_sample();
batch.execute(data);
</code></p>

<p>もっとスマートなやり方があったらぜひ。</p>

<h2>テスト</h2>

<p>テストコードはスケジューラに対して実行する。</p>

<p><code>Schedule_sample_Test.apxc</code></p>

<p>```
@isTest
public class Schedule_sample_Test {</p>

<pre><code>public static String CRON_EXP = '0 0 0 15 3 ? 2022';

static testmethod void test() {
    //データ準備

    Test.startTest();
    String jobId = System.schedule('ScheduleApexClassTest', CRON_EXP, new Batch_sample());
    Test.stopTest();

    //バッチ後のデータ確認
}
</code></pre>

<p>}
```</p>

<p>指定するクーロン式はなんでもよくて、<code>Test.stopTest();</code>の後にすぐにスケジュールが実行される。</p>

<h2>参考</h2>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.apex_workbook.meta/apex_workbook/apex_scheduling_2.htm">スケジュール可能なクラスのテストの追加 | Apex ワークブック | Salesforce Developers</a><br/>
<a href="http://blog.flect.co.jp/salesforce/2010/08/apex-2136.html">セールスフォースの豆知識: スケジュール実行するApexのテストメソッドと実行時刻の詳細設定</a><br/>
<a href="http://blog.livedoor.jp/androidbeginner/archives/39179776.html">【Salesforce】Apexジョブの書き方 : 怠けろ！プログラマ！</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]レコードの詳細からカスタムボタンでapexを呼び出す]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/01/custom-btn-apex/"/>
    <updated>2015-06-01T17:33:40+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/01/custom-btn-apex</id>
    <content type="html"><![CDATA[<p>カスタムボタンを使用してJSからApexを呼び出して処理させてみる。</p>

<!-- more -->


<h2>Apex</h2>

<p><code>webService</code>を使用して、apexクラスを作成しておく。<br/>
戻り値は文字列としておく。</p>

<p>```
global class SampleClass{</p>

<pre><code>webService static String hogeMethod(String id){
    return 'このレコードのIDは、' + msg_id + 'です。';
}
</code></pre>

<p>}
```</p>

<h2>カスタムボタン</h2>

<p>リードの場合は以下にある。</p>

<p><img src="/images/2015/06/custom_btn02.jpg" alt="" /></p>

<p><code>新規ボタンまたはリンク</code>をクリック。</p>

<p><code>動作</code>を<code>JavaScriptを実行</code>に、<br/>
<code>内容のソース</code>を<code>onClick JavaScript</code>にする。</p>

<p><img src="/images/2015/06/custom_btn01.jpg" alt="" /></p>

<p>内容は以下の用に記述。</p>

<p><code>
{!REQUIRESCRIPT('/soap/ajax/31.0/connection.js')}
{!REQUIRESCRIPT('/soap/ajax/31.0/apex.js')}
var ret = sforce.apex.execute('SampleClass','hogeMethod',{id:"{!CustomObject__c.Id}"});
alert(ret);
</code></p>

<p>このカスタムボタンがクリックされると、このJSが実行される。<br/>
<code>sforce.apex.execute</code>で実行するapexとメソッドを指定している。<br/>
第一引数がクラス名。第二引数がメソッド。第三引数が引数、となる。<br/>
引数で実行しているレコードのIDを渡すように項目を差し込んでいる。</p>

<h2>表示</h2>

<p>表示は、レイアウトの編集で、ボタンから追加。<br/>
<img src="/images/2015/06/custom_btn04.jpg" alt="" /></p>

<p>レコードの詳細からボタンをクリックするとIDが渡されて実行される。<br/>
<img src="/images/2015/06/custom_btn03.jpg" alt="" /></p>

<h2>参考</h2>

<p><a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_and_ajax.htm">Apex in AJAX | Force.com Apex Code Developer&#x27;s Guide | Salesforce Developers</a><br/>
<a href="https://developer.salesforce.com/forums/ForumsMain?id=906F00000009BNkIAM">カスタムボタン押下時にSFDC上のWebServiceをコールする方法 &ndash; Salesforce Developer Community</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Force.com CLIをインストールして試してみた]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/29/forcecom-cli/"/>
    <updated>2015-05-29T21:06:19+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/29/forcecom-cli</id>
    <content type="html"><![CDATA[<blockquote><p>開発者の方は、Force.comのデータベースをいちいちブラウザを開いたりせずにコマンドラインから確認・操作したいと思う事があるかもしれません。</p></blockquote>

<p>試してみました。</p>

<!-- more -->


<h1>Go</h1>

<h2>go言語環境</h2>

<p>Force.com CLIはGOで動作しているので、go言語が動くようにする。</p>

<h3>Homebrewによるインストール</h3>

<p>homebrew自体をアップデートしてインストールする。</p>

<pre><code>$ brew update
$ brew install go
</code></pre>

<p>確認</p>

<pre><code>$ go version
go version go1.4.2 darwin/amd64
</code></pre>

<h3>$GOPATH</h3>

<p>パッケージ管理のためのパスを通すよう。<br/>
<code>$HOME/.go/${GO_VERSION}</code>のパスにするのがいいようなんで、それにならう。</p>

<pre><code>$ mkdir -p ~/.go/1.4/
</code></pre>

<p>zsh使ってるので、<code>.zshrc</code>にパスを追加。</p>

<pre><code>export GOPATH=$HOME/.go/1.4
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
</code></pre>

<p>再読み込みしておく。</p>

<pre><code>$ source ~/.zshrc
</code></pre>

<h3>Mercurial</h3>

<blockquote><p>Mercurial（マーキュリアル）は、クロスプラットフォームの分散型バージョン管理システム。 Pythonで実装されている（ただし、バイナリdiffに関してはC言語で実装されている）。 Mercurialはコマンドラインプログラムである。 全てのコマンドは hgで始まる。<br/>
<a href="http://ja.wikipedia.org/wiki/Mercurial">http://ja.wikipedia.org/wiki/Mercurial</a></p></blockquote>

<h4>Python</h4>

<p>Pythonで動作するとのことなので、Pythonが必要。<br/>
自分の環境には入っていた。</p>

<pre><code>$ python -V
Python 2.7.9
</code></pre>

<p>必要な場合は、homebrewでインストール出来るよう。</p>

<pre><code>$ brew install python
</code></pre>

<h4>pip</h4>

<p>あと、パッケージ管理のために<code>pip</code>が必要。<br/>
これも入っていた。</p>

<pre><code>$ pip -V
pip 6.1.0 from /usr/local/lib/python2.7/site-packages/pip-6.1.0-py2.7.egg (python 2.7)
</code></pre>

<p>インストールする場合は以下。</p>

<pre><code>$ brew install pip
</code></pre>

<p>ただ、最新版ではなさそうだったので、アップデート。</p>

<pre><code>$ pip install --upgrade pip
</code></pre>

<p>アップデート出来た。</p>

<pre><code>$ pip -V
pip 7.0.1 from /usr/local/lib/python2.7/site-packages (python 2.7)
</code></pre>

<h4>Mercurialのインストール</h4>

<p>で、ようやく、<code>Mercurial</code>のインストール。</p>

<pre><code>$ pip install --upgrade pip
...
Successfully installed mercurial-3.4
</code></pre>

<p>これでようやく整った。</p>

<h1>Force.com CLI</h1>

<h2>インストール</h2>

<pre><code>$ go get -u github.com/heroku/force
</code></pre>

<p>エラーが出た。</p>

<p>```
.go/1.4/src/github.com/ddollar/config/windows.go:8: (*Config).homeDirectory redeclared in this block</p>

<pre><code>previous declaration at .go/1.4/src/github.com/ddollar/config/posix.go:9
</code></pre>

<p>```</p>

<h2>エラー回避</h2>

<p>どうやら関連プラグイン？のとあるファイルが悪さをしているとかなんとか。<br/>
以下にあるファイルをリネームして退避させておく。</p>

<pre><code>$ cd /Users/YOUR_NAME/.go/1.4/src/github.com/ddollar/config
$ mv windows.go _windows.go
$ go get .
</code></pre>

<p>これでエラーが回避された状態でプラグイン？のインストールが完了したので、<br/>
あらためてインストール。</p>

<pre><code>$ go get -n github.com/heroku/force
</code></pre>

<p>入った。</p>

<p><a href="https://github.com/heroku/force/issues/138#issuecomment-86178284">Compiling from source not working · Issue #138 · heroku/force</a></p>

<h2>ログイン</h2>

<pre><code>$ force login
</code></pre>

<p>以下のように認証を求められるので、許可。</p>

<p><img src="/images/2015/05/Force_com_CLI_1.jpg" alt="" /></p>

<p>許可すると以下の画面になって接続完了。</p>

<p><img src="/images/2015/05/Force_com_CLI_2.jpg" alt="" /></p>

<pre><code>$ force login
Logged in as 'YOUR-EMAIL'
</code></pre>

<h3>SELECT</h3>

<p>とりあえず、select文でデータ取得</p>

<p><code>
$ force query 'SELECT ID, NAME FROM Lead'
 Id                 | Name
--------------------+---------------------
 00Q1000000DnnMvEAJ | Boxer Bertha
 00Q1000000DnnMwEAJ | Cotton Phyllis
 ...
</code></p>

<h3>カスタム項目の追加</h3>

<p>コマンドからカスタム項目の追加も可能。<br/>
だけど、エラーが。</p>

<pre><code>$ force field create User__c Due:DateTime
Attrs:  &lt;invalid Value&gt;
panic: reflect: call of reflect.Value.Type on zero Value
...
</code></pre>

<p>どうやら、型名を小文字で入れる必要があるよう。<br/>
<a href="https://github.com/heroku/force/issues/52">Error when calling force field create · Issue #52 · heroku/force</a></p>

<p>```
$ force field create User__c Due:datetime
Attrs:  &lt;main.DatetimeFieldRequired Value></p>

<pre><code>    &lt;metadata xsi:type="CustomField" xmlns:cmd="http://soap.sforce.com/2006/04/metadata"&gt;
        &lt;fullName&gt;User__c.Due__c&lt;/fullName&gt;
        &lt;label&gt;Due&lt;/label&gt;
        &lt;type&gt;DateTime&lt;/type&gt;
    &lt;/metadata&gt;
</code></pre>

<p>Not done yet.  Will check again in five seconds.
Custom field created
```</p>

<p><img src="/images/2015/05/Force_com_CLI_3.jpg" alt="" /></p>

<p>この指定方法だと、フィールド名とAPI参照名を別々に出来ない、、かも。</p>

<h3>利用方法</h3>

<pre><code>$ force
</code></pre>

<p>でヘルプを表示。<br/>
さらに、コマンドをそのまま打つと使いと例も表示してくれる。<br/>
先ほどの、<code>field</code>だとこんな感じ。</p>

<p>```
$ force field
Usage: force field</p>

<p>Manage sobject fields</p>

<p>Usage:</p>

<p>  force field list <object>
  force field create <object> <field>:<type> [<option>:<value>]
  force field delete <object> <field>
  force field type
  force field type <fieldtype></p>

<p>Examples:</p>

<p>  force field list Todo__c</p>

<pre><code>force field create Inspection__c "Final Outcome":picklist picklist:"Pass, Fail, Redo"
</code></pre>

<p>  force field create Todo<strong>c Due:DateTime required:true
  force field delete Todo</strong>c Due
  force field type     #displays all the supported field types
  force field type email   #displays the required and optional attributes
```</p>

<h2>参考</h2>

<p><a href="https://force-cli.heroku.com/">Force.com CLI</a><br/>
<a href="http://blogjp.sforce.com/2013/11/forcecom-cli---d403.html">Force.com CLI &ndash; コマンドラインインタフェース | Salesforce Developers Japan Blog</a><br/>
<a href="http://qiita.com/zaki-yama/items/77b3aeff6b129a87019a">Salesforce &ndash; ターミナルからApexを実行できるforce.com CLIの使い方 &ndash; Qiita</a><br/>
<a href="http://sixeight.hatenablog.com/entry/2013/12/12/031752">golang の環境作った &ndash; ちなみに</a><br/>
<a href="http://qiita.com/puttyo_bubu/items/4e60e42ff041f2474428">Macでgo言語開発環境を作る &ndash; Qiita</a><br/>
<a href="http://blog.teapla.net/2010/12/1178">homebrewを使ってMercurialをインストールする | Ken&#039;s blog @teaplanet</a><br/>
<a href="http://qiita.com/tailak/items/0eedc6d5c4cc71a5e1a0">Python &ndash; Macでpipのアップデートでエラー &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesfroce]開発者コンソールでのFIELD_INTEGRITY_EXCEPTIONエラー]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/14/developper-console-error/"/>
    <updated>2015-05-14T14:50:12+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/14/developper-console-error</id>
    <content type="html"><![CDATA[<p>たまに起こっていつも調べている気がするのでメモ。</p>

<!-- more -->


<p>最近は開発者コンソールで開発をしている事が多いのだけれど、ファイルをいざ保存しようとしたらたまに以下のようなエラーが出て保存できない時がある。</p>

<p><img src="/images/2015/05/Force_com_Developer_Console_01.jpg" alt="" /></p>

<blockquote><p>FIELD_INTEGRITY_EXCEPTION<br/>
Failde to create createContainerMember for containerId=undefined:null は無効な containerIdです。</p></blockquote>

<p>保存しているファイルの種類や内容には関係ない。<br/>
これが起こるとsavingのまま止まってしまう。</p>

<p>で、解決方法は公式にある。</p>

<p><a href="https://help.salesforce.com/apex/HTViewSolution?id=000204953&amp;language=en_US">Developer console cannot save classes/triggers/pages</a></p>

<p>まず、開発者コンソールを閉じて、再度開く。(念のため)<br/>
で、開発者コンソールのメニューから、<code>Workspace</code> &ndash;> <code>New Workspace</code>を選択。</p>

<p><img src="/images/2015/05/Force_com_Developer_Console_02.jpg" alt="" /></p>

<p>適当な名前で保存する。</p>

<p><img src="/images/2015/05/Force_com_Developer_Console_03.jpg" alt="" /></p>

<p>ワークスペースが新しく切り替わる(見た目は変わらない)。<br/>
すると、無事保存出来るようになる。</p>

<p>一度保存出来るようになったらもとのdefaultのワークスペースに戻しても問題なくなっているので、<br/>
先程作った適当なワークスペース削除しても問題なし。</p>

<p>開発者コンソールは便利なんだけど、いかんせん不安定な印象がある…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SFストリーミングAPIを試してみた]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/13/sf-streaming-api/"/>
    <updated>2015-05-13T11:54:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/13/sf-streaming-api</id>
    <content type="html"><![CDATA[<p>salesforceのストリーミングAPIを利用すればプッシュ通知のようなものを作成できる、ということで試してみた。</p>

<!-- more -->


<h2>仕組み</h2>

<p>Long pollingと呼ばれる技術が使用されているよう。<br/>
仕組みとしては以下がわかりやすかった。</p>

<blockquote><p>1.クライアントからは従来のポーリング同様に、サーバに対して要求を発行<br/>
2.サーバ側はその要求に対して即時に応答を返さず、ずっと掴んだままにしておく<br/>
3.サーバ側でイベントの発生を検知したら、それまで掴みっぱなしになっていた複数の要求に対して一斉に応答を返す<br/>
4.応答を受信したブラウザはすぐに次の要求を再発行して、ふたたび応答待ちの状態へと戻る<br/>
⇒  結果的にサーバからのプッシュ通知が行われたような動作になります。<br/>
<a href="http://www.terrasky.co.jp/blog/?p=802#sthash.HrI4ITMg.dpuf">http://www.terrasky.co.jp/blog/?p=802#sthash.HrI4ITMg.dpuf</a></p></blockquote>

<h2>流れ</h2>

<p>作成の手順は以下。</p>

<ol>
<li>オブジェクトの作成(設定)</li>
<li>PushTopicの作成</li>
<li>PushTopicをチャンネルに登録、テスト</li>
</ol>


<h2>1.オブジェクトの作成(設定)</h2>

<p>プッシュするためのオブジェクトとして今回は以下のカスタムオブジェクトを使用した。</p>

<p>オブジェクト名：CustomMessage<br/>
プッシュ内容：未読(Unread__c)のチェックボックスがtrueになればプッシュ通知</p>

<h2>2.PushTopicの作成</h2>

<p><code>PushTopic</code>は管理画面上からは作成出来ないよう。<br/>
開発者コンソールから直接レコードを作成する。</p>

<p><img src="/images/2015/05/stereaming_api1.jpg" alt="" /></p>

<p>実行させたコードは以下。</p>

<p><code>
PushTopic pushTopic = new PushTopic();
pushTopic.Name = 'UnreadNotification';
pushTopic.Query = 'SELECT Id, Unread__c FROM CustomMessage__c';
pushTopic.NotifyForOperationCreate = true;
pushTopic.NotifyForOperationUpdate = true;
pushTopic.NotifyForOperationUndelete = false;
pushTopic.NotifyForOperationDelete = false;
pushTopic.ApiVersion = 32.0;
insert pushTopic;
</code>
※<code>NotifyForOperations</code>と<code>NotifyForFields</code>は変更出来ない、と怒られた。</p>

<h3>通知タイミング</h3>

<p>レコードがどうなった時に通知するかを、<code>NotifyForOperationCreate</code>等で設定している。<br/>
(これらはデフォルトでは<code>true</code>)</p>

<table>
<thead>
<tr>
<th>項目 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>NotifyForOperationCreate </td>
<td> 作成</td>
</tr>
<tr>
<td>NotifyForOperationUpdate </td>
<td> 更新</td>
</tr>
<tr>
<td>NotifyForOperationUndelete </td>
<td> 復元</td>
</tr>
<tr>
<td>NotifyForOperationDelete </td>
<td> 削除</td>
</tr>
</tbody>
</table>


<p><img src="/images/2015/05/stereaming_api2.jpg" alt="" /></p>

<p>実行後、SOQLで参照してみた。</p>

<p><img src="/images/2015/05/stereaming_api3.jpg" alt="" /></p>

<h3>通知対象</h3>

<p><code>NotifyForFields</code>は設定出来ない、と怒られたが、ここはデフォルトでは<code>Referenced</code>になっている。<br/>
これは、指定したクエリのSELECT句とWHERE句、両方を通知対象とする、という意味のよう。<br/>
これをSELECT句だけを対象に、とも出来るのだとか。</p>

<p>今回はSELECTに指定した、Unread__cが作成、更新されると通知される。<br/>
(WHERE句がないので、全てのレコード対象)</p>

<p>またこのSELECT句には必ず<code>ID</code>を含める必要があるとのこと。</p>

<h2>3.PushTopicをチャンネルに登録、テスト</h2>

<h3>登録</h3>

<p>以下にアクセス。<br/>
<a href="https://workbench.developerforce.com/login.php">https://workbench.developerforce.com/login.php</a></p>

<p>これは、デモ目的でのみ利用可能な、Salesforceから提供されている、ワークベンチのホスト型インスタンス、だそう。<br/>
本番利用の際は自前で、ワークベンチの設定が必要なのだとか。<br/>
(この辺は未調査)</p>

<p><code>Environment</code>は<code>Production</code>を選択した。<br/>
<code>API Version</code>は<code>32</code>を選択。(33はなかった)</p>

<p><img src="/images/2015/05/stereaming_api4.jpg" alt="" /></p>

<p>規約に同意して、<code>Login with Salesforce</code>をクリック。<br/>
承認を求められるので、<code>許可</code>をクリック。</p>

<p><img src="/images/2015/05/stereaming_api5.jpg" alt="" /></p>

<p><code>Jump to:</code>で、<code>Streaming Push Topics</code>を選択。<br/>
<code>select</code>をクリック。</p>

<p><img src="/images/2015/05/stereaming_api6.jpg" alt="" /></p>

<p>次の画面で接続が行われる。<br/>
Push Topicで先程作成した、PushTopicを選択。<br/>
デフォルトでは登録されていない状態っぽいので、<code>Subscribe</code>ボタンをクリックして登録しておく。<br/>
その状態でブラウザを開いたままにしておく。<br/>
<img src="/images/2015/05/stereaming_api7.jpg" alt="" /></p>

<h3>テスト</h3>

<p>新しいウインドウで、再度以下にアクセスし、同じく<code>Production</code>のバージョン<code>32</code>でログイン。<br/>
<a href="https://workbench.developerforce.com/login.php">https://workbench.developerforce.com/login.php</a></p>

<p>上部メニューの<code>data</code>から、<code>Insert</code>をクリック。<br/>
<img src="/images/2015/05/stereaming_api8.jpg" alt="" /></p>

<p>Object Typeで対象のカスタムオブジェクト(CustomMessage__c)を選択し、<code>Next</code>をクリック。<br/>
<img src="/images/2015/05/stereaming_api9.jpg" alt="" /></p>

<p>オブジェクトをインサートするための情報を入力。<br/>
OwinIDは入力しなくても大丈夫だった。<br/>
<img src="/images/2015/05/stereaming_api10.jpg" alt="" /></p>

<p><code>Commit Insert</code>をクリックするとインサートが完了する。<br/>
<img src="/images/2015/05/stereaming_api11.jpg" alt="" /></p>

<p>すると、先程開いていた画面に内容が(ほぼ)リアルタイムに通知される。<br/>
<img src="/images/2015/05/stereaming_api12.jpg" alt="" /></p>

<p><code>sobject</code>には、PushTopicのSELECT句で設定した項目が入っている。</p>

<p>このレコードの作成はこの<code>workbench</code>上からわざわざ作業しなくても、Salesfroceから直接レコードを新規で作成しても受信は問題なくできた。<br/>
あとは、Visualforceのコードに組み込めば受信ページを作れるよう。</p>

<h2>制限</h2>

<p>色々と制限があるよう。詳しくは以下の記事の最後のほうの表を参照。<br/>
<a href="http://www.terrasky.co.jp/blog/?p=802">http://www.terrasky.co.jp/blog/?p=802</a></p>

<p>トピック数が20、とか、登録者数が20、とか、結構厳しい。<br/>
そもそも、Visualforceでの利用で、SFのアカウントを持っている人が通知を受け取るページを開発するのに使用する事を前提としているっぽい。<br/>
通常のwebサービスでSFからの通知を受け取るのに利用出来るかと思って調べていたのだが、どうも違うようだった。</p>

<h2>参考</h2>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.api_streaming.meta/api_streaming/quick_start_workbench.htm">ワークベンチを使用したクイックスタート | Force.com ストリーミング API 開発者ガイド | Salesforce Developers</a><br/>
<a href="http://tyoshikawa1106.hatenablog.com/entry/2013/08/01/225204">SFDC：Streaming API 試してみました &ndash; tyoshikawa1106のブログ</a><br/>
<a href="http://www.terrasky.co.jp/blog/?p=802">10分で分かる！使える！ストリーミング API &laquo;  TerraSky Tech Blog</a></p>
]]></content>
  </entry>
  
</feed>
