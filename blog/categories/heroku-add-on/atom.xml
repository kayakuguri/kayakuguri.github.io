<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku-add-on | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/heroku-add-on/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-05-09T21:09:15+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[herokuアドオン]cloudinaryで動画を試してみた[PHP]]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/07/cloudinary-movie/"/>
    <updated>2015-05-07T15:31:47+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/07/cloudinary-movie</id>
    <content type="html"><![CDATA[<p>2015年5月5日に新しく発表された動画サポートを試してみた。</p>

<!-- more -->


<h2>アップロード</h2>

<p>インストールなどは<a href="http://kayamemo.mrlittlebig.com/blog/2015/05/07/cloudinary-img/">前回の記事</a>参照。</p>

<p>同一ディレクトリにある、movファイルをアップロードした。<br/>
動画は、iPhoneで撮影したもの。</p>

<p>```
&lt;?php
require &lsquo;../vendor/autoload.php&rsquo;;</p>

<p>use Cloudinary;
use Cloudinary\Uploader;</p>

<p>$account = parse_url(getenv(&lsquo;CLOUDINARY_URL&rsquo;));</p>

<p>\Cloudinary::config(array(</p>

<pre><code>"cloud_name" =&gt; $account['host'],
"api_key" =&gt; $account['user'],
"api_secret" =&gt; $account['pass']
</code></pre>

<p>));</p>

<p>$ret = \Cloudinary\Uploader::upload(&ldquo;iphone_movie.mov&rdquo;,array(</p>

<pre><code>"resource_type" =&gt; "video"
</code></pre>

<p>));</p>

<p>print_r($ret);
```</p>

<p>結果は以下。</p>

<p>```
Array (</p>

<pre><code>[public_id] =&gt; wfdpqg39qjoc6lnkr3cs 
[version] =&gt; 1430967110 
[signature] =&gt; 7f52af2c53ccc3b38f8b33300a40d6085c85c032 
[width] =&gt; 1280 
[height] =&gt; 720 
[format] =&gt; mov 
[resource_type] =&gt; video 
[created_at] =&gt; 2015-05-07T02:51:50Z 
[tags] =&gt; Array ( ) 
[bytes] =&gt; 5572519 
[type] =&gt; upload 
[etag] =&gt; 3114c6de99a74817eef082b330754d1e 
[url] =&gt; http://res.cloudinary.com/harslxcej/video/upload/v1430967110/wfdpqg39qjoc6lnkr3cs.mov 
[secure_url] =&gt; https://res.cloudinary.com/harslxcej/video/upload/v1430967110/wfdpqg39qjoc6lnkr3cs.mov 
[audio] =&gt; Array ( 
    [codec] =&gt; aac 
    [bit_rate] =&gt; 63431 
    [frequency] =&gt; 44100 
    [channels] =&gt; 1 
    [channel_layout] =&gt; mono 
) 
[video] =&gt; Array ( 
    [pix_format] =&gt; yuv420p 
    [codec] =&gt; h264 
    [level] =&gt; 31 
    [bit_rate] =&gt; 4604806 
) 
[frame_rate] =&gt; 29.97002997003 
[bit_rate] =&gt; 4686070 
[duration] =&gt; 9.538333 
[rotation] =&gt; 0 
</code></pre>

<p>)
```</p>

<h2>表示</h2>

<p>PHPでは、<code>cl_video_tag</code>を利用することで<code>video</code>タグを出力してくれる。</p>

<pre><code>cl_video_tag($public_id, array( "alt" =&gt; "Sample Video" ));
</code></pre>

<p>出力</p>

<p>```
<video alt='Sample Video' poster='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.jpg'></p>

<pre><code>&lt;source src='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.webm' type='video/webm'&gt;
&lt;source src='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.mp4' type='video/mp4'&gt;
&lt;source src='https://res.cloudinary.com/harslxcej/video/upload/wfdpqg39qjoc6lnkr3cs.ogv' type='video/ogg'&gt;
</code></pre>

<p></video>
```</p>

<p>このままだとコントローラーが表示されていないので、その辺のオプションも追加する。</p>

<p>```
cl_video_tag($public_id, array(</p>

<pre><code>"width" =&gt; 600,
"height" =&gt; 400,
"crop" =&gt; "fill",
"preload" =&gt; "none",
"controls" =&gt; true,
</code></pre>

<p>));
```</p>

<p>出力</p>

<p>```
<video controls='1' height='400' poster='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.jpg' preload='none' width='600'></p>

<pre><code>&lt;source src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.webm' type='video/webm'&gt;
&lt;source src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.mp4' type='video/mp4'&gt;
&lt;source src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_400,w_600/wfdpqg39qjoc6lnkr3cs.ogv' type='video/ogg'&gt;
</code></pre>

<p></video>
```</p>

<p>サムネイルの出力は以下。<br/>
public idに拡張子をつけてやらないと表示が出来なかった。<br/>
(jpg, png, webp, wdpに対応しているよう)</p>

<p>```
cl_image_tag($public_id.&ldquo;.jpg&rdquo;, array(</p>

<pre><code>"width"=&gt;300,
"height"=&gt;300,
"crop"=&gt;"fill",
"resource_type"=&gt;"video"
</code></pre>

<p>));
```</p>

<p>結果</p>

<pre><code>&lt;img src='https://res.cloudinary.com/harslxcej/video/upload/c_fill,h_300,w_300/wfdpqg39qjoc6lnkr3cs.jpg' height='300' width='300'/&gt;
</code></pre>

<h2>フォームからアップロード</h2>

<p><a href="http://kayamemo.mrlittlebig.com/blog/2015/04/16/heroku-transloadit-2/">前回、Transloaditでアップロード</a>した時と同じように、フォームから選択した動画をアップロードしてみる。</p>

<h3>情報が取得できない</h3>

<p>動画をフォームからアップロードしてみると情報が取得できない、と思ったが、<br/>
どうやらサーバーの設定での最大アップロードサイズを超過していたよう。</p>

<p>アップロードサイズはデフォルトでは、<code>2MB</code>。<br/>
これの変更方法は以前に書いていた。<br/>
<a href="http://kayamemo.mrlittlebig.com/blog/2014/02/18/change-max-filesize/">[PHP][heroku]upload_max_filesizeを変更する &ndash; KayaMemo</a></p>

<h3>コード</h3>

<p>以下、全コード。<br/>
動画をアップロードされたら表示するところまで。<br/>
(エラーチェックなどは全くしていないので注意)</p>

<p>```
&lt;?php
require &lsquo;../vendor/autoload.php&rsquo;;
use Cloudinary;
use Cloudinary\Uploader;</p>

<p>$showFlg = false;</p>

<p>if(isset($_FILES[&lsquo;userfile&rsquo;])){</p>

<pre><code>if (move_uploaded_file($_FILES['userfile']['tmp_name'], $_FILES['userfile']['name'])) {
    $uploadFile = $_FILES['userfile']['name'];

$account = parse_url(getenv('CLOUDINARY_URL'));
\Cloudinary::config(array(
    "cloud_name" =&gt; $account['host'],
    "api_key" =&gt; $account['user'],
    "api_secret" =&gt; $account['pass']
));

$ret = \Cloudinary\Uploader::upload($uploadFile,array(
    "resource_type" =&gt; "video"
));
$public_id = $ret['public_id'];
$showFlg = true;
}
</code></pre>

<p>}
?></p>

<p>&lt;!DOCTYPE html>
<html lang="ja">
<head></p>

<pre><code>&lt;title&gt;ファイルアップロードテスト&lt;/title&gt;
&lt;meta charset="utf-8"&gt;
</code></pre>

<p></head>
<body></p>

<p>&lt;?php if(!$showFlg){ ?>
<form enctype="multipart/form-data" method="post" action="upload-form-movie.php"></p>

<pre><code>&lt;input type="hidden" name="MAX_FILE_SIZE" value="20000000" /&gt;
&lt;input name="userfile" type="file"&gt;
&lt;input type="submit" value="Upload"&gt;
</code></pre>

<p></form>
&lt;?php }else{</p>

<pre><code>echo $resize = cl_video_tag($public_id, array(
    "width" =&gt; 600,
    "height" =&gt; 400,
    "crop" =&gt; "fill",
    "preload" =&gt; "none",
    "controls" =&gt; true,
));
</code></pre>

<p>} ?></p>

<p></body>
</html>
```</p>

<h2>参考</h2>

<p><a href="http://cloudinary.com/blog/introducing_cloud_based_service_for_video_upload_real_time_manipulation_and_optimized_viewing#api_example_1">Introducing cloud based service for video management | Cloudinary Blog</a><br/>
<a href="http://cloudinary.com/documentation/video_manipulation_and_delivery">Video manipulation and delivery | Cloudinary</a></p>

<p><a href="http://php.net/manual/ja/features.file-upload.post-method.php">PHP: POST メソッドによるアップロード &ndash; Manual </a><br/>
<a href="http://www.php-factory.net/trivia/05.php">サーバーのアップロードファイルの最大容量の確認と容量制限の変更｜PHP工房</a><br/>
<a href="https://devcenter.heroku.com/articles/custom-php-settings#user-ini-files-recommended">Customizing Web Server and Runtime Settings for PHP | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[herokuアドオン]cloudinaryで画像のアップロードと表示[PHP]]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/07/cloudinary-img/"/>
    <updated>2015-05-07T11:34:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/07/cloudinary-img</id>
    <content type="html"><![CDATA[<p>PHPを利用して、cloudinaryにアップロードして、画像を表示させてみた。</p>

<!-- more -->


<h2>インストール</h2>

<p>composerを利用。</p>

<p>```
{
  &ldquo;require&rdquo;: {</p>

<pre><code>"cloudinary/cloudinary_php": "dev-master"
</code></pre>

<p>  }
}
```</p>

<p>インストール。</p>

<p>```
$ composer install
Loading composer repositories with package information
Installing dependencies (including require-dev)
  &ndash; Installing cloudinary/cloudinary_php (dev-master cfa2fd7)</p>

<pre><code>Cloning cfa2fd7d4043844b46411c213795eafb648703df
</code></pre>

<p>Writing lock file
Generating autoload files
```</p>

<h2>herokuにインストール</h2>

<p>アドオンを追加。</p>

<p><img src="/images/2015/05/Cloudinary01.jpg" alt="add-on" /></p>

<p><code>
$ heroku addons:create cloudinary:starter
Creating unwinding-truly-5886... done
Adding unwinding-truly-5886 to your-app-name... done
Setting CLOUDINARY_URL and restarting your-app-name... done, v3
Use `heroku addons:docs cloudinary` to view documentation.
</code></p>

<p>環境変数の<code>CLOUDINARY_URL</code>でアカウント情報を取得できる。</p>

<h2>アップロード</h2>

<p>以下のコードを記述し、アクセス。<br/>
flickr上にある画像をアップロードしている。</p>

<p>```
&lt;?php
require &lsquo;../vendor/autoload.php&rsquo;;</p>

<p>use Cloudinary;
use Cloudinary\Uploader;</p>

<p>$account = parse_url(getenv(&lsquo;CLOUDINARY_URL&rsquo;));</p>

<p>\Cloudinary::config(array(</p>

<pre><code>"cloud_name" =&gt; $account['host'],
"api_key" =&gt; $account['user'],
"api_secret" =&gt; $account['pass']
</code></pre>

<p>));</p>

<p>$ret = \Cloudinary\Uploader::upload(&ldquo;<a href="https://farm9.staticflickr.com/8748/16531734384_afdd2327e5_z.jpg">https://farm9.staticflickr.com/8748/16531734384_afdd2327e5_z.jpg</a>&rdquo;);</p>

<p>print_r($ret);
```</p>

<p>で、結果は以下のように返ってくる。</p>

<p>```
Array (</p>

<pre><code>[public_id] =&gt; xa9kfgp9jvxouekmrrqu 
[version] =&gt; 1430964069 
[signature] =&gt; 088135f7c32ad04436a18eb35d05b28bfd9e7870 
[width] =&gt; 640 
[height] =&gt; 480 
[format] =&gt; jpg 
[resource_type] =&gt; image 
[created_at] =&gt; 2015-05-07T02:01:09Z 
[tags] =&gt; Array ( ) 
[bytes] =&gt; 174550 
[type] =&gt; upload 
[etag] =&gt; 6fdff26d1bd4d9cc55c3c613743a8dc1 
[url] =&gt; http://res.cloudinary.com/harslxcej/image/upload/v1430964069/xa9kfgp9jvxouekmrrqu.jpg 
[secure_url] =&gt; https://res.cloudinary.com/harslxcej/image/upload/v1430964069/xa9kfgp9jvxouekmrrqu.jpg 
</code></pre>

<p>)
```</p>

<h2>URLでの表示</h2>

<p>アップロードが完了したものはアクセスするURLを変更することでサイズなどを変更できる。</p>

<h3>オリジナル</h3>

<pre><code>http://res.cloudinary.com/harslxcej/image/upload/xa9kfgp9jvxouekmrrqu.jpg
</code></pre>

<p><img src="http://res.cloudinary.com/harslxcej/image/upload/xa9kfgp9jvxouekmrrqu.jpg" alt="オリジナル" /></p>

<h3>リサイズ</h3>

<pre><code>http://res.cloudinary.com/harslxcej/image/upload/w_100,h_100/xa9kfgp9jvxouekmrrqu.jpg
</code></pre>

<p><img src="http://res.cloudinary.com/harslxcej/image/upload/w_100,h_100/xa9kfgp9jvxouekmrrqu.jpg" alt="リサイズ" /></p>

<h3>角丸</h3>

<pre><code>http://res.cloudinary.com/harslxcej/image/upload/w_320,h_240,c_fill,r_20/xa9kfgp9jvxouekmrrqu.png
</code></pre>

<p><img src="http://res.cloudinary.com/harslxcej/image/upload/w_320,h_240,c_fill,r_20/xa9kfgp9jvxouekmrrqu.png" alt="角丸" /></p>

<p>利用できるタグなどは以下を参照。<br/>
<a href="http://cloudinary.com/documentation/image_transformations">Image transformations | Cloudinary</a></p>

<h2>PHPでURLの生成</h2>

<p>上記のURLをPHPのコードで生成する。</p>

<h3>cl_image_tag</h3>

<p><code>cl_image_tag</code>を利用すると、<code>&lt;img&gt;</code>のタグごと出力される。</p>

<pre><code>$public_id = 'xa9kfgp9jvxouekmrrqu';
echo cl_image_tag($public_id, array( "alt" =&gt; "Sample Image" ));
</code></pre>

<p>結果</p>

<pre><code>&lt;img src='https://res.cloudinary.com/harslxcej/image/upload/xa9kfgp9jvxouekmrrqu' alt='Sample Image'/&gt;
</code></pre>

<p>加工</p>

<pre><code>cl_image_tag($public_id, array(
    "width" =&gt; 100,
    "height" =&gt; 100,
    "crop" =&gt; "fill",
    "effect" =&gt; "grayscale"
));
</code></pre>

<p>結果</p>

<pre><code>&lt;img src='https://res.cloudinary.com/harslxcej/image/upload/c_fill,e_grayscale,h_100,w_100/xa9kfgp9jvxouekmrrqu' height='100' width='100'/&gt;
</code></pre>

<p><img src='https://res.cloudinary.com/harslxcej/image/upload/c_fill,e_grayscale,h_100,w_100/xa9kfgp9jvxouekmrrqu' height='100' width='100'/></p>

<h3>cloudinary_url</h3>

<p>URLを直接取得するには、<code>cloudinary_url</code>を使用する。</p>

<pre><code>echo cloudinary_url($public_id);
echo cloudinary_url($public_id, array(
    "width" =&gt; 100,
    "height" =&gt; 100,
    "crop" =&gt; "fill",
    "effect" =&gt; "grayscale"
));
</code></pre>

<p>その他、詳しくは以下を参照。</p>

<p><a href="http://cloudinary.com/documentation/php_image_manipulation">PHP image manipulation | Cloudinary</a></p>

<h2>参考</h2>

<p><a href="http://cloudinary.com/documentation/php_integration">PHP integration | Cloudinary</a><br/>
<a href="http://programmer-jobs.blogspot.jp/2013/12/phpphalconcloudinary.html">PHPフレームワークのPhalconで&#12289;写真ストレージクラウドのCloudinaryと連携 一言多いプログラマーの独り言</a><br/>
<a href="https://github.com/cloudinary/cloudinary_php">cloudinary/cloudinary_php</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Herokuアドオン]TransloaditでAWS S3にアップロード]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/24/heroku-transloadit-3/"/>
    <updated>2015-04-24T12:41:32+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/24/heroku-transloadit-3</id>
    <content type="html"><![CDATA[<p>アップロードした動画をS3にエクスポートしてみた。</p>

<!-- more -->


<h2>AWS</h2>

<h4>バケットを作る</h4>

<p>まずはawsにてバケットを作る。</p>

<p><code>movie-upload-sample</code>で作った。<br/>
(アンダースコアを入れると怒られた)</p>

<p><img src="/images/2015/04/aws01.png" alt="" /></p>

<p><img src="/images/2015/04/aws02.png" alt="" /></p>

<h4>アクセスキーとシークレットキー</h4>

<p><img src="/images/2015/04/aws03.png" alt="" /></p>

<p><code>s3upload</code>で、作成した。</p>

<p><img src="/images/2015/04/aws04.png" alt="" /></p>

<p>作成後、アクセスキーとシークレットキーを確認できる。<br/>
CSVでもダウンロード化。</p>

<p><img src="/images/2015/04/aws05.png" alt="" /></p>

<p>ただし、シークレットアクセスキーを確認できるのはこの状態が最後らしく、そのまま閉じようとしたら警告された。</p>

<p><img src="/images/2015/04/aws06.png" alt="" /></p>

<p>確かに作成したユーザー情報を見ても確認は出来なかった。<br/>
忘れてしまったりした場合は再度アクセスキーの作成が必要なよう。<br/>
(セキュリティ的にはある程度の頻度で変更することがオススメされている)</p>

<p>次に権限を付与。<br/>
作成したユーザーをクリックして、アクセス許可 &ndash;> ポリシーのアタッチ、をクリック。</p>

<p><img src="/images/2015/04/aws07.png" alt="" /></p>

<p><code>AmazonS3FullAccess</code>を選択して、ポリシーのアタッチ。</p>

<p><img src="/images/2015/04/aws08.png" alt="" /></p>

<p>アタッチされた。</p>

<p><img src="/images/2015/04/aws09.png" alt="" /></p>

<p>これでS3にアップロードする準備が整った。</p>

<h2>Transloaditテンプレート</h2>

<p>作成したバケットやIAMの情報をテンプレートに埋め込んでいく。<br/>
その時、アップするpathを選択できる。</p>

<h3>path</h3>

<p>ドキュメントを見ていると、以下のようにするのが推奨？されていた。<br/>
<code>${previous_step.name}/${unique_prefix}/${file.id}.${file.ext}</code><br/>
出力例：<code>video-step-name/a8/d3eeeb67479f11f8b091b04f6181ad.png</code></p>

<p>とりあえずこのままアップロードしてみた。<br/>
アップロードしたテンプレートは以下。</p>

<pre><code>'params' =&gt; [
    'steps' =&gt; [
        'encode_video' =&gt; [
            'use' =&gt; ':original',
            'robot' =&gt; '/video/encode',
            'preset' =&gt; 'android'
        ],
        'thumb' =&gt; [
            'user' =&gt; 'encode_video',
            'robot' =&gt; '/video/thumbs',
            'count' =&gt; 1,
            'offsets' =&gt; [1],
            'width'=&gt; 100,
            'height'=&gt; 100,
        ],
        'export' =&gt; [
            'use' =&gt; ['encode_video', 'thumb'],
            'robot' =&gt; '/s3/store',
            'bucket' =&gt; 'movie-upload-sample',
            'key' =&gt; 'アクセスキー',
            'secret' =&gt; 'シークレットキー',
            'path' =&gt; '${previous_step.name}/${unique_prefix}/${file.id}.${file.ext}'
        ]
    ],
    'redirect_url' =&gt; $redirectUrl,
]
</code></pre>

<p>awsを見ると以下のようにアップロードされていた。</p>

<p><strong>動画</strong><br/>
<img src="/images/2015/04/aws10.png" alt="" /><br/>
<strong>サムネイル</strong><br/>
<img src="/images/2015/04/aws11.png" alt="" /></p>

<p>ユニーク、なのだが、<code>${unique_prefix}</code>が戻り値にも含まれておらず、アップロード側から知ることが出来ないっぽい。<br/>
<code>file.id</code>は、UUIDになっているとのことなのでユニークなよう。<br/>
これを利用して以下のようにする。</p>

<pre><code>${previous_step.name}/${file.id}.${file.ext}
</code></pre>

<p>これで以下の様なURLで参照出来るようになる。</p>

<pre><code>https://{bucket}.s3.amazonaws.com/movie-upload-sample/encode_video/{id}.mp4
https://{bucket}.s3.amazonaws.com/movie-upload-sample/thumb/{id}.jpg
</code></pre>

<p>ちなみに、エクスポートを使用した場合は、<br/>
transloaditの管理画面から処理済のファイルへのアクセスも、指定したS3へのファイルが参照されるようになるよう。<br/>
(S3だけでなく、FTPなどでも同様)</p>

<h2>全コード</h2>

<pre><code>&lt;?php

require 'vendor/autoload.php';

use transloadit\Transloadit;
$transloadit = new Transloadit([
    'key' =&gt; getenv('TRANSLOADIT_AUTH_KEY'),
    'secret' =&gt; getenv('TRANSLOADIT_SECRET_KEY')
]);

$response = Transloadit::response();
if ($response) {
    echo '&lt;h1&gt;Assembly status:&lt;/h1&gt;';
    echo '&lt;pre&gt;';
    print_r($response);
    echo '&lt;/pre&gt;';
    exit;
}

$redirectUrl = sprintf(
    'http://%s%s',
    $_SERVER['HTTP_HOST'],
    $_SERVER['REQUEST_URI']
);

echo $transloadit-&gt;createAssemblyForm([
    'params' =&gt; [
        'steps' =&gt; [
            'encode_video' =&gt; [
                'use' =&gt; ':original',
                'robot' =&gt; '/video/encode',
                'preset' =&gt; 'android'
            ],
            'thumb' =&gt; [
                'user' =&gt; 'encode_video',
                'robot' =&gt; '/video/thumbs',
                'count' =&gt; 1,
                'offsets' =&gt; [1],
                'width'=&gt; 100,
                'height'=&gt; 100,
            ],
            'export' =&gt; [
                'use' =&gt; ['encode_video', 'thumb'],
                'robot' =&gt; '/s3/store',
                'bucket' =&gt; 'movie-upload-sample',
                'key' =&gt; 'アクセスキー',
                'secret' =&gt; 'シークレットキー',
                'path' =&gt; '${previous_step.name}/${file.id}.${file.ext}'
            ]
        ],
        'redirect_url' =&gt; $redirectUrl
    ]
]);
?&gt;

&lt;!DOCTYPE html&gt;
&lt;html lang="ja"&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="container"&gt;
    &lt;h1&gt;Pick a video to encode for iPhone / Android.&lt;/h1&gt;
    &lt;form&gt;
        &lt;div class="form-group"&gt;
            &lt;label for="exampleInputFile"&gt;File input&lt;/label&gt;
            &lt;input name="example_upload" id="exampleInputFile" type="file"&gt;
            &lt;p class="help-block"&gt;Upload video, NOW.&lt;/p&gt;
        &lt;/div&gt;
        &lt;input type="submit" class="btn btn-danger btn-lg" value="Upload"&gt;
    &lt;/form&gt;
&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>余談</h2>

<p>ちなみに、transloaditのエンコードタイプには、プリセットでiPhoneとアンドロイドどちらも用意されているけれど、<br/>
今回試してみたところではどちらも同じ内容のようだった。<br/>
<code>ffmpeg</code>で読み込ませてみた内容は以下。<br/>
(videoとaudioだけ抽出)</p>

<pre><code>Stream #0:0(und): Video: h264 (Constrained Baseline) (avc1 / 0x31637661), yuv420p, 480x320, 523 kb/s, 25 fps, 25 tbr, 25 tbn, 50 tbc (default)
Stream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, mono, fltp, 82 kb/s (default)
</code></pre>

<h2>参考</h2>

<p><a href="https://transloadit.com/demos/video-encode/encode-for-iphone">Encode a video for the iPhone and strip sound | Transloadit</a><br/>
<a href="https://transloadit.com/demos/video-encode/encode-for-android">Encode a video for Android | Transloadit</a><br/>
<a href="https://transloadit.com/demos/s3-store/store-encoding-and-thumbnails">Encode a video, extract 8 thumbnails and store everything in your S3 bucket | Transloadit</a><br/>
<a href="http://joppot.info/2014/06/14/1621">awsのs3を操作する為のaccess keyとsecret keyを取得する(IAM)</a><br/>
<a href="https://transloadit.com/docs/conversion-robots/#export-to-amazon-s3-with-the-s3store-bot">Export to Amazon S3 with the /s3/store bot | Transloadit</a><br/>
<a href="https://transloadit.com/docs/#assembly-variables">#Assembly variables | Integration | Transloadit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Herokuアドオン]TransloaditでFTPアップロード]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/16/heroku-transloadit-2/"/>
    <updated>2015-04-16T17:08:38+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/16/heroku-transloadit-2</id>
    <content type="html"><![CDATA[<p>アップロード先をFTPに指定する方法と、<br/>
その内容をテンプレート化するまでのメモ。</p>

<!-- more -->


<p><code>steps</code>内の<code>robot</code>で、<code>/ftp/store</code>を指定する。<br/>
詳しいパラメータは以下。</p>

<p><a href="https://transloadit.com/docs/conversion-robots/#export-to-your-ftp-server-with-the-ftpexport-robot">6.3 Export to your FTP Server with the /ftp/export robot</a></p>

<p>設定ファイル部分は以下のようにした。</p>

<p>```
$transloadit->createAssemblyForm([</p>

<pre><code>'params' =&gt; [
    'steps' =&gt; [
        'export' =&gt; [
            'use' =&gt; ':original',
            'robot' =&gt; '/ftp/store',
            'user' =&gt; 'ユーザー名',
            'password' =&gt; 'パスワード',
            'host' =&gt; 'ホスト名',
            'path' =&gt; '/ディレクトリ/test.jpg'
        ]
    ],
    'redirect_url' =&gt; $redirectUrl
]
</code></pre>

<p>]);
```</p>

<p>フォームから入力されたファイルがアップロードされる。</p>

<ul>
<li> <code>export</code>：ここは名前をつけているだけなので、なんでもよい。</li>
<li><code>use</code>：どの時点のファイルを使用するか。<code>:original</code>だとオリジナルのファイル。複数のパターンを指定する場合は配列で指定する。<br>ただし、その場合、パスは１つしか指定出来ないので、後に書いたほうが上書きされる。<br>(２つ書かないといけないと思われる)</li>
<li><code>user</code>：ユーザー名</li>
<li><code>password</code>：パスワード</li>
<li><code>host</code>：ホスト</li>
<li><code>path</code>：保存先のパス。ファイル名まで指定しないといけない</li>
</ul>


<p>ファイル名は、<code>${file.url_name}</code>と指定することで、ユーザーが選択したファイル名でアップロード出来る。<br/>
この書き方の種類は以下にあった。<br/>
<a href="https://transloadit.com/docs/conversion-robots/#available-job-variables">https://transloadit.com/docs/conversion-robots/#available-job-variables</a></p>

<p>実行後は即時にアップロードされるわけではなく、多少の処理が必要になるよう。<br/>
なので実際にはキューを出している状態。<br/>
数秒後にサーバー上にアップロードが行われる。</p>

<p><img src="/images/2015/04/transloadit05.jpg" alt="Executing" /></p>

<p>なので、クライアント側で完了を検知するには、transloaditから通知させるか(まだよくわかってない)、<br/>
定期的に確認しにいくか、などの処理が必要と思われる。</p>

<h2>テンプレート化</h2>

<p>上記の設定内容をテンプレート化して保存してみる。<br/>
テンプレート化することによってアカウント情報などをソース上から分離出来、セキュリティを高める効果があるよう。</p>

<p>herokuのアドオンからtranloaditの管理画面に遷移後、<code>TEMPLATES</code>を選択。<br/>
<code>+NES</code>をクリック。</p>

<p><img src="/images/2015/04/transloadit06.jpg" alt="Executing" /></p>

<p>で、以下のようにテンプレートを作成する。</p>

<p>```
{
  &ldquo;steps&rdquo;: {</p>

<pre><code>"export": {
  "use": ":original",
  "robot": "/ftp/store",
  "user": "ユーザー名",
  "password": "パスワード",
  "host": "ホスト名",
  "path": "/ディレクトリ/${file.url_name}"
}
</code></pre>

<p>  }
}
```</p>

<p>適当に名前をつけて保存。<br/>
保存後、テンプレートの一覧画面から、IDを確認できるようになるので、これを覚えておく。</p>

<p><img src="/images/2015/04/transloadit07.jpg" alt="Template list" /></p>

<p>で、このIDを使用して以下のように書き換える。</p>

<p>```
$transloadit->createAssemblyForm([</p>

<pre><code>'params' =&gt; [
    'template_id' =&gt; 'テンプレートのID',
    'redirect_url' =&gt; $redirectUrl
]
</code></pre>

<p>]);
```</p>

<p>これで実行すると上記のテンプレートが使用されて、FTPアップロードが行われる。<br/>
テンプレートを使用してアップロードした場合は、結果のリストにもその旨が表示される。</p>

<p><img src="/images/2015/04/transloadit08.jpg" alt="Assemblies" /></p>

<h2>コード</h2>

<p>```
&lt;?php
require &lsquo;../vendor/autoload.php&rsquo;;</p>

<p>use transloadit\Transloadit;
$transloadit = new Transloadit([</p>

<pre><code>'key' =&gt; getenv('TRANSLOADIT_AUTH_KEY'),
'secret' =&gt; getenv('TRANSLOADIT_SECRET_KEY')
</code></pre>

<p>]);</p>

<p>$response = Transloadit::response();
if ($response) {</p>

<pre><code>echo '&lt;h1&gt;Assembly status:&lt;/h1&gt;';
echo '&lt;pre&gt;';
print_r($response);
echo '&lt;/pre&gt;';
exit;
</code></pre>

<p>}</p>

<p>$redirectUrl = sprintf(</p>

<pre><code>'http://%s%s',
$_SERVER['HTTP_HOST'],
$_SERVER['REQUEST_URI']
</code></pre>

<p>);</p>

<p>echo $transloadit->createAssemblyForm([</p>

<pre><code>'params' =&gt; [
    'template_id' =&gt; 'テンプレートのID',
    'redirect_url' =&gt; $redirectUrl
]
</code></pre>

<p>]);</p>

<p>?></p>

<p>&lt;!DOCTYPE html>
<html lang="ja">
<head></p>

<pre><code>&lt;meta charset="utf-8"&gt;
</code></pre>

<p></head>
<body></p>

<p><form method="post" action="upload_select_sample.php"></p>

<pre><code>&lt;input name="example_upload" type="file" accept="image/*,video/*"&gt;
&lt;input type="submit" value="Upload"&gt;
</code></pre>

<p></form></p>

<p></body>
</html>
```</p>

<hr />

<h2>参考</h2>

<p><a href="https://transloadit.com/demos/ftp-store/store-uploaded-files">Store the originally uploaded files on your FTP server | Transloadit</a><br/>
<a href="https://transloadit.com/docs/#how-to-use-a-template">How to use a template</a><br/>
<a href="https://transloadit.com/docs/conversion-robots/#available-job-variables">Available job variables</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Herokuアドオン]Transloaditアドオンを使ってPHPでファイルアップロード]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/16/heroku-transloadit-1/"/>
    <updated>2015-04-16T10:32:46+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/16/heroku-transloadit-1</id>
    <content type="html"><![CDATA[<p>動画をアップロード + エンコードしてくれるというTransloaditのherokuアドオンを使ってみた。</p>

<!-- more -->


<h2>herokuへのインストール</h2>

<p>無料プランがあるので、とりあえずそれで。</p>

<pre><code>$ heroku addons:add transloadit:sandbox
</code></pre>

<p>無料プランの場合は、Encoding Volumeが1GB、の制限がある。</p>

<p>transloaditの料金体系は少しややこしくなっているようで、<br/>
無料のsandboxプランだと、トータルで1GBになっているよう。</p>

<p><a href="https://addons.heroku.com/transloadit">Transloadit | Add-ons | Heroku</a><br/>
<img src="/images/2015/04/transloadit02.jpg" alt="heroku料金" /></p>

<p>公式ページのプランでも値段は一緒。</p>

<p><a href="https://transloadit.com/pricing/">Pricing &amp; Signup | Transloadit</a><br/>
<img src="/images/2015/04/transloadit01.jpg" alt="公式料金" /></p>

<p>この1GBとうのは何が含まれるかというと、公式で説明があった。<br/>
エンコードした場合、する前とした後と両方のサイズが合算されてカウントされるよう。</p>

<p>例えば、0.8MBの画像ファイルをエンコードして0.2MBしたとすれば、それで1MBを使用した事になる。<br/>
で、これを1024回繰り返すと、1GBになるので無料枠は終了。</p>

<p>ファイルの閲覧自体には加算されないよう。</p>

<h2>PHP SDKのインストール</h2>

<p>公式どおり、Composerでインストールする。</p>

<p>```
{
  &ldquo;require&rdquo;: {</p>

<pre><code>"transloadit/php-sdk": "dev-master"
</code></pre>

<p>  }
}
```</p>

<p>ローカルで<code>composer install</code>しておく。<br/>
この際、php5.6以上でないとインストール出来ないので注意。<br/>
(自分の環境ではphp5.4だったので、<a href="http://kayamemo.mrlittlebig.com/blog/2015/04/15/mac-update-php/">アップデートした</a>)</p>

<h2>ファイルのアップロード</h2>

<p>公式に載っていたママだけど、<br/>
アクセスするとheroku上の同じディレクトリに置いたファイルをアップロードするだけ、のサンプルを実行してみる。</p>

<p><strong>PHP全コード</strong></p>

<p>```
&lt;?php
require &lsquo;../vendor/autoload.php&rsquo;;</p>

<p>use transloadit\Transloadit;
$transloadit = new Transloadit(array(</p>

<pre><code>'key' =&gt; getenv('TRANSLOADIT_AUTH_KEY'),
'secret' =&gt; getenv('TRANSLOADIT_SECRET_KEY')
</code></pre>

<p>));</p>

<p>$response = $transloadit->createAssembly(array(</p>

<pre><code>'files' =&gt; array(dirname(__FILE__).'/160x160.png'),
'params' =&gt; array(
    'steps' =&gt; array(
        'resize' =&gt; array(
            'robot' =&gt; '/image/resize',
            'width' =&gt; 100,
            'height' =&gt; 100,
        )
    )
),
</code></pre>

<p>));</p>

<p>// Show the results of the assembly we spawned
echo &lsquo;<pre>&rsquo;;
print_r($response);
echo &lsquo;</pre>&rsquo;;
```</p>

<p><strong>レスポンス</strong></p>

<p>```
transloadit\TransloaditResponse Object
(</p>

<pre><code>[data] =&gt; Array
    (
        [ok] =&gt; ASSEMBLY_EXECUTING
        [message] =&gt; The assembly is currently being executed.
        [assembly_id] =&gt; id
        [parent_id] =&gt; 
        [account_id] =&gt; id
        [template_id] =&gt; 
        [instance] =&gt; xxx.transloadit.com
        [assembly_url] =&gt; http://api2.karima.transloadit.com/assemblies/xxx
        [assembly_ssl_url] =&gt; https://karima.transloadit.com/assemblies/xxx
        [bytes_received] =&gt; 1107
        [bytes_expected] =&gt; 1107
        [upload_duration] =&gt; 1.477
        [client_agent] =&gt; Transloadit PHP SDK v2.0.0
        [client_ip] =&gt; 10.166.13.48
        [client_referer] =&gt; 
        [start_date] =&gt; 2015/04/16 01:29:02 GMT
        [is_infinite] =&gt; 
        [has_dupe_jobs] =&gt; 
        [execution_start] =&gt; 2015/04/16 01:29:03 GMT
        [execution_duration] =&gt; 0.002
        [notify_start] =&gt; 
        [notify_url] =&gt; 
        [notify_status] =&gt; 
        [notify_response_code] =&gt; 
        [notify_duration] =&gt; 
        [last_job_completed] =&gt; 
        [fields] =&gt; Array
            (
            )

        [running_jobs] =&gt; Array
            (
            )

        [bytes_usage] =&gt; 0
        [executing_jobs] =&gt; Array
            (
                [0] =&gt; resize
            )

        [started_jobs] =&gt; Array
            (
                [0] =&gt; resize:::original
            )

        [parent_assembly_status] =&gt; 
        [params] =&gt; {"steps":{"resize":{"robot":"/image/resize","width":100,"height":100}},"auth":{"key":"****","expires":"2015/04/16 03:29:01+00:00"}}
        [template] =&gt; 
        [uploads] =&gt; Array
            (
                [0] =&gt; Array
                    (
                        [id] =&gt; xxx
                        [name] =&gt; 160x160.png
                        [basename] =&gt; 160x160
                        [ext] =&gt; png
                        [size] =&gt; 494
                        [mime] =&gt; image/png
                        [type] =&gt; image
                        [field] =&gt; file_1
                        [md5hash] =&gt; xxx
                        [original_id] =&gt; xxx
                        [original_basename] =&gt; 160x160
                        [original_md5hash] =&gt; xxx
                        [url] =&gt; http://tmp.transloadit.com.s3.amazonaws.com/xxx.png
                        [ssl_url] =&gt; https://s3.amazonaws.com/tmp.transloadit.com/xxx.png
                        [meta] =&gt; Array
                            (
                                [width] =&gt; 160
                                [height] =&gt; 160
                                [date_recorded] =&gt; 
                                [date_file_created] =&gt; 
                                [date_file_modified] =&gt; 2015/04/16 01:29:02 GMT
                                [title] =&gt; 
                                [description] =&gt; 
                                [location] =&gt; 
                                [aspect_ratio] =&gt; 1
                                [city] =&gt; 
                                [state] =&gt; 
                                [country] =&gt; 
                                [country_code] =&gt; 
                                [keywords] =&gt; 
                                [aperture] =&gt; 
                                [exposure_compensation] =&gt; 
                                [exposure_mode] =&gt; 
                                [exposure_time] =&gt; 
                                [flash] =&gt; 
                                [focal_length] =&gt; 
                                [f_number] =&gt; 
                                [iso] =&gt; 
                                [light_value] =&gt; 
                                [metering_mode] =&gt; 
                                [shutter_speed] =&gt; 
                                [white_balance] =&gt; 
                                [device_name] =&gt; 
                                [device_vendor] =&gt; 
                                [device_software] =&gt; 
                                [latitude] =&gt; 
                                [longitude] =&gt; 
                                [orientation] =&gt; 
                                [has_clipping_path] =&gt; 
                                [creator] =&gt; 
                                [author] =&gt; 
                                [copyright] =&gt; 
                                [copyright_notice] =&gt; 
                                [frame_count] =&gt; 1
                                [colorspace] =&gt; Gray
                                [average_color] =&gt; #686868
                            )

                    )

            )

        [results] =&gt; Array
            (
            )

    )

[curlInfo] =&gt; Array
    (
        [url] =&gt; https://karima.transloadit.com/assemblies
        [content_type] =&gt; application/json; charset=utf-8
        [http_code] =&gt; 200
        [header_size] =&gt; 371
        [request_size] =&gt; 220
        [filetime] =&gt; -1
        [ssl_verify_result] =&gt; 0
        [redirect_count] =&gt; 0
        [total_time] =&gt; 1.91859
        [namelookup_time] =&gt; 0.012709
        [connect_time] =&gt; 0.421413
        [pretransfer_time] =&gt; 0.435759
        [size_upload] =&gt; 1107
        [size_download] =&gt; 2527
        [speed_download] =&gt; 1317
        [speed_upload] =&gt; 576
        [download_content_length] =&gt; -1
        [upload_content_length] =&gt; 1107
        [starttransfer_time] =&gt; 0.43577
        [redirect_time] =&gt; 0
        [redirect_url] =&gt; 
        [primary_ip] =&gt; 10.234.41.26
        [certinfo] =&gt; Array
            (
            )

        [primary_port] =&gt; 443
        [local_ip] =&gt; 172.18.203.90
        [local_port] =&gt; 41591
    )

[curlErrorNumber] =&gt; 0
[curlErrorMessage] =&gt; 
</code></pre>

<p>)
```</p>

<p>画像のURLはレスポンスの、<code>data &gt; uploads &gt; url(ssl_url)</code>に入っている。</p>

<h2>結果</h2>

<p>herokuのアドオンからTransloadit上で確認すると以下のようにファイルがアップロードされていた。<br/>
<img src="/images/2015/04/transloadit03.jpg" alt="結果" /></p>

<p>ファイル名をクリックする事で詳細を確認出来る。<br/>
ファイルの確認やダウンロードもここから可能。<br/>
<img src="/images/2015/04/transloadit04.jpg" alt="詳細" /></p>

<p>アップロードされたファイルは上記からダウンロード可能だが、この保存ファイルは一時的なもののよう。<br/>
24時間後には消える。らしい。</p>

<blockquote><p>Please keep in mind that we store files only for 24 hours after they were created. To persist your files, please use one of our <a href="https://transloadit.com/docs/conversion-robots/#file-export-robots">file export robots</a>.</p></blockquote>

<p>なので、<code>file export robots</code>を使用してどこかしらにエクスポートしてやる必要がある。<br/>
エクスポート先として用意されているものは以下のよう。</p>

<ul>
<li>Amazon S3</li>
<li>SFTP</li>
<li>FTP</li>
<li>Rackspace</li>
<li>YouTube</li>
</ul>


<h2>参考</h2>

<p><a href="https://addons.heroku.com/transloadit">Transloadit | Add-ons | Heroku</a><br/>
<a href="https://devcenter.heroku.com/articles/transloadit">Transloadit | Heroku Dev Center</a><br/>
<a href="https://transloadit.com/">File upload processing web service | Transloadit</a><br/>
<a href="https://github.com/transloadit/php-sdk">transloadit/php-sdk</a></p>
]]></content>
  </entry>
  
</feed>
