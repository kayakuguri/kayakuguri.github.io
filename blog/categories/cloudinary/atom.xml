<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cloudinary | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/cloudinary/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2018-10-30T15:00:55+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQueryを使ったCloudinaryのダイレクトアップロード]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/04/11/cloudinary-direct-upload/"/>
    <updated>2017-04-11T18:15:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/04/11/cloudinary-direct-upload</id>
    <content type="html"><![CDATA[<p>PHPなどのサーバーサイドのプログラムなしにクライアントのJSだけでCloudinaryにアップロードしてみた。</p>

<!-- more -->


<h1>情報</h1>

<p>Cloudinaryの情報として必要なものは以下。</p>

<ul>
<li>Upload Presets Name(unsigned)</li>
<li>Cloud Name</li>
</ul>


<h2>Upload Presets Name</h2>

<p>Cloudinaryへアップロードする際に、サイズや形式、フィルターなどをプリセットとして登録しておける。<br/>
unsigned アップロード、というのは、たぶん、プリセット名とCloudinaryの名前さえわかっていれば認証なしでアップロード出来る、というものっぽい。<br/>
これは、予め設定画面から有効にしてやる必要がある。</p>

<p><code>Settings</code>の、<code>Upload</code>タブを開くと、<code>Upload presets</code>という項目があるので、そこで、<code>Enable unsigned uploading</code>をクリック。</p>

<p><img src="/images/2017/04/cloudinary_setting_1.jpg" alt="" /></p>

<p>有効となると情報が表示されるので、<code>Name</code>をメモっておく。</p>

<p><img src="/images/2017/04/cloudinary_setting_2.jpg" alt="" /></p>

<h2>Cloud Name</h2>

<p><code>Dashboard</code>に表示されているので、メモっておく。</p>

<p><img src="/images/2017/04/cloudinary_setting_3.jpg" alt="" /></p>

<h1>ライブラリ</h1>

<p>Cloudinaryが作成しているjQuery File Upload用のライブラリがあるのでそちらを利用する。</p>

<ul>
<li><a href="https://github.com/cloudinary/cloudinary_js">cloudinary/cloudinary_js</a></li>
<li><a href="https://github.com/blueimp/jQuery-File-Upload">blueimp/jQuery-File-Upload</a></li>
</ul>


<p>先頭でもろもろ読み込む。</p>

<p>```</p>

<script src='jquery.min.js' type='text/javascript'></script>


<script src='jquery.ui.widget.js' type='text/javascript'></script>


<script src='jquery.iframe-transport.js' type='text/javascript'></script>


<script src='jquery.fileupload.js' type='text/javascript'></script>


<script src='jquery.cloudinary.js' type='text/javascript'></script>


<p>```</p>

<p>全部CDNでやった場合は以下。<br/>
公式にはCDNはないので本番の案件では使わない方が無難かも。</p>

<p>```</p>

<script src='http://kayakuguri.github.io//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js' type='text/javascript'></script>


<script src="http://kayakuguri.github.io//code.jquery.com/ui/1.12.1/jquery-ui.min.js" integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=" crossorigin="anonymous"></script>


<script src='http://kayakuguri.github.io//cdnjs.cloudflare.com/ajax/libs/jquery.iframe-transport/1.0.1/jquery.iframe-transport.min.js' type='text/javascript'></script>


<script src='http://kayakuguri.github.io//cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/9.18.0/js/jquery.fileupload.min.js' type='text/javascript'></script>


<script src='http://kayakuguri.github.io//cdnjs.cloudflare.com/ajax/libs/cloudinary-jquery-file-upload/2.3.0/cloudinary-jquery-file-upload.min.js' type='text/javascript'></script>


<p>```</p>

<p>※バージョンは記事投稿現在(2017/4/11)での最新版(jQueryは古い）</p>

<h1>アップロードフォーム</h1>

<h2>inputタグを自動生成</h2>

<p>単純にアップロードするだけなら、自動でinputタグを挿入してくれる関数がある。</p>

<p>[HTML]</p>

<p>```</p>

<div class="upload_form"></div>


<p>```</p>

<p>[JS]</p>

<p>```
$(function () {</p>

<pre><code>$('.upload_form').append($.cloudinary.unsigned_upload_tag("preset-name-here", { cloud_name: 'cloud-name-here' }));
</code></pre>

<p>});
```</p>

<p>ライブラリを読み込んで、これで<code>append</code>すれば、自動的に、<code>&lt;input&gt;</code>タグが挿入される。<br/>
そこでファイルを選択すれば、アップロードが行われる。<br/>
(選ぶだけでアップロードされる）</p>

<p>以下のようなHTMLが挿入される。</p>

<p><code>
&lt;input type="file" name="file" class="cloudinary_fileupload"&gt;
</code></p>

<h2>bind</h2>

<p>アップロードされた後や、アップロード中に処理をおこないたい場合は、<code>bind</code>する。<br/>
そのために、自分で<code>&lt;input&gt;</code>タグを作っておき、そのタグにたいして<code>bind</code>する。</p>

<p>[HTML]</p>

<p>```
<input type="file" name="file" id="upload_form" /></p>

<div class="progress"></div>


<div class="thumbnails"></div>


<p>```</p>

<p>[JS]</p>

<p>```
$(function () {</p>

<pre><code>$.cloudinary.config({ cloud_name: 'cloud_name_here'});
$('#upload_form').unsigned_cloudinary_upload('preset_name_here',
{ cloud_name: 'cloud_name_here', tags: 'browser_uploads' },
{ multiple: true }
</code></pre>

<p>  )
  .bind(&lsquo;cloudinaryprogress&rsquo;, function(e, data) {</p>

<pre><code>$('.progress').text('アップロード中...');
</code></pre>

<p>  })
  .bind(&lsquo;cloudinarydone&rsquo;, function(e, data) {</p>

<pre><code>  $('.progress').text('完了');
  $('.thumbnails').append($.cloudinary.image(data.result.public_id,
    { format: 'jpg', width: 150, height: 100, crop: 'thumb' } ));
}
</code></pre>

<p>  );
});
```</p>

<p><code>cloudinaryprogress</code>がアップロード中の処理。アップロード中、というテキストを表示しているだけ。<br/>
<code>cloudinarydone</code>がアップロード後の処理。完了、と表示させ、サムネイルを取得して表示している。</p>

<p><code>$.cloudinary.image(name, option)</code>で画像を取得して表示させることが可能。<br/>
冒頭で<code>cloud_name</code>を設定している。
<code>data.result.public_id</code>でアップロードしたファイルのIDが取得可能。</p>

<p>ファイルのURLを直接参照したい場合は以下。</p>

<p><code>
$.cloudinary.url(data.result.public_id);
</code></p>

<p>第二引数でサイズやクロップなどのオプションを指定してやることが可能。</p>

<h1>注意</h1>

<p>注意点としては、ファイルの選択を行っただけでアップロードが開始されてしまうところ。<br/>
これを送信ボタンをクリックした時にアップロードを開始するようには変更出来るのだろうか…。<br/>
ライブラリに手を入れないと無理な気もする…。</p>

<h1>参考</h1>

<h2>公式</h2>

<ul>
<li><a href="http://cloudinary.com/blog/direct_upload_made_easy_from_browser_or_mobile_app_to_the_cloud#direct_uploading_from_the_browser_using_jquery">Direct uploading from the browser using jQuery</a></li>
<li><a href="http://cloudinary.com/documentation/jquery_integration">jQuery integration</a></li>
<li><a href="http://cloudinary.com/documentation/jquery_image_manipulation">jQuery image manipulation</a></li>
</ul>


<h2>コードの参考</h2>

<ul>
<li><a href="http://www.nerdtutorials.com/cloudinary-image-uploader-sponsored/">Cloudinary Image Uploader (Sponsored)</a></li>
<li><a href="http://stackoverflow.com/questions/40438882/restrict-uploading-file-size-greater-than-20-mb-cloudinary-api">restrict uploading file size greater than 20 mb [cloudinary api]</a></li>
</ul>


<h1>コード全文</h1>

<p>```
&lt;!doctype html></p>

<p><html lang="ja">
<head>
  <meta charset="utf-8"></p>

<script src='https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js' type='text/javascript'></script>


<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js" integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=" crossorigin="anonymous"></script>


<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery.iframe-transport/1.0.1/jquery.iframe-transport.min.js' type='text/javascript'></script>


<script src='https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/9.18.0/js/jquery.fileupload.min.js' type='text/javascript'></script>


<script src='https://cdnjs.cloudflare.com/ajax/libs/cloudinary-jquery-file-upload/2.3.0/cloudinary-jquery-file-upload.min.js' type='text/javascript'></script>




<script>
$(function () {
  $.cloudinary.config({ cloud_name: 'cloud_name_here'});
  $('#upload_form').unsigned_cloudinary_upload('preset_name_here',
    { cloud_name: 'cloud_name_here', tags: 'browser_uploads' },
    { multiple: true }
  )
  .bind('cloudinaryprogress', function(e, data) {
    $('.progress').text('アップロード中...');
  })
  .bind('cloudinarydone', function(e, data) {
      $('.progress').text('完了');
      $('.thumbnails').append($.cloudinary.image(data.result.public_id,
        { format: 'jpg', width: 150, height: 100, crop: 'thumb' } ));
      var direct_url = $.cloudinary.url(data.result.public_id);
    }
  );
});
</script>


<p>  <title>Cloudinary Upload Sample</title>
</head></p>

<p><body></p>

<h1>Cloudinary Upload Test</h1>




<div><input type="file" name="file" id="upload_form" /></div>


<div class="progress"></div>


<div class="thumbnails"></div>


<p></body>
</html>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wordpress上のメディアをcloudinaryに自動アップロードして管理する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/06/30/auto-upload-cloudinary-on-heroku/"/>
    <updated>2015-06-30T12:54:33+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/06/30/auto-upload-cloudinary-on-heroku</id>
    <content type="html"><![CDATA[<p>herokuでwordpressを使用した場合、通常ではアップロードした画像は<br/>
heorkuの再起動のタイミングで全て消えてしまいます。</p>

<!-- more -->


<p>なので、そうならないようにクラウド上のストレージサービスである、cloudinaryに保存させたりします。<br/>
cloudinaryには公式でwordpressのプラグインが用意されています。<br/>
<a href="https://ja.wordpress.org/plugins/cloudinary-image-management-and-manipulation-in-the-cloud-cdn/">WordPress &#8250; Cloudinary &ndash; Image management and manipulation in the cloud + CDN &laquo; WordPress Plugins</a></p>

<p>これを利用することでwordpress上の画像をcloudinaryで管理できるようになるのですが、<br/>
アップロードした画像を手動でcloudinaryに反映させてやらねばなりません。<br/>
それをなんとか自動でアップされるようにしてみました。</p>

<h2>cloudinaryへのアップロード手順(通常)</h2>

<p>通常と同じようにメディアライブラリ上から画像をアップロードします。<br/>
一覧表示で、詳細まで表示される、テーブル表示に切り替えます。<br/>
この時の右端に、<code>Upload to Cloudinary</code>というリンクがあるのでそれをクリックします。</p>

<p><img src="/images/2015/06/cloudinary_heroku01.jpg" alt="" /></p>

<p>するとアップロードされ、表記がアップロード済に変わります。</p>

<p><img src="/images/2015/06/cloudinary_heroku02.jpg" alt="" /></p>

<p>この時に内部では何をしているかと言うと、<br/>
cloudinaryにアップロードし、アップ先のURLを使ってメタデータを書き換え、<br/>
cloudinaryへアップした、というフラグを立てています。<br/>
このフラグを立てているところがポイントになります。</p>

<h2>メタデータ</h2>

<p>wordpressでは画像は投稿データとして管理されています。<br/>
データ構造は以下が詳しいのですが、画像部分だけを引用させてもらうとこんな感じです。<br/>
<a href="http://hijiriworld.com/web/wp-data-register/">WordPress データ登録機構を知ってもっと自由で効率的なフローを  |  hijiriworld Web</a></p>

<p><code>wp_posts</code>テーブル</p>

<table>
<thead>
<tr>
<th>post_title </th>
<th> post_status </th>
<th> post_name </th>
<th> guid </th>
<th> post_type </th>
<th> post_mine_type</th>
</tr>
</thead>
<tbody>
<tr>
<td>{$file_name} </td>
<td> inherit </td>
<td> {$file_name} </td>
<td> {$guid} </td>
<td> attachment </td>
<td> {$mine_type}</td>
</tr>
</tbody>
</table>


<p><code>wp_postmeta</code>テーブル</p>

<table>
<thead>
<tr>
<th>post_id </th>
<th> meta_key </th>
<th> meta_value</th>
</tr>
</thead>
<tbody>
<tr>
<td>{$attachment_id} </td>
<td> _wp_attached_file </td>
<td> {$file_name}</td>
</tr>
<tr>
<td>{$attachment_id} </td>
<td> _wp_attachment_metadata </td>
<td> シリアライズされたメタデータ</td>
</tr>
</tbody>
</table>


<p>wp_postsの方は特に変更する必要はありません。<br/>
重要なのはwp_postmetaのメタデータの方です。</p>

<p>今回、変更する具体的な箇所は以下の２箇所です。<br/>
<code>_wp_attached_file</code>をファイル名からcloudinaryのURLへ変更。<br/>
<code>_wp_attachment_metadata</code>の中にcloudinaryフラグを立てる。</p>

<h2>メディア管理とプラグインの仕組み</h2>

<p>wordpressのメディアは都度URLを動的に生成しています。<br/>
メイン画像の場合は以下。</p>

<blockquote><p>ブログのパス + <code>_wp_attached_file</code>の$file_name</p></blockquote>

<p>サムネイルの場合は以下。</p>

<blockquote><p>ブログのパス + <code>_wp_attachment_metadata</code>の指定サイズのファイル名</p></blockquote>

<p>なのでファイル名にcloudinaryの絶対パスを入れてしまうとURLが２重になってしまいます。</p>

<p>で。<br/>
これが、cloudinaryのフラグが立っているものに関しては、cloudinaryのプラグイン側でURLをうまい具合に置き換えて表示してくれます。<br/>
なので、こちらとしてはフラグを立てるだけ、で大丈夫。</p>

<h2>実作業</h2>

<p>処理の流れは以下のように。</p>

<ol>
<li>画像をアップロード</li>
<li>メタデータ作成のフック内で画像URLを取得</li>
<li>取得したURLでcloudinaryにアップロード</li>
<li>cloudinaryのURLでDBのファイル名を更新</li>
<li>メタデータにフラグを立てる</li>
</ol>


<p><code>wp_generate_attachment_metadata</code>で、アップされたファイルのメタデータを作成する処理にフックをかけられるのでそれを使用します。</p>

<p>functions.phpに以下を記述。</p>

<p>```
function cldnry_wp_generate_attachment_metadata($metadata, $postid){</p>

<pre><code>$imgPath = get_attached_file( $postid );

//ファイル形式のチェック
$info = pathinfo($imgPath);
$public_id = $info["filename"];
$mime_types = array("png"=&gt;"image/png", "jpg"=&gt;"image/jpeg", "pdf"=&gt;"application/pdf", "gif"=&gt;"image/gif", "bmp"=&gt;"image/bmp");
$extension = $info["extension"];
$type = @$mime_types[$extension];
//画像以外はcloudinaryにアップしない
if($type === null){
    $stderr = fopen( 'php://stderr', 'w' );
    fwrite( $stderr, 'アップロードされたファイルが画像ではありません。file-type:'.$extension );
    return $metadata;
}

//Cloudinaryへアップ
$cl_upload = new CloudinaryUploader();
$uploaded = $cl_upload-&gt;upload($imgPath, array(
));
$public_id = $uploaded['public_id'];

//DBへ保存
update_attached_file($postid, $uploaded['secure_url']);
$metadata['cloudinary'] = true; //cloudinaryからアップしたことを記録

return $metadata;
</code></pre>

<p>}
add_filter( &ldquo;wp_generate_attachment_metadata&rdquo; , &ldquo;cldnry_wp_generate_attachment_metadata&rdquo;,10 ,2 );
```</p>

<p>※2015/08/21追記<br/>
cloudinaryへアップする際にpublic_idを指定してしまうと画像が次々と上書きされてしまうので、その部分を削除しました。</p>

<p>  &ldquo;public_id&rdquo; => $public_id,</p>

<p>まず、<code>get_attached_file( $postid )</code>でアップされたファイルのURLを取得。<br/>
そのファイルが画像かどうかを一応チェックしている。<br/>
で、cloudinaryへアップロード。<br/>
cloudinaryはプラグインのファイルから利用するので公式で解説されているコードとは少し異なります。<br/>
で、アップされたらURLをファイル名として保存。<br/>
最後にポイントとなる、フラグを立てて終了。</p>

<p>これだけであとの表示周りの処理はcloudinaryがやってくれます。</p>

<h2>結果</h2>

<p>通常と同じように画像をアップすると、アップ完了時点でcloudinaryへ保存されます。<br/>
以下のようにURLがcloudinaryになっている事が確認できるかと思います。</p>

<p><img src="/images/2015/06/cloudinary_heroku03.jpg" alt="" /></p>

<p>一覧でテーブル表示にすると、cloudinaryにはすでにアップロード済の表記となっています。</p>

<h2>まとめ</h2>

<p>herokuでwordpressを扱う場合、この画像問題がネックの一つとなっているのですが、<br/>
herokuにはcloudinaryのアドオンがあるので、これでとりあえずは解消したのではないでしょうか。<br/>
この解消は自分の中ではかなり大きいです。</p>

<p>使用の際の注意点としては、wordpress上でデータを削除してもcloudinary上からは削除されない、という点です。<br/>
cloudinaryのアップロード容量が決まっているため、メンテナンスが必要かもしれません。</p>

<p>あとはアップデートの問題が解決すればすっきり出来るのですが。。</p>
]]></content>
  </entry>
  
</feed>
