<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mysql | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2018-04-05T11:32:43+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel+mySQLでマイグレーションのやり直しのデータリストア]]></title>
    <link href="http://kayakuguri.github.io/blog/2018/03/26/laravel-mysql-refresh/"/>
    <updated>2018-03-26T12:29:45+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2018/03/26/laravel-mysql-refresh</id>
    <content type="html"><![CDATA[<p>Laravelで開発をしていて、途中でDBの項目が増えたりしてマイグレーションのやり直しが発生することがちょくちょくある。<br/>
直接<code>alter</code>してもいいけど、ちゃんとマイグレーションファイルも動くか確認したい。<br/>
けど、今あるデータは削除したくない、って場合。</p>

<!-- more -->


<p>パッケージでよしなにバックアップ取ったりしてくれるものはあるようだけど、postgreSQLのものが多かったり、そのためにパッケージインストールするのも、、と思ってしまう。</p>

<ul>
<li><a href="https://www.lancard.com/blog/2017/11/27/laravel-5-5-%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9dump%E3%82%92%E3%81%8A%E6%89%8B%E8%BB%BD%E3%81%AB%E3%81%A8%E3%81%A3%E3%81%9F%E3%82%8A%E3%82%82%E3%81%A9%E3%81%97%E3%81%9F/">Laravel 5.5 でデータベースdumpをお手軽にとったりもどしたり &laquo;  LANCARD.LAB｜ランカードコムのスタッフブログ</a></li>
</ul>


<p>それならコマンドで叩いたほうが早い、というわけで、備忘録。</p>

<h1>エクスポート</h1>

<p>テーブル情報を抜いたデータ情報のみをエクスポート。<br/>
（作業はvagrant内に入った状態で）</p>

<p><code>
mysqldump -uroot -proot -t DATABASE_NAME &gt; all.dump
</code></p>

<p>エクスポートされたデータから、<code>migrations</code>テーブルのインサート情報の部分だけは削除しておくこと。<br/>
(laravelのmigrateで自動作成されるので、インポート時にID重複のエラーが出る）</p>

<h2>```</h2>

<h2>&mdash; Dumping data for table <code>migrations</code></h2>

<p>(このセクションを削除)
```</p>

<h1>再マイグレーション</h1>

<p>Laravelに用意されている。</p>

<p><code>
$ php artisan migrate:fresh
</code></p>

<h1>インポート</h1>

<p>あとはインポートするだけ。</p>

<p><code>
$ mysql -uroot -proot DATABASE_NAME &lt; all.dump
</code></p>

<p>完了。</p>

<h1>参考</h1>

<ul>
<li><a href="https://qiita.com/rato303/items/2e614f23e5feee150ffc">MySQLのデータインポート・エクスポート &ndash; Qiita</a></li>
<li><a href="https://www.dbonline.jp/mysql/insert/index10.html">データの削除(DELETE文) &ndash; データの追加と削除 &ndash; MySQLの使い方</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSVデータをMySQLにインポートする]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/07/04/mysql-import-csv/"/>
    <updated>2016-07-04T16:32:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/07/04/mysql-import-csv</id>
    <content type="html"><![CDATA[<p>CSVのデータをMySQLにインポートしたので方法のメモ。</p>

<!-- more -->


<h1>環境</h1>

<ul>
<li>Vagrant : <a href="https://box.scotch.io/">Scotchbox</a>

<ul>
<li>Ubuntu 14.04 LTS</li>
<li>PHP 5.6</li>
</ul>
</li>
</ul>


<h1>準備</h1>

<p>MySQLにテーブルを作成する。
テーブルに作成した項目順にカンマ区切りで値を作成する。</p>

<p>エクセルでCSVファイルを作成した場合は、MySQLの文字コードをUTF-8としたので、テキストエディタなどでUTF-8に変更しておく
改行コードは、<code>CRLF</code>。</p>

<p>作成したCSVファイルは、vagrantの共有フォルダに保存しておく。</p>

<h1>インポート</h1>

<p><code>$ vagrant ssh</code>から、<code>$ mysql -u root</code>でmysqlにログインし、以下のコマンドでインポートする。
インポートするファイルは、<code>data.csv</code>とする。</p>

<p>インポートするファイルはパスで指定するが、scotchboxの場合、共有フォルダの階層はvagrant内から見た場合は、<code>/var/www/</code>となるので、それを指定してやる。</p>

<p><code>
mysql&gt; LOAD DATA LOCAL INFILE '/var/www/data.csv' INTO TABLE SUB_ListAll FIELDS TERMINATED BY ',' LINES TERMINATED BY '\r\n';
</code></p>

<h1>注意点</h1>

<h2>改行コード</h2>

<p>インポートする際に使用する、<code>DATA INFILE</code>コマンドでは、デフォルトの改行コードは<code>LF</code>になっているよう。
なので、明示的に改行コードを指定してやる必要がある。
それが以下の部分。</p>

<p><code>
LINES TERMINATED BY '\r\n'
</code></p>

<h2>LOCAL INFILE</h2>

<p><code>local infile</code>を利用するには、設定で許可されている必要があるよう。
これが許可されていないと、以下のエラーが返ってくる。</p>

<blockquote><p>The used command is not allowed with this MySQL version</p></blockquote>

<p>デフォルトでは許可されていなかったので、mysqlへログインする際に許可してログインする。</p>

<p><code>
$ mysql --local-infile=1 -u root
</code></p>

<h1>まとめ</h1>

<p>ちょっとググっても色々と落とし穴があるようで、環境によってはその他の穴も空いてるかもしれない。
とりあえず、冒頭にあげた環境では上記でいけた。</p>

<p>ちなみに、ファイルはパーミッションを777に指定してやらなくてもそのままでいけた。</p>

<h1>参考</h1>

<ul>
<li><a href="http://www.infoscoop.org/blogjp/2014/07/23/about-load-data-infile/">MySQLのLOAD DATA INFILEで大はまりした話 | infoScoop開発者ブロ</a></li>
<li><a href="http://oshiete.goo.ne.jp/qa/1030943.html">CSVファイルのインポートについて &ndash; MySQL 解決済 | 教えて！goo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ローカルのWordPressをCloud9の環境へ引っ越す(DB)]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/11/27/cloud9-wordpress-mysqlimport/"/>
    <updated>2015-11-27T15:30:19+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/11/27/cloud9-wordpress-mysqlimport</id>
    <content type="html"><![CDATA[<p>ローカルで開発していたwordpressをCloud9に移動させるべく、DBのインポートをしてみた。</p>

<!-- more -->


<p>まずはCloud9でWordpressプロジェクトを作成する。<br/>
これは順場に選んでくだけで簡単に可能。</p>

<p><img src="/images/2015/11/c9_00.jpg" alt="" /></p>

<h2>MySqlの起動など</h2>

<p>mysqlの起動などは以下で可能。</p>

<p>```</p>

<h1>起動</h1>

<p>$ mysql-ctl start</p>

<h1>停止</h1>

<p>$ mysql-ctl stop
```</p>

<p><code>mysql-ctl</code>コマンドは以下を実行可能。</p>

<pre><code>[start|restart|stop|status|cli|install]
</code></pre>

<p>以下で、mysqlに入る事が出来る。</p>

<pre><code>$ mysql-ctl cli
...
mysql&gt; 
</code></pre>

<p>もしくは、ユーザー指定で普通にログインも出来る。</p>

<pre><code>$ mysql -u kayakuguri
</code></pre>

<p>この中でデータベースやテーブルを作成したり出来る。<br/>
なので、インポートするDBを作成しておく。</p>

<h2>ダンプファイルのアップロード</h2>

<p>ローカルのファイルをアップするのと同じ手順でダンプしたSQLファイルをアップロードする。<br/>
Cloud9のIDE上から、<code>File -&gt; Upload Local Files...</code>を選択。</p>

<p><img src="/images/2015/11/c9_01.jpg" alt="" /></p>

<p>アップしたいファイルをウインドウにドロップして完了。<br/>
直下にアップした。</p>

<p><img src="/images/2015/11/c9_02.jpg" alt="" /></p>

<h2>インポート</h2>

<p>これで準備は整ったのでダンプファイルをインポートする。<br/>
下部のエリアから、<code>bash</code>タブを選択し、そこにコマンドを打ち込んでいく。</p>

<p>mysqlのユーザー名はCloud9のログイン名と同じで、パスワードはかかっていない。<br/>
なので以下のようになる。</p>

<pre><code>$ mysql -u kayakuguri test_wp_db &lt; dump.sql
</code></pre>

<p><img src="/images/2015/11/c9_03.jpg" alt="" /></p>

<h3>サイトURLの変更</h3>

<p>このままだとローカルのサイトURLがwordpressのURLとして引き継がれてしまうので、コマンドで直接DBのデータをいじって変更してみる。</p>

<pre><code>$ mysql -u kayakuguri
</code></pre>

<p>mysqlにログイン。</p>

<pre><code># DBを選択
mysql&gt; use test_wp_db;
# 現状の設定を確認
mysql&gt; SELECT * FROM wpoptions WHERE option_name='siteurl';
# アップデート
mysql&gt; UPDATE wpoptions SET option_value='https://your-project-kayakuguri.c9users.io' where option_name IN ('home', 'siteurl');
</code></pre>

<p>URLはRUNさせてみると確認出来る。<br/>
(<code>https://プロジェクト名.ユーザー名.c9users.io/</code>っぽい)</p>

<h3>wp-configの変更</h3>

<p>wp-configにて、mysqlのユーザー名を指定していると思うので、それをCloud9用に変更しておく。<br/>
パスワードはいらない。</p>

<p>```
/<em>* MySQL データベースのユーザー名 </em>/
define(&lsquo;DB_USER&rsquo;, &lsquo;kayakuguri&rsquo;);</p>

<p>/<em>* MySQL データベースのパスワード </em>/
define(&lsquo;DB_PASSWORD&rsquo;, &lsquo;&rsquo;);
```</p>

<p>完了。</p>

<h2>注意</h2>

<p>wordpressプロジェクトで始めた場合、<code>wp-admin</code>、<code>wp-content</code>、<code>wp-includes</code>の主要なディレクトリを直下以外のディレクトリに移動が出来なかった。<br/>
なので、ドキュメントルート以外でwordpressを稼働させるプロジェクトの場合は注意が必要。</p>

<p>その場合は、PHPのプロジェクトとして作成し、自前で全ファイルをアップロードしてDBの設定などをすればよいかとも思ったが、どうも上手くいかなかった。<br/>
要調査。</p>

<p>ちなみにPHPの環境は今日現在、<code>PHP Version 5.5.9-1ubuntu4.13</code>だった。</p>

<h2>参考</h2>

<p><a href="https://docs.c9.io/docs/setting-up-mysql">Setting Up MySQL · Cloud9</a><br/>
<a href="http://qiita.com/hishigataBOZE/items/bdd6009d3bfc1c7d313b">[WordPress + MySQL] DBからサイトURLを変更 &ndash; Qiita</a></p>
]]></content>
  </entry>
  
</feed>
