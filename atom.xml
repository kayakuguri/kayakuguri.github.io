<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2014-07-09T17:32:53+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Herokuでデプロイエラーが起きた]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/09/heroku-r10/"/>
    <updated>2014-07-09T17:13:26+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/09/heroku-r10</id>
    <content type="html"><![CDATA[<p>いつものようにさくっとpushすると、サイトにアクセス出来ない。。<br/>
とりあえず、<code>rollback</code>で戻しておいたが、原因を探った。</p>

<!-- more -->


<p>ログを見ると以下のようになっていた。</p>

<pre><code>heroku/web.1:  State changed from up to starting 
app/web.1:  Going down, terminating child processes... 
heroku/web.1:  Stopping all processes with SIGTERM 
heroku/web.1:  Process exited with status 0 
heroku/web.1:  State changed from starting to crashed
heroku/web.1:  State changed from crashed to starting 
heroku/web.1:  Error R10 (Boot timeout) -&gt; Web process failed to bind to $PORT within 60 seconds of launch 
heroku/web.1:  Stopping process with SIGKILL 
heroku/web.1:  Process exited with status 137 
</code></pre>

<p>どうやら、<code>R10 (Boot timeout)</code>なるエラーが発生しているよう。</p>

<p><a href="https://devcenter.heroku.com/articles/error-codes#r10-boot-timeout">R10 &ndash; Boot timeout</a></p>

<blockquote><p>A web process took longer than 60 seconds to bind to its assigned <code>$PORT</code>. When this happens, the dyno’s process is killed and the dyno is considered crashed. Crashed dynos are restarted according to the dyno manager’s restart policy.</p></blockquote>

<p>Webプロセスは、割り当てられた<code>$PORT</code>にバインドするために60秒以上かかった。これが発生すると、dynoのプロセスは強制終了され、dynoがクラッシュしたと考えられている。ダウンしたdynoは、dynoマネージャの再起動ポリシーに応じて再起動されます。</p>

<blockquote><p>This error is often caused by a process being unable to reach an external resource, such as a database, or the application doing too much work, such as parsing and evaluating numerous, large code dependencies, during startup.</p></blockquote>

<p>このエラーは、多くの場合、データベース、または起動時に、非常に多くの、大規模なコードの依存関係を解析し、評価するようなあまりにも多くの処理を行なっているアプリケーションなどの外部リソースに到達することができないというプロセスが原因で発生します。</p>

<blockquote><p>Common solutions are to access external resources asynchronously, so they don’t block startup, and to reduce the amount of application code or its dependencies.</p></blockquote>

<p>一般的な解決策は非同期に外部リソースにアクセスすることなので、起動をブロックしないように、アプリケーションコードまたはその依存関係の量を低減する事です。</p>

<p>サポートに問い合わせることで、この60秒制限を120秒にすることもできるそう。</p>

<hr />

<h3>Heroku::Forward</h3>

<p>R10エラーが起きる主な原因は存在しない外部リソースへのアクセスや、使用しているgemの量が増えている事が挙げられるらしい。<br/>
それを自動で整理？してくれるようなものが以下のよう。</p>

<p><a href="https://github.com/dblock/heroku-forward">dblock/heroku-forward · GitHub</a></p>

<p>しかしこれは<code>Ruby</code>。今回は<code>PHP</code>。</p>

<hr />

<h3>原因</h3>

<p>で、テストアプリを作って全く同じ構成にして検証してみたところ、<br/>
NewRelicが重くなってしまっているようだった。<br/>
試しにそれを外すとエラーが出なくなった。</p>

<hr />

<h3>対策</h3>

<p>NewRelicはアプリを起動し続けるためのpingとしての使用がメインだったので、<br/>
(ログなどが見られるのは嬉しかったが)<br/>
同じように定期的にpingを飛ばす方法を探してみた。</p>

<h4>Heroku Schedulerで叩き起こす</h4>

<p><a href="http://blog.mah-lab.com/2013/05/16/heroku-commons-16/">知っておきたい！Herokuを使う上では当たり前？の16の常識 | mah365</a></p>

<blockquote><p>1時間毎に<code>curl http://your-app-name.herokuapp.com/</code>というコマンドを叩くように設定すれば、起き続けます。</p></blockquote>

<p><a href="https://addons.heroku.com/scheduler">Heroku Scheduler</a><br/>
アドオンを追加</p>

<pre><code>$ heroku addons:add scheduler
</code></pre>

<p>この状態でデプロイが通るかを確認。→ OK。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/scheduler01.jpg" alt="Phpstrom diff" /></p>

<p>以下を追加</p>

<pre><code>curl http://your-app-name.herokuapp.com/
</code></pre>

<p>FREQUENCY(頻度)を、<code>Hourly</code>にして、save。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/scheduler02.jpg" alt="Phpstrom diff" /></p>

<p>これで1時間毎に指定のURLを叩いてくれる。</p>

<hr />

<h3>Dyno Hour</h3>

<p>Herokuの料金は、1Dynoで起動時間が月750時間までは無料。<br/>
通常であれば、1日 x 24時間 x 31日 = 744時間 で、無料範囲ない。<br/>
ただし、Heroku Schedulerで実行した時間もDynoの起動時間に含まれる。</p>

<p>単純にURLを叩くだけ、なら大丈夫かと思うけれど、<br/>
重めのバッチ処理をスケジューラーでこまめに起動していると請求が発生する可能性があるので注意。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuで独自ドメインをRoute53で設定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/07/heroku-set-domain/"/>
    <updated>2014-07-07T15:12:29+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/07/heroku-set-domain</id>
    <content type="html"><![CDATA[<p>ドメインはムームードメインで取得してた。<br/>
そのドメインをherokuに割り当てる。</p>

<!-- more -->


<p>内容は全く以下のままなんだけど、メモとして。。</p>

<p><a href="http://www.workabroad.jp/posts/2002">heroku で 独自ドメインを使う際の最善策を考えた | Workabroad.jp</a></p>

<h3>herokuにドメインを登録</h3>

<p>herokuに独自ドメインをwwwありなし２つ登録</p>

<pre><code>$ heroku domains:add example.com
$ heroku domains:add www.example.com
</code></pre>

<h3>Amazon Route53 CNAMEの設定</h3>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws01.jpg" alt="Route53" /></p>

<p>画面上部から<code>Create Hosted Zone</code>を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws02.jpg" alt="Create Hosted Zone" /></p>

<p>ドメインを入力。wwwなし。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws03.jpg" alt="Domain Name" /></p>

<p>作成したレコードをダブルクリック。<br/>
<code>Create Record Set</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws04.jpg" alt="Create Record Set" /></p>

<p>作成。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws05.jpg" alt="Create Record Set" /></p>

<p>Name：www<br/>
Type：CNAME<br/>
value：xxx.herokuapp.com</p>

<h3>S3の設定</h3>

<p>S3でBucketを作成</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws06.jpg" alt="Create Bucket" /></p>

<p>nameはルートドメインにする。<br/>
RegionはTokyoにしといたらいいと思う。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws07.jpg" alt="name" /></p>

<p>Createした後、<code>Properties</code>の<code>Static Website Hosting</code>を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws08.jpg" alt="Properties" /></p>

<p><code>Redirect all requests to another host name</code>を選択。<br/>
最初から<code>www</code>付きのURLが入力されているので、そのままSave。<br/>
これでwwwサブドメインへのリダイレクトが完了。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws09.jpg" alt="Redirect all requests to another host name" /></p>

<h3>Amazon Route53 ANAMEの設定</h3>

<p>Route53に戻り、先ほど作成したレコードをダブルクリックして、<code>Create Record Set</code>をクリック。<br/>
以下のようにして作成。</p>

<p>Name：空<br/>
Type：A &ndash; IPv4 address<br/>
Alias：Yes<br/>
Alias Target：先ほどS3で作成したBucketが選択できるのでそれを選択。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws10.jpg" alt="A name" /></p>

<h3>DNSサーバの設定</h3>

<p>ドメインはムームードメインで取得しているので、<br/>
ネームサーバーの設定をする。<br/>
Route53の作成したレコードを選択すると右側にネームサーバーが表示される。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws11.jpg" alt="name saever" /></p>

<p>ムームードメインの「取得したドメインで使用する」を選択し、<br/>
上記のネームサーバーを記入。</p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws12.jpg" alt="mu-mu-domain" /></p>

<p>完了。</p>

<h3>料金</h3>

<p>気になるお値段ですが、今現在は月、$0.51。<br/>
現在のレートでは、52円くらい。安い。</p>

<p><a href="https://www.google.co.jp/search?q=%240.51&amp;oq=%240.51&amp;aqs=chrome..69i57j0l5.755j0j7&amp;sourceid=chrome&amp;es_sm=91&amp;ie=UTF-8&amp;qscrl=1#q=%240.51+%E5%86%86&amp;qscrl=1&amp;safe=off">現在のレートで見る</a></p>

<p><img src="http://kayakuguri.github.io/images/2014/07/aws13.jpg" alt="spend money" /></p>

<p>ただし、新規にアカウントを作成したので、S3などが無料期間中かもしれません。<br/>
１年後には数円上がるかもしれません。</p>

<h3>結果</h3>

<p>22時くらいに作業していたけれど、完了後、15分後くらいで切り替わりを確認出来た。<br/>
ただし、その後元に戻ったり、と、不安定だった。<br/>
翌朝には安定し、無事切り替わっていた。<br/>
丸１日くらいかかると思っていたので結構早かった。</p>

<h3>参考サイト</h3>

<p>参考サイト：<br/>
<a href="http://tsumazuki.hatenadiary.jp/entry/2013/12/11/174038">Herokuで独自ドメインを設定する方法</a><br/>
<a href="http://tanukiti1987.hatenablog.com/entry/2013/01/24/233140">Herokuで独自のドメインを設定する[ムームードメイン]</a><br/>
<a href="http://tech.tanaka733.net/entry/2013/09/15/%E3%81%8A%E5%90%8D%E5%89%8D.com_%E3%81%A7%E5%8F%96%E3%81%A3%E3%81%9F%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%82%92_Amazon_Route53%E3%81%A7%E7%AE%A1%E7%90%86%E3%81%97%E3%80%81%E3%82%B5%E3%83%96%E3%83%89">お名前.com で取ったドメインを Amazon Route53で管理し、サブドメインをはてなブログに割り当てるまで</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Herokuでステージング環境をブランチを切って作成する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/02/heroku-staging/"/>
    <updated>2014-07-02T15:18:31+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/02/heroku-staging</id>
    <content type="html"><![CDATA[<p>herokuでステージング環境を作成してみた。<br/>
ブランチを切って、切り替えできるようにした。</p>

<!-- more -->


<p>アプリの作成はブラウザ上で行い、<br/>
そこに後からpushしていく想定とする。<br/>
(使用していてターミナル上でアプリを作成することが少なかったので)<br/>
アプリ名(ID)は以下とする</p>

<p>本番：sampleapp<br/>
ステージング：sampleapp-staging</p>

<p>ターミナルでアプリ用のファイルが入ったディレクトリに移動する。<br/>
(以降はそのディレクトリでの作業となる。)<br/>
まず、本番環境の分にアプリをサクっとプッシュ＆デプロイ。</p>

<pre><code>$ git init
$ git add .
$ git remote add heroku git@heroku.com:sampleapp.git
$ git commit -m 'init'
$ git push heroku master
</code></pre>

<p>３つ目の<code>remote add</code>でプッシュ先のリモートリポジトリを設定しているわけだけれど、<br/>
このaddの後の、<code>heroku</code>が本番用のリモートリポジトリ名となる。</p>

<p>で。ローカルのリポジトリのブランチをステージング用に切る。<br/>
その後、stagingリポジトリに移動。</p>

<pre><code>$ git branch
* master

$ git branch staging
$ git checkout staging  
Switched to branch 'staging'
$ git branch
  master
* staging
</code></pre>

<p>で、ステージング環境のリモートリポジトリを追加。</p>

<pre><code>$ git remote add staging git@heroku.com:sampleapp-staging.git
</code></pre>

<p>確認。</p>

<pre><code>$ git remote --v
heroku  git@heroku.kano:sampleapp.git (fetch)
heroku  git@heroku.kano:sampleapp.git (push)
staging git@heroku.com:sampleapp-staging.git (fetch)
staging git@heroku.com:sampleapp-staging.git (push)
</code></pre>

<p>で、ステージング環境にプッシュ、するわけだけれど、通常の感覚で、<br/>
ローカルのstagingリポジトリをリモートのstagingリポジトリに追加、とすると、<br/>
<code>$ git push staging staging</code>になるわけだけれど、<br/>
そうすると、ステージング環境用のアプリがデプロイされない。</p>

<pre><code>$ git push staging staging
. . .
Pushed to non-master branch, skipping build.
. . .
</code></pre>

<p>書いてある通り、masterブランチにプッシュしないとデプロイされない。<br/>
以下に情報があった。<br/>
<a href="http://www.ownway.info/Ruby/index.php?heroku%2Fhow%2Fmanagement%2Fapplication">Heroku アプリケーションの管理 &ndash; 君の瞳はまるでルビー &ndash; Ruby 関連まとめサイト</a></p>

<blockquote><p>アプリケーションとして認識されるのは master ブランチにあるソースコードだけです。</p></blockquote>

<p>同サイト内に解決方法も載っていた。</p>

<blockquote><p>master 以外のブランチやタグにあるソースコードを既存の Heroku アプリケーションとしてデプロイするには git push に &mdash;force オプションを使う必要があります。<br/>
git push heroku beta_1:master &mdash;force<br/>
これはローカルリポジトリのブランチ beta_1 の内容を heroku リモートリポジトリの master に強制的に入れるためのものです。</p></blockquote>

<p>というわけで、以下のようにしてステージング環境にプッシュ。</p>

<pre><code>$ git push staging staging:master --force
</code></pre>

<p>これでステージング環境が作成できた。</p>

<p>主な作業はstagingブランチで作業し、上記の<code>--force</code>付きpushでステージングアプリに反映。<br/>
確認後、masterブランチに切り替えてstagingブランチとマージして、<br/>
通常の<code>$ git push heroku master</code>で、本番アプリに反映する、<br/>
という流れになる予定。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smartyのテンプレート内における中括弧の扱い]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/06/26/smarty-literal/"/>
    <updated>2014-06-26T11:10:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/06/26/smarty-literal</id>
    <content type="html"><![CDATA[<p>Smartyのカテゴリ内にコンバーションタグ用のJSを設置したところ、<br/>
エラーが出てしまい、調べてみると、<code>{ }</code>内はSmaryのデリミタでPHPとして扱われてしまうことに起因していました。</p>

<!-- more -->


<p>考えれば当たり前の話だけど、回避方法が簡単だったのでメモ。<br/>
そのJSを外部ファイル化する、が修正がなくて一番簡単だけれど、<br/>
中に書き込む場合には、<strong><code>{</code>と<code>}</code>の前後にスペースを挟む</strong>、でOK。</p>

<p>そんだけ。</p>

<p><a href="http://www.smarty.net/docs/ja/language.escaping.tpl">Smarty の構文解析を回避する | Smarty</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SalesForce]テスト時にgetパラメータをセット]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/06/19/salesforce-test-getmethod/"/>
    <updated>2014-06-19T21:01:12+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/06/19/salesforce-test-getmethod</id>
    <content type="html"><![CDATA[<p>テスト実行時にページのGETパラメータをセットする方法がわからなかったので調べた。</p>

<!-- more -->


<p>まずは、テストしたいページにパラメータをセット。<br/>
その後、テストしたいクラスを実行、とする。<br/>
パラメータをセットするときには、<code>Test</code>を使う。</p>

<p>[apex]</p>

<pre><code>public with sharing class SampleController {
    public SampleController() {
    }

    public Pagereference view(){
        String pid = ApexPages.CurrentPage().getParameters().get('pid');
        if(pid == '10'){
            //処理
        }else{
            //処理
        }

        return null;
    }
}
</code></pre>

<p>[visualforce] <code>samplePage</code>という名前とする</p>

<pre><code>&lt;apex:page controller="SampleController" action="{!view}"&gt;
なにがしかの画面処理
&lt;/apex:page&gt;
</code></pre>

<p>[テストクラス]</p>

<pre><code>@isTest
private class SampleControllerTest{
    static testMethod void view() {
        PageReference pageRef = Page.samplePage;
        //パラメータをセット
        pageRef.getParameters().put('pId', '10');
        Test.setCurrentPage(pageRef);

        SampleController c = new SampleController();
        c.view();

        //セットしなおし
        pageRef.getParameters().put('pId', '0');
        Test.setCurrentPage(pageRef);

        c.view();
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuでPHP環境の構築]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/06/11/heroku-php/"/>
    <updated>2014-06-11T16:35:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/06/11/heroku-php</id>
    <content type="html"><![CDATA[<p>herokuがphpを公式にサポートしました。<br/>
以前に<a href="http://kayakuguri.github.io/blog/2014/02/18/create-php-heroku-mbstring/">ビルドパックのを使用した環境の構築方法</a>を書きましたが、<br/>
公式の作成方法も試してみました。</p>

<!-- more -->


<p><a href="https://devcenter.heroku.com/articles/php-support">Heroku PHP Support | Heroku Dev Center</a></p>

<p>herokuでは基本、アップされたファイルからherokuが自動的に判定して環境を構築してくれます。<br/>
で、PHPの場合は、<br/>
<code>composer.json</code><br/>
ファイルがルートにあれば、PHP環境と判定されて構築してくれる。</p>

<p>現時点では作成されるバージョンはデフォルトでは、以下。</p>

<blockquote><p>By default, Heroku runs PHP 5.5 (5.5.12, 64-bit).</p></blockquote>

<p>バージョンを指定してやる場合は<code>composer.json</code>に以下のように記述。</p>

<pre><code>{
  "require": {
    "php": "~5.5.12"
  }
}
</code></pre>

<p>ただし、サポートしているバージョンは以下のみ。</p>

<ul>
<li>5.5.11</li>
<li>5.5.12</li>
<li>5.5.13</li>
</ul>


<p>facebookが開発したというphpを高速に動作させる環境である、HipHop VMもサポートされており、<br/>
(実験的に、と書いてあるので使用には注意)<br/>
これもデフォルトではバージョンは以下。</p>

<blockquote><p>HipHop VM (HHVM) (3.1.0, 64-bit)</p></blockquote>

<p>使用する場合は以下のように記述。</p>

<pre><code>{
  "require": {
    "hhvm": "~3.1.0"
  }
}
</code></pre>

<p>サポートしているバージョンは以下。</p>

<ul>
<li>3.0.1</li>
<li>3.1.0</li>
</ul>


<hr />

<p>mbStringはデフォルトでは有効になっていないので、以下のように記述することで有効に出来る。</p>

<pre><code>{
    "require": {
        "ext-mbstring": "*"
    }
}
</code></pre>

<p>デプロイ結果</p>

<pre><code>-----&gt; PHP app detected
-----&gt; Setting up runtime environment...
       - PHP 5.5.12
       - Apache 2.4.9
       - Nginx 1.4.6
-----&gt; Installing PHP extensions:
       - opcache (automatic; bundled, using 'ext-opcache.ini')
       - mbstring (composer.json; bundled)
. . .
</code></pre>

<p>デフォルトで有効になっている環境や拡張機能は以下を参考。<br/>
<a href="https://devcenter.heroku.com/articles/php-support#php-5-5">https://devcenter.heroku.com/articles/php-support#php-5-5</a></p>

<p>拡張機能はリストのカッコ内の単語を、<code>ext-</code>をつけて並べていく。<br/>
ちなみに、<code>*</code>の部分はバージョンを指定する箇所で、<code>*</code>は自動で指定されるようになる。<br/>
ドキュメント内には、<code>*</code>での指定が推奨されている。<br/>
理由は、PHPのバージョンアップとは別に、各機能のバージョンアップが不定期に行われる可能性があるから、だそう。</p>

<blockquote><p>It is strongly recommended that you use “*” as the version selector when specifying extensions, as their version numbers can be extremely inconsistent (most of them report their version as “0”) and Heroku will sometimes update extensions outside the regular PHP update cycles.</p></blockquote>

<p>　</p>

<hr />

<p>ドキュメントルートの設定は、<code>Procfile</code>で指定する事ができる。<br/>
<code>Procfile</code>ファイルは、heroku起動時に実行してくれるファイル。<br/>
拡張子もなしで、<code>Procfile</code>という名前のファイルをルートに設置することで動作する。<br/>
<a href="https://devcenter.heroku.com/articles/procfile">Process Types and the Procfile | Heroku Dev Center</a></p>

<p>PHPを動作させるwebサーバを、Apacheか、Nginxを指定出来る。<br/>
Apacheで動作させ、ドキュメントルートを<code>public/</code>にする場合は以下の記述を<code>Procfile</code>に追加する。</p>

<pre><code>web: vendor/bin/heroku-php-apache2 public/
</code></pre>

<p>これで、public/がwebのドキュメントルートになる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SalesForce]apex:inputFileで添付されたファイルの種類をチェックする]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/05/30/apex-inputfile-contenttype/"/>
    <updated>2014-05-30T15:59:00+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/05/30/apex-inputfile-contenttype</id>
    <content type="html"><![CDATA[<p>添付されたファイルが指定のものかどうかをチェックする。</p>

<!-- more -->


<h4>1.inputタグのacceptで制限</h4>

<p>一番簡単な方法だけど、ブラウザによっては効かないものもあり。<br/>
salseforce独自の方法というわけではなく、一般的なもの。</p>

<p><a href="http://yokano-jp.blogspot.jp/2013/08/accept.html">accept 属性でアップロードするファイルフォーマットを指定</a></p>

<h4>2.contenttypeを取得</h4>

<p>以下のように指定することで、選択されたファイルのcontenttype (MIMEタイプ)を取得出来る。</p>

<p>[VisualForce]</p>

<pre><code>&lt;apex:inputFile fileName="{!upload.name}" value="{!upload.body}" contentType="{!upload.contentType}" /&gt;
</code></pre>

<p>[apexクラス]</p>

<pre><code>//Documentに保存する場合
public Document upload { get; set; }

//確認ボタンが押された場合
public Pagereference confirm() {
    String ctype = upload.ContentType; //ContentTypeを取得
    if(ctype != 'image/jpeg'){
        // エラーにする
    }
}
</code></pre>

<p>以下、主なcontenttype。(METAタイプ)</p>

<table>
<thead>
<tr>
<th>contenttype </th>
<th> 種類</th>
</tr>
</thead>
<tbody>
<tr>
<td>image/jpeg </td>
<td> JPG画像</td>
</tr>
<tr>
<td>application/pdf </td>
<td> PDF</td>
</tr>
<tr>
<td>application/vnd.ms-excel </td>
<td> エクセル(.xls)</td>
</tr>
<tr>
<td>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet </td>
<td> エクセル(.xlsx)</td>
</tr>
<tr>
<td>application/msword </td>
<td> ワード(.doc)</td>
</tr>
<tr>
<td>application/vnd.openxmlformats-officedocument.wordprocessingml.document </td>
<td> ワード(.docx)</td>
</tr>
</tbody>
</table>


<p>ただし、macでエクセルなどを添付した場合に、このcontenttypeが、<br/>
<code>application/octet-stream</code>になってしまった場合があった。<br/>
このタイプはファイルタイプが不明、の場合になるよう。<br/>
(たぶん、使用しているPCが不明なタイプと判断している場合にそうなる可能性がある)</p>

<p>その場合には、拡張子で判断するようにした。</p>

<h4>3.拡張子で判断</h4>

<p>単純に、ファイル名から、ドットで区切って文字列を取得。<br/>
その文字列と判定、とした。<br/>
上記のapexクラスに追記</p>

<pre><code>if(ctype != 'image/jpeg'){
    if(ctype == 'application/octet-stream'){
        List&lt;String&gt; names = upload.Name.split('\\.');
        String dotex = names[names.size() - 1];
        if(dotex != 'jpg'){
            //エラー
        }
    }else{
        //エラー
    }
}
</code></pre>

<h4>まとめ</h4>

<p>これで単純に、ファイルタイプと拡張子によるチェックは出来るかと思います。<br/>
が、PC側で拡張子を変更するだけで偽装できてしまうので、確実なチェックをしようと思うと、別アプローチが必要になるかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SalesForce]チェックボックス付きのテーブルリストを作る]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/05/20/pageblocktable-with-checkbox/"/>
    <updated>2014-05-20T18:11:21+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/05/20/pageblocktable-with-checkbox</id>
    <content type="html"><![CDATA[<p>チェックボックスがついたテーブルのリストを<br/>
カスタマイズされた項目で作成してみた。</p>

<!-- more -->


<p>参考サイト：<br/>
<a href="http://blog.livedoor.jp/totalsoft/archives/3017384.html">[Visualforce] チェックボックスつきリストの実現（ページング機能つき） [技術情報]</a><br/>
<a href="http://system21sf.seesaa.net/article/135800427.html">チェックボックス付きリストの作り方</a></p>

<p>２つ目の参考サイトによると、</p>

<blockquote><p>&lt;apex:listViews>を使えばあっという間に作れてしまいますが、残念ながらそこでチェックされたレコードをサーバー側で取得することができません。</p></blockquote>

<p>そうなので、任意のオブジェクトをラップしたクラスを作成してそのオブジェクトにチェックされた項目を保存することになる。<br/>
上記２つの参考サイトではページングなどで結構ややこしくなっているので、<br/>
なるべく簡易に、オブジェクトのラッパークラスを使うことだけに注目して作成してみた。</p>

<p>ちなみに、標準の<code>Attachment</code>オブジェクトではリストを作成出来なかった。<br/>
(サポートしてない、的なエラーが出た)</p>

<p>標準オブジェクトでは確認していないので、カスタムオブジェクトでの方法を例に上げる。</p>

<p>オーバーライドするオブジェクト：HogeObject__c</p>

<p><strong>オーバーライドしたクラス</strong></p>

<pre><code>public class  HogeObjectWrapper {

    public HogeObject__c Record {get; private set;}  //元のオブジェクト格納
    public Boolean selected {get; set;} //チェックボックス用
    public String hogeName {get; set;} //追加する項目(あれば)

    public HogeObjectWrapper(HogeObject__c record) {
        this.Record = record;
        this.selected = false; //デフォルト値
        this.hogeName = '';
    }
}
</code></pre>

<p>ページで指定しているapexクラスで使用する</p>

<pre><code>public class hogePageController {
    public Lead lead { get; set; }

    public List&lt;HogeObjectWrapper&gt; HogeObjectSelects; //リスト格納用

    //コンストラクタ
    public hogePageController(ApexPages.StandardController controller) {
        //コンストラクタで表示するリストを取得しておく
        AttachmentObjectSelects= new List&lt;SendmailAttachmentWrapper&gt;();

        List&lt;HogeObject__c&gt; hogeLists = [SELECT Id, Name FROM HogeObject__c];
        for(HogeObject__c h:hogeLists){
            //ラッパークラスに代入する
            HogeObjectWrapper hObj = new HogeObjectWrapper(h);
            hObj.hogeName = '何かしらの名前';
            HogeObjectSelects.add(hObj);
        }
    }

    //ページからの参照用
    public List&lt;HogeObjectWrapper&gt; getHogeObjectSelects() {
        return HogeObjectSelects;
    }
}
</code></pre>

<p><strong>VisualForceページ</strong></p>

<pre><code>&lt;apex:pageBlock &gt;
    &lt;apex:pageBlockTable value="{!HogeObjectSelects}" var="h"&gt;
        &lt;apex:column &gt;
            &lt;apex:facet name="header"&gt;チェックボックス&lt;/apex:facet&gt;
            &lt;apex:inputCheckbox value="{! a.selected }"/&gt;
        &lt;/apex:column&gt;
        &lt;apex:column &gt;
            &lt;apex:facet name="header"&gt;オブジェクトのID&lt;/apex:facet&gt;
            &lt;apex:outputText value="{! h.Record.id }" /&gt;
        &lt;/apex:column&gt;
        &lt;apex:column &gt;
            &lt;apex:facet name="header"&gt;任意の名前&lt;/apex:facet&gt;
            &lt;apex:outputText value="{! h.hogeName }" /&gt;
        &lt;/apex:column&gt;
    &lt;/apex:pageBlockTable&gt;
&lt;/apex:pageBlock&gt;
</code></pre>

<p><code>pageBlockTable</code>を使用するには、<code>pageBlock</code>で囲まないといけない。<br/>
<a href="http://www.salesforce.com/us/developer/docs/pages/Content/pages_compref_pageBlockTable.htm">apex:pageBlockTable</a><br/>
<code>apex:facet</code>は、<code>apex:column</code>内で使用し、そのテーブル内の列の見出しとなる。<br/>
<a href="https://www.salesforce.com/us/developer/docs/pages/Content/pages_compref_facet.htm">apex:facet</a><br/>
参考：<a href="http://www30304u.sakura.ne.jp/blog/?p=510">[SFDC]一覧表にリンクを表示したい（ヘッダタイトルもつける）</a></p>

<p>これで、一番左の列にチェックボックスのついたテーブルが完成した。</p>

<p>チェックして送信した場合、<code>HogeObjectSelects</code>の<code>selected</code>がtrueになる。<br/>
そこからデータを取得出来る。<br/>
forで回して、selectedがtrueになっている場合に何かしらをする、、というストーリーが想定される。</p>

<p>apexでの使用方法</p>

<pre><code>for(HogeObjectWrapper h:HogeObjectSelects){
    if(h.selected){
        //tureの時、何かの処理をする
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SalesForce]SOQLでルックアップ先データを取得する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/05/15/soql-relationship/"/>
    <updated>2014-05-15T15:34:57+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/05/15/soql-relationship</id>
    <content type="html"><![CDATA[<p>SalseforceでSOQLを使用してルックアップ先のデータを取得する方法。</p>

<!-- more -->


<p>単純に、ルックアップ先を指定している項目名を使用して指定する。<br/>
その際、通常カスタム項目の参照方法、<code>__c</code>ではなくて、<code>__r</code>を使用する。以上。</p>

<p>例：取引先(Account)で作成したカスタム項目、Companyに入っている先から取得する場合<br/>
(参照先のオブジェクト名は気にしない)</p>

<pre><code>SELECT id, name, Company__r.Name FROM Account
</code></pre>

<p>Accountのid、nameと、Companyに入っているオブジェクトのname項目を取得出来る。</p>

<p>これをapex上で使用して、Companyのname項目を取得したい場合は以下。</p>

<pre><code>List&lt;Account&gt; list= [select Name ,Company__r.Name from Account];
System.debug(list[0].Company__r.Name);
</code></pre>

<p>ちなみに、この場合は、<strong>参照関係</strong>と言うよう。<br/>
<a href="http://blog.flect.co.jp/salesforce/2010/07/post-2e88.html">参照関係と主従関係</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[heokuで既存アプリにビルドパックを適用させる]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/05/14/heroku-set-build-pack/"/>
    <updated>2014-05-14T11:04:44+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/05/14/heroku-set-build-pack</id>
    <content type="html"><![CDATA[<p>新規アプリを作成時にビルドパックを適用する方法は<br/>
<a href="http://kayakuguri.github.io/blog/2014/02/18/create-php-heroku-mbstring/">以前に書いた</a>のですが、すでに作成しているいアプリに適用させる必要が出たので<br/>
調べてみました。</p>

<!-- more -->


<p>結論から言うと、公式にありました。</p>

<p><a href="https://devcenter.heroku.com/articles/buildpacks">Buildpacks | Heroku Dev Center</a></p>

<p>実際に適用させてみます。<br/>
(<code>myapp</code>となっている箇所は変更して下さい。)</p>

<p>まず、適用したいアプリを任意のフォルダに<code>clone</code>。</p>

<pre><code>$ git clone git@heroku.com:myapp.git
</code></pre>

<p>で、上記のURLを参考に、ビルドパックを適用させる。<br/>
PHPでmbStringが使いたいので、以下のカスタムビルドパックを指定した。<br/>
(PHPが<a href="https://blog.heroku.com/archives/2014/4/29/introducing_the_new_php_on_heroku">公式にサポート</a>されたけれど、mbStringは入ってないっぽい。<br/>
 公式分でのmb環境構築方法がわかればまたメモします。)</p>

<pre><code>heroku config:set BUILDPACK_URL=https://github.com/iphoting/heroku-buildpack-php-tyler.git#php/5.4.9
</code></pre>

<p>適当にファイルを作って、コミットして、プッシュ。<br/>
プッシュ時にデプロイされるので、そこでビルドパックも適用される。</p>

<pre><code>$ echo '&lt;?php phpinfo();' &gt; index.php
$ git add .
$ git commit -m 'initial commit'
$ git push heroku master
</code></pre>

<p>しかし、このpushの段階で怒られる。</p>

<pre><code>fatal: Could not read from remote repository.
</code></pre>

<p>ググると、herokuにremoteでaddしないといけない模様。<br/>
参考：<a href="http://d.hatena.ne.jp/s-0samu/20110416/1302890751">Railsでtwitterサービスをつくる（続きの続き） &ndash; ありえないなど、ありえない</a></p>

<pre><code>$ git remote add heroku git@heroku.com:myapp.git
$ git push heroku master
</code></pre>

<p>再度pushすると無事、デプロイが完了し、PHP環境が出来上がりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RawGitを使ったページへのアクセス過多]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/04/30/rowgit-rotate/"/>
    <updated>2014-04-30T11:31:51+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/04/30/rowgit-rotate</id>
    <content type="html"><![CDATA[<p>いつものように<a href="http://b.hatena.ne.jp/hotentry">ホッテントリ―一覧</a>を眺めていると、以下の記事が。</p>

<p><a href="http://mizchi.hatenablog.com/entry/2014/04/30/015730">#ガチJS でJavaScriptとフロントエンドの未来について熱い話をした &ndash; mizchi&#39;s blog</a></p>

<p>興味があり、クリックしてみると、変なアラートが表示されてOKを押すと、なんと、<br/>
記事が逆さまに表示されている。<br/>
なんでこんなことになってるのか調べてみた。</p>

<!-- more -->


<p>アラートの内容は以下。</p>

<blockquote><p>This website abuses rawgit.com. You should complain to its owner.</p></blockquote>

<p><a href="http://translate.weblio.jp/">自動翻訳</a>にかけてみると、以下。</p>

<blockquote><p>このウェブサイトは、rawgit.comを罵倒します。あなたは、その所有者に不平を言わなければなりません。</p></blockquote>

<p><code>abuses</code>は、<code>乱用</code>とかの意味があるみたい。</p>

<p>このサイトでは、rawgitというサイトを使用しているよう。</p>

<p><a href="http://rawgit.com/">http://rawgit.com/</a></p>

<p>このrowgit、というのは、CDNが提供されていないgithub上のコードを直接使用したいけれど、<br/>
そのままだと上手く使えないから、それを使えるように出来るサービス、というものみたい。<br/>
<a href="http://qiita.com/futoase/items/39cb4b7d704b1e53e7f6">この説明サイト</a>の内容のように、URLを、<code>https://raw.github.com</code>から、<code>https://rawgithub.com</code>へ変更する。</p>

<p>参考：<a href="http://qiita.com/futoase/items/8e20db8f7a191941d6b6">http://qiita.com/futoase/items/8e20db8f7a191941d6b6</a></p>

<blockquote><p>Production betaという表現がサイトにあったので、気になって見てみた。<br/>
今のところCDNをrawgitの作者が自費で借りているようだ。<br/>
一応Productionという表現はあるけれど、商売で使うには自前でね★とのことだ。</p></blockquote>

<p>この辺で引っかかっているよう。</p>

<p>rawgitのサイトを改めて見てみると、<code>stats</code>というページがあり、アクセスの多いページを公開している。<br/>
<a href="http://rawgit.com/stats">http://rawgit.com/stats</a><br/>
FAQを読むと、ここに出るようなサイトの場合は、自前でサーバーとか用意してね、とのことのよう。<br/>
<a href="http://rawgit.com/faq#how-do-i-know-if-im-a-jerk">http://rawgit.com/faq#how-do-i-know-if-im-a-jerk</a></p>

<p>で、冒頭の警告文に戻って改めて解釈してみると、</p>

<blockquote><p>このサイトは、rawgitへのアクセスが多すぎるよ！<br/>
改善されるまでは見た目逆さまにして読めなくするからアクセスしないでね。<br/>
クレームはサイトの製作者に入れてね。</p></blockquote>

<p>みたいな感じでしょうか。</p>

<p>ちなみに、逆さまになっているのは、htmlタグに対して以下のCSSが追加されているから、のよう。</p>

<pre><code>html {
    -moz-transform: rotateX(180deg) !important;
    -webkit-transform: rotateX(180deg) !important;
    transform: rotateX(180deg) !important;
}
</code></pre>

<p>全体を180度回転させている。</p>

<p>アクセスが多いサイトに対してこうやって読めなくさせる手法とは面白い。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SalesForce]メールテンプレートの項目一覧]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/04/23/sf-mailtemplate/"/>
    <updated>2014-04-23T16:39:55+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/04/23/sf-mailtemplate</id>
    <content type="html"><![CDATA[<p>メールテンプレートは、<code>SOQL</code>を使用して、<code>EmailTemplate</code>でとってこれる。</p>

<!-- more -->


<p>参考：<a href="https://developer.salesforce.com/forums?id=906F00000009BOlIAM">https://developer.salesforce.com/forums?id=906F00000009BOlIAM</a></p>

<p>取得した<code>EmailTemplate</code>の一覧<br/>
(内容は間違っている可能性があります)</p>

<table>
<thead>
<tr>
<th>項目名 </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>body </td>
<td> 本文</td>
</tr>
<tr>
<td>markup </td>
<td> </td>
</tr>
<tr>
<td>folderid </td>
<td> フォルダーのID</td>
</tr>
<tr>
<td>subject </td>
<td> 件名</td>
</tr>
<tr>
<td>developername </td>
<td> 作成者</td>
</tr>
<tr>
<td>timesused </td>
<td> 使用回数</td>
</tr>
<tr>
<td>createddate </td>
<td> 作成日</td>
</tr>
<tr>
<td>ownerid </td>
<td> オーナーのID</td>
</tr>
<tr>
<td>apiversion </td>
<td> </td>
</tr>
<tr>
<td>createdbyid </td>
<td> 作成者のID</td>
</tr>
<tr>
<td>lastmodifieddate </td>
<td> 更新日</td>
</tr>
<tr>
<td>id </td>
<td> ID</td>
</tr>
<tr>
<td>brandtemplateid </td>
<td> </td>
</tr>
<tr>
<td>lastuseddate </td>
<td> 最終使用日</td>
</tr>
<tr>
<td>templatestyle </td>
<td> </td>
</tr>
<tr>
<td>isactive </td>
<td> 有効か</td>
</tr>
<tr>
<td>namespaceprefix </td>
<td> </td>
</tr>
<tr>
<td>description </td>
<td> テンプレートの説明</td>
</tr>
<tr>
<td>name </td>
<td> テンプレートの一意の名前</td>
</tr>
<tr>
<td>templatetype </td>
<td> テンプレートのタイプ</td>
</tr>
<tr>
<td>encoding </td>
<td> 文字コード</td>
</tr>
<tr>
<td>systemmodstamp </td>
<td> </td>
</tr>
<tr>
<td>lastmodifiedbyid </td>
<td> 更新者のID</td>
</tr>
<tr>
<td>htmlvalue </td>
<td> HTMLテンプレートの場合の本文</td>
</tr>
</tbody>
</table>


<hr />

<p>以下の方法でオブジェクトの項目一覧を取得出来る。</p>

<p>参考：<br/>
<a href="http://techblog.appirio.co.jp/2012/07/forcecom-apexdescribe.html">http://techblog.appirio.co.jp/2012/07/forcecom-apexdescribe.html</a><br/>
<a href="http://www30304u.sakura.ne.jp/blog/?p=188">http://www30304u.sakura.ne.jp/blog/?p=188</a><br/>
<a href="http://vaindespair.blogspot.jp/2012/04/blog-post_04.html">http://vaindespair.blogspot.jp/2012/04/blog-post_04.html</a></p>

<p>実際に取得したapexコード</p>

<pre><code>public Pagereference getList() {
    sObject newObj = (sObject)Type.forName('EmailTemplate').newInstance();
    Schema.DescribeSObjectResult descResult = newObj.getsObjectType().getDescribe();
    String keys = concatSet(descResult.fields.getMap().keySet(), ', ');

    System.debug('***** EmailTemplate keys: ' + keys);
}

private static String concatSet(Set&lt;String&gt; strSet, String sep) {
    String retStr;
    for (String str : strSet) {
        retStr = retStr == null ? str : retStr + sep + str;
    }
    return retStr == null ? '' : retStr;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SaleseForce]匿名ブロックでの実行テスト]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/04/23/sf-anonymous-debug/"/>
    <updated>2014-04-23T16:17:04+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/04/23/sf-anonymous-debug</id>
    <content type="html"><![CDATA[<p>特定のメソッドを実行してデバッグ出力を確認したいときに、<br/>
そのメソッドだけ単発で実行させる方法として、<code>匿名ブロック</code>による実行というのがある。</p>

<!-- more -->


<p>参考：<a href="http://blog.livedoor.jp/rays4live/archives/67722528.html">Apexプログラミング～基本編２～</a></p>

<p>基本、上記参考サイトの通り。<br/>
Force.com IDE上でも匿名ブロック、<code>Execute Anonymous</code>での実行が出来る。</p>

<blockquote><p>Execute Anonymous」の機能を使います。この機能は、「匿名ブロック」と呼ばれていて、単発でメソッドの呼び出しなどを行うことができます。一種のコンソール的なものとイメージするといいかと思います。</p></blockquote>

<p>VisualForceのページから呼び出す用のクラスを実行する場合は、<br/>
テストクラスを書くときと同じ要領で、クラスをnewして実行させる。<br/>
例えば、そのページがLeadを標準のコントローラーとしている時は以下のように。<br/>
<code>testMethod</code>が実行したい関数だとする。
(別にページでLeadに指定していても他のオブジェクトを渡しても問題ない)</p>

<pre><code>Lead p = new Lead();
HogeController c = new HogeController(new ApexPages.StandardController(p));
c.testMethod();
</code></pre>

<p>で、<code>testMethod</code>内には以下のように書いていたとする。</p>

<pre><code>public Pagereference testMethod() {
    System.debug('Hello world!');
    return null;
}
</code></pre>

<p>実行後、ログが出力されて、目的のデバッグログも以下のような形で吐かれる。</p>

<pre><code>15:11:05.049 (49728000)|USER_DEBUG|[46]|DEBUG|Hello world!
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhpstormでRubyファイルにシンタックスハイライトを適用]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/04/04/phpstorm-ruby/"/>
    <updated>2014-04-04T13:39:21+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/04/04/phpstorm-ruby</id>
    <content type="html"><![CDATA[<p>シンタックスハイライトや補完なんかはやっぱりphpstormでは無理なよう。<br/>
通常は、<code>IntelliJ IDEA Ultimate</code>使え、と。<br/>
とはいえ、基本的なシンタックスハイライトくらいは適応させる方法がある、とのこと。</p>

<!-- more -->


<p><a href="http://stackoverflow.com/questions/16451359/is-it-possible-to-get-ruby-syntax-highlighting-in-phpstorm">Is it possible to get Ruby syntax highlighting in PHPStorm?</a></p>

<p>基本は上記の訳。</p>

<p>1) <a href="https://github.com/drnic/ruby-tmbundle">ruby-tmbundle</a>を適当なディレクトリにクローン。</p>

<pre><code>$ git clone https://github.com/drnic/ruby-tmbundle.git
</code></pre>

<p>2) <code>Phpsotrm -&gt; Preference</code>を開く<br/>
<code>IDE Settings</code>以下にある、<code>TextMate Bundles</code>に1)のディレクトリを追加。</p>

<p><img src="http://kayakuguri.github.io/images/2014/04/phpstorm-ruby1.jpg" alt="TextMate Bundles" /></p>

<p>3) 諸々の理由で、このバンドルはrubyの<code>rb</code>ファイルをサポートしていないらしい。<br/>
なので、サポートするように修正する。<br/>
1)のディレクトリ内の、<code>ruby-tmbundle/Syntaxes/Ruby.plist</code>を開く。<br/>
その中で、<code>&lt;key&gt;fileTypes&lt;/key&gt;</code>以下にある、<code>&lt;array&gt;</code>タグの中に<code>&lt;string&gt;rb&lt;/string&gt;</code>を追加する。</p>

<pre><code>...
&lt;key&gt;fileTypes&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;rb&lt;/string&gt; ←追加
    &lt;string&gt;rbx&lt;/string&gt;
    &lt;string&gt;Rakefile&lt;/string&gt;
    &lt;string&gt;rake&lt;/string&gt;
    &lt;string&gt;sake&lt;/string&gt;
    &lt;string&gt;cgi&lt;/string&gt;
    &lt;string&gt;fcgi&lt;/string&gt;
    &lt;string&gt;gemspec&lt;/string&gt;
    &lt;string&gt;irbrc&lt;/string&gt;
    &lt;string&gt;capfile&lt;/string&gt;
&lt;/array&gt;
&lt;key&gt;firstLineMatch&lt;/key&gt;
…
</code></pre>

<p>4) <code>Preference</code>で、<code>File Types</code>で、<code>*.rb</code>を追加が追加されていることを確認する。</p>

<p><img src="http://kayakuguri.github.io/images/2014/04/phpstorm-ruby2.jpg" alt="File Types" /></p>

<p>完了。</p>

<p><img src="http://kayakuguri.github.io/images/2014/04/phpstorm-ruby3.jpg" alt="Ruby syntax highlight" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[バッチファイルでのFTPアップロード]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/04/03/ftp-upload-bat/"/>
    <updated>2014-04-03T17:41:46+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/04/03/ftp-upload-bat</id>
    <content type="html"><![CDATA[<p>バッチファイルでFTPに接続して何かをする場合、<br/>
バッチファイルとは別に、接続先や作業内容などを記述したコマンドファイルが必要になる。<br/>
それを、バッチファイルから呼び出す形。</p>

<!-- more -->


<p>とはいえ、このコマンドファイルも実行するバッチファイル内で作成してしまい、<br/>
それを保存、実行、削除、してしまえば、ファイルが一つで動作できるようになる。</p>

<ol>
<li>コマンドファイルを、tmpファイルとしてまず作成し、</li>
<li>それをバッチで実行し、</li>
<li>tmpファイルを削除</li>
</ol>


<p>コマンドファイルは中身がテキストであればなんでも大丈夫なよう。</p>

<p>実行するコマンドファイルは一つだけれど、<br/>
便宜上、３つのファイルを作成し、それらを合体させて一つのファイルにするフローにした。</p>

<p>作成されるファイル</p>

<ol>
<li>ftp_login.tmp</li>
<li>ftp_up.tmp</li>
<li>ftp_loguot.tmp</li>
<li>ftp_bat.tmp</li>
</ol>


<p>1) ftpのログイン情報</p>

<pre><code>open [サーバー名]
[ユーザー名]
[パスワード]
bin
prompt
</code></pre>

<p><code>bin</code>以降に処理を書く。<br/>
<code>prompt</code>、は複数のファイルをアップロードやダウンロードする際に、確認を求められるのでそれを回避するために入れている。</p>

<p>2) アップロード情報</p>

<pre><code>cd /home/hoge
mput *.html
</code></pre>

<p>アップするディレクトに移動して、アップロード。<br/>
<code>put</code>がアップロード、で、<code>m</code>をつけると複数ファイルの処理になる。<br/>
(<code>m</code>をつけた場合のみ確認が出るので、それを出さないために<code>prompt</code>を入れている)</p>

<p>3) ログアウト情報</p>

<pre><code>bye
close
</code></pre>

<p><code>bye</code> : FTP終了<br/>
<code>close</code> : 接続を切断</p>

<p>4) 1〜3の内容をまとめて一つにする。</p>

<p>実行方法</p>

<pre><code>ftp -s:ftp_bat.tmp
</code></pre>

<p>ログを残す場合は以下。</p>

<pre><code>ftp -s:ftp_bat.tmp&gt;&gt;upload.log
</code></pre>

<hr />

<p>今回調べた(全然知らなかったので)コマンドは以下。</p>

<table>
<thead>
<tr>
<th>コマンド </th>
<th> 説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@echo off </td>
<td> 以降の実行するコマンドを画面に表示させないようにする</td>
</tr>
<tr>
<td>set </td>
<td> 変数を定義</td>
</tr>
<tr>
<td>rem </td>
<td> コメント</td>
</tr>
<tr>
<td>% </td>
<td> 変数を参照 <code>%file%</code>、<code>%TEMP%</code>など</td>
</tr>
<tr>
<td>%cd% </td>
<td> 現在のディレクトリ</td>
</tr>
<tr>
<td>:[ラベル] </td>
<td> ラベルを設定</td>
</tr>
<tr>
<td>goto [ラベル] </td>
<td> 指定したラベルへ移動</td>
</tr>
<tr>
<td>> </td>
<td> 左側に書いたものを右側のファイルへ書き込む(新規 もしくは 上書き)</td>
</tr>
<tr>
<td>>> </td>
<td> 左側に書いたものを右側のファイルへ追記</td>
</tr>
<tr>
<td>type </td>
<td> テキストファイルの中身をそのまま画面に出力</td>
</tr>
<tr>
<td>cscript </td>
<td> 指定したスクリプトの実行</td>
</tr>
</tbody>
</table>


<p>ファイルへの書き込み方法は、以下。</p>

<pre><code>//直接記入
echo hoge&gt; test.txt
--内容
hoge
//直接追記
echo fuga&gt;&gt; test.txt
--内容
hoge
fuga
//ファイル内容を記入
type test.txt&gt; sample.txt
--内容
hoge
fuga
//ファイル内容を追記
type test.txt&gt;&gt; sample.txt
--内容
hoge
fuga
hoge
fuga
</code></pre>

<hr />

<p>全体は以下のような形。<br/>
指定したサーバーに、同階層にあるhtml拡張子のファイルをアップロードする。<br/>
ログは、同階層に、<code>upload.log</code>に記録。</p>

<pre><code>@echo off
set path_local=%cd%
set path_remote=/home/uploadset
server=[ホスト名]
set user=[ユーザー名]
set password=[パスワード]

set ftplogin=ftp_login.tmp
set ftplogout=ftp_logout.tmp
set ftpupload=ftp_up.tmp
set ftpbat=ftp_bat.tmp

echo %user%&gt; %ftplogin%
echo %password%&gt;&gt; %ftplogin%
echo bin&gt;&gt; %ftplogin%
echo prompt&gt;&gt; %ftplogin%

echo cd %path_remote%&gt;&gt; %ftpupload%
echo mput *.html&gt;&gt; %ftpupload%

echo bye&gt; %ftplogout%
echo close&gt;&gt; %ftplogout%

echo open %server%&gt;%ftpbat%
type %ftplogin%&gt;&gt;%ftpbat%
type %ftpupload%&gt;&gt;%ftpbat%
type %ftplogout%&gt;&gt;%ftpbat%

ftp -s:%ftpbat% &gt;upload.log

del %ftplogin%
del %ftplogout%
del %ftpupload%
del %ftpbat%
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublimetext3をWindows7で日本語化する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/04/03/sublimetext3-japanese/"/>
    <updated>2014-04-03T17:24:05+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/04/03/sublimetext3-japanese</id>
    <content type="html"><![CDATA[<p>諸事情があってwindows7にて作業しなくちゃならなくなったので、<br/>
sublimetext3をインストール、日本語した。<br/>
けど、設定ファイルの場所がわからなったので、そのメモ。</p>

<!-- more -->


<p>基本はここの通り。<br/>
<a href="http://luna-plate.com/archives/4637">http://luna-plate.com/archives/4637</a></p>

<p>まずは、<a href="http://www.sublimetext.com/3">公式サイト</a>からインストール。<br/>
今回は64bitのwindows7なので、<br/>
<code>Windows 64 bit</code>を使用した。</p>

<p>で、手順通り、<a href="https://sublime.wbond.net/installation">package controlをインストール</a>。<br/>
その後、日本語化パッチをインストールして、手順にしたがってファイルを移動、リネーム。</p>

<p>この時の手順に表示されていた、</p>

<blockquote><ol>
<li>C:\Users\ユーザー名\AppData\Roaming\Sublime Text 3\Packages\Japanizeにインストールされている*.jpファイルを、</li>
</ol>
</blockquote>

<p>このディレクトリがどこにあるのかわからなかった。<br/>
結論を言うと、フォルダオプションで、隠しファイルなどを表示指定なかったことがそもそもの原因だった。</p>

<p><a href="http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1361716208">AppDataの場所が見つけられません. windows7でコントロールパネル→デスクトップの…</a></p>

<ol>
<li>フォルダを開いた状態で、左上の「整理」メニューから、「フォルダーと検索のオプション」を開く。</li>
<li>「表示」タブの、「ファイルとフォルダーの表示」にある、「隠しファイル、隠しフォルダー、および隠しドライブを表示する」を選択して適用。</li>
<li>で、知恵袋にある通り、OS(C:) > ユーザー > (ユーザー名）> に行けばある。</li>
</ol>


<p>無事、手順どおりファイルを移動、リネームしたら、全メニューの日本語化が完了。</p>

<p>最後にShift-JISファイルを文字化けさせないように、package controlで<code>ConvertToUTF8</code>をインストールしておく。</p>

<p>(とはいえ、これでも日本語を使用すると高確率で文字化け状態で保存されてしまうけれど。。(sublimetextでは正しく表示できる))</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phpstormで、ローカルファイルの差分]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/03/26/phpstorm-diff/"/>
    <updated>2014-03-26T10:29:07+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/03/26/phpstorm-diff</id>
    <content type="html"><![CDATA[<p>タイトル通り、<br/>
ローカルのファイルをPHPStormを使って差分チェックしたら死ぬほど便利だったのでメモ。</p>

<!-- more -->


<p>ファイルツリー上で２つのファイルを選択して、<code>⌘＋D</code>。</p>

<p>1) ファイルを選択して、</p>

<p><img src="http://kayakuguri.github.io/images/2014/03/diff-1.jpg" alt="Phpstrom diff" /></p>

<p>2) <code>⌘＋D</code>。</p>

<p><img src="http://kayakuguri.github.io/images/2014/03/diff-2.jpg" alt="Phpstrom diff" /></p>

<p>3) 差分の部分がハイライトされるので、<code>&gt;&gt;</code>か<code>&lt;&lt;</code>をクリックでそれぞれに反映される。</p>

<p><img src="http://kayakuguri.github.io/images/2014/03/diff-3.jpg" alt="Phpstrom diff" /></p>

<p>これで差分がたくさんある状態でもクリックのみで華麗に反映！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Forceでのブラウザバック対策]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/03/20/sf-browser-back/"/>
    <updated>2014-03-20T10:50:36+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/03/20/sf-browser-back</id>
    <content type="html"><![CDATA[<p>salseforceでフォームを作成している際、<br/>
完了画面を表示させた後にブラウザで戻るボタンを押すと、<br/>
フォームや確認画面に戻ってしまい、更に入力した内容が表示されてしまう。</p>

<p>このまま何も対策を取っていないと、二重送信されてしまうおそれがあるので、<br/>
対策を考えてみた。</p>

<!-- more -->


<p>基本的な考え方は以下の通り。</p>

<p><a href="http://piyopiyocs.blog115.fc2.com/blog-entry-6.html">セッションとhistory.back()とブラウザの戻るボタン。</a></p>

<p>まずは、上記と同じように、一度送信が完了した段階で、<br/>
それとわかるフラグを立てておきます。<br/>
再度入力画面を表示させようとすると、このフラグが立った状態だとエラー画面へ遷移するように設定しておきます。</p>

<p>しかし、salseforceでデフォルトの設定のまま(?)作業すると、<br/>
戻るボタンを押した際には、キャッシュされたページが表示されます。<br/>
(入力された値も含めて)</p>

<p>なので、キャッシュを無効にして、ページが無条件で表示されないようにします。<br/>
入力ページの冒頭に以下の設定を入れます。</p>

<pre><code>&lt;apex:page . . .  cache="false" &gt;
</code></pre>

<p>こうすると、完了画面に遷移後、この入力ページへ戻ってくると、<br/>
「フォーム内容を再送信して下さい。」のような画面が表示され、リロードせざる得なくなります。<br/>
そうすることで、フラグを判定してエラーページへ遷移させることが出来ました。</p>

<hr />

<p>この事を調査している時に知ったのですが、<br/>
(基本的な事のようですが、)<br/>
<code>setRedirect</code>を利用すると、値を引き継ぐか、URLを変更するか、が選べるようです。</p>

<blockquote><p>画面遷移する際にPageReferenceのsetRedirect(false)を使用することで変数の値を引き継ぐことができます。<br/>
&ndash; <a href="http://tyoshikawa1106.hatenablog.com/entry/2013/05/03/234647">SFDC：2つのVFページと同一コントローラ</a></p></blockquote>

<p>デフォルトではfalseに設定されているようです。<br/>
なので、確認画面への遷移などでは、URLは変わらず、同一コントローラー内の値も引き継がれます。<br/>
しかし、完了画面への遷移の際は値は必要なく、URLも変わって欲しいので、上記をtrueで遷移させた方が良さそうです。</p>

<pre><code>//apexクラスの関数内で
return Page.FormComplete.setRedirect(true);
</code></pre>

<p>しかしこれをしてしまうと、最初に書いた判定用のフラグの値も引き継がれないので、<br/>
逆に値がなければエラー、という流れで作ったほうがいいかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Live StreamingをFFmpegで作成する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/03/05/http-live-streaming/"/>
    <updated>2014-03-05T17:18:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/03/05/http-live-streaming</id>
    <content type="html"><![CDATA[<p>iOSで端末で動画をストリーミング再生させるべく、<br/>
HTTP Live Streamingを作成してみた。</p>

<!-- more -->


<blockquote><p>HTTP Live Streaming(HLS)は動画ファイルを約10秒程度の短時間に分割しMPEG-TSコンテナに入れたものをひたすら生成しつつm3u8形式のリストファイルにそのファイルを逐次追加していくことで、HTTPのみで擬似的にLive Streamingを実現する方法です。<br/>
Appleが提唱したらしく、iOSが最も安定して再生できるのですが一応Androidでも対応します。
(手元のNexus7で試した所、Androidだとシークが出来なくなる)
<a href="http://qiita.com/joker1007/items/def9d58ddb00fafc936d">http://qiita.com/joker1007/items/def9d58ddb00fafc936d</a></p></blockquote>

<p>作成するには、<a href="http://www.ffmpeg.org/">FFmpeg</a>を使うのが楽、とのことで、FFmpegをインストール。<br/>
新しめのFFmpegには分割するためのsegmenterも入っているようなので、FFmpegを入れるだけでOK。</p>

<p>インストール環境は、<code>Mac OS X 10.8.5</code></p>

<p>以下のページを参考にしてインストールした。</p>

<p><a href="http://kujirahand.com/blog/index.php?Mac+OS+X%E3%81%A7FFmpeg%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%A8WebM%E5%8B%95%E7%94%BB%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9">Mac OS XでFFmpegのインストールとWebM動画の作り方</a></p>

<p>インストールには、<a href="http://brew.sh/">Homebrew</a>を使用。<br/>
必要なプラグインをbrewを使用して入れていく。<br/>
(以下は1行)</p>

<pre><code>brew install automake celt faac fdk-aac git lame libass libtool
 libvorbis libvpx libvo-aacenc opencore-amr openjpeg opus sdl
 schroedinger shtool speex texi2html theora wget x264 xvid yasm
</code></pre>

<p>Xcodeが最新版でないとWarningが出るので、アップデートしておく。<br/>
(すでにインストール済みのものがある場合もwarningが出る。)</p>

<p>で、FFmpegをオプションつきでインストールする。<br/>
(以下も1行)</p>

<pre><code>brew install ffmpeg 
 --with-fdk-aac --with-libvo-aacenc 
 --with-libvorbis --with-libvpx --with-openjpeg 
 --with-theora --with-opencore-amr
</code></pre>

<p>これで準備は完了。</p>

<hr />

<p>以下を参考に変換、分割作業。</p>

<p><a href="http://qiita.com/joker1007/items/def9d58ddb00fafc936d">HTML5のvideoタグで利用するmp4の動画を作る時のTips</a><br/>
(以下は1行)</p>

<pre><code>ffmpeg -i test.mp4 -vcodec libx264
 -b:v 768k -s 640x360 -acodec libfaac
 -b:a 96k -ar 44100 -flags +loop-global_heade 
 -map 0 -bsf h264_mp4toannexb -f segment 
 -segment_format mpegts -segment_time 10 
 -segment_list index.m3u8 test%03d.ts
</code></pre>

<p>オプションの説明</p>

<table>
<thead>
<tr>
<th>コマンド </th>
<th> 値 </th>
<th> 説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-i </td>
<td> test.mp4 </td>
<td> 入力ファイル</td>
</tr>
<tr>
<td>-vcodec </td>
<td> libx264 </td>
<td> ビデオコーデック。h264</td>
</tr>
<tr>
<td>-b:v </td>
<td> 768k </td>
<td> ビデオビットレート</td>
</tr>
<tr>
<td>-acodec </td>
<td> libfaac </td>
<td> オーディオ・コーデック。AAC</td>
</tr>
<tr>
<td>-b:a </td>
<td> 96k </td>
<td> オーディオビットレート</td>
</tr>
<tr>
<td>-ar </td>
<td> 44100 </td>
<td> オーディオサンプリングレート</td>
</tr>
<tr>
<td>-flags </td>
<td> +loop-global_header </td>
<td> </td>
</tr>
<tr>
<td>-map </td>
<td> 0 </td>
<td> </td>
</tr>
<tr>
<td>-bsf </td>
<td> h264_mp4toannexb ※1 </td>
<td> ビデオフィルター</td>
</tr>
<tr>
<td>-f </td>
<td> segment </td>
<td> コマンドの指定</td>
</tr>
<tr>
<td>-segment_format </td>
<td> mpegts </td>
<td> 分割フォーマット</td>
</tr>
<tr>
<td>-segment_time </td>
<td> 10 </td>
<td> 分割秒数</td>
</tr>
<tr>
<td>-segment_list </td>
<td> index.m3u8 </td>
<td> リストファイル</td>
</tr>
</tbody>
</table>


<p>最後に出力ファイル名を記述。<code>%03d</code>は３桁の連番。<br/>
-flagsと-mapは詳細不明。</p>

<p>※1 <code>mpegts</code>形式にする場合、必要なフィルターのよう。</p>

<blockquote><p>h264_mp4toannexb :<br/>
Convert an H.264 bitstream from length prefixed mode to start code prefixed mode (as defined in the Annex B of the ITU-T H.264 specification).<br/>
This is required by some streaming formats, typically the MPEG-2 transport stream format (&ldquo;mpegts&rdquo;).<br/>
<a href="http://www.ffmpeg.org/ffmpeg-bitstream-filters.html">http://www.ffmpeg.org/ffmpeg-bitstream-filters.html</a></p></blockquote>

<p>HTMLにはこの場合、index.m3u8を読みこめば表示出来る。</p>

<pre><code>&lt;video controls poster="hoge.jpg" preload="none" onclick="this.play();" width="640" height="320" id="stageVideo"&gt;
    &lt;source src="index.m3u8"&gt;
    &lt;img src="hoge.jpg" alt="代替" width="640" height="320" /&gt;
&lt;/video&gt;
</code></pre>

<hr />

<p>参考サイト：<br/>
<a href="http://do-gugan.com/~furuta/archives/2013/03/http_live_strea.html">HTTP Live Streaming覚え書き</a><br/>
<a href="https://developer.apple.com/jp/devcenter/ios/library/documentation/StreamingMediaGuide.pdf">HTTP Live Streamingの概要(PDF)</a><br/>
<a href="http://blog.fumiz.me/2008/10/19/ffmpeg%E3%81%A7%E5%8B%95%E7%94%BB%E3%81%8B%E3%82%89%E7%94%BB%E5%83%8F%E3%82%92%E5%88%87%E3%82%8A%E5%87%BA%E3%81%99/">ffmpegで動画から画像を切り出す</a><br/>
<a href="http://yosilove.blogspot.jp/2011/04/mac-ffmpeg.html">[Mac] ffmpegをコンパイル</a><br/>
<a href="http://venture-blog.blogspot.jp/2012/05/http-live-streaming.html">HTTP Live Streamingを使ったサーバ構築</a><br/>
<a href="http://qiita.com/joker1007/items/def9d58ddb00fafc936d">HTML5のvideoタグで利用するmp4の動画を作る時のTips</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apexからPOSTでファイルを送信する 改訂版]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/27/submit-base64/"/>
    <updated>2014-02-27T13:41:16+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/27/submit-base64</id>
    <content type="html"><![CDATA[<p><a href="http://kayakuguri.github.io/blog/2014/02/26/submit-callout-with-multipart/">前回のファイル送信</a>の動作確認版。</p>

<!-- more -->


<p>まず、やりたいこととして、<br/>
saleseforceで作成したページからファイルをherokuで作成したapiに送信して、<br/>
herokuのapiからそのファイルを添付で送信したかった。</p>

<p>結論としては以下の手順で動作した。</p>

<ol>
<li>visualforceで<code>apex:inputFile</code>を使用してファイルをアプロード</li>
<li>apexでファイルを受け取り、そのファイルを<code>base64エンコード</code>。</li>
<li>base64エンコードした文字列をPOSTのパラメータとして送信</li>
<li>herokuにアップしているphpでPOSTデータを受け取る</li>
<li>受け取ったbase64データをデコードして保存(一時的)</li>
<li>保存されたファイルからQdmailを使用してメールを送信</li>
</ol>


<hr />

<p>1) visualforceで<code>apex:inputFile</code>を使用してファイルをアプロード<br/>
visualforceページでのinputの書き方</p>

<pre><code>&lt;apex:input value="{!Email}" /&gt;
&lt;apex:inputFile value="{!FileBody}" filename="{!FileName}"/&gt;
</code></pre>

<p>2) apexでファイルを受け取り、そのファイルを<code>base64エンコード</code>。<br/>
3) base64エンコードした文字列をPOSTのパラメータとして送信<br/>
apex側で受け取る</p>

<pre><code>public String FileName { get; set; }
public Blob FileBody { get; set; }
public String Email { get; set; }

public Pagereference submit() {
    HttpRequest request = new HttpRequest();
    request.setEndpoint('送信先のphp');
    request.setMethod('POST');
    request.setHeader('Accept-Language', 'ja');
    //パラメータ
    Map&lt;String, String&gt; params = new Map&lt;String, String&gt;();
    params.put('to', Email);  //送信先
    params.put('attachName', FileName); //ファイル名
    params.put('attach', EncodingUtil.base64Encode(FileBody)); //ファイル内容
    Set&lt;String&gt; keys = params.keySet();
    String r = '';
    for(String key : keys) {
        //body用にパラメータを整形 to=xx&amp;attach=xx のように
        String val = params.get(key);
        r += key + '=';
        if(val != null) r += val;
        r += '&amp;';
    }
    r = r.removeEnd('&amp;');
    request.setBody(r);

    //送信
    Http http = new Http();
    HttpResponse response = http.send(request);
    ResResult = response.getBody(); //結果を受け取る
}
</code></pre>

<p>4) herokuにアップしているphpでPOSTデータを受け取る<br/>
5) 受け取ったbase64データをデコードして保存(一時的)<br/>
6) 保存されたファイルからQdmailを使用してメールを送信</p>

<p><a href="http://kayakuguri.github.io/blog/2014/02/18/php-heroku-sendattachmail/">Qdmailでの送信方法は以前の投稿を参照。</a></p>

<pre><code>require_once('../lib/qdmail.php');
require_once('../lib/qdsmtp.php');

//送信内容
$to          = $_POST['to'];
$subject     = '件名';
$body        = '本文';
$fromname    = '送り先名';
$fromaddress = '送り先アドレス';
$attachname  = $_POST['attachName'];
$attach      = $_POST['attach'];

$mail = new Qdmail();
$mail -&gt; smtp(true);
$param = array(
    'host'=&gt; $_ENV['MAILGUN_SMTP_SERVER'],
    'port'=&gt; $_ENV['MAILGUN_SMTP_PORT'],
    'from'=&gt; $fromaddress,
    'protocol'=&gt;'SMTP_AUTH',
    'user'=&gt; $_ENV['MAILGUN_SMTP_LOGIN'],
    'pass' =&gt; $_ENV['MAILGUN_SMTP_PASSWORD']
);
$mail -&gt;smtpServer($param);
$mail -&gt;to($to);
$mail -&gt;subject($subject);
$mail -&gt;from($fromaddress,$fromname);
$mail -&gt;text($body);

//添付ファイル
$bin = base64_decode(str_replace(' ', '+', $_POST['attach'][0])); //注意
$fp = fopen( "./" . $_POST['attachName'][0], "w" );
fwrite( $fp, $bin );
fclose( $fp );
$attach = array();
$attach[] = array( "./" . $_POST['attachName'][0] , $_POST['attachName'][0] );

//送信
echo $mail -&gt;send(); //成功の場合は「1」が返ってくる
</code></pre>

<p>Base64デコードしてファイルに保存する方法は以下を参考にしました。<br/>
<a href="http://blog.nipx.jp/archives/4137">Flashからアップロードする方法いろいろ</a><br/>
ただし、そのままではエラーになることがあるよう。</p>

<blockquote><p>どうやら、POSTでデータを渡すと、Base64の「+」記号が勝手にスペースに変換されてしまうらしい。<br/>
<a href="http://pontago.hatenablog.com/entry/20091028/1256743421">http://pontago.hatenablog.com/entry/20091028/1256743421</a></p></blockquote>

<p>(ヘッダ分を差し引く、の部分は無視しても問題なかった)</p>
]]></content>
  </entry>
  
</feed>
