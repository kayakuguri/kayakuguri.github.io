<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: apex | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/apex/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2018-03-22T16:39:30+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[apexでクッキーを扱う]]></title>
    <link href="http://kayakuguri.github.io/blog/2018/03/22/apex-cookie/"/>
    <updated>2018-03-22T16:34:03+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2018/03/22/apex-cookie</id>
    <content type="html"><![CDATA[<p>Apexでクッキーは、今まで扱ったことがなく、ちょっと詰まったのでメモ。</p>

<!-- more -->


<h1>セット</h1>

<p>クッキーをセットするには以下のようにする。<br/>
ページに対してクッキーを作成する形のよう？</p>

<p><code>
Cookie hoge_val = new Cookie('hoge', 'hogehoge', null, -1, true);
ApexPages.currentPage().setCookies(new Cookie[]{hoge});
</code></p>

<p><code>Cookie</code>クラスのコンストラクタは以下の通り。</p>

<ol>
<li>クッキーの名前</li>
<li>セットしたい値</li>
<li>パス</li>
<li>保存期間(秒)</li>
<li>セキュアか</li>
</ol>


<p>第４引数の秒は、<code>-1</code>を指定するとブラウザうを閉じるまで、<br/>
<code>0</code>を指定すると削除、となる。</p>

<h1>削除</h1>

<p>よって、削除したい場合は以下のように同じ値で0病にセットするとよい。</p>

<p><code>
Cookie hoge_val = new Cookie('hoge', null, null, 0, true);
ApexPages.currentPage().setCookies(new Cookie[]{hoge_val});
</code></p>

<h1>取得</h1>

<p>取得は以下のように。</p>

<p><code>
Cookie get_hoge = ApexPages.currentPage().getCookies().get('hoge');
System.debug(get_hoge.getValue());
</code></p>

<p><code>getValue()</code>でセットされている値を取得することになる。</p>

<h1>参考</h1>

<ul>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.212.0.apexcode.meta/apexcode/apex_classes_sites_cookie.htm">Cookieクラス | Salesforce developers</a></li>
<li><a href="https://dev.classmethod.jp/cloud/salesforce_mfcloud_oauth/">【Salesforce】(Tips) APEXからCookieを使う／プライベートメソッドのテスト／OAuth2処理まわりの話題 ｜ Developers.IO</a></li>
<li><a href="https://salesforce.stackexchange.com/questions/4894/how-is-a-cookie-constructed">apex &ndash; How is a Cookie constructed? &ndash; Salesforce Stack Exchange</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apex Rest APIで任意のステータスコードを返す]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/11/27/apex-rest-response/"/>
    <updated>2017-11-27T14:49:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/11/27/apex-rest-response</id>
    <content type="html"><![CDATA[<p>カスタムでApex Rest APIを作成する際にレスポンスにステータスコードを反映させる方法。</p>

<!-- more -->


<h1>概要</h1>

<p>今までは、返却用するJSON用のクラスを作成し、そのクラスを返却していたのだが、<br/>
そもそも返却の方法としてはそれが正しくなかった（お作法に則っていなかった）よう。</p>

<p><a href="https://kayakuguri.github.io/blog/2015/03/27/apex-rest-tips/">[salesforce]Apex REST作成時のtips</a><br/>
この辺の記事内で返却しているやり方。</p>

<p>実際には、<code>return</code>で結果を返す必要はなく、<code>RestResponse</code>クラスに追加してやるだけでよかった。</p>

<ul>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.apexcode.meta/apexcode/apex_methods_system_restresponse.htm">RestResponse クラス</a></li>
</ul>


<h1>RestResponse</h1>

<h2>ステータスコード</h2>

<p>ステータスコードの指定は以下のようにする。</p>

<p><code>
RestResponse res = RestContext.response;
res.statusCode = 400;
</code></p>

<h2>ヘッダ情報</h2>

<p>デフォルトの情報だと、<code>Content-Type</code>が<code>application/octetstream</code>になっているようなので、<code>application/json</code>に変更したい。<br/>
ヘッダ情報の追加・変更は以下のようにする。</p>

<p><code>
RestResponse res = RestContext.response;
res.addHeader('Content-Type', 'application/json');
</code></p>

<h2>レスポンス内容</h2>

<p>レスポンスの内容をJSONで返す場合、作成した返却用クラスをJSONにパースし、<code>Blob</code>にキャストして追加してやる。</p>

<p>```
ResultData result = new ResultData();</p>

<p>RestResponse res = RestContext.response;
res.responseBody = Blob.valueOf(JSON.serialize(result));
```</p>

<h2>コード</h2>

<p>上記をまとめると以下のような形になる。</p>

<p>```
@RestResource(urlMapping=&lsquo;/your/api&rsquo;)
global with sharing class Your_Apex_Class  {</p>

<pre><code>@HttpPost
global static void something_method() {
  ResultData result = new ResultData();
  result.success = false;
  ResultError error = new ResultError();
  result.error = error;

  RestResponse res = RestContext.response;
  res.addHeader('Content-Type', 'application/json');
  // (中略)

  if(/* エラーの場合 */){
    error.message = 'エラーメッセージ';
    res.statusCode = 400;
    res.responseBody = Blob.valueOf(JSON.serialize(result));
    return;
  }

  // (中略)
  result.success = true;
  res.statusCode = 200;
  res.responseBody = Blob.valueOf(JSON.serialize(result));
  return;
}

global class ResultData{
  global Boolean success;
  global ResultError error;
}

global class ResultError{
  global String message;
}
</code></pre>

<p>} <br/>
```</p>

<p>エラー発生時にはステータスコードが<code>400</code>で以下のようなJSONが返却される。</p>

<p>```
{</p>

<pre><code>"success": false,
"error": {
    "message": "エラーメッセージ"
}
</code></pre>

<p>}
```</p>

<h1>テスト</h1>

<p>テストクラスを書く際に、送信結果を取得する場合には以下のようにする。</p>

<p>```
@isTest static void your_something_test() {</p>

<pre><code>String json_str = '{ "YOUR" : "JSON_DATA" }';

//あらかじめ宣言が必要
RestRequest req = new RestRequest();
req.requestBody = Blob.valueof(json_str);
RestContext.request = req;
RestResponse res = new RestResponse();
RestContext.response = res;

Your_Apex_Class.something_method(); //実行

System.assertEquals(res.statusCode, 400); //ステータスコード
//返却されたJSON文字列をMapにキャストする
Map&lt;String, Object&gt; requestBody = (Map&lt;String, Object&gt;)JSON.deserializeUntyped(res.responseBody.ToString());
Map&lt;String, Object&gt; errorBody = (Map&lt;String, Object&gt;)requestBody.get('error');
System.assertEquals(errorBody.get('message'), 'エラーメッセージ'); //エラーメッセージ
</code></pre>

<p>}
```</p>

<h1>参考</h1>

<ul>
<li><a href="https://salesforce.stackexchange.com/questions/54010/apexrest-controlling-http-error-codes-on-exceptions">apexrest: controlling HTTP error codes on exceptions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Apex]エスケープ文字を置換する]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/01/26/apex-replase-escape/"/>
    <updated>2017-01-26T18:25:10+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/01/26/apex-replase-escape</id>
    <content type="html"><![CDATA[<p>apexにて取得した文字列から、エスケープ文字である、 <code>\</code> を取り除きたかったので、置換してみた。</p>

<!-- more -->


<h1>replaceAll</h1>

<p><code>replaceAll</code>を使用すれば全置換が出来るのだが、以下のように指定してしまうと <code>'</code> をエスケープしていることになるのでプログラムが破綻してエラーになっていまう。</p>

<p><code>
hoge.replaceAll('\', '');
</code></p>

<blockquote><p>エラー : line breaks not allowed in string literals</p></blockquote>

<p>なので、エスケープ文字をエスケープしてやればいいのでは、と思ったが、これだとエラーが出てしまった。</p>

<p><code>
hoge.replaceAll('\\', '');
</code></p>

<blockquote><p>エラー : System.StringException: Invalid regex: Unexpected internal error near index 1 \ ^</p></blockquote>

<p>正規表現が間違ってますよ、というような感じ？</p>

<p>なので、正規表現として指定してやればいけた。</p>

<p><code>
hoge.replaceAll('\\$', '');
</code></p>

<p>以上。<br/>
以下、蛇足。</p>

<h1>なぜ必要になったか</h1>

<p>以前書いた、<a href="http://kayakuguri.github.io/blog/2016/11/17/forrest-sfapi-laravel/">LaravelのSF接続用パッケージのforrest</a>を利用してデータの送信を行っていたのだが、<br/>
通常の配列のパラメータを送るのは問題なく出来ていたのだが、カスタムエンドポイントにJSONのデータをbodyに入れて送信するとapex側でパースエラーが出てしまった。<br/>
JSONデータは以前書いた方法でパースしている。<br/>
<a href="http://kayakuguri.github.io/blog/2015/12/08/json-apex-parse/">ApexでJSONをパースする</a></p>

<p>その内容が、上記のエスケープ文字がJSONデータに混ざり込んでいたため、だった。<br/>
なら、JSONデータからエスケープ文字を取り除いてやればよいのでは、と思い調べると、以下のようにJSONをエンコードするとエスケープされない事がわかった。</p>

<p><code>
json_encode($hoge, JSON_UNESCAPED_SLASHES);
</code></p>

<p>第二引数に<code>JSON_UNESCAPED_SLASHES</code>を指定してやるだけでよい。<br/>
しかし、これを行ってもエスケープ文字が消えない。これはもしかして、ライブラリ側でエスケープをしているのでは、と思いコードを確認するとやはり以下の箇所で<code>body</code>に指定された値に<code>json_encode</code>をかけており、ここでは第二引数には何も指定されていなかった。</p>

<p><a href="https://github.com/omniphx/forrest/blob/master/src/Omniphx/Forrest/Client.php#L775">https://github.com/omniphx/forrest/blob/master/src/Omniphx/Forrest/Client.php#L775</a></p>

<p>ならば、設定ファイルでフォーマットの形式を指定する箇所があったので、そこで<code>none</code>を指定してやった。</p>

<p><a href="https://github.com/omniphx/forrest/blob/master/src/config/config.php#L50">https://github.com/omniphx/forrest/blob/master/src/config/config.php#L50</a></p>

<p>しかし上記の<code>json_encode</code>している箇所をよくみるとわかるのだが、フォーマットが指定されていない場合は、<code>body</code>を<a href="https://github.com/omniphx/forrest/blob/master/src/Omniphx/Forrest/Client.php#L772">空にして送る</a>ようになってしまっていた。</p>

<p>これは、必ずエスケープするという方針によるものなのか、単なる実装し忘れなのかわからないが、パッケージの中身を触るわけにもいかず<br/>
(オーバーラップして自分で実装し直すのも面倒なので）<br/>
apex側で置換してやったほうがよさそう、ということで本エントリー内容を試すこととなった、という顛末。</p>

<h2>参考</h2>

<ul>
<li><a href="http://blog.higty.xyz/archives/530/">php json_encode で"/&ldquo;のエスケープ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chatter in Apxを利用してコメントをメンション付きで投稿する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/10/17/coonect-api-post-comment/"/>
    <updated>2016-10-17T18:37:58+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/10/17/coonect-api-post-comment</id>
    <content type="html"><![CDATA[<p>タイトル通り。<br/>
ChatterのコメントをApex経由で<code>@</code>メンション付きで投稿する。</p>

<!-- more -->


<p>Chatterコメントは、<code>FeedComment</code>というオブジェクト名で作成されているので、
このオブジェクトにレコードをインサートすればコメントは作成出来る。
しかしその場合はコメントにそのまま<code>@ユーザ名</code>とつけてもメンションとして認識されない。<br/>
そのため、メンションをapex経由でつけるには、Chatter in Apex、<code>ConnectAip</code>を使用する。</p>

<h1>コメントの投稿</h1>

<p>Chatter in Apexのドキュメントは以下。(英語)<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/connectAPI_overview.htm">Chatter in Apex</a></p>

<p>この中で、コメントの投稿には、<code>postCommentToFeedElement</code>メソッドを使う。<br/>
以下のサンプルがほぼそのまま。<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/connectapi_examples_post_comment_feed_element_2.htm">Post a Comment with a Mention</a></p>

<p>以下、順番に組み立ててみる。</p>

<h2>postCommentToFeedElement</h2>

<p><code>postCommentToFeedElement</code>の引数は以下となっている。</p>

<ol>
<li><code>communityId</code><br/>
投稿するユーザーのコミュニティのID。<code>null</code>可。</li>
<li><code>feedElementId</code><br/>
親となる投稿(<code>FeedItem</code>)のSFID</li>
<li><code>comment</code><br/>
投稿するコメントの情報</li>
<li><code>feedElementFileUpload</code><br/>
投稿するファイルのバイナリ情報</li>
</ol>


<h2>(第二引数)comment</h2>

<p><code>ConnectApi.CommentInput</code>型。<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_input_comment.htm#apex_connectapi_input_comment">ConnectApi.CommentInput Class</a></p>

<p><code>body</code>メソッドに本文などの情報を入力する</p>

<h3>body</h3>

<p><code>ConnectApi.MessageBodyInput</code>型<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_input_msgBody.htm">ConnectApi.MessageBodyInput Class</a></p>

<p>メソッドは、<code>mesageSegments</code>のみ。</p>

<h3>mesageSegments</h3>

<p><code>List&lt;ConnectApi.MessageSegmentInput&gt;</code>型<br/>
<code>ConnectApi.MessageSegmentInput</code>クラスは、入力したい内容の型のクラスが継承している。<br/>
テキストの入力内容は、<code>ConnectApi.TextSegmentInput</code>クラスを使用する。<br/>
メンションの場合は、<code>ConnectApi.MentionSegmentInput</code>クラス、となっている。</p>

<p><a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_input_messageSegmentInput.htm">ConnectApi.MessageSegmentInput Class</a></p>

<h3>ConnectApi.TextSegmentInput</h3>

<p><code>text</code>メソッドのみ。ここに投稿する本文を入れる。<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_input_TxtMsgSeg.htm">ConnectApi.TextSegmentInput Class</a></p>

<h3>ConnectApi.MentionSegmentInput</h3>

<p><code>id</code>メソッドにメンションを送りたいユーザーのIDを入力する。
もしくは、APIバージョン38以降なら、<code>username</code>メソッドでユーザー名も利用出来るよう。<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_input_mentionMsgSeg.htm">ConnectApi.MentionSegmentInput Class</a></p>

<h3>コード</h3>

<p>一通りのコード全文は以下。<br/>
引数で、入力内容、親の投稿ID、メンションをつけるユーザのIDを渡すようにしている。</p>

<p>```
/<em>*
 * コメントを投稿する
 *
 * @param body String 本文
 * @param feedId Id 親の投稿ID
 * @param userId Id メンションを付ける
 * @return ConnectApi.Comment コメントクラス
 </em>/
public static void doPostComment(String body, Id feedId, Id userId){
  //子の投稿を作る
  ConnectApi.CommentInput commentInput = new ConnectApi.CommentInput();
  ConnectApi.MessageBodyInput messageBodyInput = new ConnectApi.MessageBodyInput();
  messageBodyInput.messageSegments = new List&lt;ConnectApi.MessageSegmentInput>();</p>

<p>  //本文を作る
  ConnectApi.TextSegmentInput textSegmentInput = new ConnectApi.TextSegmentInput();
  textSegmentInput.text = body;
  messageBodyInput.messageSegments.add(textSegmentInput);
  //メンションを作る
  ConnectApi.MentionSegmentInput mentionSegmentInput = new ConnectApi.MentionSegmentInput();
  mentionSegmentInput.id = userId;
  messageBodyInput.messageSegments.add(mentionSegmentInput);</p>

<p>  //投稿として追加
  commentInput.body = messageBodyInput;</p>

<p>  //コメントを投稿
  ConnectApi.Comment comment = ConnectApi.ChatterFeeds.postCommentToFeedElement(null, feedId, commentInput, null);
  return comment;
}
```</p>

<p>返却される<code>ConnectApi.Comment</code>クラスは以下。<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_output_comment.htm">ConnectApi.Comment Class</a></p>

<h2>参考</h2>

<ul>
<li><a href="https://help.salesforce.com/apex/HTViewSolution?id=000199689&amp;language=ja">Apexからの@メンションについて</a></li>
<li><a href="http://qiita.com/tyoshikawa1106/items/c68f8fbcd657a1a89ef2">Connect APIとTest Class &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Salesforce]関連リストのインライン編集をVFで作成する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/07/11/vf-inline-edit/"/>
    <updated>2016-07-11T17:56:11+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/07/11/vf-inline-edit</id>
    <content type="html"><![CDATA[<p>オブジェクトの詳細で表示される関連リスト部分、要するにそのレコードを参照しているレコード、を一覧表示からインライン編集出来るようにしたかったので、インライン編集の基本的な部分から調べてみた。</p>

<!-- more -->


<h1>参考</h1>

<ul>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.pages.meta/pages/pages_quick_start_inline_editing.htm">インライン編集の有効化 Visualforce開発者ガイド</a></li>
</ul>


<h1>詳細レコード</h1>

<p>該当のレコードの詳細を表示し、表示している項目をインライン編集出来るようにする。</p>

<p>作成しているVFページのURLにて、IDが指定されている + 指定されている<code>standardController</code>のオブジェクトであれば、Visualforceだけで表示させることが可能。</p>

<blockquote><p><a href="https://Salesforce_instance/apex/myPage?id=001x000xxx3Jsxb">https://Salesforce_instance/apex/myPage?id=001x000xxx3Jsxb</a></p></blockquote>

<p>この場合、IDが<code>001x000xxx3Jsxb</code>の取引先(<code>Account</code>)が表示される。<br/>
<code>apex:detail</code>タグを使うと、このレコードの詳細がそのまま表示される。<br/>
その際に、属性<code>inlineEdit</code>を<code>true</code>で指定するとインライン編集が可能となる。</p>

<p>```
&lt;apex:page standardController=&ldquo;Account&rdquo;></p>

<pre><code>    &lt;apex:detail subject="{!account.Id}" relatedList="false" inlineEdit="true"/&gt; 
</code></pre>

<p>&lt;/apex:page>
```</p>

<p>特定のレコードの詳細をそのまま表示したい時とかには便利。</p>

<h1>一覧表示</h1>

<p>詳細ではなく、一覧表示で複数件いっぺんに編集したい場合。
<code>apex:page</code>の属性で、<code>recordSetVar</code>を指定してやれば、<code>standardController</code>で指定したオブジェクトのリストを表示出来る。</p>

<p><a href="http://qiita.com/tyoshikawa1106/items/4ef3b8e1998609f2c573">standardControllerとrecordSetVar &ndash; Qiita</a></p>

<p>```
&lt;apex:page standardController=&ldquo;Account&rdquo; recordSetVar=&ldquo;records&rdquo; id=&ldquo;thePage&rdquo;></p>

<pre><code>&lt;apex:form id="theForm"&gt; 
    &lt;apex:pageBlock id="thePageBlock"&gt; 
        &lt;apex:pageBlockTable value="{!records}" var="record" id="thePageBlockTable"&gt; 
            &lt;apex:column &gt;
                &lt;apex:outputField value="{!record.Name}" id="AccountNameDOM" /&gt; 
                &lt;apex:facet name="header"&gt;Name&lt;/apex:facet&gt;
            &lt;/apex:column&gt;
            &lt;apex:column &gt;
                &lt;apex:outputField value="{!record.Type}" id="AccountTypeDOM" /&gt; 
                &lt;apex:facet name="header"&gt;Type&lt;/apex:facet&gt;
            &lt;/apex:column&gt;
            &lt;apex:column &gt;
                &lt;apex:outputField value="{!record.Industry}" 
                    id="AccountIndustryDOM" /&gt;  
                    &lt;apex:facet name="header"&gt;Industry&lt;/apex:facet&gt;
            &lt;/apex:column&gt;
            &lt;apex:inlineEditSupport event="ondblClick" 
                    showOnEdit="saveButton,cancelButton" hideOnEdit="editButton" /&gt; 
        &lt;/apex:pageBlockTable&gt; 
        &lt;apex:pageBlockButtons &gt; 
            &lt;apex:commandButton value="Edit" action="{!save}" id="editButton" /&gt;
            &lt;apex:commandButton value="Save" action="{!save}" id="saveButton" /&gt;
            &lt;apex:commandButton value="Cancel" action="{!cancel}" id="cancelButton" /&gt;
        &lt;/apex:pageBlockButtons&gt; 
    &lt;/apex:pageBlock&gt; 
&lt;/apex:form&gt;
</code></pre>

<p>&lt;/apex:page>
```</p>

<p>コードは公式ドキュメントのママ。<br/>
formなど各タグ内のIDは別にあってもなくてもよさそう。</p>

<p>以下のように表示される。</p>

<p><img src="/images/2016/07/sf_inline01.jpg" alt="" /></p>

<p><code>apex:column</code>で囲まれてた部分が1つの項目になっており、<code>&lt;apex:facet name="header"&gt;</code>タグの内容がそれぞれの項目の見出しとなる。</p>

<p>このままページを表示してインライン編集後、saveボタンをクリックすると確かに更新はされるがホームへ遷移してしまう。
(キャンセルをクリックしても同様)</p>

<p>これを解消するために、カスタムコントローラーを割り当ててみた。<br/>
<code>recordSetVar</code>を使っていると、割り当てたカスタムコントローラ側で取得したレコードリストを使用するために、<code>StandardSetController</code>を使う必要がある、とのこと。</p>

<p><a href="http://tyoshikawa1106.hatenablog.com/entry/2013/09/03/232942">SFDC：recordSetVarとextensions &ndash; tyoshikawa1106のブログ</a></p>

<p>これを、<code>StandardController</code>をコントローラ側で使っていると下記のようなエラーがでる。
エラーメッセージだけでは非常にわかりにくそうなので注意。</p>

<blockquote><p>common.apex.runtime.bytecode.BytecodeApexObjectType cannot be cast to common.apex.runtime.impl.ApexType</p></blockquote>

<p>で、カスタムコントローラ内で、ボタンを押された際のアクションを作成し、<code>null</code>を返す事でページ遷移をしないようにする。<br/>
ただし、保存する<code>save</code>ボタンはこれをしてしまうと保存されなくなってしまったので、キャンセルボタンだけにしておいた。</p>

<p>VF</p>

<p><code>
&lt;apex:page standardController="Account" recordSetVar="records" extensions="VfInlineEditSample" id="thePage"&gt;
</code></p>

<p>apex (<code>VfInlineEditSample.apxc</code>)</p>

<p>```
public class VfInlineEditSample {</p>

<pre><code>public VfInlineEditSample(ApexPages.StandardSetController stdController){
    List&lt;Account&gt; lists = (List&lt;Account&gt;)stdController.getRecords();
}

public PageReference cancel(){
    return null;
}
</code></pre>

<p>}
```</p>

<p><a href="http://www.developerforce.com/guides/fr/apex_fr/Content/apex_pages_standardsetcontroller.htm">Classe StandardSetController</a></p>

<h1>関連リスト</h1>

<p>とあるレコードの関連リストを一覧表示からインライン編集したい場合。<br/>
上記の一覧表示と同じようにすればインライン編集出来るテーブルを作る事は可能。</p>

<p>IDはVFページのパラメータから取得する。</p>

<p>例）<br/>
<code>VfInlineEditSamplePage.vfp</code></p>

<p>```
&lt;apex:page standardController=&ldquo;Account&rdquo; extensions=&ldquo;VfInlineEditSample&rdquo; id=&ldquo;thePage&rdquo;></p>

<pre><code>&lt;apex:form id="theForm"&gt; 
    &lt;apex:pageBlock title="商談" &gt;
        &lt;apex:pageBlockTable value="{!opp_records}" var="opp"&gt;
            &lt;apex:column &gt;
                &lt;apex:outputField value="{!opp.Name}" /&gt; 
                &lt;apex:facet name="header"&gt;商談名&lt;/apex:facet&gt;
            &lt;/apex:column&gt;
            &lt;apex:column &gt;
                &lt;apex:outputField value="{!opp.Amount}" /&gt; 
                &lt;apex:facet name="header"&gt;金額&lt;/apex:facet&gt;
            &lt;/apex:column&gt;
            &lt;apex:column &gt;
                &lt;apex:outputField value="{!opp.StageName}" /&gt; 
                &lt;apex:facet name="header"&gt;フェーズ&lt;/apex:facet&gt;
            &lt;/apex:column&gt;
            &lt;apex:column &gt;
                &lt;apex:outputField value="{!opp.NextStep}" /&gt; 
                &lt;apex:facet name="header"&gt;次回アクション&lt;/apex:facet&gt;
            &lt;/apex:column&gt;
            &lt;apex:inlineEditSupport event="ondblClick" /&gt;
        &lt;/apex:pageBlockTable&gt; 
        &lt;apex:pageBlockButtons &gt; 
            &lt;apex:commandButton value="Save" action="{!save}" /&gt;
            &lt;apex:commandButton value="Cancel" action="{!cancel}" /&gt;
        &lt;/apex:pageBlockButtons&gt; 
    &lt;/apex:pageBlock&gt; 
&lt;/apex:form&gt;
</code></pre>

<p>&lt;/apex:page>
```</p>

<p><code>VfInlineEditSample.apxc</code></p>

<p>```
public class VfInlineEditSample {</p>

<pre><code>public List&lt;Opportunity&gt; opp_records{get; set;}

public VfInlineEditSample(ApexPages.StandardController stdController){
    Account acc = (Account)stdController.getRecord();
    Id aid = acc.id;
    Account record = [SELECT id, name, (SELECT id,name,StageName,NextStep,Amount FROM Opportunities) FROM Account WHERE id=:aid];
    opp_records = record.Opportunities;
}

public PageReference cancel(){
    return null;
}
</code></pre>

<p>}
```</p>

<p>以下のようになる。</p>

<p><img src="/images/2016/07/sf_inline02.jpg" alt="" /></p>

<p>このままだとSaveをクリックしても保存はされない。<br/>
なので、cancelと同じようにカスタムコントローラ内でアクションを受け取り、編集した内容はVFへ引き渡している、 <code>opp_records</code>に入っているので、それをupdateすれば更新される。</p>

<p>apexクラスに以下を追加。</p>

<p>```
public PageReference save(){</p>

<pre><code>update opp_records;
return null;
</code></pre>

<p>}
```</p>

<p>しかしこうすると、編集されたされてないにかかわらず、関連リストに並んでいるオブジェクト(この場合は商談)のレコード全てが更新されてしまう。<br/>
ガバナ制限は、1万レコードまで大丈夫なので、問題になることは少ないと思うが、最終更新日付が全て更新されてしまうのが都合が悪いかもしれない。</p>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.salesforce_app_limits_cheatsheet.meta/salesforce_app_limits_cheatsheet/salesforce_app_limits_platform_apexgov.htm">Apex ガバナ制限</a></p>

<h2>更新対象を選ぶ</h2>

<p>ワークフローであれば、<code>ISCHANGED</code>を使えば、その項目が変更されたかどうかをチェック出来るが、apexではそのメソッドはない。<br/>
(機能追加が要望があがってたりする(トリガの機能としてだけど） <a href="https://success.salesforce.com/ideaview?id=087300000007LI2AAM">IsChanged function in Apex</a>)</p>

<p>なので、更新される項目を一つずつ比較して更新があるかどうかを確認する泥臭い方法を取ってみる。<br/>
(他にいいアイデアがあれば教えて欲しい…）</p>

<p>修正後のapex</p>

<p>```
public class VfInlineEditSample {</p>

<pre><code>public List&lt;Opportunity&gt; opp_records{get; set;}
private List&lt;Opportunity&gt; old_records;

public VfInlineEditSample(ApexPages.StandardController stdController){
    Account acc = (Account)stdController.getRecord();
    Id aid = acc.id;
    Account record = [SELECT id, name, (SELECT id,name,StageName,NextStep,Amount FROM Opportunities) FROM Account WHERE id=:aid];
    opp_records = record.Opportunities;
    old_records = opp_records.deepClone();
}

public PageReference cancel(){
    return null;
}

public PageReference save(){
    List&lt;Opportunity&gt; update_lists = new List&lt;Opportunity&gt;();
    for(Integer i = 0; i&lt; opp_records.size(); i++){
        if(opp_records[i].name != old_records[i].name){
            update_lists.add(opp_records[i]);
            continue;
        }else if(opp_records[i].StageName != old_records[i].StageName){
            update_lists.add(opp_records[i]);
            continue;
        }else if(opp_records[i].NextStep != old_records[i].NextStep){
            update_lists.add(opp_records[i]);
            continue;
        }else if(opp_records[i].Amount != old_records[i].Amount){
            update_lists.add(opp_records[i]);
            continue;
        }
    }

    if(update_lists.size() &gt; 0){
        update update_lists;
    }

    return null;
}
</code></pre>

<p>}
```</p>

<p>リストをコピーする際に、<code>deepClone</code>を使わないと<code>clone</code>では浅いコピーとなってしまい、参照しているものが同じになってしまうので注意。
(一方の値を更新するともう一方も同じ値になってしまう）</p>

<h2>汎用的にする</h2>

<p>上記だと、表示する項目を増やす度に比較の条件文を追加しないといけない。<br/>
なので、全項目から取得出来るものだけを比較するようにしてみた。</p>

<p>以下、関数。</p>

<p>```
public List<sObject> isChanged(String object_name, List<sObject> new_records, List<sObject> old_records){</p>

<pre><code>sObject obj = (sObject)Type.forName(object_name).newInstance();
Schema.DescribeSObjectResult descR = obj.getsObjectType().getDescribe();
Set&lt;String&gt; fields = descR.fields.getMap().keySet();
Map&lt;String, Schema.SObjectField&gt; fmap = descR.fields.getMap();

List&lt;sObject&gt; update_records = new List&lt;sObject&gt;();
for(Integer i = 0; i&lt; new_records.size(); i++){
    for(String field : fields){
        try{
            Schema.SObjectField f = fmap.get(field);
            Schema.DescribeFieldResult fr = f.getDescribe();
            if(!fr.isUpdateable()) continue; //更新出来ない項目は飛ばす
            //比較
            if(new_records[i].get(field) != old_records[i].get(field)){
                update_records.add(new_records[i]);
                continue;
            }
        }catch(SObjectException e){
            //取得していない項目
        }
    }
}

return update_records;
</code></pre>

<p>}
```</p>

<ul>
<li><code>getDescribe()</code>で指定したオブジェクトの全項目名を取得出来る</li>
<li>取得した項目名を使ってオブジェクトから<code>get()</code>で取得。例外が発生したものはselectで取得していない項目、となる</li>
<li>更新可能かどうかは、<code>Describe</code>で取得出来る項目の情報内を見れば判定可能<br/>
<code>isUpdateable</code>がtrueなら更新が出来る項目となるので、これがtrueのもののみ比較している</li>
</ul>


<p>使用の際は、第一引数にオブジェクトの参照名、第二引数に更新後のレコードリスト、第三引数に更新前のレコードリストを指定してやる。</p>

<p><code>
List&lt;Opportunity&gt; update_lists = isChanged('Opportunity', opp_records, old_records);
</code></p>

<p>これで項目が増えても安心。</p>

<h3>参考</h3>

<ul>
<li><a href="http://kayakuguri.github.io/blog/2014/04/23/sf-mailtemplate/">[SalesForce]メールテンプレートの項目一覧 &ndash; KayaMemo</a></li>
<li><a href="http://appirio.co.jp/category/tech-blog/2012/07/force-com-apex%E3%81%AE%E3%80%8Cdescribe%E3%80%8D%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8%EF%BC%88%E3%81%9D%E3%81%AE%EF%BC%91%EF%BC%89/">Force.com Apexの「Describe」でできること（その１） &ndash; Appirio Japan</a></li>
<li><a href="http://appirio.co.jp/category/tech-blog/2012/09/force-com-apex%E3%81%AE%E3%80%8Cdescribe%E3%80%8D%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8%EF%BC%88%E3%81%9D%E3%81%AE%EF%BC%92%EF%BC%89/">Force.com Apexの「Describe」でできること（その２） &ndash; Appirio Japan</a></li>
<li><a href="http://vaindespair.blogspot.jp/2012/04/blog-post_04.html">memo: Force.com&#12288;&#65306;&#12288;Apex でオブジェクト及び項目の情報を取得する</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
