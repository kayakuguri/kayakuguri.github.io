<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: salesforce | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/salesforce/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2014-03-20T11:31:23+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Visual Forceでのブラウザバック対策]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/03/20/sf-browser-back/"/>
    <updated>2014-03-20T10:50:36+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/03/20/sf-browser-back</id>
    <content type="html"><![CDATA[<p>salseforceでフォームを作成している際、<br/>
完了画面を表示させた後にブラウザで戻るボタンを押すと、<br/>
フォームや確認画面に戻ってしまい、更に入力した内容が表示されてしまう。</p>

<p>このまま何も対策を取っていないと、二重送信されてしまうおそれがあるので、<br/>
対策を考えてみた。</p>

<!-- more -->


<p>基本的な考え方は以下の通り。</p>

<p><a href="http://piyopiyocs.blog115.fc2.com/blog-entry-6.html">セッションとhistory.back()とブラウザの戻るボタン。</a></p>

<p>まずは、上記と同じように、一度送信が完了した段階で、<br/>
それとわかるフラグを立てておきます。<br/>
再度入力画面を表示させようとすると、このフラグが立った状態だとエラー画面へ遷移するように設定しておきます。</p>

<p>しかし、salseforceでデフォルトの設定のまま(?)作業すると、<br/>
戻るボタンを押した際には、キャッシュされたページが表示されます。<br/>
(入力された値も含めて)</p>

<p>なので、キャッシュを無効にして、ページが無条件で表示されないようにします。<br/>
入力ページの冒頭に以下の設定を入れます。</p>

<pre><code>&lt;apex:page . . .  cache="false" &gt;
</code></pre>

<p>こうすると、完了画面に遷移後、この入力ページへ戻ってくると、<br/>
「フォーム内容を再送信して下さい。」のような画面が表示され、リロードせざる得なくなります。<br/>
そうすることで、フラグを判定してエラーページへ遷移させることが出来ました。</p>

<hr />

<p>この事を調査している時に知ったのですが、<br/>
(基本的な事のようですが、)<br/>
<code>setRedirect</code>を利用すると、値を引き継ぐか、URLを変更するか、が選べるようです。</p>

<blockquote><p>画面遷移する際にPageReferenceのsetRedirect(false)を使用することで変数の値を引き継ぐことができます。<br/>
&ndash; <a href="http://tyoshikawa1106.hatenablog.com/entry/2013/05/03/234647">SFDC：2つのVFページと同一コントローラ</a></p></blockquote>

<p>デフォルトではfalseに設定されているようです。<br/>
なので、確認画面への遷移などでは、URLは変わらず、同一コントローラー内の値も引き継がれます。<br/>
しかし、完了画面への遷移の際は値は必要なく、URLも変わって欲しいので、上記をtrueで遷移させた方が良さそうです。</p>

<pre><code>//apexクラスの関数内で
return Page.FormComplete.setRedirect(true);
</code></pre>

<p>しかしこれをしてしまうと、最初に書いた判定用のフラグの値も引き継がれないので、<br/>
逆に値がなければエラー、という流れで作ったほうがいいかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apexからPOSTでファイルを送信する 改訂版]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/27/submit-base64/"/>
    <updated>2014-02-27T13:41:16+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/27/submit-base64</id>
    <content type="html"><![CDATA[<p><a href="http://kayakuguri.github.io/blog/2014/02/26/submit-callout-with-multipart/">前回のファイル送信</a>の動作確認版。</p>

<!-- more -->


<p>まず、やりたいこととして、<br/>
saleseforceで作成したページからファイルをherokuで作成したapiに送信して、<br/>
herokuのapiからそのファイルを添付で送信したかった。</p>

<p>結論としては以下の手順で動作した。</p>

<ol>
<li>visualforceで<code>apex:inputFile</code>を使用してファイルをアプロード</li>
<li>apexでファイルを受け取り、そのファイルを<code>base64エンコード</code>。</li>
<li>base64エンコードした文字列をPOSTのパラメータとして送信</li>
<li>herokuにアップしているphpでPOSTデータを受け取る</li>
<li>受け取ったbase64データをデコードして保存(一時的)</li>
<li>保存されたファイルからQdmailを使用してメールを送信</li>
</ol>


<hr />

<p>1) visualforceで<code>apex:inputFile</code>を使用してファイルをアプロード<br/>
visualforceページでのinputの書き方</p>

<pre><code>&lt;apex:input value="{!Email}" /&gt;
&lt;apex:inputFile value="{!FileBody}" filename="{!FileName}"/&gt;
</code></pre>

<p>2) apexでファイルを受け取り、そのファイルを<code>base64エンコード</code>。<br/>
3) base64エンコードした文字列をPOSTのパラメータとして送信<br/>
apex側で受け取る</p>

<pre><code>public String FileName { get; set; }
public Blob FileBody { get; set; }
public String Email { get; set; }

public Pagereference submit() {
    HttpRequest request = new HttpRequest();
    request.setEndpoint('送信先のphp');
    request.setMethod('POST');
    request.setHeader('Accept-Language', 'ja');
    //パラメータ
    Map&lt;String, String&gt; params = new Map&lt;String, String&gt;();
    params.put('to', Email);  //送信先
    params.put('attachName', FileName); //ファイル名
    params.put('attach', EncodingUtil.base64Encode(FileBody)); //ファイル内容
    Set&lt;String&gt; keys = params.keySet();
    String r = '';
    for(String key : keys) {
        //body用にパラメータを整形 to=xx&amp;attach=xx のように
        String val = params.get(key);
        r += key + '=';
        if(val != null) r += val;
        r += '&amp;';
    }
    r = r.removeEnd('&amp;');
    request.setBody(r);

    //送信
    Http http = new Http();
    HttpResponse response = http.send(request);
    ResResult = response.getBody(); //結果を受け取る
}
</code></pre>

<p>4) herokuにアップしているphpでPOSTデータを受け取る<br/>
5) 受け取ったbase64データをデコードして保存(一時的)<br/>
6) 保存されたファイルからQdmailを使用してメールを送信</p>

<p><a href="http://kayakuguri.github.io/blog/2014/02/18/php-heroku-sendattachmail/">Qdmailでの送信方法は以前の投稿を参照。</a></p>

<pre><code>require_once('../lib/qdmail.php');
require_once('../lib/qdsmtp.php');

//送信内容
$to          = $_POST['to'];
$subject     = '件名';
$body        = '本文';
$fromname    = '送り先名';
$fromaddress = '送り先アドレス';
$attachname  = $_POST['attachName'];
$attach      = $_POST['attach'];

$mail = new Qdmail();
$mail -&gt; smtp(true);
$param = array(
    'host'=&gt; $_ENV['MAILGUN_SMTP_SERVER'],
    'port'=&gt; $_ENV['MAILGUN_SMTP_PORT'],
    'from'=&gt; $fromaddress,
    'protocol'=&gt;'SMTP_AUTH',
    'user'=&gt; $_ENV['MAILGUN_SMTP_LOGIN'],
    'pass' =&gt; $_ENV['MAILGUN_SMTP_PASSWORD']
);
$mail -&gt;smtpServer($param);
$mail -&gt;to($to);
$mail -&gt;subject($subject);
$mail -&gt;from($fromaddress,$fromname);
$mail -&gt;text($body);

//添付ファイル
$bin = base64_decode(str_replace(' ', '+', $_POST['attach'][0])); //注意
$fp = fopen( "./" . $_POST['attachName'][0], "w" );
fwrite( $fp, $bin );
fclose( $fp );
$attach = array();
$attach[] = array( "./" . $_POST['attachName'][0] , $_POST['attachName'][0] );

//送信
echo $mail -&gt;send(); //成功の場合は「1」が返ってくる
</code></pre>

<p>Base64デコードしてファイルに保存する方法は以下を参考にしました。<br/>
<a href="http://blog.nipx.jp/archives/4137">Flashからアップロードする方法いろいろ</a><br/>
ただし、そのままではエラーになることがあるよう。</p>

<blockquote><p>どうやら、POSTでデータを渡すと、Base64の「+」記号が勝手にスペースに変換されてしまうらしい。<br/>
<a href="http://pontago.hatenablog.com/entry/20091028/1256743421">http://pontago.hatenablog.com/entry/20091028/1256743421</a></p></blockquote>

<p>(ヘッダ分を差し引く、の部分は無視しても問題なかった)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ApexからコールアウトでPOST送信する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/26/submit-callout-with-multipart/"/>
    <updated>2014-02-26T17:25:51+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/26/submit-callout-with-multipart</id>
    <content type="html"><![CDATA[<p>apexクラスからコールアウトを使って外部APIにPOST送信してみた。<br/>
ファイルも一緒に送信する。</p>

<!-- more -->


<p><strong>※追記</strong><br/>
実際にこの内容で送信してみると、壊れたファイルが送信されてしまいます。<br/>
原因を調査中です。<br/>
<strong>※追記 2/27</strong><br/>
<a href="http://kayakuguri.github.io/blog/2014/02/27/submit-base64/">動作したバージョンをアップしました。</a></p>

<h2>基本的なPOST送信の方法</h2>

<p>コールアウトで外部にHTTP送信する場合、<br/>
ヘッダーやボディの中身を順番に設定していき、送信、となる。<br/>
(この基本的な内容がわかっていなくて苦労した)</p>

<p>POSTやGETで送信されるデータの基本的な内容は以下。<br/>
<a href="http://www.yoheim.net/blog.php?q=20120611">[Web] HTTPリクエストの中身を学んでみた。GETやPOSTの違いなど</a></p>

<p>送信内容例はこんな感じ。(上記サイト内から引用)</p>

<pre><code>POST /www.hoge.com/test.php HTTP/1.1
Host: localhost:8080
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.54 Safari/536.5
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
Accept-Language: ja,en-us;q=0.7,en;q=0.3
Accept-Encoding: gzip,deflate
Accept-Charset: Shift_JIS,utf-8;q=0.7,*;q=0.7
Keep-Alive: 300
Connection: keep-alive
Content-Type: text/plain
Content-Length: 23

key1=value1&amp;key2=value2
</code></pre>

<p>apexからの基本的なPOST送信の方法は以下。<br/>
<a href="http://ameblo.jp/hayapu/entry-11431469756.html">[Salesforce][Force.com]外部サイトにHTTPアクセス（Callout）する</a><br/>
(上記サイトから引用、編集)</p>

<pre><code>HttpRequest request = new HttpRequest();
request.setEndpoint('http://****アクセスしたいAPIのURLだよ！****');
request.setMethod('POSTとかGETとか！');
request.setHeader('Accept','text/plain, */*');
request.setHeader('Accept-Charset','Shift_JIS,utf-8;q=0.7,*;q=0.3');
request.setHeader('Accept-Encoding','gzip,deflate,sdch');
request.setHeader('Accept-Language','ja,en-US;q=0.8,en;q=0.6');
request.setHeader('Connection','keep-alive');
request.setHeader('Content-Type','text/xml; charset=UTF-8 ');
String prams = 'key1=value1&amp;key2=value2';
request.setBody(prams);

Http http = new Http();
HttpResponse response = http.send(request);
String responseBody = response..getBody();
</code></pre>

<p>最初に上げた送信内容のボディ部分に、getパラメータのようにつなげて書かれている。<br/>
なので、そのようにボディ部分に書いてやればいい。<br/>
<a href="http://www.kokyakukanri.info/salesforce/blog/2010/12/apexpost.html">[Apex]WebコールアウトでPOST送信する場合のパラメータの設定方法は？</a></p>

<p>注意点としては、コールアウトするURLは事前にドメインを指定しておく必要があるよう。<br/>
指定してないと、<code>Unauthorized endpoint, please check Setup-&gt;Security-&gt;Remote site settings.</code>とエラーが出る。</p>

<pre><code>設定 -&gt; セキュリティのコントロール -&gt; リモートサイトの設定
</code></pre>

<p>さらに、接続するURLはSSLでないとエラーが返されてしまう。<br/>
<code>The requested URL could not be retrieved</code></p>

<p>ちなみに、配列で送信する場合は以下。</p>

<pre><code>params = 'hoge[]=huga&amp;hoge[]=fuge';
request.setBody(params);
</code></pre>

<h2>POSTでファイルを送信する</h2>

<p>参考：<a href="http://salesforceafondo.wordpress.com/2013/01/08/post-multipartform-data-out-of-salesforce-com-with-apex/">Post ‘multipart/form-data’ out of Salesforce.com with APEX</a><br/>
スペイン語なので読めないけど、コード部分は読める。</p>

<p>そのまま送信すると、送信先のPHP側で、<code>$_FILES</code>にデータが入っていた。</p>

<p>この方法で、ファイルと一緒にパラメータも送信するには、<br/>
POST送信する際のボディ内容を再現すればいいよう。</p>

<p><a href="http://d.hatena.ne.jp/satox/20110726/1311665904">いまさら聞けないHTTPマルチパートフォームデータ送信</a><br/>
(上記内容から引用)</p>

<pre><code>POST test.php HTTP/1.1\r\n
Host: satoxpochi.com\r\n
Content-Type: multipart/form-data; boundary=---------------------------102852708831426\r\n
Content-Length: 「ボディ部のサイズ」\r\n
\r\n
-----------------------------102852708831426\r\n
Content-Disposition: form-data; name="password"\r\n
\r\n
ponpoko\r\n
-----------------------------102852708831426\r\n
Content-Disposition: form-data; name="level"\r\n
\r\n
high\r\n
-----------------------------102852708831426\r\n
Content-Disposition: form-data; name="filename"; filename="text.txt"\r\n
Content-Type: application/octet-stream\r\n
Content-Transfer-Encoding: binary\r\n
\r\n
abcd
-----------------------------102852708831426--\r\n
</code></pre>

<p>このように、送りたい情報分だけ区切り線でつないでいけばいい。<br/>
(１つのパラメータで区切り１つ分！)</p>

<p>また、visualforceのinputでfileを送信するには以下のようにする。</p>

<pre><code>[apexクラス]
public String FileName { get; set; }
public Blob FileBody { get; set; }

[visualforceページ]
&lt;apex:inputFile value="{!FileBody}" filename="{!FileName}"/&gt;
</code></pre>

<p>これで、<code>FileName</code>にファイル名、<code>FileBody</code>にファイルが入る。</p>

<p>これらを踏まえて、最終的な送信部分のソースは以下。<br/>
POSTでデータとファイルをコールアウトで送信する。</p>

<p>[Visualforceページ]</p>

<pre><code>メールアドレス1:&lt;apex:input value="{!Email1}" /&gt;&lt;br /&gt;
メールアドレス2:&lt;apex:input value="{!Email2}" /&gt;&lt;br /&gt;
&lt;br /&gt;
添付ファイル : &lt;apex:inputFile value="{!FileBody}" filename="{!FileName}"/&gt;
</code></pre>

<p>[apexクラス]</p>

<pre><code>HttpRequest request = new HttpRequest();
request.setEndpoint('https://送信先アドレス.php');
request.setMethod('POST');
request.setHeader('Accept-Language', 'ja');

String boundary = String.valueOf(DateTime.now().getTime());
String body = '';
body+='------------' + boundary + '\r\n';
body+='Content-Disposition: form-data; name="to[]"\r\n';
body+='\r\n';
body+=Email1 + '\r\n';
body+='------------' + boundary + '\r\n';
body+='Content-Disposition: form-data; name="to[]"\r\n';
body+='\r\n';
body+=Email2 + '\r\n';
body+='------------' + boundary + '\r\n';
body+='Content-Disposition: form-data; name="data"; filename="' + FileName + '"\r\n';
body+='Content-Transfer-Encoding: base64\r\n';
String contentType = 'application/octet-stream';
body+='Content-Type: ' + contentType + '\r\n\r\n';
body+=EncodingUtil.base64Encode(FileBody);
body+='\r\n------------' + boundary + '--';
request.setHeader('Content-Type', 'multipart/form-data; boundary=----------' + boundary);
request.setHeader('Content-Length',String.valueof(body.length()));
request.setBody(body);

Http http = new Http();
HttpResponse response = http.send(request);
ResResult = response.getBody();
</code></pre>

<p>送信先のPHPでの受信内容は以下。</p>

<pre><code>($_POST)
array(1) { 
    ["to"]=&gt; array(2) { 
        [0]=&gt; string(14) "mail1@hoge.com" 
        [1]=&gt; string(14) "mail2@huga.com"
    }
}

($_FILES)
array(1) { 
    ["data"]=&gt; array(5) { 
        ["name"]=&gt; string(8) "test.txt" 
        ["type"]=&gt; string(24) "application/octet-stream" 
        ["tmp_name"]=&gt; string(14) "/tmp/phpcEwVr6" 
        ["error"]=&gt; int(0) 
        ["size"]=&gt; int(309276) 
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Forceでの送信ボタン2度押し防止策]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/12/vf-doubleclick-check/"/>
    <updated>2014-02-12T19:47:53+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/12/vf-doubleclick-check</id>
    <content type="html"><![CDATA[<p>salesforceでvisualforceの<code>commandButton</code>で、ボタンを連打すると、<br/>
送信が完了してページが遷移するまでに何度でもデータが送信されてしまう。</p>

<p>単純に、apexクラス内で２度目はinsertしない、とかにしてればいいのだけど、<br/>
それをvisualforceで完結させることが出来たので、メモ。</p>

<!-- more -->


<p><code>apex:commandButton</code>内で、<code>onclick</code>を使って、JSを呼んで、<br/>
１度目だと<code>true</code>、2度目だと<code>false</code>を返すようにする。<br/>
<code>true</code>が返って来た時だけ、<code>action</code>内の関数が実行される。</p>

<pre><code>//JS
&lt;script type="text/javascript"&gt;
var isSave = false;
function check(){
    if (!isSave) {
        isSave = true;
        return true;
    }
    return false;
}
&lt;/script&gt;

//HTML
&lt;apex:commandButton action="{!save}" onclick="return check();" image="{!URLFOR($Resource.remind, 'images/btn_send.gif')}" alt="OK" /&gt;
</code></pre>

<p>これで、連打しても大丈夫。</p>

<p>参考：<a href="http://blog.livedoor.jp/volvic_beer/archives/52301425.html">http://blog.livedoor.jp/volvic_beer/archives/52301425.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualforceページでカスタムコントローラーを指定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/02/06/apex-page/"/>
    <updated>2014-02-06T13:00:31+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/02/06/apex-page</id>
    <content type="html"><![CDATA[<p>タイトルの通りだけのメモ。</p>

<!-- more -->


<p>visualforceのページ内の冒頭、<code>&lt;apex:page&gt;</code>内で、<br/>
<code>extensions="RemindController"</code>という風に指定する。</p>

<pre><code>&lt;apex:page standardController="Lead" extensions="CustomController" &gt;
</code></pre>

<p>この指定をしておくことで、<code>action</code>内で参照する関数は、指定したクラス内から呼び出されるようになる。</p>

<p>また、VisualForce内の冒頭、<code>apex:page</code>タグ内で、<code>action</code>を指定して、そこで関数を実行するようにする。<br/>
すると、ページアクセス時にまず呼び出されるようになる。</p>

<p>[VisualForce]</p>

<pre><code>&lt;apex:page standardController="Lead" action="{!checkKey}" &gt;
</code></pre>

<p>[apexクラス]</p>

<pre><code>public Pagereference checkKey(){
    if(/*処理*/){
        reutrn Page.xx;
    }else{
        return null;
    }
}
</code></pre>

<p>参考：<a href="http://www.kokyakukanri.info/salesforce/blog/2010/11/urlkey.html">ページを開いた段階でURLに含まれるKeyなどが不足している場合に、 別ページに遷移させる方法。</a></p>

<p>注意点としては、エラーページに遷移しなくていい場合には、<br/>
自身のページを指定してしまうと、無限ループに入って、内部サーバーエラー、となってしまう。<br/>
なので、遷移しなくていい場合は、<code>null</code>を返しておくと大丈夫なよう。</p>
]]></content>
  </entry>
  
</feed>
