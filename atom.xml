<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-04-09T13:12:05+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[heroku]ssl設定時のエラーについてのメモ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/09/ssl-error/"/>
    <updated>2015-04-09T13:03:29+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/09/ssl-error</id>
    <content type="html"><![CDATA[<p>簡単な事だったのですが、情報が見つけられなかったのでメモ。</p>

<!-- more -->


<p>herokuにsslを適用させる場合、証明書と秘密鍵をアドオンにアップロードします。<br/>
具体的には以下のコマンド。</p>

<pre><code>$ heroku certs:add 証明書 秘密鍵
</code></pre>

<p>その際に、以下のエラーが返って来た。</p>

<blockquote><p>Unable to parse certificate. Please ensure the certificate is in PEM format.</p></blockquote>

<p>内容は特に間違っているとは思えず、何度見返しても正しい。</p>

<p>結局原因は、有効期間前、というなんとも単純な事だった。<br/>
取得した時点ではまだ開始前の状態で、期限前。<br/>
あまり期限を先にして取得することってないのか、ググっても特に出てこず。<br/>
期限外だったらそう怒ってくれればいいのに、上記のエラー内容ではその事が特にわからなかったのもハマりポイントでした。</p>

<p>ちなみに有効期間の確認は以下。</p>

<pre><code>$ openssl x509 -in 証明書 -noout -dates
</code></pre>

<p>以下のような形で返ってくる。</p>

<pre><code>notBefore=Apr  8 15:00:00 2015 GMT
notAfter=Apr  8 14:59:59 2016 GMT
</code></pre>

<p>期間内だと問題なくアップ出来ました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]テスト実行時に組織化の全てのデータにアクセスする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/07/sf-seealldata-test/"/>
    <updated>2015-04-07T14:40:33+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/07/sf-seealldata-test</id>
    <content type="html"><![CDATA[<p>salesforceでテストコードを実行させる場合、通常であればデータはテスト用にコード内で作成する必要があります。<br/>
しかし、組織内のデータを直接使用してテストした場合もあります。あります。<br/>
そんな時のメモ。</p>

<!-- more -->


<p>テストアノテーションメソッドを以下のようにすればよいだけ。</p>

<pre><code>@isTest(SeeAllData=true)
</code></pre>

<p>これで組織化にある全データを使用してテストの実行が行えます。<br/>
ですが、もちろんsandboxと本番環境に差異がある場合はsandboxで通ったテストが本番では通らない、カバー率が低い、ということがありえますので注意です。</p>

<p>これを使用するシュチエーションとしては、活動履歴(<code>ActivityHistory</code>)を使用する場合があります。<br/>
活動履歴は直接SOQLでは作成できず、テストコード内で作成したデータには紐付いて作成されません。<br/>
要するに、テスト実行する手段がない、よう。<br/>
その際に上記メソッドを使う事で組織内に作成されたデータを使用してのテストが必要になってきます。</p>

<p>もともとsalesforceは<code>Spring '12</code>リリースまでは(<code>API 24.0</code>より古いもの)では全データにアクセスが出来たよう。<br/>
それだと組織内のデータに依存してしまって上手くテスト実行が出来ない、という状態だったため、デフォルトでは組織内のデータにはアクセス出来ないように変更されたようです。<br/>
で、アクセスしたい場合は上記のコードを書けばよい、と。<br/>
上手く使えばテストが非常に落になりそうです(違う)。</p>

<p>上記メソッドを使用しなくても以下のデータは組織内のデータを使用してテスト実行が可能なようです。</p>

<ul>
<li>User</li>
<li>Profile</li>
<li>Organization</li>
<li>RecordType</li>
<li>ApexClass</li>
<li>ApexTrigger</li>
<li>ApexComponent</li>
<li>ApexPage</li>
</ul>


<h3>参考</h3>

<p><a href="http://dackdive.hateblo.jp/entry/2014/07/05/100926">[Salesforce]活動履歴(ActivityHistory)がテストで取得できない？ &ndash; dackdive&#39;s blog</a><br/>
<a href="http://blog.flect.co.jp/salesforce/2012/05/post-9aec.html">セールスフォースの豆知識: テストメソッドがアクセスできるデータが変わりました</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakaPHP]ラジオボタンの必須チェック]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/06/cakephp-radio-validation/"/>
    <updated>2015-04-06T12:58:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/06/cakephp-radio-validation</id>
    <content type="html"><![CDATA[<p>またもやバリデーションネタ。<br/>
ラジオボタンにたいして未選択のチェックを入れる方法。</p>

<!-- more -->


<p>モデルのバリデーションルールに、<code>'required' =&gt; true</code>とかを入れればよいだけかとおもいきや、なかなか一筋縄ではいかなった。</p>

<h3>&lsquo;required&rsquo; => true</h3>

<p><code>'required' =&gt; true</code>を設定しただけではバリデーションルールが適用されないよう。<br/>
ルールを同時に設定する必要があるとか。<br/>
このオプションの意味は、指定のキーデータがない場合にチェックされるよう。(たぶん)</p>

<p>ルールには空だとエラー、ということで、<code>notEmpty</code>を追加。<br/>
これで必須のチェックのみは完了。</p>

<h3>required属性</h3>

<p>モデルでバリデーションを指定すると、自動的にinputタグの属性に、<code>required</code>が追加されてしまう。<br/>
このまま送信しようとすると、Chrome限定だと思うが、エラーが出た送信出来ない。</p>

<blockquote><p>An invalid form control with name=&lsquo;xxx&rsquo; is not focusable.</p></blockquote>

<p>Chromeでは<code>required</code>属性が入ったinputでデータがなかった場合は、吹き出しのようなものを出すような仕様になっているが、<br/>
radioボタンの場合はその吹き出しを出す場所がなくてエラーになってしまうみたい。</p>

<h4>回避方法</h4>

<p>回避方法はいくつかあるよう。</p>

<p>１）<br/>
なのでradioボタンの場合はこの属性を入れてはいけない。<br/>
cakeの場合、オプションに<code>'required' =&gt; false</code>を指定してやることで出さないように出来た。</p>

<p>２）<br/>
<code>form</code>タグの生成時に<code>novalidate</code>をtrueでセットしてやればその中のinputタグには、<code>required</code>属性がつかなくなるよう。<br/>
全部にセット出来るという意味ではこれが一番お手軽かも。</p>

<h3>ソース</h3>

<p>最終的なソースの抜粋は以下。</p>

<h4>モデル</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'radio_data' =&gt; array(
</span><span class='line'>    array(
</span><span class='line'>        'rule' =&gt; 'notEmpty',
</span><span class='line'>        'message' =&gt; '選択して下さい'
</span><span class='line'>    ),
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<h4>ビュー</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php echo $this-&gt;Form-&gt;input('radio_data', array(
</span><span class='line'>  'type' =&gt; 'radio',
</span><span class='line'>  'options' =&gt; array('OK', 'NG'),
</span><span class='line'>  'required' =&gt; false
</span><span class='line'>));?&gt;</span></code></pre></td></tr></table></div></figure>


<p>もしくは、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php echo $this-&gt;Form-&gt;create('Model', array('novalidate' =&gt; true));  ?&gt;
</span><span class='line'>~~~中略~~~
</span><span class='line'>&lt;?php echo $this-&gt;Form-&gt;input('radio_data', array(
</span><span class='line'>  'type' =&gt; 'radio',
</span><span class='line'>  'options' =&gt; array('OK', 'NG'),
</span><span class='line'>));?&gt;</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<p><a href="http://stackoverflow.com/questions/7168645/invalid-form-control-only-in-google-chrome">html &ndash; &quot;Invalid form control&quot; only in Google Chrome &ndash; Stack Overflow</a><br/>
<a href="http://d.hatena.ne.jp/cakephper/20130211/1360589926">CakePHP2.3からinputタグにhtml5のrequired属性がつくようになった &ndash; cakephperの日記(CakePHP, Laravel, PHP)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePHP]URLからパラメータを受け取る]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/03/cakephp-routing-params/"/>
    <updated>2015-04-03T14:37:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/03/cakephp-routing-params</id>
    <content type="html"><![CDATA[<p>cake記法？で書かれたURLからパラメータを取得するメモ。</p>

<!-- more -->


<h2>コントローラーのみで制御</h2>

<p>cakephpでのURLの基本は以下。</p>

<blockquote><p>コントローラー名/アクション名</p></blockquote>

<p>これにパラメータをつけたければ、その後ろに並べるのみ。</p>

<blockquote><p>コントローラー名/アクション名/パラメータ1/パラメータ2</p></blockquote>

<p>このパラメータを取得する方法は以下。</p>

<pre><code>//URL - ctrl/act/param1/param2

$this-&gt;params['pass'][0]; //param1
$this-&gt;params['pass'][1]; //param2
</code></pre>

<p>で、指定の名前を付けたい場合は、以下のように。</p>

<blockquote><p>コントローラー名/アクション/パラメータ名1:パラメータ/パラメータ名2:パラメータ</p></blockquote>

<pre><code>//URL - ctrl/act/param1:hoge/param2:fuga

$this-&gt;params['named']['param1'];
$this-&gt;params['named']['param2'];
</code></pre>

<p>で、View側でこのリンクを作る方法は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php echo $this-&gt;Html-&gt;link('リンクテキスト', array(
</span><span class='line'>  'controller' =&gt; 'ctrl',
</span><span class='line'>  'action' =&gt; 'act',
</span><span class='line'>  'param1' =&gt; 'hoge'
</span><span class='line'>)) ?&gt;</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>これで上記の、<code>/ctrl/act/param1:hoge</code>が生成される</p>

<h2>ルーティング</h2>

<p>このままだとURLが冗長になるので、ルーティングを設定して、スッキリさせる。<br/>
さらに予めパラメータ名を指定してやる。</p>

<h4>ルーティング</h4>

<pre><code>Router::connect('/ctrl/act/:param1', array('controller' =&gt; 'ctrl', 'action' =&gt; 'act'));
</code></pre>

<p>こうすると、上記で記述したリンクを貼ると、以下のURLが生成される。</p>

<pre><code>/ctrl/act/hoge
</code></pre>

<p>これを取得するには以下。</p>

<pre><code>$this-&gt;params['param1']
</code></pre>

<p>これの方が見た目も取得方法もすっきりしててよさげ。</p>

<h2>参考</h2>

<p><a href="http://creazy.net/2009/05/cakephp_routing.html">http://creazy.net/2009/05/cakephp_routing.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePHP]Transitionコンポーネントでバリデーションを効かせるモデルを指定]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/01/cakephp-transition-validate/"/>
    <updated>2015-04-01T19:22:30+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/01/cakephp-transition-validate</id>
    <content type="html"><![CDATA[<p>またバリデーションネタ。<br/>
cakephpでフォーム作成の際に、Transitionコンポーネントを使用するとすこぶる便利。<br/>
以下が使い方としてはわかりやすかった。<br/>
<a href="http://endoyuta.com/2013/05/18/cakephp-transition%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%881-0/">cakePHP Transitionコンポーネント &ndash; Logicky Blog</a></p>

<!-- more -->


<p>で、その中で、入力画面から確認画面に遷移する際に指定したバリデーションルールを適用させたかった。<br/>
たいていのサイトでは、<code>$this-&gt;Transition-&gt;checkData('xxx')</code>を使えばよい、と書いてあったのだが、それだと効かなかった。<br/>
原因を探していると、どうやら使用しているコントローラーで複数のモデルを使用していると効かないよう。<br/>
そんなときは<code>checkData</code>の第２引数でモデルを明示的に指定してやると効くようになった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class FormController extends AppController
</span><span class='line'>{
</span><span class='line'>  public $uses = array('User', 'Hoge', 'Fuga');
</span><span class='line'>  
</span><span class='line'>  public function input(){
</span><span class='line'>      $this-&gt;Transition-&gt;checkData('confirm','Hoge');
</span><span class='line'>      ...
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上記のように書くと、<code>Hoge</code>モデルで記述したバリデーションが適用される。<br/>
ここを配列にして複数のモデルを指定してやることも可能だそう。</p>

<p><a href="http://d.hatena.ne.jp/kunit/20101005#1286265311">[PHP][CakePHP] Transitionコンポーネント &ndash; checkData() について</a></p>

<p>それにしてもこのコンポーネントはびっくりするくらい便利。ほんとに。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePHP]手動でフォームのバリデーションチェックにかける]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/31/cake-php-validates/"/>
    <updated>2015-03-31T21:06:40+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/31/cake-php-validates</id>
    <content type="html"><![CDATA[<p>最近cakephpを触るようになりました。ようやく。<br/>
で、コントローラーから明示的にバリデーションにかける方法を調べたのでメモ。</p>

<!-- more -->


<p>まず準備として、<code>Model</code>にルールを記述します。<br/>
今回は<code>User</code>というモデル内に記述したとします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var $validate = array(
</span><span class='line'>  'password' =&gt; array(
</span><span class='line'>        'rule' =&gt; array('minLength', 8),
</span><span class='line'>        'message' =&gt; 'パスワードは8文字以上で入力してください'
</span><span class='line'>    )
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<p>で、次に<code>View</code>で入力欄を作成します。<br/>
作成の際に、先程作ったルールの<code>password</code>を<code>type</code>として指定してやります。</p>

<pre><code>&lt;?php echo $this-&gt;Form-&gt;input('User.password', array('type' =&gt; 'password', 'value' =&gt; '','label' =&gt; false)); ?&gt;
</code></pre>

<p>HTMLは以下のように表示されます。</p>

<pre><code>&lt;input name="data[User][password]" value="" type="password" id="UserPassword" required="required"&gt;
</code></pre>

<p>最後に<code>Controller</code>からバリデーションにデータを送信します。<br/>
記述する箇所は、フォームを送信した後に実行されるアクション内です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$this-&gt;User-&gt;set($this-&gt;request-&gt;data); //モデルにデータをセット
</span><span class='line'>if(!$this-&gt;User-&gt;validates()){
</span><span class='line'>  //エラー時の挙動
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これで8文字以下で送信するとエラーが表示されます。</p>

<h3>参考</h3>

<p><a href="http://book.cakephp.org/2.0/ja/models/data-validation/validating-data-from-the-controller.html">http://book.cakephp.org/2.0/ja/models/data-validation/validating-data-from-the-controller.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]Apex REST作成時のtips]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/27/apex-rest-tips/"/>
    <updated>2015-03-27T19:45:44+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/27/apex-rest-tips</id>
    <content type="html"><![CDATA[<p>最近よくApexRESTを作成していて、<br/>
その中でちょっとしたtipsというかメモをメモっておきます。</p>

<!-- more -->


<h2>エンドポイント</h2>

<p>エンドポイントの指定には以下のように書きます。</p>

<pre><code>@RestResource(urlMapping='/User/Login')
</code></pre>

<p>この時に、<code>*</code>を使う事も出来ます。</p>

<pre><code>@RestResource(urlMapping='/User/*')
</code></pre>

<p>なので、ここにユーザーIDを入れたりして、そのIDを取得することで、<br/>
よりREST APIらしい(?)挙動でAPIを作成する事が出来ます。<br/>
apex側で送信されたIDを取得するには、以下のように<code>/</code>で区切って取得します。</p>

<pre><code>String accountId = req.requestURI.substring(req.requestURI.lastIndexOf('/')+1);
</code></pre>

<p>公式のドキュメントに正にこのままの内容が載っていました。</p>

<p><a href="https://www.salesforce.com/us/developer/docs/apexcode/Content/apex_rest_code_sample_basic.htm">Apex REST Basic Code Sample</a></p>

<h2>JSON</h2>

<p>返却するJSONの形式ですが、クラスの入れ子や、<code>List</code>を活用することで<br/>
かなり自由度高く作成出来ます。</p>

<p>例えば、以下のようなJSONを返すとします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"success":1,
</span><span class='line'>"User" : {
</span><span class='line'>  "user_id": xxx,
</span><span class='line'>  "hobby":[
</span><span class='line'>      {"name":"映画", "level":"3"},
</span><span class='line'>      {"name":"サッカー", "level":"1"}
</span><span class='line'>  ]
</span><span class='line'>},
</span><span class='line'>"request_time": "2015-3-27 12:33"</span></code></pre></td></tr></table></div></figure>


<p>この場合、以下のようにクラスを複数作り、入れ子構造を作る事で作成出来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>global class UserData{
</span><span class='line'>  global String user_id;
</span><span class='line'>  global HobbyData hobby
</span><span class='line'>}
</span><span class='line'>global class HobbyData{
</span><span class='line'>  global String name;
</span><span class='line'>  global String level;
</span><span class='line'>}
</span><span class='line'>global class resultData{
</span><span class='line'>  global Integer success;
</span><span class='line'>  global UserData User;
</span><span class='line'>  global String request_time;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>作成するときは以下のような感じで。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;HobbyData&gt; hobbies = new List&lt;HobbyData&gt;();
</span><span class='line'>HobbyData hobby1 = new HobbyData();
</span><span class='line'>hobby1.name = '映画';
</span><span class='line'>hobby1.level = '3';
</span><span class='line'>hobbies.add(hobby1);
</span><span class='line'>HobbyData hobby2 = new HobbyData();
</span><span class='line'>hobby2.name = 'サッカー';
</span><span class='line'>hobby2.level = '1';
</span><span class='line'>hobbies.add(hobby2);
</span><span class='line'>
</span><span class='line'>UserData user = new UserData();
</span><span class='line'>user.user_id = 'xxx';
</span><span class='line'>user.hobby = hobbies;
</span><span class='line'>
</span><span class='line'>resultData result = new resultData();
</span><span class='line'>result.success = 1;
</span><span class='line'>result.User = user;
</span><span class='line'>result.request_time = '2015-3-27 12:33';
</span><span class='line'>
</span><span class='line'>return result;</span></code></pre></td></tr></table></div></figure>


<p>地道な作業にはなりますが、これでわりかし綺麗なJSONが返せました。<br/>
もっと簡単な方法があったらまた書きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[command+Qという危険なショートカットを変更する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/26/cmd-q/"/>
    <updated>2015-03-26T14:22:21+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/26/cmd-q</id>
    <content type="html"><![CDATA[<p>Chromeを使用している時に、タブを閉じようとショートカットである、<code>cmd + w</code>を押したつもりが、<br/>
手が滑って横の<code>Q</code>を押してしまいブラウザが落ちる…。</p>

<!-- more -->


<p>そんな事が結構あって、その度に机に突っ伏していたので、<br/>
ショートカットを変更出来ないものかと思い、調べて実行してみました。</p>

<p>まずは現状の確認。<br/>
以下の通り、アプリを閉じるショートカットは、<code>cmd+q</code>です。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/comd_q_01.jpg" alt="cmd+q" /></p>

<p>これを変更するには、<code>システム環境設定</code>から、<code>キーボード</code>を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/comd_q_02.jpg" alt="キーボード" /></p>

<p><code>ショートカット</code>のタブを選択し、<code>アプリケーション</code>のメニューを選択。<br/>
その下に出る、<code>+</code>をクリックして、ショートカットを追加。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/comd_q_03.jpg" alt="アプリケーション" /></p>

<p>ここで出てくる入力エリアにショートカットの名前を入力するが、<br/>
現状設定されているメニュー名を正確に入力する必要がある。<br/>
Chromeを終了の場合は、以下。</p>

<pre><code>Google Chrome を終了
</code></pre>

<p><img src="http://kayakuguri.github.io/images/2015/03/comd_q_04.jpg" alt="メニュー名" /></p>

<p><code>アプリケーション</code>は、<code>Google Chrome</code>を選択し、<br/>
入力欄には、上記のメニュー名を入力。<br/>
ショートカットには、今回は、<code>option+command+Q</code>を設定。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/comd_q_05.jpg" alt="設定" /></p>

<p><code>追加</code>をクリックして追加すると、設定完了。<br/>
chrome側を見てもきっちり設定されている。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/comd_q_06.jpg" alt="ショートカット" /></p>

<p>これで押し間違いの悲劇がなくなりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]PG Backupsのアドオンが廃止されherokuコマンドに組み込まれる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/17/new-pg-backups/"/>
    <updated>2015-03-17T16:34:50+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/17/new-pg-backups</id>
    <content type="html"><![CDATA[<p>タイトルの通り。<br/>
今までアドオンとして提供されていたPG Backupsがアドオンとしての提供が廃止され、<br/>
標準のherokuコマンドに組み込まれた、とのこと。</p>

<!-- more -->


<p><a href="https://blog.heroku.com/archives/2015/3/11/pgbackups-levels-up">Heroku | PG Backups Levels Up</a></p>

<h2>スケジューリング</h2>

<p>今まではアドオンの種類で選んでいた定期バックアップですが、時間を指定しての定期バックアップが可能になったとのこと。<br/>
タイムゾーンも指定できる。</p>

<pre><code>heroku pg:backups schedule HEROKU_POSTGRESQL_GOLD --at="02:00 PDT" --app sushi
</code></pre>

<p>ちなみにデフォルトで１日に１回のバックアップが行われており、それをあえて止めるには、<code>heroku pg:backups unschedule DATABASE_URL --app sushi</code>とするとのこと。</p>

<h2>コマンド</h2>

<p>旧アドオン時に使用していたコマンドは使えなくなっており、新しく<code>pg:backups</code>が基本になったよう。  <br/>
以下、抜粋。</p>

<h3>バックアップの作成</h3>

<pre><code>//旧
$ heroku pgbackups:capture --app sushi

//新
$ heroku pg:backups capture --app sushi
</code></pre>

<h3>バックアップのダウンロード</h3>

<pre><code>//旧
$ heroku pgbackups:url

//新
$ heroku pg:backups public-url
</code></pre>

<p>その他は以下の対応ページにて。<br/>
<a href="https://devcenter.heroku.com/articles/mapping-pgbackups-commands">Converting PGBackups Add-on Commands | Heroku Dev Center</a></p>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/heroku-postgres-backups">Heroku PGBackups | Heroku Dev Center</a><br/>
<a href="https://devcenter.heroku.com/articles/heroku-postgresql">Heroku Postgres | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Route53を使用してGithubページにサブドメインを設定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/10/set-subdomain/"/>
    <updated>2015-03-10T23:51:46+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/10/set-subdomain</id>
    <content type="html"><![CDATA[<p>長らくgithub.ioのデフォルトドメインで運用してきましたが、<br/>
この度ふと思い立ってサブドメインを割り当ててみました。</p>

<!-- more -->


<p>もともとherokuで作成したブログに独自ドメインを割り当てており、<br/>
そのDNS設定にRoute53を使用していたので、今回もそれを使用してみる。<br/>
(というか、外部サービスを使用している事になるので、それしかできない)</p>

<p>簡単に全体の流れを説明すると、<br/>
Route53でCNAMEの設定をして、Githubページでリダイレクトする設定をかける、だけ。</p>

<h2>Route53の設定</h2>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain01.jpg" alt="route53" /></p>

<p>すでに設定している<code>Resouces</code>があるので、そちらをクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain02.jpg" alt="Resouces" /></p>

<p>設定しているドメインをクリック</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain03.jpg" alt="Domain Name" /></p>

<p>新しくCNAMEレコードを作成するので<code>Create Record Set</code>をクリック</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain04.jpg" alt="Create Record" /></p>

<p>右側に設定画面が表示されるので、設定するサブドメイン、TypeはCNAME、valueにgithub.ioのデフォルトドメインを入れる。<br/>
設定できたら、<code>Create</code>をクリックして作成。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain05.jpg" alt="Create" /></p>

<p>これでRoute53の設定は完了</p>

<h2>Github pagesの設定</h2>

<p><strong>このブラウザから作成する方法は間違いでした。下部に正しい方法を記述しています</strong></p>

<p>githubページにアクセスされた際にリダイレクトさせる設定は簡単で、<br/>
masterリポジトリ直下に<code>CNAME</code>というファイルを設置するだけ。<br/>
もちろんgitで追加してもいいけれど、ブラウザからGUIで追加してみる。</p>

<p>設定したいGithubページのリポジトリに行き、masterブランチを選択し、+マークをクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain06.jpg" alt="Create file" /></p>

<p>名前は<strong>大文字</strong>で<code>CNAME</code>。<br/>
内容は、設定したいサブドメイン。<code>http://</code>は必要なし。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain07.jpg" alt="CNAME" /></p>

<p>正しく設定されたかどうかを確認するには、リポジトリの<code>setting</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain08.jpg" alt="setting" /></p>

<p><code>GitHub Pages</code>の欄で設定したドメインが表示されていればOK。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/subdomain09.jpg" alt="github pages" /></p>

<p>DNSが浸透するまでに少し時間がかかるので気長に待ちましょう。。<br/>
(反映されるまでページにアクセス出来なくなってしまいますが…)</p>

<h2>正しいCNAMEファイルの作り方</h2>

<p>すみません、上記、ブラウザから<code>CNAME</code>ファイルを作成する方法は間違いでした。<br/>
というのも、<code>rake gen_deploy</code>した際に<code>source</code>リポジトリからdeployしたデータを<code>master</code>ブランチにpushしているようで、<br/>
その際にブランチ側でファイルを作成してしまうと差異が出来てpushが出来なくなってしまいました。</p>

<p>なので、以下の方法で強制的にpushを試みると、当然、ブラウザ上で作成したCNAMEが消えてしまいました。<br/>
<a href="http://qiita.com/takuma7/items/2d6f6e786eb6c0afbefb">Octopressでrake deployした際にrejectedされた場合の対処 &ndash; Qiita</a></p>

<p>なのでローカルで作成してやる必要がありますが、その場所が、<code>source/</code>以下となるようです。<br/>
<code>source/CNAME</code>でファイルを作成し、同じようにサブドメインのみを記述します。</p>

<p>その状態で<code>gen_deploy</code>してやりブラウザ上で確認すると見事、masterブランチ上の直下にCNAMEファイルが作成されました。<br/>
これでOKなはず</p>

<h2>参考</h2>

<p>公式のチュートリアルが英語だけど一番わかりやすいかも。<br/>
<a href="https://help.github.com/articles/adding-a-cname-file-to-your-repository/">Adding a CNAME file to your repository</a></p>

<p>その他<br/>
<a href="http://blog.hello-world.jp.net/git-2/2612/">GitHub Pagesで独自ドメインを使う | hello-world.jp.net</a><br/>
<a href="http://tech.tanaka733.net/entry/2013/09/15/%E3%81%8A%E5%90%8D%E5%89%8D.com_%E3%81%A7%E5%8F%96%E3%81%A3%E3%81%9F%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%82%92_Amazon_Route53%E3%81%A7%E7%AE%A1%E7%90%86%E3%81%97%E3%80%81%E3%82%B5%E3%83%96%E3%83%89">お名前.com で取ったドメインを Amazon Route53で管理し、サブドメインをはてなブログに割り当てるまで &ndash; 銀の光と碧い空</a><br/>
<a href="http://blog.shiroyama.us/blog/2014/02/26/octopress/">エンジニアのブログは Octopress が最適 &ndash; $shiroyama->($blog);</a></p>

<p><a href="http://aws.amazon.com/jp/route53/">Amazon Route53</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ビュー画面に出るチャターフォローボタンを非表示にする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/10/chatter-follow/"/>
    <updated>2015-03-10T16:13:23+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/10/chatter-follow</id>
    <content type="html"><![CDATA[<p>キャンペーンやリードなどのビュー画面を表示した時にアクションの列に表示される、<br/>
緑の＋ボタンは、このリード(やキャンペーンなど)をチャターでフォローする、というボタンなのですが、<br/>
特に使用しないので非表示にする方法を調べました。</p>

<!-- more -->


<p>このボタンを非表示にしたい。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/chatter1.jpg" alt="チャターフォローボタン" /></p>

<p>これは、フィード追跡、という機能で制御できます。<br/>
<code>カスタマイズ</code> &ndash;> <code>Chatter</code> &ndash;> <code>フィード追跡</code> を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/chatter2.jpg" alt="フィード追跡" /></p>

<p>追跡をやめたいオブジェクトを選択します。<br/>
上部にある、「フィード追跡の有効化」のチェックを外します。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/chatter3.jpg" alt="" /></p>

<p>保存します。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/chatter4.jpg" alt="" /></p>

<p>これでビュー画面からボタンが非表示になりました。</p>

<p><img src="http://kayakuguri.github.io/images/2015/03/chatter5.jpg" alt="" /></p>

<p>このフィード追跡機能はフォローしたレコードにどういう変更があった時に通知するか、を設定できるので、<br/>
上手く使えば便利になるのかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]herokuのPostgreSQLでバージョンを指定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/04/heroku-postgres-version/"/>
    <updated>2015-03-04T17:38:54+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/04/heroku-postgres-version</id>
    <content type="html"><![CDATA[<p>herokuのpostgreSQLを入れる際にバージョンの指定が出来たのでメモ。</p>

<!-- more -->


<p><a href="https://devcenter.heroku.com/articles/heroku-postgresql#version-support-and-legacy-infrastructure">Version Support and Legacy Infrastructure &ndash; Heroku Postgres</a></p>

<p>選べるバージョン配下。</p>

<ul>
<li>9.4(beta)</li>
<li>9.3(デフォルト)</li>
<li>9.2</li>
<li>9.1</li>
</ul>


<p>指定して入れるためにはブラウザ上ではなく、コマンドラインからバージョンを指定して入れてやる必要がある。</p>

<p>まずはそのままデフォルトで入れてみる。<br/>
アプリを作るところから</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku create
</span><span class='line'>Creating fierce-woodland-3392... done, stack is cedar-14
</span><span class='line'>
</span><span class='line'>$ heroku addons:add heroku-postgresql --app fierce-woodland-3392
</span><span class='line'>Adding heroku-postgresql on fierce-woodland-3392... done, v4 (free)
</span><span class='line'>Attached as HEROKU_POSTGRESQL_CRIMSON_URL
</span><span class='line'>Database has been created and is available
</span><span class='line'> ! This database is empty. If upgrading, you can transfer
</span><span class='line'> ! data from another database with pgbackups:restore.
</span><span class='line'>Use `heroku addons:docs heroku-postgresql` to view documentation.
</span><span class='line'>
</span><span class='line'>$ heroku pg:info --app fierce-woodland-3392
</span><span class='line'>=== HEROKU_POSTGRESQL_CRIMSON_URL (DATABASE_URL)
</span><span class='line'>Plan:        Hobby-dev
</span><span class='line'>Status:      Available
</span><span class='line'>Connections: 0/20
</span><span class='line'>PG Version:  9.3.6
</span><span class='line'>Created:     2015-03-04 08:43 UTC
</span><span class='line'>Data Size:   6.4 MB
</span><span class='line'>Tables:      0
</span><span class='line'>Rows:        0/10000 (In compliance)
</span><span class='line'>Fork/Follow: Unsupported
</span><span class='line'>Rollback:    Unsupported</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>アプリを作って、postgresqlの無料版を指定なしで入れて、情報を確認している。<br/>
情報内にある通り、バージョンは、<code>9.3.6</code>。</p>

<p>次に指定ありで。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku create
</span><span class='line'>Creating polar-dusk-1475... done, stack is cedar-14
</span><span class='line'>https://polar-dusk-1475.herokuapp.com/ | https://git.heroku.com/polar-dusk-1475.git
</span><span class='line'>
</span><span class='line'>$ heroku addons:add heroku-postgresql --version=9.1 --app polar-dusk-1475
</span><span class='line'>Adding heroku-postgresql on polar-dusk-1475... done, v4 (free)
</span><span class='line'>Attached as HEROKU_POSTGRESQL_PURPLE_URL
</span><span class='line'>Database has been created and is available
</span><span class='line'> ! This database is empty. If upgrading, you can transfer
</span><span class='line'> ! data from another database with pgbackups:restore.
</span><span class='line'>Use `heroku addons:docs heroku-postgresql` to view documentation.
</span><span class='line'>
</span><span class='line'>$ heroku pg:info --app polar-dusk-1475
</span><span class='line'>=== HEROKU_POSTGRESQL_PURPLE_URL (DATABASE_URL)
</span><span class='line'>Plan:        Hobby-dev
</span><span class='line'>Status:      Available
</span><span class='line'>Connections: 0/20
</span><span class='line'>PG Version:  9.1.11
</span><span class='line'>Created:     2015-03-04 08:45 UTC
</span><span class='line'>Data Size:   5.9 MB
</span><span class='line'>Tables:      0
</span><span class='line'>Rows:        0/10000 (In compliance)
</span><span class='line'>Fork/Follow: Unsupported
</span><span class='line'>Rollback:    Unsupported</span></code></pre></td></tr></table></div></figure>


<p>結果は見ての通り。<code>9.1.11</code>で入っている。</p>

<p>実際に指定している箇所は、addonの追加の後ろにオプションとして、<code>--version=9.1</code>を追加してやるだけ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]herokuでhttpでのアクセスをhttpsへリダイレクトさせる設定]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/03/03/heroku-force-https/"/>
    <updated>2015-03-03T02:05:27+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/03/03/heroku-force-https</id>
    <content type="html"><![CDATA[<p>htaccessを使用して、httpでのアクセスを全てhttpsへリダイレクトさせる設定を書いた際に、<br/>
少し悩んだのでメモ。</p>

<!-- more -->


<h2>通常のリダイレクト</h2>

<p>ググるなどして調べるとまず出てくるのがこの方法。<br/>
実際、vagrantなんかでのローカル環境だとこれで問題なくリダイレクト出来た。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine On
</span><span class='line'>RewriteCond %{SERVER_PORT} !^443$
</span><span class='line'>RewriteRule ^.*$ https://%{SERVER_NAME}%{REQUEST_URI} [L,R]</span></code></pre></td></tr></table></div></figure>


<p>もしくはこれ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine on
</span><span class='line'>RewriteCond %{HTTPS} off
</span><span class='line'>RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R,L]</span></code></pre></td></tr></table></div></figure>


<p><strong>参考サイト</strong><br/>
<a href="http://takuya-1st.hatenablog.jp/entry/20101217/1292579757">HTTPSを強制する簡単な設定(htaccess)</a><br/>
<a href="http://sachips.byeto.jp/server/htaccess_http_ssl.html">.htaccessファイルでHTTPアクセスをSSLにリダイレクトする方法とその逆も</a></p>

<p>しかし、全く同じファイルをherokuにアップするとリダイレクトループが発生し、動かなくなってしまった。</p>

<h2>heroku(aws)環境でのリダイレクト</h2>

<p>herokuはaws上で動いています。<br/>
で、awsなどで使われている負荷分散ための処理、ロードバランサが設定されていると？上記のエラーは起こってしまうようです。</p>

<p><strong>参考ページ</strong><br/>
<a href="http://qiita.com/tkosuga@github/items/ee51fcd6c047b19856be">apache(htaccess)でリバースプロキシー経由のHTTP/HTTPS転送</a><br/>
<a href="http://qa.atmarkit.co.jp/q/3221">一部のページでのSSLの設定に困っています</a><br/>
<a href="http://d.hatena.ne.jp/komiyak/20130807/1375845025">AWS Elastic Load Balancer と Apache を使って HTTPS(SSL) 通信を行うための設定方法</a></p>

<p>これを回避するには、上記参考サイトにもあるように、<code>HTTP:X-Forwarded-Proto</code>を見て転送をかけるかどうかを判断してやることでループしないように出来るみたい。</p>

<p>実際に設定した内容は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine on
</span><span class='line'>RewriteCond %{HTTP:X-Forwarded-Proto} ^http$
</span><span class='line'>RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R,L]</span></code></pre></td></tr></table></div></figure>


<p>これで無事、動作しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]SSL証明書を更新する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/20/certs-update/"/>
    <updated>2015-02-20T17:58:29+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/20/certs-update</id>
    <content type="html"><![CDATA[<p>すでにheroku上でsslを導入していて、<br/>
その証明書を更新する、という前提です。</p>

<!-- more -->


<h2>準備</h2>

<p>ファイルの準備は導入の時と同じです。<br/>
以前に書いたものを参考にどうぞ。</p>

<p><a href="http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain/">[heroku]herokuでのSSL設定とカスタムサブドメインの適用方法</a></p>

<p>準備するファイルは、以下の2つです。</p>

<ul>
<li>server.crt</li>
<li>server.key</li>
</ul>


<h2>更新</h2>

<p>以下で更新が出来ます。</p>

<pre><code>$ heroku certs:update server.crt server.key
</code></pre>

<p>SSL導入時点で割り当てられるCNAME用のコモンネームが変わってしまうんじゃないかと思いましたが大丈夫でした。<br/>
以下、ログ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Resolving trust chain... done
</span><span class='line'>
</span><span class='line'> !    WARNING: Potentially Destructive Action
</span><span class='line'> !    This command will change the certificate of endpoint xxx-9999.herokussl.herokussl.com on app-name.
</span><span class='line'> !    To proceed, type "app-name" or re-run this command with --confirm app-name
</span><span class='line'>
</span><span class='line'>&gt; app-name
</span><span class='line'>Updating SSL Endpoint xxx-9999.herokussl.com for app-name... done
</span><span class='line'>Updated certificate details:
</span><span class='line'>Common Name(s): example.com
</span><span class='line'>Expires At:     (期限)
</span><span class='line'>Issuer:         (SSL内容)
</span><span class='line'>Starts At:      (開始日)
</span><span class='line'>Subject:        (SSL内容)
</span><span class='line'>SSL certificate is verified by a root authority.</span></code></pre></td></tr></table></div></figure>


<p>途中で重要な変更ってことで、確認が入るので、アプリ名をタイプして実行します。<br/>
予め、<code>--confirm app-name</code>をつけるとスルー出来るようです。</p>

<p>また、もし間違えてアップしてしまった、などの場合は、もとに戻すコマンドも用意されているようです。</p>

<pre><code>$ heroku certs:rollback
</code></pre>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/ssl-endpoint#update-certificate">https://devcenter.heroku.com/articles/ssl-endpoint#update-certificate</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]Heroku PostgresのDBをHeroku PostgresのDBからリストアする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/20/restore-postgresql/"/>
    <updated>2015-02-20T16:59:38+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/20/restore-postgresql</id>
    <content type="html"><![CDATA[<p>タイトルの通り。<br/>
別のheroku postgres上にあるDBの内容を、そのまま別のheroku postgresに反映する方法。</p>

<!-- more -->


<h2>バックアップ</h2>

<p>以前にも書きましたが、とりあえず現状のものをバックアップ。</p>

<pre><code>$ heroku pgbackups:capture --app 元アプリ名
</code></pre>

<p>URLは以下で確認。</p>

<pre><code>$ heroku pgbackups:url --app 元アプリ名
</code></pre>

<p>表示されるamazonのURLをコピーしておく</p>

<h2>リストア</h2>

<p>リストアしたいアプリにheroku postgresを入れておく。<br/>
環境変数の<code>DATABASE_URL</code>に入っているDBへのリストアが行われる。<br/>
(アドオンを入れると自動で入っているはず)</p>

<p>上記でコピーしたURLで以下を実行。</p>

<pre><code>$ heroku pgbackups:restore DATABASE 'amazonのURL' --app 新アプリ名
</code></pre>

<p>完了。</p>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/heroku-postgres-import-export">https://devcenter.heroku.com/articles/heroku-postgres-import-export</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.gitignoreを作成してくれる便利ツール]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/19/gitignore-tool/"/>
    <updated>2015-02-19T18:21:02+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/19/gitignore-tool</id>
    <content type="html"><![CDATA[<p>gitignoreを作成してくれる便利ツールがあったのでメモ。</p>

<!-- more -->


<p><img src="http://kayakuguri.github.io/images/2015/02/gitignore_io.jpg" alt="gitignore_io" /></p>

<p>真ん中の検索窓風のエリアに、適応したいgitignoreを入れていくと、インクリメンタルサーチで結果が出てくるので、エンターで追加。<br/>
<code>PhpStome</code>や<code>cakePHP</code>なんかを追加できる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/gitignore_io2.jpg" alt="gitignore_io" /></p>

<p>で、<code>Generate</code>ボタンをクリックすると、作成され、テキストとして直接表示される。<br/>
ここからコピペなりなんなりで。</p>

<p>ちなみに、ボタンの横の矢印からファイルを直接ダウンロードする事も可能。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/gitignore_io3.jpg" alt="download file" /></p>

<p>ちょっと迷ったのがMac用の設定で、<code>OSX</code>とすれば設定されます。<br/>
その他、ドキュメントなどは以下。</p>

<p><a href="https://www.gitignore.io/docs">https://www.gitignore.io/docs</a></p>

<p>いつもgitignoreの設定で迷うのでこれで統一すれば便利かも。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apiaryでモック用APIを作成してみる #1]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/18/apiary-vol1/"/>
    <updated>2015-02-18T18:40:56+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/18/apiary-vol1</id>
    <content type="html"><![CDATA[<p>結構昔からあるサービスらしいけれど、<br/>
以下の記事を見て、実際に使ってみた。<br/>
<a href="http://dev.classmethod.jp/tool/apiary-start/">[Apiary]Markdownで始めるAPI開発とAPIドキュメント作成</a></p>

<!-- more -->


<h2>アカウント作成</h2>

<p>サイトにアクセス。<br/>
<a href="http://apiary.io/">apiary</a></p>

<p><img src="http://kayakuguri.github.io/images/2015/02/apiary01.jpg" alt="apiary" /></p>

<p><code>Sign Up</code>からアカウント作成。<br/>
Githubアカウントか、Twitterでのログインも可能なよう。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/apiary02.jpg" alt="SignUp" /></p>

<p>アカウントを作成すると、まず一つ作ってみよう、って事で、API名を入力してね、ってでる。<br/>
適当に入力してSAVE。<br/>
<code>test-api</code>で作ってみた。<br/>
(名前は他のユーザーと被っていても大丈夫。API名は適当に連番を付けて振り分けられ、公開URLも被らないように作成される)</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/apiary03.jpg" alt="first API" /></p>

<p>作成すると、見本が出来た状態で開く。<br/>
この左のエディタ画面でMarkDown形式でドキュメントを作成していくと、<br/>
右側にレンダリング結果が作成され、さらにAPIも自動で生成される。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/apiary04.jpg" alt="Editor" /></p>

<h2>シンプルなGETのAPIを作ってみる</h2>

<p>チュートリアルがあるので、それを見ながら。<br/>
<a href="http://apiary.io/blueprint">API Blueprint Tutorial</a></p>

<p>以下、完成markdown</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FORMAT: 1A
</span><span class='line'>
</span><span class='line'>#Sample API
</span><span class='line'>サンプルAPI
</span><span class='line'>
</span><span class='line'>#Group Sample
</span><span class='line'>Sampleグループ
</span><span class='line'>
</span><span class='line'>##Sample [/list]
</span><span class='line'>###Sample Get List [GET]
</span><span class='line'>
</span><span class='line'>+ Response 200 (application/json)
</span><span class='line'>
</span><span class='line'>        "data":{
</span><span class='line'>            [{
</span><span class='line'>                "id":1
</span><span class='line'>                "name":"taro"
</span><span class='line'>            },{
</span><span class='line'>                "id":2
</span><span class='line'>                "name:"jiro"
</span><span class='line'>            }]
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<h3>コード詳細</h3>

<pre><code>FORMAT: 1A
</code></pre>

<p>APIのフォーマットをここで指定できるよう。<br/>
無料版だとあまり関係ないかも。正直、理解出来ていません。
おまじないと思って…。</p>

<pre><code>#Sample API
</code></pre>

<p>最初の<code>#</code>でこのAPIのタイトル。</p>

<pre><code>#Group Sample
</code></pre>

<p>次の<code>#Group</code>で、グルーピングが可能？</p>

<pre><code>##Sample [/list]
</code></pre>

<p>ここでエンドポイントを指定。<code>[]</code>の前には半角スペースをお忘れなく。</p>

<pre><code>###Sample Get List [GET]
</code></pre>

<p>エンドポイントの指定のすぐ下で、メソッドの指定。<br/>
このメソッドの指定部分が、サンプル実行のボタンとして表示されるよう。</p>

<pre><code>+ Response 200 (application/json)
</code></pre>

<p>レスポンスのコードと型を指定して、その下に実際に返却される値を記述。<br/>
今回はJSONフォーマットで記述している。<br/>
コードを指定出来るということは、エラー時の挙動も記述できると思われる(未確認)。</p>

<h3>実行</h3>

<p>以下のエンドポイントにアクセスすると、定義したJSONがそのまま返ってくる。<br/>
<a href="http://private-0b253-test4095.apiary-mock.com/list">http://private-0b253-test4095.apiary-mock.com/list</a></p>

<p>右側のレンダリングされた画面でも実際に実行結果をヘッダー付きで見られる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/apiary05.jpg" alt="Editor" />
<img src="http://kayakuguri.github.io/images/2015/02/apiary06.jpg" alt="API" /></p>

<p>API部分をクリックすると、詳細が表示され、<code>Call Resource</code>で実際に叩く事が可能。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/apiary07.jpg" alt="Call Resource" /></p>

<p>結果が、header情報付きで確認出来る。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/apiary08.jpg" alt="result" /></p>

<h3>サンプルコードの出力</h3>

<p>右側のエリア右上にある、<code>Swith to Example</code>をクリックする。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/apiary09.jpg" alt="Swith to Example" /></p>

<p>切り替わった後、デフォルトで、<code>Raw</code>が選択されている箇所のプルダウンから、任意の言語を選択すると、<br/>
その言語でのAPIの叩き方のサンプルコードが表示される。<br/>
例えばPHPだとこんな感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>$ch = curl_init();
</span><span class='line'>
</span><span class='line'>curl_setopt($ch, CURLOPT_URL, "http://private-0b253-test4095.apiary-mock.com/list");
</span><span class='line'>curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
</span><span class='line'>curl_setopt($ch, CURLOPT_HEADER, FALSE);
</span><span class='line'>
</span><span class='line'>$response = curl_exec($ch);
</span><span class='line'>curl_close($ch);
</span><span class='line'>
</span><span class='line'>var_dump($response);</span></code></pre></td></tr></table></div></figure>


<p>他にも様々な種類の言語のサンプルコードが出力可能。</p>

<blockquote><p>cURL、Java、JavaScript、Node.js、Perl、Python、PHP、Ruby<br/>
Go、C#、Visual Basic、Groovy、Objective-c、Swift、Swift Representor</p></blockquote>

<h2>料金</h2>

<p>気になるお値段は、単純な？範囲だと無料。<br/>
プライベートな状態での開発をしようとすると有料となるみたい。<br/>
(値段表を見てもよくわからなかったが)</p>

<p><a href="http://apiary.io/pricing">Pricing &amp; Plans</a></p>

<h2>次回</h2>

<p>次は、POSTの送信を試してみる予定。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[htaccessによるリダイレクト設定]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/16/redirect-htaccess/"/>
    <updated>2015-02-16T22:16:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/16/redirect-htaccess</id>
    <content type="html"><![CDATA[<p><code>.htaccess</code>を使ったリダイレクトをやってみたメモです。</p>

<!-- more -->


<p>設定内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine on
</span><span class='line'>RewriteBase /
</span><span class='line'>RewriteRule .* リダイレクト先URL [R=301,L]</span></code></pre></td></tr></table></div></figure>


<p>これを設置した場所と、<code>RewriteBase</code>の有効な範囲なんかの関係がややこしかったです。</p>

<p>まず、<code>RewriteBase</code>は、参考サイトによると、<br/>
<strong>リダイレクト後のパスにのみ適用</strong>される、との事。<br/>
さらに、<strong>相対パスの時にしか適用されない</strong>。</p>

<p>それと、設置したディレクトリからの相対パスになるので、<br/>
上記の設定だと、設置したディレクトリ以下全てのURLがリダイレクトされます。<br/>
これをドキュメントルートに置くと全てのパスでリダイレクトされます。</p>

<p>htaccessはディレクトリ単位で個別に置けるため、特定のディレクトリだけに適応させる場合は、<br/>
上記の設定をすれば適応出来ます。</p>

<h3>参考</h3>

<p><a href="http://kana-lier.com/web/redirect/">.htaccessを使ったよく使うリダイレクトまとめ</a><br/>
<a href="http://www.cherrypieweb.com/weblog/technical/20131017121752.php">.htaccessによるリダイレクト徹底解説</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]githubから自動でherokuにデプロイ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/10/heroku-github-sync/"/>
    <updated>2015-02-10T17:50:51+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/10/heroku-github-sync</id>
    <content type="html"><![CDATA[<p>ベータ版だったherokuとgithubの同期が正式リリースされたようです。<br/>
<a href="https://blog.heroku.com/archives/2015/2/6/heroku_github_integration">Ship Code Faster: Announcing GitHub Integration GA</a></p>

<!-- more -->


<p>ベータ版の段階からあったかもなのですが、githubにプッシュしたら自動でherokuにデプロイ出来るようなので、試してみました。</p>

<h2>Githubにリポジトリを作成</h2>

<p>まずは同期させるためにリポジトリを作成します。<br/>
すでにherokuにあるアプリを同期させる場合は、同じファイルをgithubにアップしておく必要があります。</p>

<h2>Herokuでの設定</h2>

<p>同期させたいアプリを開いたら、<code>deploy</code>のページへアクセス<br/>
<img src="http://kayakuguri.github.io/images/2015/02/github-heroku01.jpg" alt="deployへ" /></p>

<p>Githubを選択<br/>
<img src="http://kayakuguri.github.io/images/2015/02/github-heroku02.jpg" alt="Github" /></p>

<p><code>Connect to Github</code>をクリック</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku03.jpg" alt="Connect to Github" /></p>

<p>許可を求められるので、許可。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku04.jpg" alt="認証" /></p>

<p>すると、リポジトリを選択出来るようになる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku05.jpg" alt="リポジトリ選択" /></p>

<p><code>heroku</code>で検索した結果。今回はサンプルで作った、<code>heroku-deploy-test</code>のリポジトリを選択。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku06.jpg" alt="リポジトリ検索" /></p>

<p>紐づくとこんな感じ。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku07.jpg" alt="連携済" /></p>

<p>連携済の表示の下に、自動でデプロイさせたいブランチを選択する画面と、<br/>
手動で特定のブランチをデプロイさせる画面があります。<br/>
今回は<code>master</code>ブランチを選択して自動デプロイを有効にしてみます。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku08.jpg" alt="automatic deploys" /></p>

<p>結果。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku09.jpg" alt="automatic deploys" /></p>

<h2>deploy</h2>

<p>で、実際にgithubの指定したリポジトリにpushしてみると、<br/>
裏っかわでheorkuにデプロイが走ります。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku10.jpg" alt="heroku deploy" /></p>

<p>しばらく待つと、デプロイが成功。見事連携されました。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/github-heroku11.jpg" alt="deploy success" /></p>

<h2>その他</h2>

<p>CIツールを導入して、そのCIを通ったらherokuにデプロイ、という流れも出来るようで、<br/>
herokuがgitでのソース管理とはいえ、ソースの管理自体はやりにくかった点をgithub連携することでカバー出来そうです。</p>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/github-integration">ドキュメント</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]One-Off DynoでPHPをバックグラウンドで動作させる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/05/one-off-dyno-excute-php/"/>
    <updated>2015-02-05T15:04:19+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/05/one-off-dyno-excute-php</id>
    <content type="html"><![CDATA[<p>バッチ処理なんかを動作させるためにバックグラウンドでPHPを起動する方法を調べてみた。</p>

<!-- more -->


<h2>PHPをコマンドから実行</h2>

<p>PHPをコマンドラインから実行させるには以下。</p>

<pre><code>$ php hogehoge.php
</code></pre>

<h2>dynoについて</h2>

<p>dynoの種類なんかについては以下がすごくわかりやすかった。</p>

<p><a href="http://codezine.jp/article/detail/8344">構築・運用の必須知識！  Herokuアプリケーションの実行プラットフォーム「Dyno」を徹底的に理解する
（1/3）：CodeZine</a></p>

<h2>One-off dynoの起動</h2>

<p>今回使用するのは、One-off dyno。<br/>
これを起動させる方法は2種類あって、<br/>
一つは、<a href="https://addons.heroku.com/scheduler">Heroku Scheduler</a>のアドオンを入れて、<br/>
そこから定期的に実行させる方法。<br/>
実際にバッチ処理をさせる場合はここに登録する。<br/>
冒頭のPHPを起動させるコマンドをそのまま登録する。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/heroku_background02.jpg" alt="Heroku Scheduler" /></p>

<p>実行されたログは<a href="https://addons.heroku.com/papertrail">papertrail</a>上だと以下のような形となる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/heroku_background01.jpg" alt="papertrail" /></p>

<p>もう一つはコマンドラインからの実行。<br/>
これだと任意のタイミングですぐに実行出来るので待たなくてよい。<br/>
<code>heroku run</code>で、herokuでコマンドを実行出来る。<br/>
以下、コマンド。</p>

<pre><code>$ heroku run 'php hogehoge.php'
</code></pre>

<p>コマンドで実行した場合は、ターミナルに標準出力した結果や、<code>echo</code>された内容なんかがそのまま返ってくる。<br/>
(エラーが出てればわかる)</p>

<h2>メリット</h2>

<p>通常のWeb dynoの場合、リクエストしてからレスポンスがあるまでに30秒以上かかってしまうと、タイムアウトが発生し、<br/>
heroku側がエラーページを返してしまう。<br/>
この設定はこちら側ではどうやっても変更不可能なよう。<br/>
しかし、One-off dynoやworker dynoを使用してバックグラウンド実行させた場合はこの限りではなく、<br/>
処理によるタイムアウトはない。<br/>
なので、重いファイルや重い処理も可能。</p>

<p>後は、このアプリをバッチだけに限定して使用する場合、web dynoをゼロにしてしまえる。<br/>
ブラウザからのアクセスが出来なくなるが、バッチの性質上、不要。むしろアクセス出来ない方が都合がよい。<br/>
値段も安くすむ(もしくは無料)し。</p>

<p><img src="http://kayakuguri.github.io/images/2015/02/heroku_background03.jpg" alt="web dynoがゼロ" /></p>

<h2>参考</h2>

<p><a href="https://github.com/herokaijp/devcenter/wiki/one-off-dynos">one off dynos · herokaijp/devcenter Wiki · GitHub</a><br/>
<a href="http://pc-karuma.net/xampp-php-shell/">コマンドラインからPHPを実行 &ndash; XAMPPの使い方 &ndash; PC設定のカルマ</a><br/>
<a href="http://codezine.jp/article/detail/8344">構築・運用の必須知識！  Herokuアプリケーションの実行プラットフォーム「Dyno」を徹底的に理解する
（1/3）：CodeZine</a><br/>
<a href="http://bokukoko.hatenablog.com/entry/2014/09/25/Heroku_%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%81%9F_%26_%E7%BF%BB%E8%A8%B3">Heroku のタイムアウトについて調べた &amp; 翻訳 &ndash; ボクココ</a></p>

<h2>公式ドキュメント類</h2>

<p><a href="https://devcenter.heroku.com/articles/one-off-dynos">One-Off Dynos</a><br/>
<a href="https://devcenter.heroku.com/articles/procfile">Process Types and the Procfile</a><br/>
<a href="https://devcenter.heroku.com/articles/background-jobs-queueing">Worker Dynos, Background Jobs and Queueing</a><br/>
<a href="https://devcenter.heroku.com/articles/scheduler">Heroku Scheduler</a></p>
]]></content>
  </entry>
  
</feed>
