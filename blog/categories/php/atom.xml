<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2018-04-05T11:32:43+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel Passportのクライアント認証を試してみる]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/10/20/laravel-passport-sample/"/>
    <updated>2017-10-20T14:01:59+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/10/20/laravel-passport-sample</id>
    <content type="html"><![CDATA[<p>Laravel Passportを使ってAPIからのアクセスにOAuth認証をかけたい。<br/>
一般に公開するものではなく、特定のクライアントからのアクセスのみを想定する。<br/>
そのため、ユーザデータは使用しない。</p>

<!-- more -->


<h2>インストール</h2>

<p>Laravel Passportをインストール。</p>

<p><code>
$ composer require laravel/passport
</code></p>

<p>Package Auto-Discovery に対応しているため、プロバイダに追加してやる作業は必要ない。</p>

<ul>
<li><a href="https://laravel-news.com/package-auto-discovery">Laravel Package Auto-Discovery &ndash; Laravel News</a></li>
</ul>


<h2>セットアップ</h2>

<p>DBに必要なテーブルを作成する。</p>

<p><code>
$ php artisan migrate
</code></p>

<p>OAuth用に以下のテーブルが作成される。</p>

<ul>
<li><code>oauth_access_tokens</code></li>
<li><code>oauth_auth_codes</code></li>
<li><code>oauth_clients</code></li>
<li><code>oauth_personal_access_clients</code></li>
<li><code>oauth_refresh_tokens</code></li>
</ul>


<p>トークン作成時に使用されるキーを生成する。</p>

<p><code>
$ php artisan passport:install
</code></p>

<p>キーは、<code>/storage/</code>以下に生成される。<br/>
デフォルトでは<code>.gitignore</code>で無視する設定となっているので注意。<br/>
また、公開リポジトリにアップしてはいけない。<br/>
対処法などは以下参考。</p>

<ul>
<li><a href="https://qiita.com/kawax/items/59fde47056816cec52ec">Laravel Passport keyファイルの扱い &ndash; Qiita</a></li>
</ul>


<p>また、キーの生成とともに、DBにクライアントが作成される。</p>

<p><code>
Encryption keys generated successfully.
Personal access client created successfully.
Client ID: 1
Client Secret: tR7FSAHLQ8qw1xIgEWMKQ26QK2nKUxHahSHvY3RW
Password grant client created successfully.
Client ID: 2
Client Secret: 6n4TGzdrJHYdEJwPoMsaYuCA9EaFpXiGFr4dMVc8
</code></p>

<p>一つ目が、 <code>Laravel Personal Access Client</code><br/>
二つ目が、<code>Laravel Password Grant Client</code></p>

<p>二つ目はユーザ名＋パスワードを利用したアクセストークンの発行に利用出来る。<br/>
(ユーザーとの紐付けは特に必要なし)<br/>
(必要なければ消しておいてもよい)</p>

<h3>コードに追加</h3>

<h4><code>AuthServiceProvider.php</code>に追加</h4>

<p><code>/app/Providers/AuthServiceProvider.php</code></p>

<p>```
public function boot()
{</p>

<pre><code>$this-&gt;registerPolicies();

Passport::routes();
</code></pre>

<p>}
```</p>

<h4><code>auth.php</code>のdriverをpassportに変更</h4>

<p><code>/config/auth.php</code></p>

<p>```
&lsquo;guards&rsquo; => [</p>

<pre><code>'web' =&gt; [
    'driver' =&gt; 'session',
    'provider' =&gt; 'users',
],

'api' =&gt; [
    'driver' =&gt; 'passport',
    'provider' =&gt; 'users',
],
</code></pre>

<p>],
```</p>

<h2>クライアント認証情報グラントトークン</h2>

<p>冒頭の趣旨を実現するために、マシン-マシン間の認証に最適、という認証方式を採用する。</p>

<h4><code>Kanel.php</code>に追加</h4>

<p><code>/app/Http/Kanel.php</code></p>

<p>```
protected $routeMiddleware = [</p>

<pre><code>...
'client' =&gt; CheckClientCredentials::class,
</code></pre>

<p>];<br/>
```</p>

<h2>アクセストークンの取得</h2>

<p>以下にアクセスして取得出来る。</p>

<p>・リクエスト</p>

<p><code>
POST : /oauth/token
</code></p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>grant_type</code> </td>
<td align="left"> <code>client_credentials</code> |</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>client_id</code> </td>
<td align="left"> 発行したクライアントのID(数字) |</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>client_secret</code> </td>
<td align="left"> 発行したクライアントのシークレット |</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>scope</code> </td>
<td align="left"> アクセスするスコープ |</td>
</tr>
</tbody>
</table>


<p>・レスポンス</p>

<p>```
{</p>

<pre><code>"token_type": "Bearer",
"expires_in": 31536000,
"access_token": "YOUR-ACCESS-TOKEN-HERE"
</code></pre>

<p>}
```</p>

<p>発行されたトークンは、<code>oauth_access_tokens</code>テーブルに格納されていく。</p>

<h3>有効期限</h3>

<p>デフォルトではトークンの有効期限は１年間となっている。</p>

<p>変更するには、<code>AuthServiceProvider</code>の<code>boot</code>メソッドから変更可能。</p>

<p><code>/app/Providers/AuthServiceProvider.php</code></p>

<p>```
public function boot()
{</p>

<pre><code>$this-&gt;registerPolicies();

Passport::routes();
Passport::tokensExpireIn(Carbon::now()-&gt;addMinute(60));
Passport::refreshTokensExpireIn(Carbon::now()-&gt;addHour(2));
</code></pre>

<p>}
```</p>

<h2>APIへのアクセス</h2>

<p>上記トークンを使用してアクセス制限をかけたAPIへアクセスする。</p>

<h3>ルートに追加</h3>

<p>追加したミドルウェアを使用して、apiのルートにこの認証で使用するエンドポイントのリクエストを追加。</p>

<p><code>/routes/api.php</code></p>

<p>```
Route::get(&lsquo;/hoge&rsquo;, function (){</p>

<pre><code>return 'OK';
</code></pre>

<p>})&ndash;>middleware(&lsquo;client&rsquo;);
```</p>

<h3>アクセス</h3>

<p>apiのルーティングは、<code>/api</code>以下に作成される。<br/>
よって、エンドポイントは以下になる</p>

<p><code>
GET : /api/hoge
</code></p>

<p>ヘッダにアクセストークンを付与してアクセスする。</p>

<ul>
<li>Authorization : <code>Bearer YOUR-ACCESS-TOKEN</code></li>
</ul>


<h4>エラー</h4>

<p>アクセストークンが間違っているなどの場合は、<code>InvalidArgumentException</code>が発生する。</p>

<h1>参考</h1>

<ul>
<li><a href="https://readouble.com/laravel/5.5/ja/passport.html">API認証(Passport) 5.5 Laravel</a></li>
<li><a href="https://qiita.com/niiyz/items/fffff94acb6061ecc9d4">Laravel5.5でAPI認証のパッケージ(Laravel Passport)を利用する &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Heroku] Guzzleを使用してProximo経由で接続する]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/10/12/heroku-guzzle-proximo/"/>
    <updated>2017-10-12T16:40:29+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/10/12/heroku-guzzle-proximo</id>
    <content type="html"><![CDATA[<p>Herokuにて、外部APIに接続する際に固定IPにて接続したいことはたまにある。<br/>
<a href="http://kayakuguri.github.io/blog/2014/09/26/static-ip-heroku/">以前、QuotaGuard Staticを使用してのやり方は書いた</a>けれど、今回はProximoを利用した際に少しハマったのでメモ。</p>

<!-- more -->


<h1>Proximo</h1>

<p>Proximoは一番下のプランでも$5/月かかる有料アドオンとなっている。</p>

<ul>
<li><a href="https://elements.heroku.com/addons/proximo">Proximo &ndash; Add-ons &ndash; Heroku Elements</a></li>
<li><a href="https://devcenter.heroku.com/articles/proximo">Proximo | Heroku Dev Center</a></li>
</ul>


<h1>Guzzle</h1>

<p>以前の記事ではCURLで接続していたが、今回はGuzzleを使って接続してみる。</p>

<ul>
<li><a href="https://github.com/guzzle/guzzle">Guzzle, PHP HTTP client</a></li>
<li><a href="http://docs.guzzlephp.org/en/stable/">Guzzle Documentation</a></li>
</ul>


<h1>proxy経由で接続</h1>

<p>ドキュメントを確認すると、以下の方法でプロキシを指定可能、とのこと。<br/>
<a href="http://docs.guzzlephp.org/en/stable/request-options.html#proxy">http://docs.guzzlephp.org/en/stable/request-options.html#proxy</a></p>

<p><code>
$client-&gt;request('GET', '/', ['proxy' =&gt; 'tcp://localhost:8125']);
</code></p>

<p>ProximoをHerokuに追加すると、環境変数に自動的にプロキシのURLが追加される。</p>

<p><code>
PROXIMO_URL=http://proxy:your-password-here@proxy-xx-xxx-x-xxx.proximo.io
</code></p>

<p>上記URL内の、<code>xx-xxx-x-xxx</code>の部分の数字が固定IPとなる。<br/>
(ダッシュボードからも確認可）</p>

<p>これをそのままproxyのURLとして指定してやればOK…だと思ったのだが、エラーが出てしまった。</p>

<blockquote><p>cURL error 56: Proxy CONNECT aborted</p></blockquote>

<p>QuotaGuard Staticのアドオンを追加した際に取得出来るURLを同じように指定してやったところ、問題なくアクセス出来たので、Guzzleは悪くなさそう。<br/>
ProximoだとURLをパースしたりとかが必要なのか…など悩んでいて、URLを見比べていると、ProximoのURLにはポート番号がついてないことに気付く。</p>

<p>改めてドキュメントを確認してみると、ポート番号は<code>80</code>で固定、とのこと。</p>

<blockquote><p>If you’d rather use Proximo as a standard HTTP proxy, use PROXIMO_URL on port 80.<br/>
<a href="https://devcenter.heroku.com/articles/proximo#using-the-proximo-http-proxy">https://devcenter.heroku.com/articles/proximo#using-the-proximo-http-proxy</a></p></blockquote>

<p>よって、環境変数に追加されたURLの最後に <code>:80</code> とポート番号を追加してやると、無事、アクセスすることが出来た。</p>

<p>```
$proxy_url = env(&lsquo;PROXIMO_URL&rsquo;) . &lsquo;:80&rsquo;;
$res = $client->request(&lsquo;GET&rsquo;, &lsquo;<a href="http://ip.jsontest.com/">http://ip.jsontest.com/</a>&rsquo;, [</p>

<pre><code>'proxy' =&gt; $proxy_url
</code></pre>

<p>]);
$res_body = json_decode($res->getBody(), true);
var_dump($res_body);
```</p>

<p>Proximoの固定IPがJSON内に返ってきたらOK。</p>

<p>ポート番号がデフォルトでは入っていないため、少しハマってしまった。</p>

<h1>参考</h1>

<ul>
<li><a href="https://qiita.com/sho7650/items/872b5757e250d4b3eb95">[Heroku]外部接続時に固定IP化する2つの方法[Proximo] &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhpStormを使用してPHP UnitのテストをVagrantのリモート上で実行する]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/09/22/laravel-phpunit-vagrant-phpstorm/"/>
    <updated>2017-09-22T19:05:58+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/09/22/laravel-phpunit-vagrant-phpstorm</id>
    <content type="html"><![CDATA[<p>LaravelのUnitテストを実行すべく、ローカルのVagrant環境上でPHP Unitを実行するように設定してみた。</p>

<!-- more -->


<h1>環境</h1>

<ul>
<li>Vagrant

<ul>
<li><a href="https://box.scotch.io/">ScotchBox</a></li>
</ul>
</li>
<li>Laravel 5.5.7</li>
<li>PHP 7.0</li>
</ul>


<h1>PHP Unit</h1>

<p>PHP UnitはCompoerにてプロジェクトディレクトリにインストールする。<br/>
LaravelではデフォルトでComposerに入っているので特に設定はなし。<br/>
(Linuxに入れる必要はない)</p>

<p><code>
"phpunit/phpunit": "~6.0"
</code></p>

<h1>PhpStorm</h1>

<p>PhpStormでの設定方法。<br/>
設定したいプロジェクトのルートディレクトリを開いた状態で設定する。</p>

<h2>PHP Interpreter</h2>

<p><code>Preference</code>を開く。<br/>
<code>Languages &amp; Frameworks -&gt; PHP -&gt; Test Frameworks</code>を選択。<br/>
<code>+</code>マークをクリックし、<code>PHPUnit by Remote Interpreter</code>を選択する。</p>

<p><img src="/images/2017/09/phpunit_01.jpg" alt="" /></p>

<p>Interpreterを選択するウインドウが開くが、interpreterがないので作成する。<br/>
右端の<code>...</code>をクリックする。</p>

<p><img src="/images/2017/09/phpunit_02.jpg" alt="" /></p>

<p>ウインドウが開くので、<code>+</code>をクリックし、<code>From Docker, Vagrant, VM, Remote...</code>を選択。</p>

<p><img src="/images/2017/09/phpunit_03.jpg" alt="" /></p>

<p>開いたウインドウで、<code>Vagrant</code>を選択。すると自動で設定が読み込まれるのでそのままOKする。</p>

<p><img src="/images/2017/09/phpunit_04.jpg" alt="" /></p>

<p>OKをクリックすると、SSH接続が行われ情報が自動で読み込まれる。<br/>
そのままでOKなのでOKをクリックする。</p>

<p><img src="/images/2017/09/phpunit_05.jpg" alt="" /></p>

<p>Interpreterを選択する画面に戻るので、作成したInterpreterを選択し、OKをクリック。</p>

<p><img src="/images/2017/09/phpunit_06.jpg" alt="" /></p>

<p>追加したInterpreterでPHPUnitのライブラリを指定するが、Composer経由でのロードになるので、デフォルトの<code>Use Composer autoloader</code>のままでよい。<br/>
Vagrant内でのautolodのパスを指定するので、<code>...</code>をクリック。</p>

<p><img src="/images/2017/09/phpunit_07.jpg" alt="" /></p>

<p>Scothboxは<code>/var/www</code>がホストと共有しているディレクトリになるので、そこから<code>vendor/autoload.php</code>を選択する。</p>

<p><img src="/images/2017/09/phpunit_08.jpg" alt="" /></p>

<p>選択すると、追加されているPHPUnitのバージョンが表示される。</p>

<p><img src="/images/2017/09/phpunit_09.jpg" alt="" /></p>

<p>これでInterpreterの設定は完了。</p>

<h2>Run/Debug Configurations</h2>

<p>Configurationsの設定を行う。</p>

<p>メニューから、<code>Run -&gt; Edit Configurations</code>を選択。</p>

<p><code>+</code>をクリックし、<code>PHPUnit</code>のConfigurationを追加する。</p>

<p><img src="/images/2017/09/phpunit_10.jpg" alt="" /></p>

<p>Nameは適当に書く。<br/>
Test scopeはテストしたいディレクトリを選択する。<br/>
Laravelのtestsディレクトリを指定しておく。（どこでもよい）<br/>
この設定の下部に、Errorと出ているのでFixをクリック。</p>

<p><img src="/images/2017/09/phpunit_11.jpg" alt="" /></p>

<p>PHPの設定ウインドウが開くので、<code>PHP language level</code>はVagrant環境に合わせて<code>7</code>を選択。<br/>
<code>CLI Interpreter</code>は設定したinterpreterを選択する。</p>

<p><img src="/images/2017/09/phpunit_12.jpg" alt="" /></p>

<p>OKで閉じる。</p>

<h2>実行</h2>

<p>右上のセレクトボックスが、先ほど作成したConfigurationが選択されている状態になっているはずなので、そのまま緑の三角をクリック。</p>

<p><img src="/images/2017/09/phpunit_13.jpg" alt="" /></p>

<p>すると、<code>tests</code>ディレクトリ以下のテストファイルが自動で起動し、テストが実行される。<br/>
デフォルトのサンプルテストは必ず成功するので、無事、テストが通ればOK。</p>

<p><img src="/images/2017/09/phpunit_14.jpg" alt="" /></p>

<p><code>ExampleTest.php</code>の<code>assertTrue</code>を<code>false</code>にしてみて失敗させてみる。</p>

<p>```
public function testBasicTest()
{</p>

<pre><code>$this-&gt;assertTrue(false);
</code></pre>

<p>}
```</p>

<p>ファイルを選択して右クリックすれば、そのファイルのみをテスト実行する事も可能。<br/>
失敗すると以下のようになる。</p>

<p><img src="/images/2017/09/phpunit_15.jpg" alt="" /></p>

<p>これで無事、成功と失敗の動作が確認できた。</p>

<h1>参考</h1>

<ul>
<li><a href="https://confluence.jetbrains.com/display/PhpStorm/Running+PHPUnit+tests+over+SSH+on+a+remote+server+with+PhpStorm">Running PHPUnit tests over SSH on a remote server with PhpStorm &ndash; PhpStorm &ndash; Confluence</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]PostgresとRedisの環境設定]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/09/21/heroku-postgres-redis/"/>
    <updated>2017-09-21T15:16:32+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/09/21/heroku-postgres-redis</id>
    <content type="html"><![CDATA[<p>LaravelをHerokuで使用する際に、Heroku PostgresとHeroku Redisの接続情報を環境変数から取得する設定のメモ。</p>

<!-- more -->


<h1>概要</h1>

<p>改めて。<br/>
Herokuでは標準のadd-onとして<a href="https://elements.heroku.com/addons/heroku-postgresql">Heroku Postgres</a>と<a href="https://elements.heroku.com/addons/heroku-redis">Heroku Redis</a>が用意されている。<br/>
クレジットカードさえ登録していれば無料で使えるので便利。</p>

<p>この接続情報はアドオンを登録した際に自動的に以下のような変数で登録がされる。</p>

<p><strong>Postgres</strong><br/>
<code>DATABASE_URL</code> = <code>postgres://username:password@hostname.amazonaws.com:5432/database</code></p>

<p><strong>Redis</strong><br/>
<code>REDIS_URL</code> = <code>redis://h:password@hostname.amazonaws.com:port_no</code></p>

<p>各種情報がURL形式で組み込まれているのだが、間違ってもこれを自分でバラしてそれぞれ個別に環境変数に入れる、などとしてはいけない。<br/>
というのも、この接続情報はPostgresやRedisにメンテナンスが入った際に前の接続情報は破棄され、新しい情報が同じ環境変数で設定されるため、<br/>
自前でバラして作ってしまうとその変更した情報に対応できなくなり、接続エラーとなってしまう。</p>

<p>よって、必ず自動でセットされる、<code>DATABASE_URL</code>や<code>REDIS_URL</code>を使うこと。<br/>
これはHerokuを使う際には常識として覚えておくこと。</p>

<h1>取得</h1>

<p>というわけで、それぞれの値を取得したURLからパースしてLaravel用に環境変数にセットする。<br/>
以下のように環境変数があればそれをパースして環境変数としてセットしてやるようにするのがスマートっぽい。<br/>
これだとローカルでは個別に<code>.env</code>ファイルで設定した値を使用してやることが出来る。</p>

<p><code>/config/database.php</code> の冒頭に書く。</p>

<p>```
//Postgres
if (getenv(&lsquo;DATABASE_URL&rsquo;)) {</p>

<pre><code>$url = parse_url(getenv('DATABASE_URL'));
putenv('DB_HOST='.$url['host']);
putenv('DB_PORT='.$url['port']);
putenv('DB_DATABASE='.substr($url["path"], 1));
putenv('DB_USERNAME='.$url["user"]);
putenv('DB_PASSWORD='.$url['pass']);
</code></pre>

<p>}</p>

<p>//Redis
if (getenv(&lsquo;REDIS_URL&rsquo;)) {</p>

<pre><code>$url = parse_url(getenv('REDIS_URL'));
putenv('REDIS_HOST='.$url['host']);
putenv('REDIS_PORT='.$url['port']);
putenv('REDIS_PASSWORD='.$url['pass']);
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Scotchbox]Ubuntuの環境でのphp.ini]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/01/11/scotchbox-phpini/"/>
    <updated>2017-01-11T18:21:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/01/11/scotchbox-phpini</id>
    <content type="html"><![CDATA[<p>ちょっとしたメモ。<br/>
ScotchboxのデフォルトUbuntu環境での<code>php.ini</code>の場所にハマったので、そのメモ。</p>

<!-- more -->


<h2>正解</h2>

<p>結論から書くと、以下のファイルでの設定が有効となっていた。</p>

<p><code>
/etc/php5/apache2/php.ini
</code></p>

<h2>間違い</h2>

<p>実は以下にも<code>php.ini</code>があるのだが、これの内容を変更しても反映されなかった。</p>

<p><code>
/etc/php5/cli/php.ini  //反映されない
</code></p>

<hr />

<p>そもそも何を設定したかというと、<br/>
他のUbuntu環境を知らないので、Scotchbox特有かどうかはわからないけれど、デフォルトではスーパーグローバル変数の環境変数ではる、<code>$_ENV</code> が有効となっていないため、それを有効とすべく、<code>php.ini</code>の設定を触る必要があった。</p>

<ul>
<li><a href="http://kayakuguri.github.io/blog/2015/05/26/vagrant-env/">Vagrant環境での環境変数の設定方法</a></li>
</ul>


<p>以上、メモ。</p>
]]></content>
  </entry>
  
</feed>
