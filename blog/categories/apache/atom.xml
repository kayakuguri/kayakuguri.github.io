<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: apache | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/apache/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2018-10-22T18:41:36+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apache2.4でアクセス制御の方法を調べた]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/12/14/htaccess-reuire-setting/"/>
    <updated>2017-12-14T12:59:05+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/12/14/htaccess-reuire-setting</id>
    <content type="html"><![CDATA[<p>Apache2.4からアクセス制御の方法が、<code>RequireAny</code>とかを使った方法になっているよう。<br/>
ちょっとよくわからなかったので調べて整理してみたメモ。</p>

<!-- more -->


<h1>基本</h1>

<p>基本は、以下の３つのタグで囲って条件付けしていく。</p>

<ul>
<li><code>RequireAny</code> &ndash; どれか一つでも当てはまれば許可</li>
<li><code>RequireAll</code> &ndash; 全てに当てはまれば許可</li>
<li><code>RequireNone</code> &ndash; どれか一つでも当てはまれば拒否</li>
</ul>


<p>デフォルト、何も囲わなければ <code>RequireAny</code> となるよう。</p>

<p>```
<RequireAny></p>

<pre><code>Require {判定する内容}
Require {判定する内容}
</code></pre>

<p></RequireAny>
```</p>

<h1>判定文基本</h1>

<p>```</p>

<h1>xxのとき許可</h1>

<p>Require xx</p>

<h1>xxでないとき許可</h1>

<p>Require not xx</p>

<h1>全て許可</h1>

<p>Require all granted</p>

<h1>全て拒否</h1>

<p>Require all denied
```</p>

<h1>env</h1>

<p><code>env</code>で変数的に値を設定出来る。<br/>
以下みたいな感じ。</p>

<blockquote><p>SetEnvIf {種類} {値} {変数名}</p></blockquote>

<p>```</p>

<h1>URI</h1>

<p>SetEnvIf Request_URI /hoge/ valid-url
SetEnvIf Request_URI &ldquo;^/hoge/*&rdquo; valid-url  #正規表現</p>

<h1>IP</h1>

<p>SetEnvIf REMOTE_ADDR 192.168.33.1 valid-ip
SetEnvIf X-Forwarded-For 000.00.000.000 valid-ip  #ロードバランサ使用時
```</p>

<h2>URI表記の揺れ</h2>

<p>正規表現を使わない場合は正しくかかないと無視されてしまう部分があった。<br/>
例えば、<code>/api/</code>以下のディレクトリを許可したい場合。<br/>
<code>SetEnvIf Request_URI xxx valid-url</code><br/>
ここの、<code>xxx</code>に入るものを色々変えてアクセスしてみた。<br/>
(<code>api/test.php</code>に対してのアクセス結果)</p>

<ul>
<li>◯ : <code>/api/*</code></li>
<li>◯ : <code>/api/</code></li>
<li>◯ : <code>/</code></li>
<li>◯ : <code>/a</code></li>
<li>× : <code>/test/</code></li>
<li>◯ : <code>/test</code></li>
<li>◯ : <code>/t</code></li>
<li>× : <code>/t/</code></li>
<li>◯ : <code>"^/api/*"</code></li>
<li>◯ : <code>"^/api"</code></li>
<li>◯ : <code>"^/a"</code></li>
<li>× : <code>"^/test/"</code></li>
<li>× : <code>"^/t"</code></li>
</ul>


<p>正規表現を利用すると意図した通り動いているが、正規表現を利用しない場合には、スラッシュの後の文字列は無視されているような挙動をしている。<code>/api</code>でも<code>/test</code>でも<code>/</code>と同じ。注意が必要。</p>

<h1>ベーシック認証</h1>

<p>ベーシック認証の設定などは以下。</p>

<p><code>
AuthType Basic
AuthName "Password Required"
AuthUserFile /var/www/.htpasswd
</code></p>

<p>で、認証されたユーザを許可、は以下を記述。</p>

<p><code>
Require valid-user
</code></p>

<h1>組み合わせ</h1>

<p>で、これらを組み合わせて設定した制御をかけていく。<br/>
例えば…<br/>
ベーシック認証をかけるが、特定のIPは許可。さらに特定のディレクトリは常に許可する、とかの場合</p>

<p>```</p>

<h1>Basic認証</h1>

<p>AuthType Basic
AuthName &ldquo;Password Required&rdquo;
AuthUserFile /var/www/.htpasswd</p>

<h1>env</h1>

<p>SetEnvIf REMOTE_ADDR 192.168.33.1 valid-ip
SetEnvIf Request_URI &ldquo;^/hoge/*&rdquo; valid-url</p>

<h1>条件</h1>

<p><RequireAny></p>

<pre><code>Require valid-user
Require env valid-ip
Require env valid-url
</code></pre>

<p></RequireAny>
```</p>

<p><code>RequireAny</code>の条件なのでいずれかに合致すればアクセスが許可される。<br/>
URIの指定は正規表現を使っておいた方が確実。</p>

<h1>Laravelの場合</h1>

<p>Laravelで同じようにURIを利用して制御したい場合は、制御対象のURIだけを許可してやるだけではダメだった。<br/>
理由はルーティングの仕組みにあって、Laravelの場合はアクセスされた際に一旦、<code>index.php</code>にリダイレクトさせてからLaravelを起動し、ルーティングをさせる仕組みになっている。<br/>
よって、<code>/index.php</code>を許可しておいてやらないと認証が通らなくなってしまう。</p>

<p>```
SetEnvIf Request_URI &ldquo;^/hoge/*&rdquo; valid-url
SetEnvIf Request_URI &ldquo;^/index.php&rdquo; laravel</p>

<p><RequireAny></p>

<pre><code>Require valid-user #ベーシック認証
Require env valid-url
Require env laravel
</code></pre>

<p></RequireAny>
```</p>

<p>ただしこの方法だと、<code>/index.php</code>への直接のアクセス(トップページ)は許可されてしまうので注意。<br/>
(とはいえ、読み込んでいる別ディレクトリのcssやjsや画像なんかは拒否される）<br/>
(<code>/</code>へのアクセスは拒否される。)</p>

<h1>参考</h1>

<ul>
<li><a href="http://www.nofuture.tv/diary/20130813.html">Apache 2.4のアクセス制御をもうちょっとマジメに見てみた &ndash; Days of Speed(2013-08-13)</a></li>
<li><a href="https://celeumu.com/articles/20171124001037">Apache2.4で一部のディレクトリのみBasic認証</a></li>
<li><a href="https://blog.e2info.co.jp/2016/09/04/aws_phpmyadmin_basic_ip_auth/">AWSに設置したphpMyAdminにBasic認証を設定/特定のIPアドレスによる制限 &ndash; ハマログ</a></li>
<li><a href="https://serverfault.com/questions/588096/apache-setenvif-failing-to-match-request-uri">Apache SetEnvIf failing to match Request_Uri</a></li>
<li><a href="http://3.1415.jp/kc47fh1k/">HTTPクライアントの接続元IPアドレスを知る</a></li>
</ul>


<p><code>SetEnvIf</code>で指定出来る要素は以下にドキュメントがあった。<br/>
<a href="https://httpd.apache.org/docs/2.4/ja/mod/mod_setenvif.html">mod_setenvif &ndash; Apache HTTP サーバ バージョン 2.4</a><br/>
<code>SetEnvIf ディレクティブ</code> のセクション</p>
]]></content>
  </entry>
  
</feed>
