<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-06-11T11:00:35+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Session Fixation]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/21/session-fixation/"/>
    <updated>2015-05-21T19:09:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/21/session-fixation</id>
    <content type="html"><![CDATA[<p>今更ながら、Session Fixationなるものを知ったのでメモ。</p>

<!-- more -->


<p>内容は以下、徳丸先生が詳しい。<br/>
<a href="http://blog.tokumaru.org/2009/01/introduction-to-session-fixation-attack.html">とくまるひろしのSession Fixation攻撃入門 | 徳丸浩の日記</a></p>

<p>日本語では、<code>セッション固定攻撃</code>と呼ばれているようで、<br/>
ログイン認証をセッションで行っているサイトに対して、何らかの方法でユーザーに意図した固定セッションIDを与えた状態でログインしてもらい、<br/>
攻撃者はそのIDでログインしたことにする、というもののよう。</p>

<p>対策としては以下いずれかになるよう。</p>

<blockquote><p>(1) セッション変数内に特定の値を常に与えるようにし、もしその値が無かった場合には正しくふられたセッションIDではないと判断する。<br/>
(セッションIDの正当性をセッション変数内に埋め込む)<br/>
(2) ログイン処理など、そのサイトでの本来のセッションの使用を行う時点で(重要な情報を持たせるときに)、セッションIDを変更する。
<a href="http://pentan.info/php/session_fixation.html">http://pentan.info/php/session_fixation.html</a></p></blockquote>

<p>2のセッションの付け替えは以下のようにする。</p>

<pre><code>session_start();
session_destroy();
session_start();
session_regenerate_id();
</code></pre>

<p>ログインが成功し、ログイン認証をセッションに格納する直前に付け替えを入れてやれば、<br/>
ログイン後には別のIDとなるので、攻撃側が用意した固定IDを回避することが出来る。</p>

<p>ただしこの、<code>session_regenerate_id</code>は結構な負荷がかかるようで、<br/>
連続して使用しているとセッションが切れてしまうらしい。<br/>
なので、連続的に実行されないようにする事が重要っぽい。<br/>
ログイン時に一回のみ実行されるようにしておけば特に問題なさそう。</p>

<h2>参考</h2>

<p><a href="http://canalize.jp/archives/009281.php">セッションハイジャック と session_regenerate_id( )関数 &ndash; Shoulder.jp</a> <br/>
<a href="http://pentan.info/php/session_gc.html">セッションの有効期間とか設定とか挙動とかを調べました &ndash; [PHP + PHP] ぺんたん info</a><br/>
<a href="http://pentan.info/php/session_fixation.html">セッション固定攻撃(session fixation) &ndash; [PHP + PHP] ぺんたん info</a><br/>
<a href="http://blog.ohgaki.net/session_regenerate_id_wo">ログイン後にsession_regenerate_id()を実行するだけで十分か? | yohgaki&#039;s blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]アウトバウンドメッセージ送信時のエラー]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/05/01/salesforce-outbound-xml/"/>
    <updated>2015-05-01T14:26:22+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/05/01/salesforce-outbound-xml</id>
    <content type="html"><![CDATA[<p>先日、アウトバウンドメッセージをPHPで受けとる方法を紹介したけれど、試しているとアウトバウンドメッセージの送信がSalesforce側から何度も試行されていることがわかった。</p>

<!-- more -->


<p>salesforce側のログを見ていると、以下のようなエラーが出ている。<br/>
<code>設定 &gt; 監視 &gt; アウトバウンドメッセージ</code></p>

<p><img src="/images/2015/05/outbound_error.jpg" alt="エラー" /></p>

<blockquote><p>org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.</p></blockquote>

<p>どうやら、PHP側の応答が、SOAPの形式に則ってないとsalesforce側でXMLの解析ができずにエラーが出てしまうっぽい。<br/>
なので、エラーが解消されるまで数回試行が続く、っぽい。</p>

<p>応答はXMLの形式でなければならないので、headerでXMLとしてやる必要がある。</p>

<pre><code>header("Content-Type: application/xml; charset=UTF-8");
</code></pre>

<p>また、返却するXMLは以下のような形でないといけないよう。</p>

<p>```
&lt;soapenv:Envelope xmlns:soapenv=&ldquo;<a href="http://schemas.xmlsoap.org/soap/envelope/">http://schemas.xmlsoap.org/soap/envelope/</a>&rdquo;></p>

<pre><code>&lt;soapenv:Body&gt;
    &lt;notificationsResponse xmlns="http://soap.sforce.com/2005/09/outbound"&gt;
    &lt;Ack&gt;true&lt;/Ack&gt;
&lt;/notificationsResponse&gt;
&lt;/soapenv:Body&gt;
</code></pre>

<p>&lt;/soapenv:Envelope>
```</p>

<p>というわけで、以下のようにPHPを書いてやればエラーは出ない。</p>

<p>```
&lt;?php
header(&ldquo;Content-Type: application/xml; charset=UTF-8&rdquo;);</p>

<p>//&mdash;何らかの処理&mdash;</p>

<p>$response = &lsquo;&lt;soapenv:Envelope xmlns:soapenv=&ldquo;<a href="http://schemas.xmlsoap.org/soap/envelope/">http://schemas.xmlsoap.org/soap/envelope/</a>&rdquo;>&lt;soapenv:Body><notificationsResponse xmlns="http://soap.sforce.com/2005/09/outbound"><Ack>true</Ack></notificationsResponse>&lt;/soapenv:Body>&lt;/soapenv:Envelope>&rsquo;;
echo $response;
```</p>

<h2>参考</h2>

<p><a href="http://www.tgerm.com/2014/08/testing-soap-outbound-messages-without-failures-saxexception.html">{!blog.concret.io}: Testing SOAP Outbound Messages without failures</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Salesforce]承認申請のアウトバウンドメッセージをPHPで受け取る]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/28/approval-process-outbound-massage/"/>
    <updated>2015-04-28T20:20:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/28/approval-process-outbound-massage</id>
    <content type="html"><![CDATA[<p>salesforceからのアウトバウンドメッセージの内容をPHPで受け取ってみた。</p>

<!-- more -->


<h2>アウトバウンドメッセージの設定</h2>

<p>前回作成したものの申請時のアクション部分に<code>アウトバウンドメッセージ</code>を追加。<br/>
<img src="/images/2015/04/outbound01.jpg" alt="" /></p>

<p>以下のように設定した。<br/>
<img src="/images/2015/04/outbound02.jpg" alt="" /></p>

<p>設定完了<br/>
<img src="/images/2015/04/outbound03.jpg" alt="" /></p>

<h2>PHPで受け取る</h2>

<p>アウトバウンドメッセージは<code>SOAP</code>で通信が行われる。<br/>
なので、XML。<br/>
以下のようにアクセスが記録されていた。</p>

<pre><code>at=info method=POST path="/liam_dnes.php?id=1" host=shrouded-island-xxxx.herokuapp.com request_id=01b99464-c9dc-4e15-aa19-xxxxxxx fwd="xxx.xxx.78.8" dyno=web.1 connect=1ms service=4ms status=200 bytes=189
</code></pre>

<p>どうやらPOSTでアクセスされているよう。<br/>
<code>$_POST</code>のままでは取得できなかった。<br/>
どうやら生のPOSTデータを取得する必要があるらしい。</p>

<p>以下で取得した。</p>

<pre><code>$data = file_get_contents( 'php://input' );
</code></pre>

<p>取得すると、以下のようなXMLが取得できた。</p>

<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;soapenv:Envelope xmlns:soapenv=&ldquo;<a href="http://schemas.xmlsoap.org/soap/envelope/">http://schemas.xmlsoap.org/soap/envelope/</a>&rdquo; xmlns:xsd=&ldquo;<a href="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</a>&rdquo; xmlns:xsi=&ldquo;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&rdquo;></p>

<pre><code>&lt;soapenv:Body&gt;
    &lt;notifications xmlns="http://soap.sforce.com/2005/09/outbound"&gt;
        &lt;OrganizationId&gt;00D10000000Zyxxxxx&lt;/OrganizationId&gt;
        &lt;SessionId xsi:nil="true"/&gt;
        &lt;PartnerUrl&gt;https://ap.salesforce.com/services/Soap/u/33.0/00D100000xxxxx&lt;/PartnerUrl&gt;
        &lt;ActionId&gt;04k100000008STGAA2&lt;/ActionId&gt;
        &lt;EnterpriseUrl&gt;https://ap.salesforce.com/services/Soap/c/33.0/00D100000xxxxx&lt;/EnterpriseUrl&gt;
        &lt;Notification&gt;
            &lt;Id&gt;04l1000000xxxxxx&lt;/Id&gt;
            &lt;sObject xsi:type="sf:Opportunity" xmlns:sf="urn:sobject.enterprise.soap.sforce.com"&gt;
                &lt;sf:Id&gt;0061000000cxxxxx&lt;/sf:Id&gt;
                &lt;sf:Name&gt;アウトバウンドのテスト商談&lt;/sf:Name&gt;
                &lt;sf:StageName&gt;Prospecting&lt;/sf:StageName&gt;
                &lt;sf:IsClosed&gt;false&lt;/sf:IsClosed&gt;
            &lt;/sObject&gt;
        &lt;/Notification&gt;
    &lt;/notifications&gt;
&lt;/soapenv:Body&gt;
</code></pre>

<p>&lt;/soapenv:Envelope>
```</p>

<p>アウトバウンドの設定は以下のような形。</p>

<p>ここからXMLをパースして、名前など設定した値を取得するには以下。</p>

<p>```
&lt;?php</p>

<p>$data = file_get_contents(&lsquo;php://input&rsquo;);
$xml = simplexml_load_string($data);</p>

<p>//ID
$notification = $xml->children(&lsquo;<a href="http://schemas.xmlsoap.org/soap/envelope/">http://schemas.xmlsoap.org/soap/envelope/</a>&rsquo;)&ndash;>Body->children(&lsquo;<a href="http://soap.sforce.com/2005/09/outbound">http://soap.sforce.com/2005/09/outbound</a>&rsquo;)&ndash;>notifications->Notification;
echo $notification->Id;</p>

<p>//パラメータ
$params = $notification->sObject->children(&lsquo;urn:sobject.enterprise.soap.sforce.com&rsquo;);
echo $params->Id;
echo $params->Name;
echo $params->IsClosed;
```</p>

<h2>参考</h2>

<p><a href="http://php.net/manual/ja/wrappers.php.php#wrappers.php.input">php://input</a><br/>
<a href="http://ivystar.jp/programming/php/what-is-phpinput/">「php://input」とは何？－POSTの生データ？ | アイビースター</a><br/>
<a href="https://amigotechnotes.wordpress.com/2013/11/16/parse-xml-with-namespace-by-simplexml-in-php/">Parse XML with namespace by SimpleXML in PHP | Amigo&#039;s Technical Notes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel5をpostgresqlでHerokuにデプロイ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/21/laravel5-on-heroku/"/>
    <updated>2015-04-21T10:59:17+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/21/laravel5-on-heroku</id>
    <content type="html"><![CDATA[<p>Laravel5をherokuに入れてみました。<br/>
ブラウザやディレクトリでの操作は一切なしで、黒い画面のみで作成してみました。</p>

<!-- more -->


<h2>mcrypt</h2>

<p>ローカルにてインストールしようとするとないと怒られたので導入。<br/>
また、PHPのバージョンが古い場合は、<a href="http://kayamemo.mrlittlebig.com/blog/2015/04/15/mac-update-php/">アップデートが必要</a>。</p>

<p>```
$ php -v                                                                                                           [ruby-2.1.2]
PHP 5.6.7 (cli) (built: Mar 22 2015 19:03:55)
Copyright &copy; 1997-2015 The PHP Group
Zend Engine v2.6.0, Copyright &copy; 1998-2015 Zend Technologies</p>

<p>$ brew search mcrypt                                                                                               [ruby-2.1.2]
libtomcrypt    mcrypt         php53-mcrypt   php54-mcrypt   php55-mcrypt   php56-mcrypt</p>

<p>$ brew install php56-mcrypt
&hellip;略&hellip;
==> Summary
  /usr/local/Cellar/php56-mcrypt/5.6.7: 3 files, 56K, built in 116 seconds
```</p>

<h2>laravelの導入</h2>

<p>インストール</p>

<p><code>
$ composer create-project laravel/laravel --prefer-dist laravel-sample-on-heroku
...略...
$ cd laravel-sample-on-heroku
</code></p>

<p>ドキュメントルートの設定</p>

<p><code>
$ touch Procfile
$ echo 'web: vendor/bin/heroku-php-apache2 public' &gt;&gt; Procfile
</code></p>

<p>Gitを作成</p>

<p><code>
$ git init
$ git add .
$ git commit -m 'init laravel'
</code></p>

<p>herokuアプリの作成</p>

<p><code>
$ heroku create laravel-sample-on-heroku
Creating laravel-sample-on-heroku... done, stack is cedar-14
https://laravel-sample-on-heroku.herokuapp.com/ | https://git.heroku.com/laravel-sample-on-heroku.git
Git remote heroku added
</code></p>

<p>このままデプロイすると、<code>package.json</code>がルートディレクトリにあるため、<code>nodejs</code>のアプリになってしまう。<br/>
なので、phpのビルドパックを追加。<br/>
<a href="https://github.com/heroku/heroku-buildpack-php">https://github.com/heroku/heroku-buildpack-php</a></p>

<p><code>
$ heroku config:set BUILDPACK_URL=https://github.com/heroku/heroku-buildpack-php
Setting config vars and restarting laravel-sample-on-heroku... done, v4
BUILDPACK_URL: https://github.com/heroku/heroku-buildpack-php
</code></p>

<blockquote><p>アプリの作成と同時にするには、<code>create</code>の後に、<code>--buildpack URL</code>を追加してやると一回で設定できる。<br/>
$ heroku create laravel-sample-on-heroku &mdash;buildpack URL xxx</p></blockquote>

<p>すでにリモートリポジトリに追加されているので、pushしてデプロイ。</p>

<pre><code>$ git push heroku master
</code></pre>

<p>ページを開くとすでに動作する状態。</p>

<pre><code>$ heroku open
</code></pre>

<p>完了！</p>

<h2>DBの設定</h2>

<p>アドオンを追加(無料)</p>

<pre><code>$ heroku addons:add heroku-postgresql:dev
</code></pre>

<p>DBの情報を取得</p>

<pre><code>$ heroku config | grep HEROKU_POSTGRESQL
HEROKU_POSTGRESQL_CRIMSON_URL: postgres://UserName:Password@Host.compute-1.amazonaws.com:Port/DatabaseName  
</code></pre>

<p>生成したDBをプライマリーに設定</p>

<pre><code>$ heroku pg:promote HEROKU_POSTGRESQL_CRIMSON_URL
Promoting HEROKU_POSTGRESQL_CRIMSON_URL (DATABASE_URL) to DATABASE_URL... done
</code></pre>

<p>ここからはファイル編集</p>

<pre><code>$ vi config/database.php
---
//29行目
'default' =&gt; 'mysql',
↓
'default' =&gt; 'pgsql',
---
//冒頭に追加
$url = parse_url(getenv("DATABASE_URL"));

$host = $url["host"];
$username = $url["user"];
$password = $url["pass"];
$database = substr($url["path"], 1);
---
//67行目から
'pgsql' =&gt; [
    'driver'   =&gt; 'pgsql',
    'host'     =&gt; $host,
    'database' =&gt; $database,
    'username' =&gt; $username,
    'password' =&gt; $password,
    'charset'  =&gt; 'utf8',
    'prefix'   =&gt; '',
    'schema'   =&gt; 'public',
],
</code></pre>

<p>pushしてデプロイ</p>

<pre><code>$ git add .
$ git commit -m 'setup Heroku PostgreSQL'
$ git push heroku master
</code></pre>

<p>最後に<a href="http://laravel3.kore1server.com/docs/database/migrations">マイグレーション</a>を実行</p>

<p><code>``
$ heroku run php artisan migrate
Running</code>php artisan migrate` attached to terminal&hellip; up, run.4728</p>

<hr />

<ul>
<li>  Application In Production!     *</li>
</ul>


<hr />

<p>Do you really wish to run this command? [y/N]y
Migration table created successfully.
Migrated: 2014_10_12_000000_create_users_table
Migrated: 2014_10_12_100000_create_password_resets_table
<code>``
</code>/auth/register<code>で、ユーザー登録画面。  
</code>/auth/login<code>でログイン。  
</code>/password/email`でパスワードリセットになる。<br/>
(メール送信は設定していないので出来ない)</p>

<p>一通りの設定はこれで完了！<br/>
あとはセッション保持に<a href="https://addons.heroku.com/memcachier">MemCachier</a>か<a href="https://addons.heroku.com/?q=redi">Redis To Go</a>の設定や、<br/>
メール送信用に<a href="https://addons.heroku.com/sendgrid">SendGrid</a>などが必要になると思う。</p>

<h2>サンプル</h2>

<p>作成したアプリは以下。</p>

<p><a href="http://laravel-sample-on-heroku.herokuapp.com">http://laravel-sample-on-heroku.herokuapp.com</a></p>

<h2>参考</h2>

<p><a href="http://qiita.com/MasatoYoshioka@github/items/1b4de4249dc40ff1d902">macosxのphpにmcryptをインストール &ndash; Qiita</a><br/>
<a href="http://www.slideshare.net/esolves/deploy-laravel-on-heroku">Deploy Laravel on Heroku</a><br/>
<a href="https://mattstauffer.co/blog/laravel-on-heroku-using-a-postgresql-database">Laravel on Heroku &ndash; Using a PostgreSQL database &ndash; MattStauffer.co</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[mac]macのPHPのバージョンをアップデートする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/15/mac-update-php/"/>
    <updated>2015-04-15T20:15:38+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/15/mac-update-php</id>
    <content type="html"><![CDATA[<p>とあるSDKをcomposer経由でインストールしようとすると、PHPのバージョンが古い、と怒られてしまった。<br/>
なので、macで5.6にしたメモ。</p>

<!-- more -->


<p>アップデート前。</p>

<p><code>
$ php -v
PHP 5.4.38 (cli) (built: Mar 19 2015 14:49:15)
Copyright (c) 1997-2014 The PHP Group
Zend Engine v2.4.0, Copyright (c) 1998-2014 Zend Technologies
</code></p>

<hr />

<p>基本的に以下のママ。<br/>
<code>homebrew</code>でインストールした。</p>

<p><a href="http://takemaru123.hatenablog.jp/entry/2014/11/27/224037">macにhomebrewでPHP5.6環境をインストールしてみる &ndash; たけまるの日記</a></p>

<p>まず、xcode-selectをインストールしておく。<br/>
(Xcode自体がインストールされていない場合はインストールが必要)<br/>
(理由はわかてない)</p>

<pre><code>$ xcode-select --install
</code></pre>

<p>すると、以下のメッセージが表示されて、ダイアログが表示された。</p>

<blockquote><p>xcode-select: note: install requested for command line developer tools</p></blockquote>

<p><img src="/images/2015/04/mac_php_update_1.png" alt="ダイアログ" /></p>

<p>インストール、を押すと規約同意画面に進み、インストールが始まる。</p>

<p><img src="/images/2015/04/mac_php_update_2.png" alt="規約同意" /><br/>
<img src="/images/2015/04/mac_php_update_3.png" alt="インストール中" /></p>

<p>インストール後に以下でhomebrewのリポジトリを作成。<br/>
(ここもよくわかってない)</p>

<pre><code>$ brew tap homebrew/php
$ brew tap homebrew/dupes
</code></pre>

<p>で、いよいよPHP5.6のインストール。</p>

<pre><code>$ brew install php56 --with-apxs2=/usr/sbin/apxs
~~~~~
==&gt; Summary
🍺  /usr/local/Cellar/php56/5.6.7: 500 files, 51M
</code></pre>

<p>で、ターミナルを再起動すると、無事、アップデートされました。</p>

<p><code>
$ php -v
PHP 5.6.7 (cli) (built: Mar 22 2015 19:03:55)
Copyright (c) 1997-2015 The PHP Group
Zend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies
</code></p>
]]></content>
  </entry>
  
</feed>
