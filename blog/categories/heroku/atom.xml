<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2017-09-22T15:19:00+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[heroku]PostgresとRedisの環境設定]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/09/21/heroku-postgres-redis/"/>
    <updated>2017-09-21T15:16:32+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/09/21/heroku-postgres-redis</id>
    <content type="html"><![CDATA[<p>LaravelをHerokuで使用する際に、Heroku PostgresとHeroku Redisの接続情報を環境変数から取得する設定のメモ。</p>

<!-- more -->


<h1>概要</h1>

<p>改めて。<br/>
Herokuでは標準のadd-onとして<a href="https://elements.heroku.com/addons/heroku-postgresql">Heroku Postgres</a>と<a href="https://elements.heroku.com/addons/heroku-redis">Heroku Redis</a>が用意されている。<br/>
クレジットカードさえ登録していれば無料で使えるので便利。</p>

<p>この接続情報はアドオンを登録した際に自動的に以下のような変数で登録がされる。</p>

<p><strong>Postgres</strong><br/>
<code>DATABASE_URL</code> = <code>postgres://username:password@hostname.amazonaws.com:5432/database</code></p>

<p><strong>Redis</strong><br/>
<code>REDIS_URL</code> = <code>redis://h:password@hostname.amazonaws.com:port_no</code></p>

<p>各種情報がURL形式で組み込まれているのだが、間違ってもこれを自分でバラしてそれぞれ個別に環境変数に入れる、などとしてはいけない。<br/>
というのも、この接続情報はPostgresやRedisにメンテナンスが入った際に前の接続情報は破棄され、新しい情報が同じ環境変数で設定されるため、<br/>
自前でバラして作ってしまうとその変更した情報に対応できなくなり、接続エラーとなってしまう。</p>

<p>よって、必ず自動でセットされる、<code>DATABASE_URL</code>や<code>REDIS_URL</code>を使うこと。<br/>
これはHerokuを使う際には常識として覚えておくこと。</p>

<h1>取得</h1>

<p>というわけで、それぞれの値を取得したURLからパースしてLaravel用に環境変数にセットする。<br/>
以下のように環境変数があればそれをパースして環境変数としてセットしてやるようにするのがスマートっぽい。<br/>
これだとローカルでは個別に<code>.env</code>ファイルで設定した値を使用してやることが出来る。</p>

<p><code>/config/database.php</code> の冒頭に書く。</p>

<p>```
//Postgres
if (getenv(&lsquo;DATABASE_URL&rsquo;)) {</p>

<pre><code>$url = parse_url(getenv('DATABASE_URL'));
putenv('DB_HOST='.$url['host']);
putenv('DB_PORT='.$url['port']);
putenv('DB_DATABASE='.substr($url["path"], 1));
putenv('DB_USERNAME='.$url["user"]);
putenv('DB_PASSWORD='.$url['pass']);
</code></pre>

<p>}</p>

<p>//Redis
if (getenv(&lsquo;REDIS_URL&rsquo;)) {</p>

<pre><code>$url = parse_url(getenv('REDIS_URL'));
putenv('REDIS_HOST='.$url['host']);
putenv('REDIS_PORT='.$url['port']);
putenv('REDIS_PASSWORD='.$url['pass']);
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カスタムドメイン取得とLet's Encrypt証明書とHeroku SSLと]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/08/04/customdomain-letsencrypt-herokussl/"/>
    <updated>2017-08-04T17:06:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/08/04/customdomain-letsencrypt-herokussl</id>
    <content type="html"><![CDATA[<p>Herokuへの証明書アップロード手順の確認のために、カスタムドメイン・証明書の取得から試してみた。<br/>
長い記事になりますが、備忘録として。</p>

<!-- more -->


<h1>ドメインの取得</h1>

<p>無料で独自ドメインを取得出来るという、 <a href="http://www.freenom.com/ja/index.html">freenom</a>を使用する。<br/>
(やはり無料だけあって色々とデメリットがあげられたりしているので、ご利用は自己責任で)<br/>
取得できるドメインは5種類で、 <code>.tk/.ml/.ga/.cf/.gq</code> となっている。</p>

<p>詳しい登録方法などは以下を参考にさせてもらいました。</p>

<ul>
<li><a href="http://qiita.com/teekay/items/135dc67e39f24997019e">無料のドメインを取得する（2016年10月） &ndash; Qiita</a></li>
</ul>


<p>今回は <code>.tk</code> のドメインで取得した。<br/>
ちなみに、<code>.tk</code>のドメインは90日間で25アクセス以下だった場合には登録が削除されるらしいので運用の際は注意。</p>

<p>以下のドメインで取得してみた。(もうドメイン登録はキャンセル済み）</p>

<blockquote><p>ssl-sni-test.tk</p></blockquote>

<p>ユーザー登録はメールアドレスからの登録にしたが、住所や名前などは必須となっていた。<br/>
以下が必須だった項目。</p>

<ul>
<li>first name</li>
<li>last name</li>
<li>address1</li>
<li>city</li>
<li>state</li>
<li>postcode</li>
<li>phone number</li>
<li>password</li>
</ul>


<p>登録すれば同時にドメインの申請も完了。</p>

<h2>ネームサーバとDNS</h2>

<p>freenomには無料で利用できるDNSサーバが用意されているのでそれを利用する。</p>

<p>上部メニューから <code>Services -&gt; My Domains</code> を選択。<br/>
編集したいドメインの、 <code>Manage Domain</code>をクリック。</p>

<p>タブメニューの <code>Management Tools -&gt; Nameservers</code>を選択。<br/>
<code>Use default nameservers</code>を選択して、<code>Change Nameservers</code>をクリック。<br/>
これで、freenomのネームサーバを使う設定に変更できた。<br/>
（デフォルトではfreenomのネームサーバを使うように設定されていないため、DNSの設定が出来なかった。）</p>

<p>あとは、タブメニューの <code>Manage Freenom DNS</code>を選択。<br/>
ここで、DNSの設定が可能となる。</p>

<h1>証明書の取得</h1>

<p>証明書は無料で発行出来る、 <code>Let</code>s Encrypt`を利用する。<br/>
証明書の発行には、ブラウザ上で発行出来るサービスがあるのでそちらを利用させてもらう。<br/>
以下に作者さんの詳しい説明があるので、そちらから。</p>

<ul>
<li><a href="http://qiita.com/tappie/items/76881fdf7996c57a105a">Let&#39;s Encrypt の証明書をブラウザ上で簡単取得 (dns-01 / ECDSA もあるよ) &ndash; Qiita</a></li>
</ul>


<p>基本、そのまま進めて問題ないが、１点だけ、秘密鍵はブラウザ上では作らずにローカルPC上で作成したものをアップした方がよさそう。<br/>
ブラウザ上で作ったものをHerokuにアップするとパスフレーズを解除しろ、と言われ、パスフレーズを解除しようとコマンドを入れるとエラーが出たりしたため、最初からパスフレーズがかかっていないものを作成し、アップロードした方が確実と思われる。</p>

<p><code>
$ openssl genrsa 2048 &gt; key.pem
</code></p>

<p>ドメインの所有証明は、<code>dns-01</code>の方法を使用した。<br/>
取得したチャレンジトークンをTXTレコードとしてDNSに登録する。</p>

<p>登録例</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Name </th>
<th align="left"> Type </th>
<th align="left"> TTL </th>
<th align="left"> Target </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>_acme-challenge.ssl-sni-test.tk.</code> </td>
<td align="left"> TXT </td>
<td align="left"> 14440 </td>
<td align="left"> <code>"L9Dlzt3Kzfu2mLYbmW2RTUdEzNBuNPiyyBt6yQyEjKk"</code> |</td>
</tr>
</tbody>
</table>


<p>結構すぐに反映された。<br/>
あとは証明書を発行するのみ。</p>

<h1>Herokuへアップロード</h1>

<p>Herokuのアプリに証明書を適用させるには2種類の方法がある。</p>

<ul>
<li><code>SSL Endpoint</code> : SSLアドオンを利用した方法 ($20/month)

<ul>
<li>Typeは <code>sni</code></li>
</ul>
</li>
<li><code>Heroku SSL</code> : Heroku標準の機能 (無料)

<ul>
<li>Typeは <code>endpoint</code></li>
</ul>
</li>
</ul>


<p><code>SSL Endpoint</code>は従来からの方法で、2016年末ごろに<code>Heroku SSL</code>が追加された。<br/>
なので、今後追加する場合には<code>Heroku SSL</code>を利用する方がよい。</p>

<p>ただし、<code>Heroku SSL</code>はFree Dynoで利用しているアプリには使用出来ないので注意。<br/>
今回は <code>Heroku SSL</code>を利用する。</p>

<h2>アップロード方法</h2>

<p>アップロード方法は管理画面からGUI操作で行うか、Heroku CLI経由でコマンドラインから行うかの2種類がある。</p>

<h3>管理画面からアップロードする</h3>

<p><code>Setting</code>から、<code>Domains and certificates</code>セクションにある、<code>Configure SSL</code>をクリック。</p>

<p><img src="/images/2017/08/ssl01.jpg" alt="" /></p>

<p>更新方法を聞かれるので、今回は<code>Manually</code>を選択。<br/>
<code>Automatically</code>はLet&rsquo;s Encryptの場合にのみ使える自動更新のオプションで、今回はLet&rsquo;s Enctyptなので利用出来るのだが、普通はマニュアルになるため今回もマニュアルにした。</p>

<p><img src="/images/2017/08/ssl02.jpg" alt="" /></p>

<p>アップロードするウインドウが表示されるので、ファイルをドラッグ。</p>

<p><img src="/images/2017/08/ssl03.jpg" alt="" /></p>

<p>アップするものは以下。</p>

<ul>
<li>証明書 (+中間証明書)</li>
<li>秘密鍵</li>
</ul>


<p>中間証明書は、Let&rsquo;s Encryptの場合だけなのかは不明だが、今回はなしでもアップすることが出来た。<br/>
通常は必要だと思われる（証明書発行会社のページには一緒にアップして下さい、とある）ので末尾に追加しておく。</p>

<p><img src="/images/2017/08/ssl04.jpg" alt="" /></p>

<p>無事、アップされると以下のようになる。</p>

<p><img src="/images/2017/08/ssl06.jpg" alt="" /></p>

<h3>コマンドからのアップロード</h3>

<p><code>certs:add</code>でアップ可能。コマンドのヘルプは以下。</p>

<p>```
$ heroku certs:add -h
Usage: heroku certs:add CRT KEY [flags]</p>

<p>add an SSL certificate to an app</p>

<p>Flags:
 -a, &mdash;app     (required) app to run command against
 -r, &mdash;remote  git remote of app to use
 &mdash;bypass      bypass the trust chain completion step
 &mdash;domains     domains to create after certificate upload
 &mdash;type        type to create, either &lsquo;sni&rsquo; or &lsquo;endpoint&rsquo;</p>

<p>Note: certificates with PEM encoding are also valid</p>

<p>Example:</p>

<pre><code>$ heroku certs:add example.com.crt example.com.key
</code></pre>

<p>Example (Certificate Intermediary):</p>

<pre><code> $ heroku certs:add intermediary.crt example.com.crt example.com.key
</code></pre>

<p>```</p>

<p>アップする。</p>

<p>```
$ heroku certs:add ssl-sni-test-cert.pem ssl-sni-test-server-nopass.key -a sni-test
Resolving trust chain&hellip; done
Adding SSL certificate to ⬢ sni-test&hellip; done
Certificate details:
Common Name(s): ssl-sni-test.tk
Expires At:     2017-11-02 02:12 UTC
Issuer:         /C=US/O=Let&rsquo;s Encrypt/CN=Let&rsquo;s Encrypt Authority X3
Starts At:      2017-08-04 02:12 UTC
Subject:        /CN=ssl-sni-test.tk
SSL certificate is verified by a root authority.
? Select domains you would like to add</p>

<p>=== Your certificate has been added successfully.  Add a custom domain to your app by running ⬢ heroku domains:add &lt;yourdomain.com>
```</p>

<p>途中、ドメインの選択する箇所があったが、一つしかないしそのままエンターでいけた。</p>

<p>コマンドからアップ状況を確認する。</p>

<p><code>
$ heroku certs -a sni-test
Name              Common Name(s)   Expires               Trusted  Type
────────────────  ───────────────  ────────────────────  ───────  ────
pteranodon-48202  ssl-sni-test.tk  2017-11-02 02:12 UTC  True     SNI
</code></p>

<h1>ドメインの設定</h1>

<p>Herokuへのドメイン追加、と、DNSの設定、の２つが必要。</p>

<h2>Herokuへのドメイン追加</h2>

<p>証明書をアップした時と同じく、<code>Setting</code>画面から追加する。</p>

<p><img src="/images/2017/08/ssl07.jpg" alt="" /></p>

<p>追加したいドメインを登録。</p>

<p><img src="/images/2017/08/ssl08.jpg" alt="" /></p>

<p>登録すると以下のようになる。</p>

<p><img src="/images/2017/08/ssl09.jpg" alt="" /></p>

<p>もちろん、コマンドからも登録可能。</p>

<p>```
$ heroku domains:add ssl-sni-test.tk -a sni-test
Adding ssl-sni-test.tk to ⬢ sni-test&hellip; done
 ▸    Configure your app&rsquo;s DNS provider to point to the DNS Target ssl-sni-test.tk.herokudns.com.
 ▸    For help, see <a href="https://devcenter.heroku.com/articles/custom-domains">https://devcenter.heroku.com/articles/custom-domains</a></p>

<p>The domain ssl-sni-test.tk has been enqueued for addition
 ▸    Run heroku domains:wait &lsquo;ssl-sni-test.tk&rsquo; to wait for completion
```</p>

<p>コマンドから確認すると以下のようになる。</p>

<p>```
$ heroku domains -a sni-test
=== sni-test Heroku Domain
sni-test.herokuapp.com</p>

<p>=== sni-test Custom Domains
Domain Name      DNS Target
───────────────  ─────────────────────────────
ssl-sni-test.tk  ssl-sni-test.tk.herokudns.com
```</p>

<h2>DNSの設定</h2>

<p>freenomからDNSの設定を行う。<br/>
Heroku側のドメイン追加で取得したDNS TargetをCNAMEとして登録する。以下のような形で追加した。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Name </th>
<th align="left"> Type </th>
<th align="left"> TTL </th>
<th align="left"> Target </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">  </td>
<td align="left"> CNAME </td>
<td align="left"> 14440 </td>
<td align="left"> <code>ssl-sni-test.tk.herokudns.com</code> |</td>
</tr>
</tbody>
</table>


<h1>アクセス</h1>

<p><code>https</code>でアクセスすると、無事、アクセス出来た。<br/>
SSLもLet&rsquo;s Encryptでちゃんと反映されていた。</p>

<p><img src="/images/2017/08/ssl10.jpg" alt="" /></p>

<h1>2つの証明書と2つのドメイン</h1>

<p>ここからは応用検証。<br/>
一つのHerokuアプリに2つのドメインを適用させ、それぞれに別々の証明書を適用させてみる。</p>

<h2>サブドメインの証明書</h2>

<p>先ほどと同じようにサブドメインの証明書を取得した。以下で取得する。</p>

<blockquote><p>add.ssl-sni-test.tk</p></blockquote>

<p>チャレンジトークンも変わるので、DNSレコードに2つ目のTXTレコードを追加する。</p>

<h2>Herokuへアップ</h2>

<p>管理画面から同じようにアップしてみたが、すでにアップされているものを置き換える事になるようで、複数の証明書をアップすることは出来なかった。<br/>
次にコマンドから追加してみるも、以下のようにエラーが出た。</p>

<p><code>
$ heroku certs:add cert.pem server.key -a sni-test
Resolving trust chain... done
Adding SSL certificate to ⬢ sni-test... !
 ▸    Only one SNI endpoint is allowed per app (try certs:update instead).
</code></p>

<p>どうやら証明書は一つしかアップ出来ないよう。<br/>
しかし、<code>Only one SNI endpoint</code>とあるように、<code>sni</code>のタイプには証明書は一つしかアップできない、とのことのよう。</p>

<h3>SSL Endpoint</h3>

<p>というわけで、SSL Endpointのアドオンを追加し、試してみた。<br/>
アドオンを追加する。(有料なので注意)</p>

<p><code>
$ heroku addons:create ssl:endpoint
</code></p>

<p>証明書をアップする。その際、typeに<code>endpoint</code>を指定する。</p>

<p>```
$ heroku certs:add cert.pem server.key &mdash;type endpoint -a sni-test
Resolving trust chain&hellip; done
Adding SSL certificate to ⬢ sni-test&hellip; done
⬢ sni-test now served by kanagawa-69051.herokussl.com
Certificate details:
Common Name(s): add.ssl-sni-test.tk
Expires At:     2017-11-02 02:49 UTC
Issuer:         /C=US/O=Let&rsquo;s Encrypt/CN=Let&rsquo;s Encrypt Authority X3
Starts At:      2017-08-04 02:49 UTC
Subject:        /CN=add.ssl-sni-test.tk
SSL certificate is verified by a root authority.
? Select domains you would like to add</p>

<p>=== Your certificate has been added successfully.  Update your application&rsquo;s DNS settings as follows
Domain           Record Type  DNS Target
───────────────  ───────────  ─────────────────────────────
ssl-sni-test.tk  ALIAS/ANAME  ssl-sni-test.tk.herokudns.com
```</p>

<p>やはりtypeが違うのでアップすることが出来た。<br/>
証明書のアップ状況を確認してみる。</p>

<p><code>
$ heroku certs -a sni-test
Name                 Endpoint                      Common Name(s)       Expires               Trusted  Type
───────────────────  ────────────────────────────  ───────────────────  ────────────────────  ───────  ────────
kanagawa-69051       kanagawa-69051.herokussl.com  add.ssl-sni-test.tk  2017-11-02 02:49 UTC  True     Endpoint
corythosaurus-87918  (Not applicable for SNI)      ssl-sni-test.tk      2017-11-02 02:12 UTC  True     SNI
</code></p>

<h2>ドメインの追加</h2>

<p>同じく、Herokuへドメインを追加する。<br/>
登録するTarget Nameは、<code>herokudns.com</code>のものでもよいし、<code>kanagawa-69051.herokussl.com</code>のSSL Endpointで設定されているものでもどちらでもよい。</p>

<p>DNSには以下のように追加した。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Name </th>
<th align="left"> Type </th>
<th align="left"> TTL </th>
<th align="left"> Target </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>add</code> </td>
<td align="left"> CNAME </td>
<td align="left"> 14440 </td>
<td align="left"> <code>kanagawa-69051.herokussl.com</code> |</td>
</tr>
</tbody>
</table>


<h2>アクセス</h2>

<p>これで無事、 <code>ssl-sni-test.tk</code> と、 <code>add.ssl-sni-test.tk</code> の両方へアクセス出来るようになった。<br/>
さらに、どちらにも別々の証明書を適用させる事が出来た。</p>

<h1>感想</h1>

<p>無料ドメインと無料証明書はかなり便利そう。ドメインの方は運用に不安が残るが、全く無料で独自ドメインのHTTPSのサイトが持てるというのはちょっと驚き。(Herokuは無料では不可能）</p>

<p>Herokuの場合はアプリを気軽に作る事が出来るため、一つのサーバ(アプリ)での運用、というのはあまりすることがないと思われる。<br/>
そのため、<code>sni</code> <code>endpoint</code> それぞれのタイプで一つしか証明書がアップ出来ないようになっているのだと思う。それだったらアプリを分ければいいよ、との考え方だと思うので、複数アップロードの出番はまずないと思われる。</p>

<h1>参考</h1>

<ul>
<li><a href="http://qiita.com/teekay/items/135dc67e39f24997019e">無料のドメインを取得する（2016年10月） &ndash; Qiita</a></li>
<li><a href="http://qiita.com/tappie/items/76881fdf7996c57a105a">Let&#39;s Encrypt の証明書をブラウザ上で簡単取得 (dns-01 / ECDSA もあるよ) &ndash; Qiita</a></li>
<li><a href="https://zenlogic.jp/user-support/knowledge/ssl/sni.html">SSL基礎知識 1つのサーバーで複数の証明書が使える、SNIって？｜Zenlogic &ndash; ファーストサーバ株式会社</a></li>
<li><a href="https://devcenter.heroku.com/articles/ssl">Heroku SSL | Heroku Dev Center</a></li>
<li><a href="https://devcenter.heroku.com/articles/ssl-endpoint">SSL Endpoint | Heroku Dev Center</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Herokuで独自ドメインを指定する際に使用するターゲット名]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/01/05/heroku-custom-domain/"/>
    <updated>2017-01-05T18:17:32+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/01/05/heroku-custom-domain</id>
    <content type="html"><![CDATA[<p>Herokuで独自ドメインを指定するには、CNAMEでHeroku側のドメインを指定して設定してやる必要がある。</p>

<!-- more -->


<ul>
<li><a href="http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain/">[heroku]herokuでのSSL設定とカスタムサブドメインの適用方法</a></li>
</ul>


<h1>少し前までのターゲット</h1>

<p>少し前まで（具体的には<a href="https://blog.heroku.com/announcing_heroku_free_ssl_beta_and_flexible_dyno_hours">SSLの設定がHerokuの標準機能に組み込まれる</a>まで）は、以下のような設定内容で設定していた。<br/>
（アプリ名を <code>appname</code> とし、設定するサブドメインは、<code>www.appname.com</code> とする)</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 種類 (Record) </th>
<th align="left"> 名前 (Name) </th>
<th align="left"> 内容 (Target) </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> CNAME </td>
<td align="left"> <code>www</code> </td>
<td align="left"> <code>appname.herokuapp.com</code></td>
</tr>
</tbody>
</table>


<h1>Heroku Free SSL導入後のターゲット</h1>

<h2>注意</h2>

<p>ここでの説明はあくまでも独自<strong>サブドメイン</strong>の設定方法となる。<br/>
ルートドメインをHerokuのアプリで使用したい場合は、別途PointDNSアドオンや、AWSのRoot53などのサービスを使用する必要があるが、ここでは割愛する（どれがデファクトスタンダードかまだ決まりきってない印象）。<br/>
なので、CNAMEでの設定となり、Aレコードでの設定ではないので注意。<br/>
(herokuは固定IPではないので、通常はAレコードは使用出来ない）</p>

<h2>前提</h2>

<p>今まで、Herokuに独自のSSL証明書を適用させるためには <a href="https://elements.heroku.com/addons/ssl">Heroku SSLのアドオン</a> が必要だったのだが、<br/>
<strong>FreeDyno以外の有料アプリに限り</strong>デフォルトでSSLの設定が出来るようになった。<br/>
しかもブラウザ上からドラッグアンドドロップでファイルをアップ出来るようになったため無料かつ便利になった。</p>

<p>(無料Dynoでの利用の場合はアドオンの追加が必要になるのだが、一番安い<code>hobby dyno</code>は月$7/1dyno、で、SSLアドオン 月$20、なので、有料dynoにした方が安いため、アドオンで設定するメリットはほぼないと思われる）</p>

<h2>ターゲットの変更</h2>

<p>そのタイミングで、CNAMEとして設定するターゲット名も変更になった。<br/>
今までは、 <code>hokkaido-1212.herokussl.com</code> など、都道府県が入ったようなランダムな名前だったのだが、新しく、 <code>www.appname.com.herokudns.com</code> というような名前となった。<br/>
以下のようになるよう。</p>

<p><code>
{設定するサブドメイン}.herokudns.com
</code></p>

<h2>ターゲット名</h2>

<p>よって、CNAMEでの設定も内容の部分が変更となる。<br/>
このターゲット名だが、<strong>SSLを使用の有無、無料・有料Dynoに関わらず</strong>、一律で <code>herokudns.com</code> の指定となる。</p>

<p>Herokuの設定画面から設定した場合は以下のような感じで表示がされるので、<code>DNA Target</code>の部分を使用すればよい。</p>

<p><img src="/images/2017/01/custom_domain01.jpg" alt="" /></p>

<p>コマンドで確認した場合は以下のような感じになる。</p>

<p>```
$ heroku domains -a appname
=== appname Heroku Domain
appname.herokuapp.com</p>

<p>=== appname Custom Domains
Domain Name      DNS Target
───────────────  ─────────────────────────────
www.appname.com  www.appname.com.herokudns.com
```</p>

<h2>CNAMEの設定</h2>

<p>よって、設定内容は以下のようになる。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 種類 (Record) </th>
<th align="left"> 名前 (Name) </th>
<th align="left"> 内容 (Target) </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> CNAME </td>
<td align="left"> <code>www</code> </td>
<td align="left"> <code>www.appname.com.herokudns.com</code></td>
</tr>
</tbody>
</table>


<h1>参考</h1>

<ul>
<li><a href="https://devcenter.heroku.com/articles/custom-domains">Custom Domain Names for Apps | Heroku Dev Center</a></li>
<li><a href="http://www.ucom.ne.jp/enterprise/dnsmanual/p4_4_1_4.html">DNS設定ツールマニュアルWEB</a>

<ul>
<li>CNAME設定がどんなものなのかのイメージに</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuにComodoで取得したSSL証明書を反映させる]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/07/heroku-comodo-ssl/"/>
    <updated>2016-09-07T10:27:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/07/heroku-comodo-ssl</id>
    <content type="html"><![CDATA[<p>ちょっとつなげ方とかが特殊だったのでメモ。</p>

<!-- more -->


<p><a href="https://comodo.jp/">トップページ | COMODO JAPAN  | SSL 証明書</a></p>

<p>通常の流れであれば、取得した証明書の末尾に、対応している中間CA証明書をくっつけて、秘密鍵と共にアップすればOK。<br/>
<a href="http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain/">[heroku]herokuでのSSL設定とカスタムサブドメインの適用方法 &ndash; KayaMemo</a></p>

<p>しかし、Comodoという発行会社で取得したSSLの場合は以下のような内容で4つのファイルが送られてくる。</p>

<ul>
<li>AddTrustExternalCARoot.crt (ルート証明書)</li>
<li>COMODORSAAddTrustCA.crt    (中間証明書 その1)</li>
<li>COMODORSADomainValidationSecureServerCA.crt (中間証明書 その2)</li>
<li>STAR_example_com.crt   (サーバ証明書)</li>
</ul>


<p>アップする際にはこれらを全てつなげたファイルが必要になるよう。<br/>
そしてそのつなげ方にも順番があるようで、下から順番に末尾に追加していく形。<br/>
コマンドは以下となる。</p>

<p><code>
$ cat STAR_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt &gt; STAR_example_com-bundle.pem
</code></p>

<p>これで全てつなげたファイル、 <code>STAR_example_com-bundle.pem</code> が出来上がる。<br/>
あとは、秘密鍵と共にアップするだけ。<br/>
(秘密鍵は、 <code>server.key</code> とする）</p>

<p><code>
$ heroku certs:add STAR_example_com-bundle.pem server.key -a YOUR_APP
</code></p>

<h2>参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/26100642/heroku-comodo-ssl-and-it-not-working">Heroku Comodo SSL and it not working? &ndash; Stack Overflow</a></li>
<li><a href="http://qiita.com/white_aspara25/items/d9a1f99e8abdee0b5450">ELB の ComodoSSL 証明書を更新 &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku] confファイルでのリダイレクトを設定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/01/heroku-cgi-bin-redirect/"/>
    <updated>2016-09-01T19:51:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/01/heroku-cgi-bin-redirect</id>
    <content type="html"><![CDATA[<p>herokuで構築したサイトで、ドキュメントルートにある、 <code>/cgi-bin/</code> 以下にある特定のファイルへのアクセスがあった場合に、別のディレクトリへリダイレクトさせて欲しい、という要件があった。<br/>
普通に設定しようと思ったらかなり深い話になったので備忘録。</p>

<!-- more -->


<p><code>/cgi-bin/hoge/hoge.php</code> を、<br/>
<code>/abc/hoge/hoge.php</code> へリダイレクトするとする。<br/>
(cgi-binディレクトリからabcディレクトリへリダイレクト)</p>

<h1>htacessでリダイレクト</h1>

<p>まずは何も考えずに <code>.htaccess</code> を利用してのリダイレクトを設定する。</p>

<p><code>
RewriteEngine on
RewriteRule ^cgi-bin/hoge/hoge.php$ /abc/hoge/hoge.php [R=301,L]
</code></p>

<p>これでアクセスしてみるも、 Not Found の表示。</p>

<p>試しに、<code>/cgi-bin/</code> のディレクトリを作り、その中にファイルを設置してアクセスしてみるも、同じくNot Found。<br/>
リダイレクト以前に、<code>/cgi-bin/</code> ディレクトリ自体にアクセスが出来ていない。</p>

<h1>cgi-bin</h1>

<p>apacheのデフォルト設定では、 <code>/cgi-bin/</code> ディレクトリは別のディレクトリへエイリアスが貼られている事が多いような記述があった。<br/>
セキュリティ的にドキュメントルートのcgi-binには直接アクセスさせないようになっているらしい。</p>

<p><a href="http://www.adminweb.jp/apache/cgi/index1.html">CGI用エイリアスの設定(ScriptAlias) &ndash; CGIの利用 &ndash; Apache入門</a></p>

<p>Herokuもこの設定が行われているらしく、PHP環境のherokuのconfファイルを確認すると、以下のような設定が書かれている。</p>

<p><code>
ScriptAlias /cgi-bin/ "/app/.heroku/php//share/apache2/cgi-bin/"
</code></p>

<p>そのため、ドキュメントルート以下のcgi-binディレクトリにファイルをおいても、上記ディレクトリには該当のファイルがなく、not foundとなっていたよう。</p>

<p>さらに、htaccessよりも、confファイルの方が早く呼ばれるため、htaccessでのリダイレクトが効く前に上記にエイリアスで飛ばされ、htaccessによるリダイレクトも効かなかった事が原因だった。</p>

<h1>confファイル</h1>

<p>herokuのPHPのビルドパックでは、Procfileにて任意のconfファイルを読みこませる事が出来るよう。
そこで、そのconfファイルにてリダイレクト設定を書くことで対応する。</p>

<h2>Procfile</h2>

<p>Procfileでの設定内容のオプションなどは、PHPのビルドパックのソース内に書かれている。</p>

<p><a href="https://github.com/heroku/heroku-buildpack-php/blob/master/bin/heroku-php-apache2#L46">https://github.com/heroku/heroku-buildpack-php/blob/master/bin/heroku-php-apache2#L46</a></p>

<p>このヘルプの通り、以下の書式で記述することが可能。</p>

<p><code>
web: vendor/bin/heroku-php-apache2 [options] [&lt;DOCUMENT_ROOT&gt;]
</code></p>

<h2>confファイルの読み込み</h2>

<p>任意のconfファイルを読みこませるには、2つのオプションがある。<br/>
一つは、全く新しいconfファイルを読みこませる方法。これには、小文字のcを使用する。</p>

<p><code>
-c &lt;httpd.conf&gt;
</code></p>

<p>これは既存の設定を全て上書きするため、正しく設定出来ていない場合はアプリケーションの起動に失敗するので注意が必要。<br/>
デフォルトで読み込まれているconfファイルは以下となる。</p>

<p><a href="https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/heroku.conf">https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/heroku.conf</a></p>

<p>これはあまり指定することはないと思われる。</p>

<p>もう一つは、既存のconfファイルに追加するもの。<br/>
こちらは、大文字のCを使う。</p>

<p><code>
-C &lt;httpd.inc.conf&gt;
</code></p>

<p>デフォルトで読み込まれているファイルは以下となる。
<a href="https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/default_include.conf">https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/default_include.conf</a></p>

<p>このファイルではディレクトリインデックスの設定のみが書かれている状態。
このように、設定したい内容を記述したファイルを作成し、大文字のCオプションで読み込ませることで既存の設定に追加で反映が出来る。</p>

<h2>Procfileでの設定</h2>

<p>アプリのルートに、 <code>my_app.conf</code> ファイルを作成し読み込ませるとする。<br/>
また、ドキュメントルートは <code>htdocs</code> で設定したい場合は、以下の様な内容となる。</p>

<p><code>
web: vendor/bin/heroku-php-apache2 -C ./my_app.conf htdocs
</code></p>

<p>ファイルのパスは、 <code>/app</code> からの相対パスでの指定となる。<br/>
これでアプリの起動時に、 <code>my_app.conf</code> ファイルが読み込まれることとなる。</p>

<h2>confファイルでのリダイレクト</h2>

<p>そういうわけで、confファイル内に直接リダイレクトの設定を記述する。<br/>
１点注意点としては、 <code>htaccess</code>による設定の場合は、相対パスで記述する場合は先頭の <code>/</code> が必要ないのだが、<br/>
confファイルによる設定の場合は、先頭に <code>/</code> が必要となる。</p>

<p><a href="http://ysklog.net/mod-rewrite/related05.html">【mod_rewrite】「.htaccess」と「httpd.conf」での設定による違い &#8211; mod rewrite</a></p>

<p>よって、以下のように記述する。</p>

<p><code>
RewriteEngine on
RewriteRule ^/cgi-bin/hoge/hoge.php$ /abc/hoge/hoge.php [R=301,L]
</code></p>

<p>ちなみに、デフォルトで読み込まれているファイルに記述されている、ディレクトリインデックスの設定を記述せずに読み込ませると、その設定が消えてしまい、<code>/</code> でアクセスした場合には、 <code>index.html</code> が最初に呼び出されるようになってしまう。<br/>
よって、ディレクトリインデックスの設定も合わせて書いておくと挙動が変わらずに設定できる。
一応、全文は以下。</p>

<p>```
DirectoryIndex index.php index.html index.htm</p>

<p>RewriteEngine on
RewriteRule ^/cgi-bin/hoge/hoge.php$ /abc/hoge/hoge.php [R=301,L]
```</p>

<h2>参考</h2>

<ul>
<li><a href="http://ysklog.net/mod-rewrite/related02.html">【mod_rewrite】「httpd.conf」での設定方法 &#8211; mod rewrite</a></li>
<li><a href="https://devcenter.heroku.com/articles/custom-php-settings#apache">Customizing Web Server and Runtime Settings for PHP | Heroku Dev Center</a></li>
</ul>


<h1>まとめ</h1>

<p>cgi-binディレクトリからリダイレクト、というのは実際の要件としてはめったにあることではないけれど、herokuのPHPの設定として、confファイルをカスタマイズしたい要件はあると思う。<br/>
実際、htaccessでのリダイレクトより、confファイルでのリダイレクトのほうが早いようなので出来るならそっちの方がよかったりするだろうし。<br/>
herokuは簡単に利用出来る反面、設定が触れずガチガチだと思われガチだけど、結構設定はいじれたりする。</p>
]]></content>
  </entry>
  
</feed>
