<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2014-10-27T18:51:11+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[salesforce]apex Rest APIでPOSTでデータを送信する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/10/27/apex-rest-post/"/>
    <updated>2014-10-27T18:49:51+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/10/27/apex-rest-post</id>
    <content type="html"><![CDATA[<p>getでは送信したデータはすぐに取得できたのですが、<br/>
postでの送信方法とデータ取得方法がわからずに迷走しまいした。<br/>
結論は、送信側の話、だったのですが。</p>

<!-- more -->


<p>GETの場合は以下のコードで取得可能でした。<br/>
簡単。</p>

<p>送信データ</p>

<pre><code>?userid=123&amp;name=hoge
</code></pre>

<p>apex</p>

<pre><code>@RestResource(urlMapping='/GetDataSample/test')

global with sharing class GetDataSampleAPI {
    @HttpGet
    global static String doGet(){
        RestRequest req = RestContext.request;
        String userid = req.params.get('userid');
        String name = req.params.get('hoge');
    }
}
</code></pre>

<p>実は、POSTの場合も、apexのコードは全く同じで取得する事が出来ました。<br/>
以下、取得出来たコードです。</p>

<pre><code>@RestResource(urlMapping='/GetDataSample/test')

global with sharing class GetDataSampleAPI {
    @HttpPost
    global static String doPost(){
        RestRequest req = RestContext.request;
        String userid = req.params.get('userid');
        String name = req.params.get('hoge');
    }
}
</code></pre>

<p>ただし、送信する際にヘッダーを正しく指定してやったり、送信形式に注意してやる必要がありました。<br/>
PHPのcurlで実装していたのですが、大いに迷走していたのは、salesforce側の話ではなく、<br/>
PHPでの送信方法の問題でしたとさ…。</p>

<p>送信出来たコード<br/>
(<a href="https://github.com/nkjm/Force.com-OAuth-Toolkit-for-PHP">このライブラリ</a>を使用して送信する前提)</p>

<pre><code>$url = "$oauth-&gt;instance_url/services/apexrest/GetDataSample/test";
$curl = curl_init($url);

$POST_DATA = array(
    'userid' =&gt; '123',
    'hoge' =&gt; 'fugafuga'
);

curl_setopt($curl, CURLOPT_POST, TRUE);
curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($POST_DATA));
curl_setopt($curl, CURLOPT_HEADER, false);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-type: application/x-www-form-urlencoded;charset=UTF-8', "Authorization: OAuth " . $oauth-&gt;access_token));

$output= curl_exec($curl);
curl_close($curl);
</code></pre>

<p>ポイントは以下の２つです。</p>

<p>１）<br/>
<code>Content-type</code>を、<code>application/x-www-form-urlencoded</code>という、POSTでデータを送信する際の標準タイプを指定しています。<br/>
通常はデフォルトでこれなのですが、salesforceのAPIにPOSTする場合は明示的に指定してやる必要があるようです。(たぶん)<br/>
ちなみに、apex restは、<code>multipart/form-data</code>タイプはサポートしていないようです。</p>

<p>２）<br/>
１のタイプで指定してやると、送信するデータは<code>userid=123&amp;hoge=fugafuga</code>のように、GETと同じ形で取得できるようになるようです。<br/>
なので送信する際にそのような形に変換してやる必要があるようで、それが以下の記述となります。</p>

<pre><code>curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($POST_DATA));
</code></pre>

<h3>参考</h3>

<p><a href="http://qiita.com/khirose/items/870ffec6ce4562f54c9d">PHP小ネタ &ndash; PHPのcurlでPOST &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]sandboxでメールが送られない]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/10/22/send-mail-setting-sandbox/"/>
    <updated>2014-10-22T11:49:53+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/10/22/send-mail-setting-sandbox</id>
    <content type="html"><![CDATA[<p>salesfoceのsandboxでワークフローメールを作成していたのですが、<br/>
何回やってメールが送信されない。<br/>
ワークフローは間違ってないし、有効化もできてるし……と思っていたら、設定の問題でした。</p>

<!-- more -->


<p>ググってみると、<code>メール管理</code>の<code>送信</code>から設定すると書いてあるのですが、そんなが項目ない。
そもそもの権限の問題かと思っていたら、いつからか名前が変わっているよう。<br/>
ググってるとよくある……。</p>

<p><code>管理</code>&ndash;><code>メール管理</code>&ndash;><code>配信可能性</code><br/>
に、あった。配信可能性、って。</p>

<p><img src="http://kayakuguri.github.io/images/2014/10/send_mail_setting.jpg" alt="配信可能性" /></p>

<p>この中で、<code>アクセス権</code>を、<code>システムメールのみ</code>から、<code>すべてのメール</code>に変更し、保存する。<br/>
これでメールの送信が出来るようになった。</p>

<h3>参考</h3>

<p><a href="http://dackdive.hateblo.jp/entry/2014/01/26/165752"> [salesforce] Sandbox組織だとメール通知ができない問題 &ndash; dackdive&#39;s blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apexで割り算をしたら整数になった]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/10/21/apex-decimal/"/>
    <updated>2014-10-21T16:44:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/10/21/apex-decimal</id>
    <content type="html"><![CDATA[<p>タイトル通り、apex上で割り算をしたら整数になってしまったんですね。<br/>
単純に型付け言語による仕様だったのですが、ちょっとハマったのでメモ。</p>

<!-- more -->


<p>最初、記述したのが以下のコード</p>

<pre><code>Decimal a = 1 / 2;
System.debug(a);  //0
</code></pre>

<p>これだと、<code>0</code>が出力されます。<br/>
<code>Decimal</code>は小数まで表示できる型なのになんで？？？<br/>
と思ったんですが、計算している、<code>1</code>とか<code>2</code>が、<code>Integer</code>型、ってことなんですね。<br/>
なので、これを<code>Decimal</code>型にしてやると計算できます。</p>

<pre><code>Decimal a = Decimal.valueOf(1) / Decimal.valueOf(2);
System.debug(a);  //0.5
</code></pre>

<p>しかし数字を書きたいだけなのにいちいちキャストするのはめんどう。<br/>
なので、以下でも大丈夫。</p>

<pre><code>Decimal a = 1.0 / 2.0;
System.debug(a);  //0.5
</code></pre>

<p>小数点をつけると<code>Decimal</code>型になるようです。</p>

<p>ちなみにやりたかったことは、<code>Datetime</code>型の現在時間を日本時間(GMT+9)で表示することです。</p>

<pre><code>Datetime.now() + (9.0/24.0)
</code></pre>

<p><code>Datetime</code>型の足し算は1日単位で行われるため、24で割ると時間になります。<br/>
しかし、小数点にしないと<code>0</code>になってしまい計算できませんでした。<br/>
<code>format</code>をつかってフォーマットしてしまうと文字列になってしまうため、足し算で対応しています。</p>

<p>・<code>format</code>を使った場合</p>

<pre><code>Datetime.now().format('yyyy-MM-dd hh:mm', 'JST');
</code></pre>

<p><a href="https://sites.google.com/site/odekakeshimasyo/salesforceapexdatetime">Salesforce Apex 日付 時間 &ndash; おでかけしましょ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]リッチテキストエリアに保存された画像を一般公開する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/10/16/forcecom-sites-profile/"/>
    <updated>2014-10-16T17:45:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/10/16/forcecom-sites-profile</id>
    <content type="html"><![CDATA[<p>結論から言うと、権限設定の問題でした。</p>

<!-- more -->


<p>具体的にしかかったことは以下です。</p>

<ul>
<li>キャンペーンの情報をvisualforceでsitesを使って表示</li>
<li>カスタム項目でリッチテキストエリアを作成し、その画像を表示</li>
</ul>


<p>リッチテキストエリアに保存された内容は以下のような形で取得できました。</p>

<pre><code>&lt;img alt=\"ユーザが追加した画像\" src=\"/my-Home/servlet/rtaImage?eid=701O00000007l1s&amp;amp;feoid=00NO0000001Abk2&amp;amp;refid=0EMO000000004py\" style=\"\"&gt;&lt;/img&gt;
</code></pre>

<p>これを、公開しているサイトのURLにくっつけてアクセスしてみました。</p>

<p>例：</p>

<blockquote><p><a href="https://my-domain.cs6.force.com/my-Home/servlet/rtaImage?eid=701O00000007l1s&amp;feoid=00NO0000001Abk2&amp;refid=0EMO000000004py">https://my-domain.cs6.force.com/my-Home/servlet/rtaImage?eid=701O00000007l1s&amp;feoid=00NO0000001Abk2&amp;refid=0EMO000000004py</a></p></blockquote>

<p>しかし、以下のような画像が表示されました。</p>

<p><img src="http://kayakuguri.github.io/images/2014/10/rich-text-img.png" alt="not avaiable" /></p>

<p>どうやら権限がないことはわかっていたのですが、どこをどう触っていいやら。<br/>
いろいろ見たあげく、以下の設定でいけました。</p>

<p><a href="http://www.kokyakukanri.info/salesforce/blog/2010/11/visualforce-3.html">Visualforceページの公開 &ndash; セールスフォースお助け隊ブログ | Salesforce</a></p>

<p>設定 &ndash;> 開発 &ndash;> サイト</p>

<p><img src="http://kayakuguri.github.io/images/2014/10/rich-text-img-2.jpg" alt="サイト" /></p>

<p>公開しているサイトの<code>サイトの表示ラベル</code>をクリック</p>

<p><img src="http://kayakuguri.github.io/images/2014/10/rich-text-img-3.jpg" alt="サイト" /></p>

<p>サイトの詳細で、<code>公開アクセス設定</code>をクリック</p>

<p><img src="http://kayakuguri.github.io/images/2014/10/rich-text-img-4.jpg" alt="サイト" /></p>

<p><code>編集</code>をクリックし、</p>

<p><img src="http://kayakuguri.github.io/images/2014/10/rich-text-img-5.jpg" alt="サイト" /></p>

<p><code>標準オブジェクト権限</code>の<code>キャンペーン</code>の<code>参照</code>をチェックして保存。</p>

<p><img src="http://kayakuguri.github.io/images/2014/10/rich-text-img-6.jpg" alt="サイト" /></p>

<p>これでアクセス出来るようになりました。</p>

<p>今回はキャンペーンオブジェクトの話でしたが、<br/>
<code>標準オブジェクト権限</code>と<code>カスタムオブジェクト権限</code>が権限設定の箇所なので、<br/>
その他のオブジェクトについても設定が可能です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]SOQLで子リレーションの情報を取得する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/10/15/soql-relation/"/>
    <updated>2014-10-15T17:42:17+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/10/15/soql-relation</id>
    <content type="html"><![CDATA[<p>SOQLにて、あるオブジェクトの子リレーションになっているオブジェクトの情報を取得したい場合の話です。</p>

<!-- more -->


<p>子オブジェクトの参照名は、カスタムオブジェクトの場合は、<code>__r</code>となっていて、<br/>
標準オブジェクトは、お尻に<code>s</code>をつける形となっています。(だいたい)</p>

<p>今回はあまり例で見ることのなかった、<code>campaign</code>、<code>campaignmember</code>で例を示します。</p>

<p>とあるキャンペーンのキャンペーンメンバーのデータを取得する場合、以下のようなSOQLで取得できます。</p>

<pre><code>Select id, (Select cm.id From CampaignMembers cm) From Campaign
</code></pre>

<p>これを開発者コンソールの、Query Editorで実行してみると、以下の様なデータが取得できます。<br/>
(1レコード例)</p>

<pre><code>id: 701O00000007osrIAA
CampaignMembers: [{"Id":"00vO0000002B00XIAS"},{"Id":"00vO0000002B00SIAS"}]
</code></pre>

<p>これをapex上で使用するには、<code>CampaignMmber</code>が配列で入ってくるので、<br/>
for文で回して取得してやる必要があります。<br/>
以下は、３つの<code>campaignID</code>から取得したデータの<code>CampaignMember</code>の<code>status</code>を取得しています。</p>

<pre><code>List&lt;String&gt; campid = new List&lt;String&gt;();
campid.add('701O00000007orzIAA');
campid.add('701O00000007osrIAA');
campid.add('701O00000007l1sIAA');
String soql_c = 'SELECT id,type, (Select Status From CampaignMembers) FROM Campaign WHERE id=:campid';

List&lt;Campaign&gt; campRes;
campRes = Database.query(soql_c);

for(Campaign cdata : campRes){
    for(CampaignMember cmdata : cdata.CampaignMembers){
        System.debug(cmdata.Status);
    }
}
</code></pre>

<h3>参考</h3>

<p><a href="http://blog.flect.co.jp/salesforce/2010/07/soql-3dd0.html">セールスフォースの豆知識: SOQLでのリレーションの辿り方</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]ListとSet]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/10/14/list-set-map/"/>
    <updated>2014-10-14T19:12:55+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/10/14/list-set-map</id>
    <content type="html"><![CDATA[<p>Apexで、配列であるListで重複したデータを取り除きたい、と思ったのだけれど、<br/>
Listじゃなく、Setでやれば重複が許されなかった。</p>

<!-- more -->


<p>JAVAの場合は<code>HashSet</code>というものを使うことで重複したデータが入らないように出来るそう。<br/>
<a href="http://javatechnology.net/java/duplicate-hashset/">Javaの重複文字列の削除方法 | ジャイアントモリンキーのjavaテック</a></p>

<p>これが、Apexの場合は、<code>Set</code>型がデフォルトで、<code>HashSet</code>になっているよう。<br/>
ちなみに、<code>Map</code>も重複が許されない、<code>HashMap</code>のよう。</p>

<p><a href="http://blog.livedoor.jp/minoaw/archives/1703075.html">[ApexCode]コレクション : minoawのブログ</a></p>

<p><a href="https://developer.salesforce.com/page/JP:An_Introduction_to_Apex">Apex コードの概要</a><br/>
コレクション型の部分</p>

<blockquote><p>Set は、プリミティブ型の集合であり、順序の指定はなく、要素の重複は許されません。<br/>
List は、要素の集合です。要素間の順序を保持したい場合に使用します。要素の重複は許されます。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mavericksにアップデートしたらターミナルが起動しなくなった]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/10/06/zsh-reinstall/"/>
    <updated>2014-10-06T12:24:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/10/06/zsh-reinstall</id>
    <content type="html"><![CDATA[<p>今更ながらですが、Mavericksにアップデートしたらターミナルが起動しなくなりましたよ。<br/>
これが嫌でアップデートしてなかったのですが、やはり起こってしまったので、対応したメモ。</p>

<!-- more -->


<p>まずは、ここの通りに。</p>

<p><a href="http://qiita.com/crispy/items/70367cd7e97dd4e0a60d">Maverickに上げたらターミナルが起動しない問題</a></p>

<p>ターミナルのアプリの環境設定から、<br/>
<code>起動 -&gt; 開くシェル -&gt; コマンド(完全パス)</code><br/>
に、<code>/bin/zsh</code>を指定。</p>

<p>これで、ターミナルは動作するようになるので、以下の通りに叩いた。</p>

<pre><code>$ brew update
$ brew upgrade
</code></pre>

<p>これがかなり時間がかかった。<br/>
しかしまだエラーが。</p>

<pre><code>dyld: Library not loaded: /usr/local/lib/libgdbm.4.dylib
  Referenced from: /usr/local/bin/zsh
  Reason: image not found
zsh: trace trap  tmux
</code></pre>

<p>次は以下を参考。</p>

<p><a href="http://umegusa.hatenablog.jp/entry/2012/07/21/155637">teminalが動かなくなってしまいました</a></p>

<p>最新版は、1.11ってことで、以下で追加</p>

<pre><code>$ wget ftp://ftp.gnu.org/pub/gnu/gdbm/gdbm-1.11.tar.gz 
$ tar zxfv gdbm-1.11.tar.gz
</code></pre>

<p>手順に従って、インストール。</p>

<pre><code>$ cd gdbm-1.11
$ ./configure --prefix=/usr/local
$ make
$ make install
</code></pre>

<p>これで解決したけれど、また別のエラーが。</p>

<pre><code>dyld: Library not loaded: /usr/local/lib/libpcre.1.dylib
  Referenced from: /usr/local/bin/zsh
  Reason: image not found
zsh: trace trap  tmux
</code></pre>

<p>次は以下を参考</p>

<p><a href="http://chaika.hatenablog.com/entry/2014/06/11/170441">Mac OS10.9にしたらHomebrewで入れていたコマンドとか、いろいろ動かなくなった。</a></p>

<p>最後の方の部分だけを叩かせてもらう。</p>

<pre><code>$ brew uninstall pcre
$ brew install pcre
</code></pre>

<p>これでようやく起動できた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]herokuでのSSL設定とカスタムサブドメインの適用方法]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain/"/>
    <updated>2014-09-30T19:24:37+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain</id>
    <content type="html"><![CDATA[<p>herokuでのSSL設定とカスタムサブドメインの設定をさっくりと調べてみた。</p>

<!-- more -->


<h2>SSL</h2>

<h3>手順</h3>

<ol>
<li>プライベートキーを作成</li>
<li>CSRを作成</li>
<li>CSRを契約の際に業者に提出</li>
<li>証明書が発行される</li>
<li>証明書 + 中間証明書 + プライベートキーをherokuに設定</li>
</ol>


<p>1はローカルPC上にて作成<br/>
2の作成方法は以下、など。
<a href="https://jp.globalsign.com/support/ssl/list.php?cat=csr">https://jp.globalsign.com/support/ssl/list.php?cat=csr</a><br/>
5のみ、heroku上。</p>

<h3>herokuでの操作</h3>

<p>SSLのアドオン($20/mo)<br/>
<a href="https://addons.heroku.com/ssl">https://addons.heroku.com/ssl</a></p>

<p>アドオンの追加</p>

<pre><code>$ heroku addons:add ssl:endpoint
</code></pre>

<p>サーバー証明書と中間証明書を合体させる</p>

<pre><code>$ cat chain_ca.pem &gt;&gt; server.crt
</code></pre>

<p>プライベートキーのパスフレーズが解除されていない場合は解除する。</p>

<pre><code>$ openssl rsa -in site.key -out server.key
Enter pass phrase for site.key:
writing RSA key
</code></pre>

<p>で、合体させた証明書とキーをアップする。</p>

<pre><code>$ heroku certs:add server.crt server.key
</code></pre>

<p>アップロード結果で返ってくるURLが証明書が適応されたURLとなる。<br/>
<code>hokkaido-1212.herokussl.com</code><br/>
この状態でアクセスすると、<code>No such app</code>と出るがこれで正しい。</p>

<h3>参考</h3>

<p><a href="http://qiita.com/yu1ch1/items/290efb666209354e8fb3">herokuのssl証明書を更新する</a><br/>
<a href="http://interu.hatenablog.com/entry/2012/07/25/184812">HerokuでカスタムドメインのSSL endpointを利用する方法</a><br/>
<a href="http://d.hatena.ne.jp/install-memo/20110906/1315291837">SSL証明書のKEYファイル・CSRファイル・CRTファイルのチェック方法</a></p>

<h2>サブドメイン</h2>

<h3>herokuでの操作</h3>

<p>herokuのアプリのSettings内にある、<br/>
Domains、から設定したいドメインを指定する。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/Settings___Heroku.jpg" alt="Settings___Heroku" /></p>

<p>契約しているドメイン業者のCNAMEに、適用したいアプリのURLを指定する。<br/>
例：<code>hoge.herokuapp.com</code></p>

<h3>SSLの場合</h3>

<p>SSLをカスタムドメインで使用したい場合は、上記SSLの項で設定した、<br/>
<code>hokkaido-1212.herokussl.com</code>のドメインをCNAMEに指定する。</p>

<p>反映後、設定の確認は以下で出来る。</p>

<pre><code>$ heroku certs
Endpoint                     Common Name(s)            Expires               Trusted
---------------------------  ------------------------  --------------------  -------
hokkaido-1212.herokussl.com  secure.example.co.jp  2015-06-24 23:59 UTC  True
</code></pre>

<p>詳細は、<code>heroku certs:info</code>で確認できる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apigeeを使用してAPIの動作を確認する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/30/apigee/"/>
    <updated>2014-09-30T17:46:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/30/apigee</id>
    <content type="html"><![CDATA[<p>apigeeというサービスを使用すれば、様々なAPIの動作をブラウザ上から気軽に試せる、<br/>
ということなので実際に試してみました。</p>

<!-- more -->


<p><img src="http://kayakuguri.github.io/images/2014/09/apigee01.jpg" alt="apigee" /></p>

<p><a href="http://apigee.com/about/">apigee</a></p>

<p>トップページからAPIを試すサービスへの動線がわからなかったので、<br/>
以下から一覧ページに直接アクセスして下さい。<br/>
(サインアップすれば簡単にアクセス出来ます。)<br/>
(サインアップしなくても試すことは出来ます。)</p>

<p><a href="https://apigee.com/providers">API Providers</a></p>

<p>この一覧から各サービスのAPIに接続出来るわけですが、<br/>
今回はsalesforceのsandboxで試してみました。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee02.jpg" alt="salesforce" /></p>

<p>クリックすると、APIの一覧ページに飛ぶので、とりあえず素通りしてコンソールへ。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee03.jpg" alt="API Refarence" /></p>

<p>コンソール画面で実際に叩くAPIを指定したりパラメータを設定したり出来ます。<br/>
このままだと、認証がいらないものしか叩けないので、salesforceと認証させます。</p>

<p><code>Authentication</code>から、<code>OAuth2</code>を選択します。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee04.jpg" alt="API Refarence" /></p>

<p>すると確認ダイアログが出ますので、<code>Sign in Salesforce Snadbox</code>をクリックしてログインし、認証させます。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee05.jpg" alt="API Refarence" /></p>

<p>認証後は以下のようになります。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee06.jpg" alt="API Refarence" /></p>

<p>GETの場合は、この状態で下の入力エリアに叩きたいAPIを入れ、<br/>
<code>?</code>でパラメータを設定していけば試すことができます。<br/>
POSTの場合は、以下のように、POSTに設定しAPIを入力します。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee07.jpg" alt="API Refarence" /></p>

<p>しかしこのままではパラメータを入力出来ません。<br/>
なので、左側にある三角をクリックし、API一覧を表示させます。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee08.jpg" alt="API Refarence" /></p>

<p>で、適当にAPIを選択すると、下図のようにタブが出現し、<br/>
その中の、<code>Body</code>でパラメータを設定する事が出来ます。<br/>
(ちなみにQueryではGETの値を設定出来ます)</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee09.jpg" alt="API Refarence" /></p>

<p>試しにこれはGETでversionを取得しただけですが、<br/>
実行すると以下の様な形でレスポンスを取得することができます。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/apigee10.jpg" alt="API Refarence" /></p>

<p>サインアップするとその他にも色々機能があるようで、もっと使い込めば便利かもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]QuotaGuard Staticを使ってHerokuでのIP固定を試してみる]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/26/static-ip-heroku/"/>
    <updated>2014-09-26T17:59:42+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/26/static-ip-heroku</id>
    <content type="html"><![CDATA[<p>herokuでのIP固定といえば、<a href="https://addons.heroku.com/proximo">Proximo</a>の方が有名っぽいけど、<br/>
QuotaGuard Staticというのでも同じく固定できるようなので試してみた。</p>

<!-- more -->


<p><img src="http://kayakuguri.github.io/images/2014/09/quotaguard1.jpg" alt="QuotaGuard Static add-on" /></p>

<p><a href="https://addons.heroku.com/quotaguardstatic">QuotaGuard Static</a></p>

<p>アプリへのセットアップをコマンドラインからする場合は以下。<br/>
無料プランがあるので、それで試してみる。</p>

<pre><code>$ heroku addons:add quotaguardstatic
</code></pre>

<p>以下のように結果が返ってくる。<br/>
その中にIPアドレスも含まれる。</p>

<pre><code>Adding quotaguardstatic on static-ip-test... done, v4 (free)
Your static IPs are [54.88.136.216, 54.84.188.199]
Use `heroku addons:docs quotaguardstatic` to view documentation.
</code></pre>

<p>Proximoでも同じ仕組のようだけど、<br/>
入れたアドオンによって指定されたURLを介してアクセスすることで<br/>
固定IPを実現しているよ。<br/>
アドオンがプロキシの役目を果たす。<br/>
このプロキシ経由でのアクセス数に制限があり、その数で値段が変わる仕組み。</p>

<p>そのアクセス用のURLは環境変数に格納されている。</p>

<pre><code>$ heroku config
QUOTAGUARDSTATIC_URL: http://username:pass@us-east-1-static-brooks.quotaguard.com:9293
</code></pre>

<p>上記、<code>IPs</code>となっているのは、２つのIPのうちどちらかでアクセスされる、とのこと。<br/>
負荷分散のよう。<br/>
一応、公式の理由。</p>

<blockquote><p>We believe all apps should be built for scalability and high availability. Our commitment to this means we only provide load balanced, high availability services. Load balancing our nodes allows one node to fail or be brought down for maintenance with no impact to your application. Each IP you are given represents one proxy node that is running behind a load balancer.</p></blockquote>

<p>IPアドレスはアドオンのダッシュボードからも確認できる。<br/>
以下、ダッシュボードを開くコマンド</p>

<pre><code>$ heroku addons:open quotaguardstatic
</code></pre>

<p>公式にPHPでの動作サンプルが載っていたのでそのまま使用して試してみた。<br/>
以下、転載。</p>

<p><a href="https://devcenter.heroku.com/articles/quotaguardstatic#using-with-php">PHPのサンプル</a></p>

<pre><code>&lt;?php

function lookup(){
  $quotaguard_env = getenv("QUOTAGUARDSTATIC_URL");
  $quotaguard = parse_url($quotaguard_env);

  $proxyUrl       = $quotaguard['host'].":".$quotaguard['port'];
  $proxyAuth       = $quotaguard['user'].":".$quotaguard['pass'];

  $url = "http://ip.jsontest.com/";

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_PROXY, $proxyUrl);
  curl_setopt($ch, CURLOPT_PROXYAUTH, CURLAUTH_BASIC);
  curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyAuth);
  $response = curl_exec($ch);
  return $response;
}

$res = lookup();
print_r($res);

?&gt;
</code></pre>

<p>ここでアクセスしている<code>http://ip.jsontest.com/</code>のURLは、接続元のIPアドレスをJsonで返してくれるサービスのよう。</p>

<p>アクセスすると、以下のようなJSONが返ってきた。</p>

<pre><code>{"ip": "54.84.188.199"}
</code></pre>

<p>リロードすると以下のものとランダムに切り替わっているのが確認できる。</p>

<pre><code>{"ip": "54.88.136.216"}
</code></pre>

<p>管理画面を確認すると、アクセス数と残りアクセス数がわかる。<br/>
アクセス数は、１月の制限のよう。<br/>
無料の場合は250/月。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/quotaguard2.jpg" alt="管理画面" /></p>

<p>冒頭のProximoと比較すべく、料金表を抜き出してみた。</p>

<p><strong>QuotaGuard Static</strong></p>

<table>
<thead>
<tr>
<th>プラン </th>
<th> 値段(月) </th>
<th> アクセス数(月) </th>
<th> 帯域幅</th>
</tr>
</thead>
<tbody>
<tr>
<td>Starter </td>
<td> 無料 </td>
<td> 250 </td>
<td> 100MB</td>
</tr>
<tr>
<td>Spike </td>
<td> $5 </td>
<td> 500 </td>
<td> 250MB</td>
</tr>
<tr>
<td>Micro </td>
<td> $19 </td>
<td> 10,000 </td>
<td> 1GB</td>
</tr>
<tr>
<td>Medium </td>
<td> $49 </td>
<td> 50,000 </td>
<td> 10GB</td>
</tr>
<tr>
<td>Large </td>
<td> $89 </td>
<td> 1000,000 </td>
<td> 50GB</td>
</tr>
<tr>
<td>Enterprise </td>
<td> $219 </td>
<td> 1,000,000 </td>
<td> 1TB</td>
</tr>
<tr>
<td>Premium </td>
<td> $399 </td>
<td> 5,000,000 </td>
<td> 無制限</td>
</tr>
</tbody>
</table>


<p><strong>Proximo</strong></p>

<table>
<thead>
<tr>
<th>プラン </th>
<th> 値段(月) </th>
<th> アクセス数(月) </th>
<th> 帯域幅</th>
</tr>
</thead>
<tbody>
<tr>
<td>Development </td>
<td> $5 </td>
<td> 1,000 </td>
<td> 500MB</td>
</tr>
<tr>
<td>Starter </td>
<td> $25 </td>
<td> 20,000 </td>
<td> 2GB</td>
</tr>
<tr>
<td>Professional </td>
<td> $75 </td>
<td> 200,000 </td>
<td> 100GB</td>
</tr>
<tr>
<td>Dedicated </td>
<td> $250 </td>
<td> 1,000,000 </td>
<td> 1TB</td>
</tr>
<tr>
<td>Elite </td>
<td> $500 </td>
<td> 5,000,000 </td>
<td> 5TB</td>
</tr>
<tr>
<td>Enterprise </td>
<td> $1250 </td>
<td> 無制限 </td>
<td> 無制限</td>
</tr>
</tbody>
</table>


<p>QuotaGuardは無料があるのがやはりお手軽。<br/>
しかし、安いうちはProximoの方がお得。<br/>
増えてくるとQuotaGuardの方がお得かも。<br/>
他の機能もあったりするので一概には言えないけれど。</p>

<h3>参考</h3>

<p><a href="https://devcenter.heroku.com/articles/quotaguardstatic">QuotaGuard Static 公式ドキュメント</a><br/>
<a href="https://devcenter.heroku.com/articles/proximo">Proximo 公式ドキュメント</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Salesforce]Mass Actionsでリードを一括編集]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/26/mass-edit-salesforce/"/>
    <updated>2014-09-26T14:44:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/26/mass-edit-salesforce</id>
    <content type="html"><![CDATA[<p>リードのリストビュー画面から抽出したリードを一括編集できるが、<br/>
そこで編集できる項目は限られている。<br/>
なので、好きな項目の編集を可能にするアドオンがあったのでご紹介。</p>

<p><a href="https://appexchange.salesforce.com/listingDetail?listingId=a0N30000003J6KcEAK">Mass Edit + Mass Update + Mass Delete &ndash; VersatileCapitalist, Inc &ndash; AppExchange</a></p>

<!-- more -->


<p>上記AppExchangeの画面から、<code>Get It Now!</code>をクリックして、インストールする。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass01.jpg" alt="Get It Now" /></p>

<p>ログインしていない場合は自身のアカウントでログイン。<br/>
sandboxかプロダクションへのインストールを選択。<br/>
今回はプロダクションへインストールした。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass02.jpg" alt="Install" /></p>

<p>内容を確認して、<code>Confilm and Install!</code>。<br/>
再度、ID、パスワードを聞かれるので、入力する。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass03.jpg" alt="Confilm and Install!" /></p>

<p>インストールする内容を確認して、<code>次へ</code>。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass04.jpg" alt="パッケージインストールの詳細" /></p>

<p>ユーザーごとの権限を設定し、<code>次へ</code>。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass05.jpg" alt="権限" /></p>

<p>セキュリティレベルを設定し、<code>次へ</code>。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass06.jpg" alt="セキュリティレベル" /></p>

<p>最後の確認をされるので、<code>インストール</code>。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass07.jpg" alt="インストール確認" /></p>

<p>少し待つと、インストールが完了。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass08.jpg" alt="インストール完了" /></p>

<p>使用するには、リードの<code>検索レイアウト</code>にMassActionのボタンを追加してやる必要がある。<br/>
<code>設定 -&gt; カスタマイズ -&gt; リード -&gt; 検索レイアウト</code>を開く。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass09.jpg" alt="リード検索レイアウト" /></p>

<p>その中の、<code>リードリストビュー</code>に追加するので、<code>編集</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass10.jpg" alt="リードリストビュー" /></p>

<p>利用可能なボタン、の中にMassActionのボタンがあるので、<br/>
今回は全て選択して、追加し、保存。</p>

<blockquote><p>Mass Delete<br/>
Mass Edit<br/>
Mass Update</p></blockquote>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass11.jpg" alt="リードリストビューの編集" /></p>

<p>後は通常通り、リードからビューを選択する。<br/>
新規ビューを作成するときに、<code>表示する項目を選択</code>できるが、<br/>
ここで選択したものが後で更新出来る項目となる。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass12.jpg" alt="表示する項目" /></p>

<p>リストビューを表示すると、上部に先程追加したMassのボタンが表示されている。<br/>
変更したいリードをチェックボックスで選択し、その上部のボタン、今回は<code>Mass Edit</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass13.jpg" alt="Mass Edit" /></p>

<p>選択したリードがリストで表示されるので、変更したい箇所を編集し、saveをクリックすると反映される。<br/>
今回は<code>会社名</code>を変更してみた。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass14.jpg" alt="編集" /></p>

<p>結果が反映される。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/mass15.jpg" alt="結果" /></p>

<p>このように、リードの項目をまとめて編集したりする場合にはこれは非常に便利だと思う。<br/>
いちいち詳細、編集画面に遷移しなくてよいので楽。</p>

<h3>参考</h3>

<p><a href="http://synergylead.jp/support/faq-salesforce-mass-update-edit-delete/">一覧表示画面からチェックボックスで選択して削除・更新を行うには？｜Synergy!LEAD</a><br/>
<a href="https://www.youtube.com/watch?v=xZCyhuTmaWE">Mass Edit and Mass Update in Salesforce.com &ndash; YouTube</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SalesForce]キャンペーンメンバーの状況を追加する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/12/campaignmemberstatus/"/>
    <updated>2014-09-12T11:40:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/12/campaignmemberstatus</id>
    <content type="html"><![CDATA[<p>キャンペーンメンバーオブジェクトのデフォルト項目である、<br/>
<code>状況</code>は、デフォルトでは、</p>

<blockquote><p>送信<br/>
レスポンスあり</p></blockquote>

<p>の２つになっている。<br/>
これを独自で追加したい。</p>

<!-- more -->


<p>結論から言うと、仕様上、無理だった。<br/>
以下に同じような質問があった。</p>

<p><a href="https://developer.salesforce.com/forums/ForumsMain?id=906F00000009B5HIAU">キャンペーンメンバーの状況に値を追加したい &ndash; Salesforce Developer Community</a></p>

<blockquote><p>レコードを横断した設定ではなく、キャンペーンレコード毎に状況を設定する必要があります。</p></blockquote>

<ol>
<li>キャンペーンタブから、状況を追加したいキャンペーンレコードの詳細画面を表示</li>
<li>「高度な設定」ボタン押下</li>
<li>メンバーの状況の値の「編集」ボタン押下</li>
<li>メンバー状況の一番下にある、「さらに追加」リンク押下</li>
</ol>


<p>この仕様は謎仕様としても有名？なよう。</p>

<blockquote><p>キャンペーンメンバーの「状況」のクソ仕様(?)を質問した。<br/>
デフォルト値を変更できない件となぜか手入力な仕様について。<br/>
キャンペーンを作るたびに「状況」の選択肢を追加しないとダメな上に、手入力だから後からの集計がヒドイことになる。<br/>
<a href="https://twitter.com/realichiro5221/status/337413167804203009">https://twitter.com/realichiro5221/status/337413167804203009</a></p></blockquote>

<p>解決策としては、同じ<code>状況</code>項目をカスタム項目として作成するしかないよう。<br/>
それでもデフォルトの<code>状況</code>は必須項目になるので、運用がややこしくなりそうだけれど。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOQLクエリの結果をJSONで出力する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/09/create-json-in-apex/"/>
    <updated>2014-09-09T15:54:29+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/09/create-json-in-apex</id>
    <content type="html"><![CDATA[<p>SOQLで取得したクエリ内容をJSONにパースして出力する方法。</p>

<!-- more -->


<p>Apexクラス</p>

<pre><code>public class sample
{
    public String text1 {get;set;}

    public sample()
    {

    }    
    public void parseJson()
    {
        String soql = 'SELECT Name FROM Lead';
        List&lt;Account&gt; acct = Database.Query(soql); 
        text1 = JSON.serialize(acct);
    }    
} 
</code></pre>

<p>VisualForceページ</p>

<pre><code>&lt;apex:page showHeader="false" controller="ShowCampaignListController" action="{!parseJson}"&gt;
    {!text1}
&lt;/apex:page&gt;
</code></pre>

<p>出力結果例</p>

<pre><code>[{
    "attributes":
    {
        "type":"Lead",
        "url":"/services/data/v32.0/sobjects/Lead/00QO0000002xxxxxxx"
    },
    "Name":"テストユーザー3",
    "Id":"00QO0000002xxxxxxx"
},
{
    "attributes":
    {
        "type":"Lead",
        "url":"/services/data/v32.0/sobjects/Lead/00QO0000002ooooooo"
    },
    "Name":"テストユーザー2",
    "Id":"00QO0000002ooooooo"
}]
</code></pre>

<p>参考：<a href="http://www.infallibletechie.com/2012/10/generating-json-in-visualforce-page-in.html">Infallible Techie: Generating JSON in Visualforce page in Salesforce</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SalesForce]ApexでカスタムREST APIを作成する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/08/apex-restapi/"/>
    <updated>2014-09-08T22:30:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/08/apex-restapi</id>
    <content type="html"><![CDATA[<p>apexにて、自作のRestAPIを作成してみました。<br/>
そして、作成したAPIをPHPから叩いてみました。</p>

<!-- more -->


<p>まずは、Salesforce側の設定。<br/>
今回は、GETで指定されたIDのリードデータを取得するもの。</p>

<pre><code>@RestResource(urlMapping='/CustomLead/*')
global with sharing class CustomLeadSample {
    @HttpGet
    global static sObject doGet() {
        RestRequest req = RestContext.request;
        Id LeadID = req.params.get('id');
        try {
            Lead acc = [SELECT Id, Name FROM Lead WHERE Id = :LeadID LIMIT 1];
            return acc;
        } catch (exception e) {
            return null;
        }
    }
}
</code></pre>

<p>公式の解説の最後に載っているものほぼそのままです。<br/>
<a href="https://developer.salesforce.com/page/Creating_REST_APIs_using_Apex_REST">Creating REST APIs using Apex REST &ndash; developer.force.com</a></p>

<p>で、これをPHP側から呼び出します。<br/>
oauth認証は以下の記事のものを使用させてもらっています。<br/>
<a href="http://www.nkjmkzk.net/?p=2328">nkjmkzk.net &raquo; 新しくなったForce.com OAuth Toolkit for phpの使い方 のコメントのフィード</a><br/>
<a href="https://github.com/nkjm/Force.com-OAuth-Toolkit-for-PHP">nkjm/Force.com-OAuth-Toolkit-for-PHP</a></p>

<p><code>@RestResource</code>で作成したAPIは、<code>/services/apexrest/</code>から始まるURLで定義されています。<br/>
また、外部から接続する場合には、<code>接続アプリケーション</code>の設定が必要になります。<br/>
<a href="https://help.salesforce.com/HTViewHelpDoc?id=connected_app_create.htm&amp;language=ja">接続アプリケーションの作成</a><br/>
コールバックURLは今回は必要ないので、適当なローカルURLを指定しています。<br/>
また、パスワードは、(特定のIPアドレスからのアクセスに制限しなかった場合には)<br/>
パスワード＋セキュリティトークン、の形で渡す必要があります。</p>

<pre><code>require_once('sf_oauth.php');
$app_token = 'xxx';
$app_secret = 'xxx';
$app_callback = 'http://localhost:9000/';
$sf_id = 'xxx';
$sf_pass = 'password+security-token';

$oauth = new oauth($app_token, $app_secret, $app_callback);
$oauth-&gt;auth_with_password($sf_id, $sf_pass);

$url = "$oauth-&gt;instance_url/services/apexrest/CustomLead/?id=".'リードのID';
$curl = curl_init($url);
curl_setopt($curl, CURLOPT_HEADER, false);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_HTTPHEADER,
    array("Authorization: OAuth $oauth-&gt;access_token",
        "Content-type: application/json"));
$json_response = curl_exec($curl);
$status = curl_getinfo($curl, CURLINFO_HTTP_CODE);
</code></pre>

<p>レスポンスは以下のような形です。</p>

<pre><code>{
    "attributes":
    {
        "type":"Lead",
        "url":"/services/data/v32.0/sobjects/Lead/ユーザーID"
    },
    "Name":"ユーザー名",
    "Id":"ユーザーID"
}
</code></pre>

<p>参考サイト：<br/>
<a href="http://magnet88jp.hateblo.jp/entry/2014/07/09/105848">Salesforce 外部サイトからApexメソッドを呼び出したい &ndash; まぐねっとのブログ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeformのAPI]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/09/01/typeform-api/"/>
    <updated>2014-09-01T14:53:57+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/09/01/typeform-api</id>
    <content type="html"><![CDATA[<p><a href="http://kayakuguri.github.io/blog/2014/08/29/typeform/">前回、Typeformを触ってみた</a>けれど、<br/>
APIがあるとのことなので見てみました。</p>

<!-- more -->


<p>公式ページ(英語)<br/>
<a href="http://helpcenter.typeform.com/hc/en-us/articles/200071986-Data-API">http://helpcenter.typeform.com/hc/en-us/articles/200071986-Data-API</a></p>

<p>認証や何やらは全くなくて、<br/>
取得したAPIキーとアンケートIDを使用して、URLから直接JSONを取得する形式。<br/>
逆に言えば、URLさえわかれば誰でもアクセス出来てしまうので、<br/>
あまり個人情報的な内容を書かせてしまうと、セキュリティ的にまずいのかもしれない。<br/>
(キーはどちらも推測はされにくいとは思いますが)</p>

<p>APIキーは、<code>My Account</code>内の、<code>Your API Key</code>にあります。</p>

<p><img src="http://kayakuguri.github.io/images/2014/09/Typeform__-_My_typeforms.jpg" alt="myaccount" /><br/>
<img src="http://kayakuguri.github.io/images/2014/09/Typeform__-_Account.jpg" alt="myAPIkey" /></p>

<p>このキーを利用して、以下のよう書式で記述します。</p>

<pre><code>https://api.typeform.com/v0/form/アンケートID?key=自分のAPIキー
</code></pre>

<p>すると、以下の様なレスポンスがあります。</p>

<pre><code>{
    "http_status": 200, 
    "questions": [
        {
            "id": "rating_1595673", 
            "question": "イベントを評価して下さい"
        }, 
        {
            "id": "list_1595676_choice", 
            "question": "面白かったですか？"
        }, 
        {
            "id": "textarea_1595680", 
            "question": "何かあれば記入して下さい"
        }
    ], 
    "responses": [
        {
            "answers": {
                "list_1595676_choice": "楽しかった", 
                "rating_1595673": "3", 
                "textarea_1595680": "ぜひまた開催をお願い致します。"
            }, 
            "completed": "1", 
            "hidden": [], 
            "id": "3", 
            "locked": "0", 
            "metadata": {
                "browser": "default", 
                "date_land": "2014-08-29 13:00:43", 
                "date_submit": "2014-08-29 13:01:09", 
                "network_id": "xxxxxx", 
                "platform": "other", 
                "referer": "", 
                "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5)   AppleWebKit/537.75.14 (KHTML, like Gecko) Version/6.1.3 Safari/537.75.14"
            }, 
            "token": "xxxxxx"
        }, 
         {
            …中略
        }
    ], 
    "stats": {
        "responses": {
            "completed": 2, 
            "locked": 0, 
            "showing": 2, 
            "total": 10
        }
    }
}
</code></pre>

<p>オプションは以下。</p>

<table>
<thead>
<tr>
<th>項目 </th>
<th> 型 </th>
<th> 説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>completed </td>
<td> boolean </td>
<td> true:完了している項目のみ false:完了していないもののみ</td>
</tr>
<tr>
<td>since </td>
<td> number (Unix time/Timestamp) </td>
<td> 指定した日付より後</td>
</tr>
<tr>
<td>until </td>
<td> number (Unix time/Timestamp) </td>
<td> 指定した日付まで</td>
</tr>
<tr>
<td>offset </td>
<td> number </td>
<td> (ページがある場合)何ページ目から始めるか</td>
</tr>
<tr>
<td>limit </td>
<td> number </td>
<td> 1ページの表示件数</td>
</tr>
</tbody>
</table>


<p>アンケート作成用のAPIは現在開発中だそうです。<br/>
<a href="http://helpcenter.typeform.com/hc/en-us/articles/200070236-Build-API-coming-soon-">http://helpcenter.typeform.com/hc/en-us/articles/200070236-Build-API-coming-soon-</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[モダンで軽量、作成も簡単と話題のTypeformを試してみた]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/08/29/typeform/"/>
    <updated>2014-08-29T20:30:06+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/08/29/typeform</id>
    <content type="html"><![CDATA[<p>簡単にモダンなフォームが作成出来る、<br/>
typeformを触ってみた。</p>

<!-- more -->


<p>基本機能は無料。<br/>
しかも、フォームの作成数に制限はないよう。<br/>
ただし、機能の制限は色々とある。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform00.jpg" alt="アカウント" /></p>

<h3>出来上がりサンプル</h3>

<p>実際に作成されるアンケートは以下のようになります。<br/>
(サンプル)</p>

<ul>
<li><a href="https://s3-eu-west-1.amazonaws.com/share.typeform.com/typeform_embed_widget_en.html">iframe埋め込み</a></li>
<li><a href="https://s3-eu-west-1.amazonaws.com/share.typeform.com/typeform_embed_full_en.html">ページ全体に埋め込み</a></li>
</ul>


<h3>Build</h3>

<p><code>+</code>をクリックして新しくフォームを作成。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform01.jpg" alt="新規作成" /></p>

<p>すると、その場で小さいモーダルが開くので、<br/>
タイトルと言語とプランを選択。<br/>
言語は日本語もあった。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform02.jpg" alt="入力" /></p>

<p><code>Build it now</code>をクリックすると、<br/>
フォームの編集画面が開く。<br/>
左側のメニューから追加したいものをドラッグして追加していく。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform03.jpg" alt="作成" /></p>

<p>上部の<code>Welcom Screen</code>は、フォーム前の説明画面で、<br/>
真ん中がフォーム画面。<br/>
一番下は完了画面、となっている。</p>

<p>例えば、<code>Multiple choice</code>をドラッグすると、下記のような編集画面が開く。<br/>
日本語もばっちり使える。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform04.jpg" alt="項目の編集" /></p>

<p>左メニューのオプションのらへんで、必須か、複数選択できるか、など<br/>
諸々の設定ができる。<br/>
この辺は英語での説明だけれど、苦にならないくらいUIが簡単でわかりやすい。</p>

<p>完了画面に画像を入れてみたところ。<br/>
画像は以下の素材を使わせてもらいました。</p>

<p><a href="http://www.irasutoya.com/2013/06/thank-you.html">http://www.irasutoya.com/2013/06/thank-you.html</a></p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform05.jpg" alt="完了画面" /></p>

<p>下部にある、<code>Hidden fields</code>を使用すれば、URLにGETパラメータを持たせて、<br/>
個人の特定などが出来るよう。<br/>
これにはProアカウントが必要。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform14.jpg" alt="Hidden Fields" /></p>

<h3>Design</h3>

<p>上部メニューの<code>Design</code>から、色の変更をしたり、<br/>
フォントを変更したり、<br/>
背景に画像を引いたりが出来る。<br/>
反映は、右下の、<code>Apply to typeform</code>をクリックする。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform06.jpg" alt="デザイン" /></p>

<h3>Configure</h3>

<p><code>Configure</code>は、諸々の設定。<br/>
アンケートから、Typeformのロゴを消すにはProアカウントのアップデートが必要(有料)。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform07.jpg" alt="設定" /></p>

<p><code>Self Notifications</code>は、回答があった際に自身にお知らせするメールの内容をカスタマイズできる。<br/>
ここのテキストエリアの編集が若干使いにくかった。<br/>
(消えてほしくない箇所が消えてしまったり)<br/>
<code>Respondent notifications</code>は、回答者への自動返信のよう。ここもProアカウントが必要。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform08.jpg" alt="受付メール" /></p>

<p>回答されたデータを、<a href="https://zapier.com/">Zapier</a>を使用して、他サービスへ連動もできる。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform09.jpg" alt="Zapier" /></p>

<h3>Distribute</h3>

<p>アンケートの表示方法を色々と選べる。</p>

<ul>
<li>直接URLを表示</li>
<li>ポップアップや、横から開く形のボタンやリンクを追加</li>
<li>iframeを使った埋め込み</li>
</ul>


<p><img src="http://kayakuguri.github.io/images/2014/08/typeform10.jpg" alt="表示方法" /></p>

<h3>Analyze</h3>

<p>ここで、アクセス状況や、回答内容が見れる。</p>

<p><strong>アクセス状況</strong>
<img src="http://kayakuguri.github.io/images/2014/08/typeform11.jpg" alt="アクセス状況" /></p>

<p><strong>回答内容一覧</strong>
<img src="http://kayakuguri.github.io/images/2014/08/typeform12.jpg" alt="回答内容" /></p>

<p>GoogleAnalyticsのコードを埋め込んだりも簡単に出来る。</p>

<p><code>Reports</code>で、回答内容のレポートを実際の設問に重ねて表示することが出来る。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/typeform13.jpg" alt="レポート" /></p>

<p>右下のボタンで、LiveのReportが確認出来るよう。</p>

<h3>まとめ</h3>

<p>すごくモダンで使いやすい。<br/>
さくさくできる。<br/>
zapierとの連携もあって、使いようによってはなんでも出来そう。</p>

<p>作成されるフォームは、完全にスマホファーストで、<br/>
PCではちょっと使いづらかった。<br/>
その代わり、スマホではサクサク答えられる。</p>

<p>zapierとともに有料アカウント持ってたらこれらだけでかなり<br/>
有用なツールとして使えそう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebookでテストユーザーを使用してログイン]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/08/07/facebook-test-user/"/>
    <updated>2014-08-07T16:44:44+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/08/07/facebook-test-user</id>
    <content type="html"><![CDATA[<p>Facebookのアプリを作成している際に、<br/>
テストユーザーを使用してログインする方法のメモ。</p>

<!-- more -->


<p>以前まではアプリのメニューからポチポチっと設定出来ましたが、<br/>
今は、URLを作成してそこにアクセスする、<br/>
facebookページのタブにアプリを追加するような多少めんどくさいものになっているようです。</p>

<h3>準備</h3>

<h4>アプリのID</h4>

<p>作成したアプリのIDを取得しておきます。</p>

<h4>アプリに接続する際のアクセストークンの取得</h4>

<p>以下のGraph API Explorerにアクセスし、そこからテストしたいアプリを選択し、<br/>
その後、「Get App Token」(右側。Get Access Tokenではない)を取得しておく。<br/>
<a href="https://developers.facebook.com/tools/explorer/">https://developers.facebook.com/tools/explorer/</a></p>

<p><img src="http://kayakuguri.github.io/images/2014/08/test-user01.jpg" alt="Get App Token" /></p>

<h3>ログイン</h3>

<h4>ログインURLを取得</h4>

<p>取得した２つの情報から以下のURLを作成し、アクセスする。</p>

<pre><code>https://graph.facebook.com/アプリのID/accounts/test-users?installed=true&amp;name=ユーザー名(任意の名前)&amp;locale=ja_JP&amp;permissions=read_stream&amp;method=post&amp;access_token=アプリトークン
</code></pre>

<p>ブラウザでアクセスすると、JSONが返ってくる。</p>

<pre><code>{
   "id": "xxIDxx",
   "email": "testtamsanuser_rrfidrb_testtamsanuser\u0040tfbnw.net",
   "access_token":  "xxACCESS_TOKENxx",
   "login_url": "https://developers.facebook.com/checkpoint/test-user-login/xxx/",
   "password": "xxPASSWORDxx"
}
</code></pre>

<p>この中の、<code>login_url</code>でアクセス。<br/>
この時に、自分のアカウントでログインした状態でアクセスすること。</p>

<h4>ログイン</h4>

<p>しつこく確認される。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/test-user02.jpg" alt="Get App Token" /><br/>
<img src="http://kayakuguri.github.io/images/2014/08/test-user03.jpg" alt="Get App Token" /></p>

<p>OKOKすると、以下のような形でログインできる。</p>

<p><img src="http://kayakuguri.github.io/images/2014/08/test-user04.jpg" alt="Get App Token" /></p>

<p>終了したい場合は、ログアウトしてログインしなおせばよい。</p>

<h3>参考サイト</h3>

<p>参考、というか、ほぼ以下のままです。<br/>
ありがとうございます。<br/>
<a href="http://qiita.com/se_ino/items/a96449cd25886a6d05fb">Facebookアプリのテストユーザーの作り方手順 &ndash; Qiita</a></p>

<p>公式ドキュメント<br/>
<a href="https://developers.facebook.com/docs/graph-api/reference/v2.0/test-user">Graph API Reference Test User /test-user</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebookのphp-sdk-v4をcomposerを使ってインストールした時のメモ]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/08/04/facebook-sdk-v4-composer/"/>
    <updated>2014-08-04T19:26:37+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/08/04/facebook-sdk-v4-composer</id>
    <content type="html"><![CDATA[<p>今更ながらFacebookのAPIがv2.0にアップデートされた事による<br/>
影響範囲の大きさにショックを受けています。</p>

<p><a href="http://kuneko.hatenadiary.com/entry/facebook_search_public_post">Facebookの全体公開投稿は2015年に完全に検索できなくなるかも &ndash; ku:neko ism</a><br/>
<a href="http://snowadays.jp/2014/05/2762">Facebookログイン Version2.0（アプリのパーミッション仕様変更）</a><br/>
<a href="http://qiita.com/hilotter/items/b88402505faeebbbce89">Facebook Graph API 2.0について &ndash; Qiita</a></p>

<!-- more -->


<p>で、新しいものに対応したアプリを作成するべく、<br/>
PHPのSDKをダウンロードしてきて、、と思ったのですが、composerに対応しているということで、<br/>
composerでインストールしてみることに。</p>

<p><a href="https://developers.facebook.com/docs/php/gettingstarted/4.0.0">Getting Started php-sdk-v4</a><br/>
この公式によると、以下のようにしてインストールする、だけ。</p>

<pre><code>{
  "require" : {
    "facebook/php-sdk-v4" : "4.0.*"
  }
}
</code></pre>

<p>しかしエラーが。</p>

<pre><code>Your requirements could not be resolved to an installable set of packages.
  Problem 1
- facebook/php-sdk-v4 4.0.9 requires php &gt;=5.4.0 -&gt; no matching package found.
</code></pre>

<p>バージョンの指定を、<code>4.0.9</code>としたり、<code>*</code>としてみても同じ。<br/>
ググってみると以下の情報に当たる。</p>

<p><a href="http://stackoverflow.com/questions/24269649/composer-not-installing-latest-facebook-php-sdk-due-to-multiple-php-versions">composer not installing latest facebook php sdk due to multiple php versions &ndash; Stack Overflow</a></p>

<p>どうやら、php-sdk-v4は、PHPのバージョンが5.4からの対応、なのだけれど、<br/>
PCにインストールしているPHPのバージョンが低いとエラーが出るらしい。</p>

<p>ターミナルからPHPのバージョンを調べてみると、きっちり、<code>5.3.28</code>。</p>

<pre><code>$ php -v
PHP 5.3.28 (cli) (built: Jan 23 2014 18:02:48)
</code></pre>

<p>調べてみると、下記が一番簡単そうだったので、この方法でインストールした。</p>

<p><a href="http://kimikimi714.hatenablog.com/entry/2013/07/06/233518">macのphpをアップデート &ndash; わすれっぽいきみえ</a></p>

<pre><code>$ curl -s http://php-osx.liip.ch/install.sh | bash -s 5.5
</code></pre>

<p>で、このままではデフォルトにはならないので、パスを通す、と。<br/>
<code>~/.bashrc</code>の冒頭に下記を追加しておいた。</p>

<pre><code>export PATH=/usr/local/php5/bin:$PATH
</code></pre>

<p>で、バージョンを再度確認してみると、無事、アップデートされていた。</p>

<pre><code>$ php -v
PHP 5.5.14 (cli) (built: Jun 28 2014 10:29:43)
</code></pre>

<p>で、再度、composerをインストールしてみると、無事、完了した。<br/>
これでようやく環境が整ったことになる。</p>

<pre><code>  - Installing facebook/php-sdk-v4 (4.0.9)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[エラー] bad line length character: Sysl]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/28/git-heroku-error/"/>
    <updated>2014-07-28T12:39:54+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/28/git-heroku-error</id>
    <content type="html"><![CDATA[<p>とあるタイミングでheroku上のgitからフェッチしようとすると、<br/>
タイトルのようなエラーが出た。</p>

<!-- more -->


<p>エラー内容。</p>

<pre><code>$ git fetch staging
Fetching repositoryfatal: protocol error: bad line length character: Sysl
</code></pre>

<p>環境は、herokuで、<a href="http://kayakuguri.github.io/blog/2014/07/02/heroku-staging/">ここで書いた</a>とおり、ローカルでブランチを切って、<br/>
それぞれのブランチでリモートのプッシュ先を変えて管理している。<br/>
ここでは、staging環境の分をフェッチしたかった。</p>

<p>heroku関連として全く同じ内容のエラーがStackOverFlowに投稿されていたが、<br/>
どうやら解決はしていないよう。</p>

<p><a href="http://stackoverflow.com/questions/23034100/git-error-bad-line-length-character-sysl">Git Error: bad line length character: Sysl</a></p>

<p>ググってみると、リモート先のサーバーにsshでログインする時に表示されるメッセージが悪いとか、<br/>
ssh関連で、<code>.bashrc</code>とか<code>.zshrc</code>とかの設定を見なおしたよ、というような内容が多い。</p>

<p><a href="http://d.hatena.ne.jp/kuromoyo/20120217/1329460576">protocol error: bad line length character と出たら &ndash; #9 Backyard</a><br/>
<a href="http://verytired.hateblo.jp/entry/2013/07/10/191324">gitのエラー解決方法 &ndash; Shut the fuck up and write some code</a><br/>
<a href="http://kimoi.hatenadiary.com/entry/20130701/1372693974">fatal: protocol error: bad line length character: # Us &ndash; きもい交換日記</a></p>

<p>しかしどれもピンと来ない。</p>

<p>とりあえず、master環境に切り替えてみよう(理由はない)と思い、変更してみると以下のエラー。</p>

<pre><code>$ git checkout master
fatal: This operation must be run in a work tree
</code></pre>

<p>ググると以下の情報が。<br/>
<a href="http://dqn.sakusakutto.jp/2012/09/git-bare-checkout-This-operation-must-be-run-in-a-work-tree.html">#git bareレポジトリでcheckoutしようとして&quot;This operation must be run in a work tree&quot;の対処法 &ndash; DQNEO起業日記</a></p>

<p>内容通り、以下のコマンドで切り替えは出来た。</p>

<pre><code>$ git symbolic-ref HEAD refs/heads/master
</code></pre>

<p>ただし、またstagingに戻そうとすると、上記のコマンドが必要になる。。</p>

<p>ターミナルだけでなく、gitはsourceTreeでも管理しているのだけれど、<br/>
そのソフト上では、ブランチの切り替えはダブルクリックだけで簡単に出来た。</p>

<p>そんな感じで、ブランチの切り替えをしていると、自動的にstaging環境でフェッチが行われていた。<br/>
流れとしてはこんな感じ。</p>

<blockquote><p>stagigブランチ<br/>
masterブランチに切り替え<br/>
stagingブランチに切り替え<br/>
自動的にフェッチが行われる<br/>
 (全てsourcetree上での作業)</p></blockquote>

<p>その後、ターミナル上でも<code>fetch</code>してみたが、何事もなく動作した。</p>

<pre><code>$ git fetch staging
Fetching repository, done.
</code></pre>

<hr />

<p>結局、原因は不明で、修正手順も不明、なのだけれど、<br/>
ちょっと情報が少なかったのでメモとして残しておく。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macの空き容量を増やす]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/24/mac-storage/"/>
    <updated>2014-07-24T12:28:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/24/mac-storage</id>
    <content type="html"><![CDATA[<p>空き容量を増やすべく、色々対応してみた。<br/>
実行は自己責任でお願いします。</p>

<!-- more -->


<p>参考にしたページ：<br/>
<a href="https://note.mu/akikazutakenaka/n/n362c8c79193b">Mac の SSD 空き容量がガッツリ減ったのであれこれ対応した話 | 竹中 彰一 | note</a></p>

<p>以下のコマンドを実行してサイズの大きい(5ギガ以上)ディレクトリを検索。</p>

<pre><code>$ sudo du -g -x -d 5 / | awk '$1 &gt;= 5{print}'
</code></pre>

<p>なんだかよくわからないファイル達が次々とヒット。</p>

<h3>メモリ関連？</h3>

<p><code>/private/var/vm/sleepimage</code>が8Gほど食っていた。<br/>
このファイルは、スリープ状態のまま電源が切れた場合のバックアップとして取られているらしい。<br/>
<strong>これは消して問題なし。</strong><br/>
作らなくする方法は以下参照。<br/>
<a href="http://yoonchulkoh.hatenablog.com/entry/20110903/1315063179">MacBook Proを圧迫するsleepimageをどうにかする &ndash; 悪あがきプログラマー</a><br/>
<a href="http://blog.livedoor.jp/gf8d/archives/52159018.html">MacBook Airを圧迫するsleepimageをどうにかする : まるたけ食堂</a></p>

<p>詳しい説明は以下。<br/>
<a href="http://inforati.jp/apple/mac-tips-techniques/system-hints/how-to-change-the-sleep-mode-of-mac.html">MacBookやMacBook Proのスリープ方式を切り替えてバッテリー消費を減らす方法 / Inforati</a></p>

<p>同じフォルダ内にある、swapfile、はメモリ関連のファイルの模様。<br/>
基本的には、再起動したら消えるらしい。<br/>
再起動せずに消したい場合などは以下を参照。<br/>
<a href="http://d.hatena.ne.jp/kazuhooku/20130207/1360226719">Mac OS Xで、再起動せずにスワップを解放する方法 &ndash; kazuhoのメモ置き場</a></p>

<h3>Adobeのキャッシュ</h3>

<p>以下、参照。<br/>
<a href="http://helpx.adobe.com/jp/x-productkb/multi/cpsid_84648.html"> ハードディスクの空き領域が徐々に減っていく （Premiere Pro/Encore）</a></p>

<p>ここで、1.9Gくらいありました。</p>

<h3>Macのキャッシュ</h3>

<p>macのキャッシュは3つあるよう。<br/>
以下、それぞれの自分の状態。</p>

<p>・システムキャッシュ<br/>
<code>/System/Library/Caches</code> : 24Mb</p>

<p>・ローカルキャッシュ<br/>
<code>/Library/Caches</code> : 1.4Gb</p>

<p>・ユーザーキャッシュ<br/>
<code>/Users/ユーザ名/Library/Caches</code> : 9.48Gb</p>

<p>ユーザーキャッシュがかなり食っている。</p>

<p>ターミナルからワンライナーで削除。</p>

<pre><code>$ sudo rm -dfR /System/Library/Caches/* /Library/Caches/* ~/Library/Caches/*
</code></pre>

<p>削除後は再起動が推奨されるよう。</p>

<p>参考：<br/>
<a href="http://fumie-mac.blog.so-net.ne.jp/2012-07-07">Mac OS Xのメンテナンス：Mac おぼえがき Intel 編：So-netブログ</a><br/>
<a href="http://www.gadgetlunatic.com/post/803/">Macを高速化！キャッシュを削除。 | Gadget Lunatic</a></p>

<h3>コアダンプ</h3>

<p>以下のページを最初に見つけて容量改善を試みたのだけど、<br/>
このコアダンプのディレクトリは空だった。<br/>
ここが容量食ってる人は消したらいいと思う。</p>

<p><a href="http://eiyan.net/diary/mac-%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B8-%E3%81%9D%E3%81%AE%E4%BB%96-%E3%81%AE%E5%9C%A7%E8%BF%AB%E3%82%92%E3%82%B5%E3%82%AF%E3%83%83%E3%81%A8%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B%E6%96%B9/">mac ストレージ その他 の圧迫をサクッと解決する方法 &ndash; ゆるぶろ</a></p>

<hr />

<h3>結果</h3>

<p>他に音楽や動画など、いらないファイルがあったので、それらも削除。<br/>
結局、50Gくらい増やすことが出来ました。</p>
]]></content>
  </entry>
  
</feed>
