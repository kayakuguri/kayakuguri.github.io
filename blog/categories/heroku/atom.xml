<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2018-04-05T11:36:51+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HerokuでLaravel-Mixを利用する際の環境変数]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/12/13/laravel-mix-heroku-env/"/>
    <updated>2017-12-13T11:08:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/12/13/laravel-mix-heroku-env</id>
    <content type="html"><![CDATA[<p>HerokuでLaravel Mixを使っている際に、ビルドに失敗する時があり調べた結果、環境変数を追加するだけで対策出来たのでメモ。</p>

<!-- more -->


<h1>症状</h1>

<p>Herokuのビルドパックには <code>heroku/nodejs</code>と<code>heroku/php</code>を入れておき、順番はnode.jsが先。</p>

<p><code>
$ heroku buildpacks -a app-name
=== app-name Buildpack URLs
1. heroku/nodejs
2. heroku/php
</code></p>

<p>この状態でpushしてデプロイするも、npmのインストールなどは走るがLaravel Mixのコンパイルが走らない状態(たぶん）。<br/>
ビルドログを見ると以下のようなエラーが出ている。</p>

<p><code>
Additional dependencies must be installed. This will only take a moment.
warning " &gt; browser-sync-webpack-plugin@1.2.0" has unmet peer dependency "webpack@^1 || ^2 || ^3".
Finished. Please run Mix again.
</code></p>

<p>依存関係が解消出来てないとかなんとか？</p>

<h1>解決策</h1>

<p>ググると以下の情報。</p>

<p>環境変数に、<code>YARN_PRODUCTION</code>を<code>false</code>で追加してやるだけ。</p>

<ul>
<li><a href="https://www.neontsunami.com/posts/using-laravel-mix-on-heroku">Using Laravel Mix on Heroku &mdash; Neon Tsunami</a></li>
</ul>


<p>環境変数を追加してやることで、<code>devDependencies</code>から依存関係を取得するように指示してやる事が出来るよう。</p>

<blockquote><p>First, set <code>YARN_PRODUCTION</code> to false using the following command. This tells Heroku to install the devDependencies in your package.json, but leaves NODE_ENV as production.</p></blockquote>

<p>Google翻訳</p>

<blockquote><p>まず、次のコマンドを使用して<code>YARN_PRODUCTION</code>をfalseに設定します。これは、あなたのpackage.jsonにdevDependenciesをインストールするようにHerokuに指示しますが、NODE_ENVをプロダクションとして残します。</p></blockquote>

<p>記事の通り、上手く行ってなかった環境に環境変数を追加してやると無事、コンパイルされるようになった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravelでロードバランサを挟んだ時のisSecure判定を動作させる]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/10/27/laravel-https-loadbalancer/"/>
    <updated>2017-10-27T15:28:33+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/10/27/laravel-https-loadbalancer</id>
    <content type="html"><![CDATA[<p>Laravelの小ネタ。<br/>
ELBなどのロードバランサを挟むと <code>Request</code> の <code>isSecure</code> が正しく動作してくれなかったのでメモ。</p>

<!-- more -->


<p>ブレードでリンクを生成する時に、<code></code>と記述して組み立てていたのだが、ローカル環境では正しく<code>https</code>のURLで絶対パスが指定されていたのに、herokuにアップした途端に<code>http</code>で生成されるようになってしまった。</p>

<p><code>Request</code>の<code>root()</code>がどうやって判定しているのかを辿っていくと、<code>getScheme()</code>というRequestの関数内で、以下のように判定して取得していた。</p>

<p>```
public function getScheme()
{</p>

<pre><code>return $this-&gt;isSecure() ? 'https' : 'http';
</code></pre>

<p>}
```</p>

<p>よってこの、<code>isSecure</code>が正しく動作していないと思われる。<br/>
Herokuはロードバランサが標準で入っているため、その辺りだろうとググってみると公式ドキュメントがヒット。</p>

<blockquote><p>TLS／SSL証明を行うロードバランサの裏でアプリケーションが実行されている場合、アプリケーションが時々HTTPSリンクを生成しないことに、気づくでしょう。典型的な理由は、トラフィックがロードバランサにより８０番ポートへフォワーディングされるため、セキュアなリンクを生成すべきだと判断できないからです。</p></blockquote>

<ul>
<li><a href="https://readouble.com/laravel/5.5/ja/requests.html">Laravel 5.5 HTTPリクエスト</a> 最下部の、信用するプロキシの設定</li>
</ul>


<p>まさにこの通りで、<code>app/Http/Middleware/TrustProxies.php</code>で全てのプロキシを信用するようにしたところ、無事、<code>https</code>で生成されるようになった。</p>

<p><code>
protected $proxies = '**';
</code></p>

<blockquote><p>Amazon AWSや他の「クラウド」ロードバランサプロバイダを使用している場合は、実際のバランサのIPアドレスは分かりません。このような場合、全プロキシを信用するために、**を使います。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Heroku] Guzzleを使用してProximo経由で接続する]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/10/12/heroku-guzzle-proximo/"/>
    <updated>2017-10-12T16:40:29+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/10/12/heroku-guzzle-proximo</id>
    <content type="html"><![CDATA[<p>Herokuにて、外部APIに接続する際に固定IPにて接続したいことはたまにある。<br/>
<a href="http://kayakuguri.github.io/blog/2014/09/26/static-ip-heroku/">以前、QuotaGuard Staticを使用してのやり方は書いた</a>けれど、今回はProximoを利用した際に少しハマったのでメモ。</p>

<!-- more -->


<h1>Proximo</h1>

<p>Proximoは一番下のプランでも$5/月かかる有料アドオンとなっている。</p>

<ul>
<li><a href="https://elements.heroku.com/addons/proximo">Proximo &ndash; Add-ons &ndash; Heroku Elements</a></li>
<li><a href="https://devcenter.heroku.com/articles/proximo">Proximo | Heroku Dev Center</a></li>
</ul>


<h1>Guzzle</h1>

<p>以前の記事ではCURLで接続していたが、今回はGuzzleを使って接続してみる。</p>

<ul>
<li><a href="https://github.com/guzzle/guzzle">Guzzle, PHP HTTP client</a></li>
<li><a href="http://docs.guzzlephp.org/en/stable/">Guzzle Documentation</a></li>
</ul>


<h1>proxy経由で接続</h1>

<p>ドキュメントを確認すると、以下の方法でプロキシを指定可能、とのこと。<br/>
<a href="http://docs.guzzlephp.org/en/stable/request-options.html#proxy">http://docs.guzzlephp.org/en/stable/request-options.html#proxy</a></p>

<p><code>
$client-&gt;request('GET', '/', ['proxy' =&gt; 'tcp://localhost:8125']);
</code></p>

<p>ProximoをHerokuに追加すると、環境変数に自動的にプロキシのURLが追加される。</p>

<p><code>
PROXIMO_URL=http://proxy:your-password-here@proxy-xx-xxx-x-xxx.proximo.io
</code></p>

<p>上記URL内の、<code>xx-xxx-x-xxx</code>の部分の数字が固定IPとなる。<br/>
(ダッシュボードからも確認可）</p>

<p>これをそのままproxyのURLとして指定してやればOK…だと思ったのだが、エラーが出てしまった。</p>

<blockquote><p>cURL error 56: Proxy CONNECT aborted</p></blockquote>

<p>QuotaGuard Staticのアドオンを追加した際に取得出来るURLを同じように指定してやったところ、問題なくアクセス出来たので、Guzzleは悪くなさそう。<br/>
ProximoだとURLをパースしたりとかが必要なのか…など悩んでいて、URLを見比べていると、ProximoのURLにはポート番号がついてないことに気付く。</p>

<p>改めてドキュメントを確認してみると、ポート番号は<code>80</code>で固定、とのこと。</p>

<blockquote><p>If you’d rather use Proximo as a standard HTTP proxy, use PROXIMO_URL on port 80.<br/>
<a href="https://devcenter.heroku.com/articles/proximo#using-the-proximo-http-proxy">https://devcenter.heroku.com/articles/proximo#using-the-proximo-http-proxy</a></p></blockquote>

<p>よって、環境変数に追加されたURLの最後に <code>:80</code> とポート番号を追加してやると、無事、アクセスすることが出来た。</p>

<p>```
$proxy_url = env(&lsquo;PROXIMO_URL&rsquo;) . &lsquo;:80&rsquo;;
$res = $client->request(&lsquo;GET&rsquo;, &lsquo;<a href="http://ip.jsontest.com/">http://ip.jsontest.com/</a>&rsquo;, [</p>

<pre><code>'proxy' =&gt; $proxy_url
</code></pre>

<p>]);
$res_body = json_decode($res->getBody(), true);
var_dump($res_body);
```</p>

<p>Proximoの固定IPがJSON内に返ってきたらOK。</p>

<p>ポート番号がデフォルトでは入っていないため、少しハマってしまった。</p>

<h1>参考</h1>

<ul>
<li><a href="https://qiita.com/sho7650/items/872b5757e250d4b3eb95">[Heroku]外部接続時に固定IP化する2つの方法[Proximo] &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]PostgresとRedisの環境設定]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/09/21/heroku-postgres-redis/"/>
    <updated>2017-09-21T15:16:32+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/09/21/heroku-postgres-redis</id>
    <content type="html"><![CDATA[<p>LaravelをHerokuで使用する際に、Heroku PostgresとHeroku Redisの接続情報を環境変数から取得する設定のメモ。</p>

<!-- more -->


<h1>概要</h1>

<p>改めて。<br/>
Herokuでは標準のadd-onとして<a href="https://elements.heroku.com/addons/heroku-postgresql">Heroku Postgres</a>と<a href="https://elements.heroku.com/addons/heroku-redis">Heroku Redis</a>が用意されている。<br/>
クレジットカードさえ登録していれば無料で使えるので便利。</p>

<p>この接続情報はアドオンを登録した際に自動的に以下のような変数で登録がされる。</p>

<p><strong>Postgres</strong><br/>
<code>DATABASE_URL</code> = <code>postgres://username:password@hostname.amazonaws.com:5432/database</code></p>

<p><strong>Redis</strong><br/>
<code>REDIS_URL</code> = <code>redis://h:password@hostname.amazonaws.com:port_no</code></p>

<p>各種情報がURL形式で組み込まれているのだが、間違ってもこれを自分でバラしてそれぞれ個別に環境変数に入れる、などとしてはいけない。<br/>
というのも、この接続情報はPostgresやRedisにメンテナンスが入った際に前の接続情報は破棄され、新しい情報が同じ環境変数で設定されるため、<br/>
自前でバラして作ってしまうとその変更した情報に対応できなくなり、接続エラーとなってしまう。</p>

<p>よって、必ず自動でセットされる、<code>DATABASE_URL</code>や<code>REDIS_URL</code>を使うこと。<br/>
これはHerokuを使う際には常識として覚えておくこと。</p>

<h1>取得</h1>

<p>というわけで、それぞれの値を取得したURLからパースしてLaravel用に環境変数にセットする。<br/>
以下のように環境変数があればそれをパースして環境変数としてセットしてやるようにするのがスマートっぽい。<br/>
これだとローカルでは個別に<code>.env</code>ファイルで設定した値を使用してやることが出来る。</p>

<p><code>/config/database.php</code> の冒頭に書く。</p>

<p>```
//Postgres
if (getenv(&lsquo;DATABASE_URL&rsquo;)) {</p>

<pre><code>$url = parse_url(getenv('DATABASE_URL'));
putenv('DB_HOST='.$url['host']);
putenv('DB_PORT='.$url['port']);
putenv('DB_DATABASE='.substr($url["path"], 1));
putenv('DB_USERNAME='.$url["user"]);
putenv('DB_PASSWORD='.$url['pass']);
</code></pre>

<p>}</p>

<p>//Redis
if (getenv(&lsquo;REDIS_URL&rsquo;)) {</p>

<pre><code>$url = parse_url(getenv('REDIS_URL'));
putenv('REDIS_HOST='.$url['host']);
putenv('REDIS_PORT='.$url['port']);
putenv('REDIS_PASSWORD='.$url['pass']);
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カスタムドメイン取得とLet's Encrypt証明書とHeroku SSLと]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/08/04/customdomain-letsencrypt-herokussl/"/>
    <updated>2017-08-04T17:06:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/08/04/customdomain-letsencrypt-herokussl</id>
    <content type="html"><![CDATA[<p>Herokuへの証明書アップロード手順の確認のために、カスタムドメイン・証明書の取得から試してみた。<br/>
長い記事になりますが、備忘録として。</p>

<!-- more -->


<h1>ドメインの取得</h1>

<p>無料で独自ドメインを取得出来るという、 <a href="http://www.freenom.com/ja/index.html">freenom</a>を使用する。<br/>
(やはり無料だけあって色々とデメリットがあげられたりしているので、ご利用は自己責任で)<br/>
取得できるドメインは5種類で、 <code>.tk/.ml/.ga/.cf/.gq</code> となっている。</p>

<p>詳しい登録方法などは以下を参考にさせてもらいました。</p>

<ul>
<li><a href="http://qiita.com/teekay/items/135dc67e39f24997019e">無料のドメインを取得する（2016年10月） &ndash; Qiita</a></li>
</ul>


<p>今回は <code>.tk</code> のドメインで取得した。<br/>
ちなみに、<code>.tk</code>のドメインは90日間で25アクセス以下だった場合には登録が削除されるらしいので運用の際は注意。</p>

<p>以下のドメインで取得してみた。(もうドメイン登録はキャンセル済み）</p>

<blockquote><p>ssl-sni-test.tk</p></blockquote>

<p>ユーザー登録はメールアドレスからの登録にしたが、住所や名前などは必須となっていた。<br/>
以下が必須だった項目。</p>

<ul>
<li>first name</li>
<li>last name</li>
<li>address1</li>
<li>city</li>
<li>state</li>
<li>postcode</li>
<li>phone number</li>
<li>password</li>
</ul>


<p>登録すれば同時にドメインの申請も完了。</p>

<h2>ネームサーバとDNS</h2>

<p>freenomには無料で利用できるDNSサーバが用意されているのでそれを利用する。</p>

<p>上部メニューから <code>Services -&gt; My Domains</code> を選択。<br/>
編集したいドメインの、 <code>Manage Domain</code>をクリック。</p>

<p>タブメニューの <code>Management Tools -&gt; Nameservers</code>を選択。<br/>
<code>Use default nameservers</code>を選択して、<code>Change Nameservers</code>をクリック。<br/>
これで、freenomのネームサーバを使う設定に変更できた。<br/>
（デフォルトではfreenomのネームサーバを使うように設定されていないため、DNSの設定が出来なかった。）</p>

<p>あとは、タブメニューの <code>Manage Freenom DNS</code>を選択。<br/>
ここで、DNSの設定が可能となる。</p>

<h1>証明書の取得</h1>

<p>証明書は無料で発行出来る、 <code>Let</code>s Encrypt`を利用する。<br/>
証明書の発行には、ブラウザ上で発行出来るサービスがあるのでそちらを利用させてもらう。<br/>
以下に作者さんの詳しい説明があるので、そちらから。</p>

<ul>
<li><a href="http://qiita.com/tappie/items/76881fdf7996c57a105a">Let&#39;s Encrypt の証明書をブラウザ上で簡単取得 (dns-01 / ECDSA もあるよ) &ndash; Qiita</a></li>
</ul>


<p>基本、そのまま進めて問題ないが、１点だけ、秘密鍵はブラウザ上では作らずにローカルPC上で作成したものをアップした方がよさそう。<br/>
ブラウザ上で作ったものをHerokuにアップするとパスフレーズを解除しろ、と言われ、パスフレーズを解除しようとコマンドを入れるとエラーが出たりしたため、最初からパスフレーズがかかっていないものを作成し、アップロードした方が確実と思われる。</p>

<p><code>
$ openssl genrsa 2048 &gt; key.pem
</code></p>

<p>ドメインの所有証明は、<code>dns-01</code>の方法を使用した。<br/>
取得したチャレンジトークンをTXTレコードとしてDNSに登録する。</p>

<p>登録例</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Name </th>
<th align="left"> Type </th>
<th align="left"> TTL </th>
<th align="left"> Target </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>_acme-challenge.ssl-sni-test.tk.</code> </td>
<td align="left"> TXT </td>
<td align="left"> 14440 </td>
<td align="left"> <code>"L9Dlzt3Kzfu2mLYbmW2RTUdEzNBuNPiyyBt6yQyEjKk"</code> |</td>
</tr>
</tbody>
</table>


<p>結構すぐに反映された。<br/>
あとは証明書を発行するのみ。</p>

<h1>Herokuへアップロード</h1>

<p>Herokuのアプリに証明書を適用させるには2種類の方法がある。</p>

<ul>
<li><code>SSL Endpoint</code> : SSLアドオンを利用した方法 ($20/month)

<ul>
<li>Typeは <code>sni</code></li>
</ul>
</li>
<li><code>Heroku SSL</code> : Heroku標準の機能 (無料)

<ul>
<li>Typeは <code>endpoint</code></li>
</ul>
</li>
</ul>


<p><code>SSL Endpoint</code>は従来からの方法で、2016年末ごろに<code>Heroku SSL</code>が追加された。<br/>
なので、今後追加する場合には<code>Heroku SSL</code>を利用する方がよい。</p>

<p>ただし、<code>Heroku SSL</code>はFree Dynoで利用しているアプリには使用出来ないので注意。<br/>
今回は <code>Heroku SSL</code>を利用する。</p>

<h2>アップロード方法</h2>

<p>アップロード方法は管理画面からGUI操作で行うか、Heroku CLI経由でコマンドラインから行うかの2種類がある。</p>

<h3>管理画面からアップロードする</h3>

<p><code>Setting</code>から、<code>Domains and certificates</code>セクションにある、<code>Configure SSL</code>をクリック。</p>

<p><img src="/images/2017/08/ssl01.jpg" alt="" /></p>

<p>更新方法を聞かれるので、今回は<code>Manually</code>を選択。<br/>
<code>Automatically</code>はLet&rsquo;s Encryptの場合にのみ使える自動更新のオプションで、今回はLet&rsquo;s Enctyptなので利用出来るのだが、普通はマニュアルになるため今回もマニュアルにした。</p>

<p><img src="/images/2017/08/ssl02.jpg" alt="" /></p>

<p>アップロードするウインドウが表示されるので、ファイルをドラッグ。</p>

<p><img src="/images/2017/08/ssl03.jpg" alt="" /></p>

<p>アップするものは以下。</p>

<ul>
<li>証明書 (+中間証明書)</li>
<li>秘密鍵</li>
</ul>


<p>中間証明書は、Let&rsquo;s Encryptの場合だけなのかは不明だが、今回はなしでもアップすることが出来た。<br/>
通常は必要だと思われる（証明書発行会社のページには一緒にアップして下さい、とある）ので末尾に追加しておく。</p>

<p><img src="/images/2017/08/ssl04.jpg" alt="" /></p>

<p>無事、アップされると以下のようになる。</p>

<p><img src="/images/2017/08/ssl06.jpg" alt="" /></p>

<h3>コマンドからのアップロード</h3>

<p><code>certs:add</code>でアップ可能。コマンドのヘルプは以下。</p>

<p>```
$ heroku certs:add -h
Usage: heroku certs:add CRT KEY [flags]</p>

<p>add an SSL certificate to an app</p>

<p>Flags:
 -a, &mdash;app     (required) app to run command against
 -r, &mdash;remote  git remote of app to use
 &mdash;bypass      bypass the trust chain completion step
 &mdash;domains     domains to create after certificate upload
 &mdash;type        type to create, either &lsquo;sni&rsquo; or &lsquo;endpoint&rsquo;</p>

<p>Note: certificates with PEM encoding are also valid</p>

<p>Example:</p>

<pre><code>$ heroku certs:add example.com.crt example.com.key
</code></pre>

<p>Example (Certificate Intermediary):</p>

<pre><code> $ heroku certs:add intermediary.crt example.com.crt example.com.key
</code></pre>

<p>```</p>

<p>アップする。</p>

<p>```
$ heroku certs:add ssl-sni-test-cert.pem ssl-sni-test-server-nopass.key -a sni-test
Resolving trust chain&hellip; done
Adding SSL certificate to ⬢ sni-test&hellip; done
Certificate details:
Common Name(s): ssl-sni-test.tk
Expires At:     2017-11-02 02:12 UTC
Issuer:         /C=US/O=Let&rsquo;s Encrypt/CN=Let&rsquo;s Encrypt Authority X3
Starts At:      2017-08-04 02:12 UTC
Subject:        /CN=ssl-sni-test.tk
SSL certificate is verified by a root authority.
? Select domains you would like to add</p>

<p>=== Your certificate has been added successfully.  Add a custom domain to your app by running ⬢ heroku domains:add &lt;yourdomain.com>
```</p>

<p>途中、ドメインの選択する箇所があったが、一つしかないしそのままエンターでいけた。</p>

<p>コマンドからアップ状況を確認する。</p>

<p><code>
$ heroku certs -a sni-test
Name              Common Name(s)   Expires               Trusted  Type
────────────────  ───────────────  ────────────────────  ───────  ────
pteranodon-48202  ssl-sni-test.tk  2017-11-02 02:12 UTC  True     SNI
</code></p>

<h1>ドメインの設定</h1>

<p>Herokuへのドメイン追加、と、DNSの設定、の２つが必要。</p>

<h2>Herokuへのドメイン追加</h2>

<p>証明書をアップした時と同じく、<code>Setting</code>画面から追加する。</p>

<p><img src="/images/2017/08/ssl07.jpg" alt="" /></p>

<p>追加したいドメインを登録。</p>

<p><img src="/images/2017/08/ssl08.jpg" alt="" /></p>

<p>登録すると以下のようになる。</p>

<p><img src="/images/2017/08/ssl09.jpg" alt="" /></p>

<p>もちろん、コマンドからも登録可能。</p>

<p>```
$ heroku domains:add ssl-sni-test.tk -a sni-test
Adding ssl-sni-test.tk to ⬢ sni-test&hellip; done
 ▸    Configure your app&rsquo;s DNS provider to point to the DNS Target ssl-sni-test.tk.herokudns.com.
 ▸    For help, see <a href="https://devcenter.heroku.com/articles/custom-domains">https://devcenter.heroku.com/articles/custom-domains</a></p>

<p>The domain ssl-sni-test.tk has been enqueued for addition
 ▸    Run heroku domains:wait &lsquo;ssl-sni-test.tk&rsquo; to wait for completion
```</p>

<p>コマンドから確認すると以下のようになる。</p>

<p>```
$ heroku domains -a sni-test
=== sni-test Heroku Domain
sni-test.herokuapp.com</p>

<p>=== sni-test Custom Domains
Domain Name      DNS Target
───────────────  ─────────────────────────────
ssl-sni-test.tk  ssl-sni-test.tk.herokudns.com
```</p>

<h2>DNSの設定</h2>

<p>freenomからDNSの設定を行う。<br/>
Heroku側のドメイン追加で取得したDNS TargetをCNAMEとして登録する。以下のような形で追加した。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Name </th>
<th align="left"> Type </th>
<th align="left"> TTL </th>
<th align="left"> Target </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">  </td>
<td align="left"> CNAME </td>
<td align="left"> 14440 </td>
<td align="left"> <code>ssl-sni-test.tk.herokudns.com</code> |</td>
</tr>
</tbody>
</table>


<h1>アクセス</h1>

<p><code>https</code>でアクセスすると、無事、アクセス出来た。<br/>
SSLもLet&rsquo;s Encryptでちゃんと反映されていた。</p>

<p><img src="/images/2017/08/ssl10.jpg" alt="" /></p>

<h1>2つの証明書と2つのドメイン</h1>

<p>ここからは応用検証。<br/>
一つのHerokuアプリに2つのドメインを適用させ、それぞれに別々の証明書を適用させてみる。</p>

<h2>サブドメインの証明書</h2>

<p>先ほどと同じようにサブドメインの証明書を取得した。以下で取得する。</p>

<blockquote><p>add.ssl-sni-test.tk</p></blockquote>

<p>チャレンジトークンも変わるので、DNSレコードに2つ目のTXTレコードを追加する。</p>

<h2>Herokuへアップ</h2>

<p>管理画面から同じようにアップしてみたが、すでにアップされているものを置き換える事になるようで、複数の証明書をアップすることは出来なかった。<br/>
次にコマンドから追加してみるも、以下のようにエラーが出た。</p>

<p><code>
$ heroku certs:add cert.pem server.key -a sni-test
Resolving trust chain... done
Adding SSL certificate to ⬢ sni-test... !
 ▸    Only one SNI endpoint is allowed per app (try certs:update instead).
</code></p>

<p>どうやら証明書は一つしかアップ出来ないよう。<br/>
しかし、<code>Only one SNI endpoint</code>とあるように、<code>sni</code>のタイプには証明書は一つしかアップできない、とのことのよう。</p>

<h3>SSL Endpoint</h3>

<p>というわけで、SSL Endpointのアドオンを追加し、試してみた。<br/>
アドオンを追加する。(有料なので注意)</p>

<p><code>
$ heroku addons:create ssl:endpoint
</code></p>

<p>証明書をアップする。その際、typeに<code>endpoint</code>を指定する。</p>

<p>```
$ heroku certs:add cert.pem server.key &mdash;type endpoint -a sni-test
Resolving trust chain&hellip; done
Adding SSL certificate to ⬢ sni-test&hellip; done
⬢ sni-test now served by kanagawa-69051.herokussl.com
Certificate details:
Common Name(s): add.ssl-sni-test.tk
Expires At:     2017-11-02 02:49 UTC
Issuer:         /C=US/O=Let&rsquo;s Encrypt/CN=Let&rsquo;s Encrypt Authority X3
Starts At:      2017-08-04 02:49 UTC
Subject:        /CN=add.ssl-sni-test.tk
SSL certificate is verified by a root authority.
? Select domains you would like to add</p>

<p>=== Your certificate has been added successfully.  Update your application&rsquo;s DNS settings as follows
Domain           Record Type  DNS Target
───────────────  ───────────  ─────────────────────────────
ssl-sni-test.tk  ALIAS/ANAME  ssl-sni-test.tk.herokudns.com
```</p>

<p>やはりtypeが違うのでアップすることが出来た。<br/>
証明書のアップ状況を確認してみる。</p>

<p><code>
$ heroku certs -a sni-test
Name                 Endpoint                      Common Name(s)       Expires               Trusted  Type
───────────────────  ────────────────────────────  ───────────────────  ────────────────────  ───────  ────────
kanagawa-69051       kanagawa-69051.herokussl.com  add.ssl-sni-test.tk  2017-11-02 02:49 UTC  True     Endpoint
corythosaurus-87918  (Not applicable for SNI)      ssl-sni-test.tk      2017-11-02 02:12 UTC  True     SNI
</code></p>

<h2>ドメインの追加</h2>

<p>同じく、Herokuへドメインを追加する。<br/>
登録するTarget Nameは、<code>herokudns.com</code>のものでもよいし、<code>kanagawa-69051.herokussl.com</code>のSSL Endpointで設定されているものでもどちらでもよい。</p>

<p>DNSには以下のように追加した。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Name </th>
<th align="left"> Type </th>
<th align="left"> TTL </th>
<th align="left"> Target </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>add</code> </td>
<td align="left"> CNAME </td>
<td align="left"> 14440 </td>
<td align="left"> <code>kanagawa-69051.herokussl.com</code> |</td>
</tr>
</tbody>
</table>


<h2>アクセス</h2>

<p>これで無事、 <code>ssl-sni-test.tk</code> と、 <code>add.ssl-sni-test.tk</code> の両方へアクセス出来るようになった。<br/>
さらに、どちらにも別々の証明書を適用させる事が出来た。</p>

<h1>感想</h1>

<p>無料ドメインと無料証明書はかなり便利そう。ドメインの方は運用に不安が残るが、全く無料で独自ドメインのHTTPSのサイトが持てるというのはちょっと驚き。(Herokuは無料では不可能）</p>

<p>Herokuの場合はアプリを気軽に作る事が出来るため、一つのサーバ(アプリ)での運用、というのはあまりすることがないと思われる。<br/>
そのため、<code>sni</code> <code>endpoint</code> それぞれのタイプで一つしか証明書がアップ出来ないようになっているのだと思う。それだったらアプリを分ければいいよ、との考え方だと思うので、複数アップロードの出番はまずないと思われる。</p>

<h1>参考</h1>

<ul>
<li><a href="http://qiita.com/teekay/items/135dc67e39f24997019e">無料のドメインを取得する（2016年10月） &ndash; Qiita</a></li>
<li><a href="http://qiita.com/tappie/items/76881fdf7996c57a105a">Let&#39;s Encrypt の証明書をブラウザ上で簡単取得 (dns-01 / ECDSA もあるよ) &ndash; Qiita</a></li>
<li><a href="https://zenlogic.jp/user-support/knowledge/ssl/sni.html">SSL基礎知識 1つのサーバーで複数の証明書が使える、SNIって？｜Zenlogic &ndash; ファーストサーバ株式会社</a></li>
<li><a href="https://devcenter.heroku.com/articles/ssl">Heroku SSL | Heroku Dev Center</a></li>
<li><a href="https://devcenter.heroku.com/articles/ssl-endpoint">SSL Endpoint | Heroku Dev Center</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
