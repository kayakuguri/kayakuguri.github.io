<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-12-24T18:24:41+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vimにNeoBundleとNeoCompleteを入れる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/12/24/neobundle-neocomplete/"/>
    <updated>2015-12-24T15:09:50+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/12/24/neobundle-neocomplete</id>
    <content type="html"><![CDATA[<p>vim環境を整えていくためにNeoCompleteを入れてみる。</p>

<!-- more -->


<h2>NeoBundle</h2>

<p>NeoCompleteを入れるために、vimのプラグイン管理ツールである、NeoBundleを入れる。<br/>
<a href="https://github.com/Shougo/neobundle.vim">Shougo/neobundle.vim</a></p>

<p>インストール方法は上記公式のReadmeに従った。</p>

<p>任意のディレクトリにインストール用ファイルをダウンロードし、実行。</p>

<pre><code>$ curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh &gt; install.sh
$ sh ./install.sh
$ rm ./install.sh
</code></pre>

<p>インストール時に表示される以下の設定を、<code>.vimrc</code>に記述。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"NeoBundle Scripts-----------------------------
</span><span class='line'>if has('vim_starting')
</span><span class='line'>  if &compatible
</span><span class='line'>    set nocompatible               " Be iMproved
</span><span class='line'>  endif
</span><span class='line'>
</span><span class='line'>  " Required:
</span><span class='line'>  set runtimepath+=~/.vim/bundle/neobundle.vim/
</span><span class='line'>endif
</span><span class='line'>
</span><span class='line'>" Required:
</span><span class='line'>call neobundle#begin(expand('~/.vim/bundle'))
</span><span class='line'>
</span><span class='line'>" Let NeoBundle manage NeoBundle
</span><span class='line'>" Required:
</span><span class='line'>NeoBundleFetch 'Shougo/neobundle.vim'
</span><span class='line'>
</span><span class='line'>" Add or remove your Bundles here:
</span><span class='line'>NeoBundle 'Shougo/neosnippet.vim'
</span><span class='line'>NeoBundle 'Shougo/neosnippet-snippets'
</span><span class='line'>NeoBundle 'tpope/vim-fugitive'
</span><span class='line'>NeoBundle 'ctrlpvim/ctrlp.vim'
</span><span class='line'>NeoBundle 'flazz/vim-colorschemes'
</span><span class='line'>
</span><span class='line'>" You can specify revision/branch/tag.
</span><span class='line'>NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }
</span><span class='line'>
</span><span class='line'>" Required:
</span><span class='line'>call neobundle#end()
</span><span class='line'>
</span><span class='line'>" Required:
</span><span class='line'>filetype plugin indent on
</span><span class='line'>
</span><span class='line'>" If there are uninstalled bundles found on startup,
</span><span class='line'>" this will conveniently prompt you to install them.
</span><span class='line'>NeoBundleCheck
</span><span class='line'>"End NeoBundle Scripts-------------------------</span></code></pre></td></tr></table></div></figure>


<p>vimを起動すると、<code>NeoBundleCheck</code>の記述があるので、インストールできていないプラグインを自動でチェックしてくれて、インストールを促される。<br/>
そのまま<code>y</code>を入力して、プラグインのインストールを完了させる。</p>

<h3>プラグインのインストール</h3>

<p>プラグインのインストールは、<code>.vimrc</code>内の、<br/>
<code>call neobundle#begin</code>と、<code>call neobundle#end</code>の間に、<br/>
<code>NeoBundle xxx/xxx</code>を記述し、vimを起動してやる。</p>

<h2>NeoComplete</h2>

<p>上記の方法に則って、以下を<code>.vimrc</code>に追加。</p>

<pre><code>NeoBundle 'Shougo/neocomplete.vim'
</code></pre>

<h3>lua</h3>

<p>luaという言語で作成されているため、luaが有効になったvimをインストールする必要がある。<br/>
luaがインストールされているかどうかは、vimのバージョン確認で確認出来るよう。</p>

<pre><code>$ vim --version | grep lua
+dialog_con_gui  +lua             +rightleft       +windows
...
</code></pre>

<p><code>+lua</code>となっていればインストール済。<br/>
<code>-lua</code>となっていればインストールされていない。</p>

<p>自分の環境ではインストールされていたが、されていない場合はvimをlua付きでインストールし直す必要があるよう。</p>

<pre><code>$ brew install vim --with-lua
</code></pre>

<p><a href="https://github.com/Shougo/neocomplete.vim#vim-for-mac-os-x">https://github.com/Shougo/neocomplete.vim#vim-for-mac-os-x</a></p>

<h3>設定</h3>

<p>設定を<code>.vimrc</code>に記述。<br/>
公式サイトにある設定内容をそのまま使用した。<br/>
<a href="https://github.com/Shougo/neocomplete.vim">Shougo/neocomplete.vim</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>" Disable AutoComplPop.
</span><span class='line'>let g:acp_enableAtStartup = 0
</span><span class='line'>" Use neocomplete.
</span><span class='line'>let g:neocomplete#enable_at_startup = 1
</span><span class='line'>" Use smartcase.
</span><span class='line'>let g:neocomplete#enable_smart_case = 1
</span><span class='line'>" Set minimum syntax keyword length.
</span><span class='line'>let g:neocomplete#sources#syntax#min_keyword_length = 3
</span><span class='line'>let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
</span><span class='line'>
</span><span class='line'>" Define dictionary.
</span><span class='line'>let g:neocomplete#sources#dictionary#dictionaries = {
</span><span class='line'>    \ 'default' : '',
</span><span class='line'>    \ 'vimshell' : $HOME.'/.vimshell_hist',
</span><span class='line'>    \ 'scheme' : $HOME.'/.gosh_completions'
</span><span class='line'>        \ }
</span><span class='line'>
</span><span class='line'>" Define keyword.
</span><span class='line'>if !exists('g:neocomplete#keyword_patterns')
</span><span class='line'>    let g:neocomplete#keyword_patterns = {}
</span><span class='line'>endif
</span><span class='line'>let g:neocomplete#keyword_patterns['default'] = '\h\w*'
</span><span class='line'>
</span><span class='line'>" Plugin key-mappings.
</span><span class='line'>inoremap &lt;expr&gt;&lt;C-g&gt;     neocomplete#undo_completion()
</span><span class='line'>inoremap &lt;expr&gt;&lt;C-l&gt;     neocomplete#complete_common_string()
</span><span class='line'>
</span><span class='line'>" Recommended key-mappings.
</span><span class='line'>" &lt;CR&gt;: close popup and save indent.
</span><span class='line'>inoremap &lt;silent&gt; &lt;CR&gt; &lt;C-r&gt;=&lt;SID&gt;my_cr_function()&lt;CR&gt;
</span><span class='line'>function! s:my_cr_function()
</span><span class='line'>  return (pumvisible() ? "\&lt;C-y&gt;" : "" ) . "\&lt;CR&gt;"
</span><span class='line'>  " For no inserting &lt;CR&gt; key.
</span><span class='line'>  "return pumvisible() ? "\&lt;C-y&gt;" : "\&lt;CR&gt;"
</span><span class='line'>endfunction
</span><span class='line'>" &lt;TAB&gt;: completion.
</span><span class='line'>inoremap &lt;expr&gt;&lt;TAB&gt;  pumvisible() ? "\&lt;C-n&gt;" : "\&lt;TAB&gt;"
</span><span class='line'>" &lt;C-h&gt;, &lt;BS&gt;: close popup and delete backword char.
</span><span class='line'>inoremap &lt;expr&gt;&lt;C-h&gt; neocomplete#smart_close_popup()."\&lt;C-h&gt;"
</span><span class='line'>inoremap &lt;expr&gt;&lt;BS&gt; neocomplete#smart_close_popup()."\&lt;C-h&gt;"
</span><span class='line'>" Close popup by &lt;Space&gt;.
</span><span class='line'>"inoremap &lt;expr&gt;&lt;Space&gt; pumvisible() ? "\&lt;C-y&gt;" : "\&lt;Space&gt;"
</span><span class='line'>
</span><span class='line'>" AutoComplPop like behavior.
</span><span class='line'>"let g:neocomplete#enable_auto_select = 1
</span><span class='line'>
</span><span class='line'>" Shell like behavior(not recommended).
</span><span class='line'>"set completeopt+=longest
</span><span class='line'>"let g:neocomplete#enable_auto_select = 1
</span><span class='line'>"let g:neocomplete#disable_auto_complete = 1
</span><span class='line'>"inoremap &lt;expr&gt;&lt;TAB&gt;  pumvisible() ? "\&lt;Down&gt;" : "\&lt;C-x&gt;\&lt;C-u&gt;"
</span><span class='line'>
</span><span class='line'>" Enable omni completion.
</span><span class='line'>autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
</span><span class='line'>autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
</span><span class='line'>autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
</span><span class='line'>autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
</span><span class='line'>autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
</span><span class='line'>
</span><span class='line'>" Enable heavy omni completion.
</span><span class='line'>if !exists('g:neocomplete#sources#omni#input_patterns')
</span><span class='line'>  let g:neocomplete#sources#omni#input_patterns = {}
</span><span class='line'>endif
</span><span class='line'>"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]-&gt;\h\w*\|\h\w*::'
</span><span class='line'>"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|-&gt;\)'
</span><span class='line'>"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|-&gt;\)\|\h\w*::'
</span><span class='line'>
</span><span class='line'>" For perlomni.vim setting.
</span><span class='line'>" https://github.com/c9s/perlomni.vim
</span><span class='line'>let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*-&gt;\h\w*\|\h\w*::'</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで補完が効くようになる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/12/neocomplete.jpg" alt="" /></p>

<h2>参考</h2>

<p><a href="http://cpp0302.hatenablog.com/entry/2015/04/10/033609">neocomplcacheからneocompleteへの乗り換え &ndash; 自分の速さで</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linuxのパッケージ管理についての用語を理解する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/12/18/linux-package/"/>
    <updated>2015-12-18T18:06:02+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/12/18/linux-package</id>
    <content type="html"><![CDATA[<p>vagrantで環境を構築する際に、PHPの各種バージョンを指定して作成した場合はありますが、<br/>
その際にyumでリポジトリを追加してパッケージをインストール、、などと言われても意味がわかっていなかったので、ざっくりと調べてみました。</p>

<!-- more -->


<h2>yum</h2>

<p>RedHat系ディストリビューションのパッケージ管理システムのこと。<br/>
PHPでいう、composerのLinux(RedHat系)版、みたいなものでしょうか。<br/>
ちなみにRedHat系ディストリビューションのLinux、とは、CentOSがそれにあたるよう。(Fedora、とか）<br/>
<a href="https://ja.wikipedia.org/wiki/Linux%E3%83%87%E3%82%A3%E3%82%B9%E3%83%88%E3%83%AA%E3%83%93%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E6%AF%94%E8%BC%83">Linuxディストリビューションの比較 &ndash; Wikipedia</a><br/>
(Debian系のディストリビューション、では、<code>apt-get</code>が使われる。<br/>
UbuntuはDebian系ディストリビューション。）</p>

<p>一方、<code>rpm</code>、というのもあるそうですが、rpmを機能拡張したものがyum、という位置づけのようです。<br/>
<a href="http://blog.inouetakuya.info/entry/20111006/1317900802">初心者の頃に知っておきたかった rpm と yum の違いと使い分け &ndash; 彼女からは、おいちゃんと呼ばれています</a></p>

<p>要するにyumで提供されているものはyumを使ったほうが楽だからyumを使うけれど、<br/>
rpmでしかないものや、yumで提供されているものが古かったりするばあいは、rpmで直接指定する、みたいな感じっぽいです。</p>

<p>また、上記サイトに用語の説明として以下のように記載されていました。</p>

<blockquote><p>・パッケージ<br/>
ソフトウェアの一連のファイルをまとめたもの<br/>
・リポジトリ<br/>
パッケージを集めて保管している場所。インターネット上にいろいろなリポジトリが存在する<br/>
・RPM データベース<br/>
rpm 形式のパッケージがインストールされると、その情報は「/usr/lib/rpm」に格納される。このデータのまとまりを「RPM データベース」という</p></blockquote>

<h2>リポジトリ</h2>

<p>今聞くとgitしか思い浮かびませんが、たぶん意味は同じ。<br/>
リポジトリ、なのか、レポジトリなのか、揺れがあります。<br/>
(リポジトリ、のほうが多い気がしました）</p>

<p><a href="http://www.searchman.info/fedoracore4/sev1050.html">yumの概念を覚えよう。fedoracore4では標準でついてます。</a></p>

<blockquote><p>最新バージョンのソフトウェアは、リポジトリというサイトに登録されていています。<br/>
まあ、簡単にいうと、リポジトリとはソフトウェアの貯蔵庫みたいなもの。</p></blockquote>

<p>PHPでいうところの、<code>composer.json</code>がネット上にアップされていて、どのパッケージのどのバージョンをインストールするか、みたなものが管理されており、それをリポジトリ、と呼ぶ、という事でしょうか。</p>

<h2>remi</h2>

<p><a href="http://oki2a24.com/2012/03/13/what-is-rpmforge-remi-epel/">yum が便利になる RPMforge、Remi、EPEL とは一体何なのか &#8211; oki2a24</a></p>

<p>有名なサードパーティのリポジトリの一つのよう。<br/>
あと有名なものは上記サイトにあるように、 <code>EPEL</code> とか、 <code>RPMforge</code> とかがあるみたいです。</p>

<p><a href="http://rpms.famillecollet.com/">Remi&rsquo;s RPM repository</a></p>

<p>人の名前らしい。<br/>
<a href="http://snickerjp.blogspot.jp/2013/01/remi.html">&#12300;remiってなに&#65311;&#12301;って話 : 元うなぎ屋</a></p>

<h2>CentOSのPHP</h2>

<p>ようやく本題に近づいてきました。<br/>
現状、CentOSの公式リポジトリで提供されているPHPは、5.4、らしいです。<br/>
CentOS7.x系では、PHP5.4、なのだと思います。<br/>
CentOS6.x系では、PHP5.3、のようです。</p>

<p>ですので、最新のPHPを含め、他のバージョンのPHPをインストールするには、そのPHPがパッケージされたリポジトリを使用する必要があります。<br/>
その際に上記のremi、を使うのがもっともポピュラーな方法のようです。</p>

<h3>EPELリポジトリ</h3>

<blockquote><p>Remi で提供されているソフトウェアをインストールするためには EPEL のリポジトリも必須要件となっていますので、EPELのリポジトリの追加を行った後に Remi のリポジトリを追加します。<br/>
<a href="http://weblabo.oscasierra.net/centos7-php56-install/">CentOS 7 に PHP 5.6 を yum でインストールする手順 | WEB ARCH LABO</a></p></blockquote>

<h2>用語の揺れ</h2>

<p>remiのyumリポジトリなのか、yumのremiリポジトリなのか？</p>

<blockquote><p>CentOS7では「EPEL」リポジトリを「yum」で追加することで追加することができます。<br/>
<a href="http://www.server-memo.net/centos-settings/centos7/add-repo.html">CentOS7 サードパーティーリポジトリの追加 | server-memo.net</a></p></blockquote>

<p>上記にある通り、EPELリポジトリをyumで追加するので、remiリポジトリ、が正解だと思います。</p>

<h2>サードパーティリポジトリ</h2>

<p>特にサードパーティのリポジトリをインストールしなかったばあいは、yum標準のリポジトリからインストールやアップデートが行われますが、<br/>
サードパーティのリポジトリをインストールしている場合はyumを使用する際にインストールしたサードパーティのリポジトリからインストールやアップデートが行われる、ということのようです。</p>

<p>remiやEPELなんかの有名どころでは信頼性も高いのかもしれないですが、セキュリティの観点から言うとやはり公式の標準リポジトリからインストールするのが一番安全だと思われます。<br/>
なので、通常はyum標準のリポジトリを利用するが、足りないものやカスタマイズしたい場合のみ、remiなどのサードパーティのリポジトリを使う、という運用がよく行われるようです。</p>

<blockquote><p>追加するリポジトリによっては、CentOS標準のパッケージを置き換えてしまったりするものがあり、それが問題を引き起こしてしまう場合があります。</p>

<p>ですので、通常はCentOSデフォルトのリポジトリを使用し、そこに無いパッケージをインストールしたい場合のみ、明示的に追加したリポジトリを指定してパッケージのインストールを行うという運用に私はしています。<br/>
<a href="http://www.server-memo.net/centos-settings/centos7/add-repo.html">CentOS7 サードパーティーリポジトリの追加 | server-memo.net</a></p></blockquote>

<h1>まとめ</h1>

<p>とりあえずyum、リポジトリ、remiなどの関係がざっくりと理解できました。<br/>
linux系の記事とかを調べているとこの辺の用語が当たり前に出てくるのでつらかったのですが、これである程度整理しながら読むことが出来そうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ApexでJSONをパースする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/12/08/json-apex-parse/"/>
    <updated>2015-12-08T19:12:05+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/12/08/json-apex-parse</id>
    <content type="html"><![CDATA[<p>Apex RestAPIなんかを作成している際に、インプットをJSONにしたい場合があります。<br/>
その際に受け取ったJSONをApexでパースして使用する方法がややこしかったのでメモ。</p>

<!-- more -->


<h2>基本</h2>

<p>基本としては、以下の記事が詳しいです。<br/>
<a href="http://www.teamspirit.co.jp/blog/staff/2011/10/winter12json2.html">Winter&rsquo;12のJSONサポートを使いこなす(2) | チームスピリット</a></p>

<p>ここにもある通り、例えば、<code>{a:xx, b:xxx}</code>などのJSONがある場合は、予めapex側でそのJSONの内容専用のクラスを用意してやる必要がある、とのこと。<br/>
何もなしでいきなりパースしていくことが出来ない。</p>

<p>そのためにクラスを用意してオブジェクトにして……が非常にめんどくさい。</p>

<h2>変換ツール</h2>

<p>そんなめんどくさいJSONのクラス作成を一発で変換してくれるwebツールが以下。</p>

<p><a href="http://json2apex.herokuapp.com/">JSON2Apex</a></p>

<p>例の通り、例えば以下の様なJSONを入力してapexを作成すると、以下のようなコードが生成される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class JSON2Apex {
</span><span class='line'>
</span><span class='line'>  public class User {
</span><span class='line'>      public String name;
</span><span class='line'>      public String twitter;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public User user;
</span><span class='line'>
</span><span class='line'>  
</span><span class='line'>  public static JSON2Apex parse(String json) {
</span><span class='line'>      return (JSON2Apex) System.JSON.deserialize(json, JSON2Apex.class);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>そしてなんと一緒にテストコードまで出力してくれる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@IsTest
</span><span class='line'>public class JSON2Apex_Test {
</span><span class='line'>  
</span><span class='line'>  static testMethod void testParse() {
</span><span class='line'>      String json = '{ ¥"user¥" : { ¥"name¥" : ¥"Simon Fell¥", ¥"twitter¥" : ¥"@superfell¥" } }';
</span><span class='line'>      JSON2Apex obj = JSON2Apex.parse(json);
</span><span class='line'>      System.assert(obj != null);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これをコピペするなりしてapexクラスとして作成すればOK。</p>

<h2>配列のJSON</h2>

<p>以下の様な配列になっているJSONをパースしたい場合。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"data":[
</span><span class='line'>  {
</span><span class='line'>      "userid":1,
</span><span class='line'>      "name":"hoge"
</span><span class='line'>  },
</span><span class='line'>  {   "userid":2,
</span><span class='line'>      "name":"fuga"
</span><span class='line'>  }
</span><span class='line'>]}    </span></code></pre></td></tr></table></div></figure>


<p>これも上記ツールにかけると以下の様なクラスが生成される。<br/>
(テストクラスは割愛)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class JSON2Apex {
</span><span class='line'>
</span><span class='line'>  public List&lt;Data&gt; data;
</span><span class='line'>
</span><span class='line'>  public class Data {
</span><span class='line'>      public Integer userid;
</span><span class='line'>      public String name;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  
</span><span class='line'>  public static JSON2Apex parse(String json) {
</span><span class='line'>      return (JSON2Apex) System.JSON.deserialize(json, JSON2Apex.class);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これを利用して<code>userid</code>を順番に取得したい場合は以下のようにすればいい。<br/>
(json_strには上記のJSONが入っているものとする)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>JSON2Apex_Thread obj = JSON2Apex_Thread.parse(json_str);
</span><span class='line'>for(JSON2Apex.Data val : obj.data){
</span><span class='line'>    System.debug(val. userid);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>いちいちJSONの内容に合わせてクラスを作成しないといけないのは非常にめんどくさい。<br/>
<code>JSON.deserialize</code>の他にも、<code>JSON.createParser()</code>もあるが、これも同じくクラスの作成は必要。<br/>
型が厳密なだけにいちいち指定が必要になるのかもしれない。</p>

<h2>参考</h2>

<p><a href="http://salesforce.stackexchange.com/questions/5427/json-deserialize-array-of-objects">apex &ndash; JSON.deserialize Array of Objects &ndash; Salesforce Stack Exchange</a><br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_System_JsonParser.htm">JSONParser Class | Force.com Apex Code Developer&#x27;s Guide | Salesforce Developers</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ローカルのWordPressをCloud9の環境へ引っ越す(DB)]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/11/27/cloud9-wordpress-mysqlimport/"/>
    <updated>2015-11-27T15:30:19+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/11/27/cloud9-wordpress-mysqlimport</id>
    <content type="html"><![CDATA[<p>ローカルで開発していたwordpressをCloud9に移動させるべく、DBのインポートをしてみた。</p>

<!-- more -->


<p>まずはCloud9でWordpressプロジェクトを作成する。<br/>
これは順場に選んでくだけで簡単に可能。</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/c9_00.jpg" alt="" /></p>

<h2>MySqlの起動など</h2>

<p>mysqlの起動などは以下で可能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 起動
</span><span class='line'>$ mysql-ctl start
</span><span class='line'>
</span><span class='line'># 停止
</span><span class='line'>$ mysql-ctl stop</span></code></pre></td></tr></table></div></figure>


<p><code>mysql-ctl</code>コマンドは以下を実行可能。</p>

<pre><code>[start|restart|stop|status|cli|install]
</code></pre>

<p>以下で、mysqlに入る事が出来る。</p>

<pre><code>$ mysql-ctl cli
...
mysql&gt; 
</code></pre>

<p>もしくは、ユーザー指定で普通にログインも出来る。</p>

<pre><code>$ mysql -u kayakuguri
</code></pre>

<p>この中でデータベースやテーブルを作成したり出来る。<br/>
なので、インポートするDBを作成しておく。</p>

<h2>ダンプファイルのアップロード</h2>

<p>ローカルのファイルをアップするのと同じ手順でダンプしたSQLファイルをアップロードする。<br/>
Cloud9のIDE上から、<code>File -&gt; Upload Local Files...</code>を選択。</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/c9_01.jpg" alt="" /></p>

<p>アップしたいファイルをウインドウにドロップして完了。<br/>
直下にアップした。</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/c9_02.jpg" alt="" /></p>

<h2>インポート</h2>

<p>これで準備は整ったのでダンプファイルをインポートする。<br/>
下部のエリアから、<code>bash</code>タブを選択し、そこにコマンドを打ち込んでいく。</p>

<p>mysqlのユーザー名はCloud9のログイン名と同じで、パスワードはかかっていない。<br/>
なので以下のようになる。</p>

<pre><code>$ mysql -u kayakuguri test_wp_db &lt; dump.sql
</code></pre>

<p><img src="http://kayakuguri.github.io/images/2015/11/c9_03.jpg" alt="" /></p>

<h3>サイトURLの変更</h3>

<p>このままだとローカルのサイトURLがwordpressのURLとして引き継がれてしまうので、コマンドで直接DBのデータをいじって変更してみる。</p>

<pre><code>$ mysql -u kayakuguri
</code></pre>

<p>mysqlにログイン。</p>

<pre><code># DBを選択
mysql&gt; use test_wp_db;
# 現状の設定を確認
mysql&gt; SELECT * FROM wpoptions WHERE option_name='siteurl';
# アップデート
mysql&gt; UPDATE wpoptions SET option_value='https://your-project-kayakuguri.c9users.io' where option_name IN ('home', 'siteurl');
</code></pre>

<p>URLはRUNさせてみると確認出来る。<br/>
(<code>https://プロジェクト名.ユーザー名.c9users.io/</code>っぽい)</p>

<h3>wp-configの変更</h3>

<p>wp-configにて、mysqlのユーザー名を指定していると思うので、それをCloud9用に変更しておく。<br/>
パスワードはいらない。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/** MySQL データベースのユーザー名 */
</span><span class='line'>define('DB_USER', 'kayakuguri');
</span><span class='line'>
</span><span class='line'>/** MySQL データベースのパスワード */
</span><span class='line'>define('DB_PASSWORD', '');</span></code></pre></td></tr></table></div></figure>


<p>完了。</p>

<h2>注意</h2>

<p>wordpressプロジェクトで始めた場合、<code>wp-admin</code>、<code>wp-content</code>、<code>wp-includes</code>の主要なディレクトリを直下以外のディレクトリに移動が出来なかった。<br/>
なので、ドキュメントルート以外でwordpressを稼働させるプロジェクトの場合は注意が必要。</p>

<p>その場合は、PHPのプロジェクトとして作成し、自前で全ファイルをアップロードしてDBの設定などをすればよいかとも思ったが、どうも上手くいかなかった。<br/>
要調査。</p>

<p>ちなみにPHPの環境は今日現在、<code>PHP Version 5.5.9-1ubuntu4.13</code>だった。</p>

<h2>参考</h2>

<p><a href="https://docs.c9.io/docs/setting-up-mysql">Setting Up MySQL · Cloud9</a><br/>
<a href="http://qiita.com/hishigataBOZE/items/bdd6009d3bfc1c7d313b">[WordPress + MySQL] DBからサイトURLを変更 &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6.5にPHP5.4を入れる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/11/26/centos65-php54/"/>
    <updated>2015-11-26T17:50:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/11/26/centos65-php54</id>
    <content type="html"><![CDATA[<p>CentOS6.5の標準のPHPは5.3。<br/>
5.4環境が欲しかったので作ってみたメモ。</p>

<!-- more -->


<p>PHPは入ってない状態から始める。</p>

<pre><code>$ php -v
-bash: php: command not found
</code></pre>

<h2>rpmでレポジトリを追加</h2>

<p>あまり意味はわかってないですが、epelとremiレポジトリを追加。<br/>
<code>vagrant</code>にSSHで入ってからの作業。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
</span><span class='line'>$ sudo rpm -Uvh http://dl.iuscommunity.org/pub/ius/stable/Redhat/6/x86_64/ius-release-1.0-11.ius.el6.noarch.rpm
</span><span class='line'>$ sudo rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm</span></code></pre></td></tr></table></div></figure>


<h2>PHPをインストール</h2>

<pre><code>$ sudo yum install php --enablerepo=remi
</code></pre>

<h2>確認</h2>

<pre><code>$ php -v
PHP 5.4.45 (cli) (built: Sep 30 2015 15:56:06) 
Copyright (c) 1997-2014 The PHP Group
Zend Engine v2.4.0, Copyright (c) 1998-2014 Zend Technologies
</code></pre>

<h2>参考</h2>

<p><a href="http://qiita.com/Chrowa3/items/6c045d952a191a1203b4">Vagrant chef/centos-6.5 に PHP 5.4 を突っ込む &ndash; Qiita</a><br/>
<a href="http://blog.ybbo.net/2014/01/22/%E3%80%90%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%80%91centos6%E3%81%ABphp5-4%E3%82%92yum%E3%81%A7%E7%B0%A1%E5%8D%98%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/">【シンプル】CentOS6にPHP5.4をyumで簡単にインストールする手順田舎に住みたいエンジニアの日記 | 田舎に住みたいエンジニアの日記</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-ftpを使ってGitでFTP更新を管理する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/11/16/git-ftp/"/>
    <updated>2015-11-16T19:19:22+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/11/16/git-ftp</id>
    <content type="html"><![CDATA[<p>FTPでしか管理してないサイトの場合、いちいち差分を確認してちまちまFTPでアップしていくのはめんどくさいしミスのもとにもなる。<br/>
しかし、git-ftpなるツールを使えば、gitで管理しつつFTPにアップ出来るようになる。</p>

<!-- more -->


<h2>インストール</h2>

<p>macの場合は、homebrewを使ってインストール出来る。</p>

<pre><code>$ brew install git-ftp
</code></pre>

<p>インストールされたかどうかは以下のようにして出来る。</p>

<pre><code>$ git ftp
git-ftp &lt;action&gt; [&lt;options&gt;] &lt;url&gt;
</code></pre>

<h2>設定</h2>

<p><code>git config</code>で設定していく。<br/>
その際、ステージング・本番環境を分ける、というように、複数の環境を設定出来る。</p>

<pre><code>$ git config git-ftp.dev.url frp://&lt;ホスト名&gt;/&lt;アップするディレクトリ&gt;
$ git config git-ftp.dev.user &lt;ユーザー名&gt;
$ git config git-ftp.dev.password &lt;パスワード&gt;
</code></pre>

<p>git管理しているディレクトリがurlで設定したディレクトリと同期される。<br/>
(同期するローカルのディレクトリは設定出来ない)<br/>
vagrantなどで環境を作成している場合等は注意が必要。</p>

<p>で、初期化。</p>

<pre><code>$ git ftp init -s dev
</code></pre>

<p><code>-s</code>の後に設定した環境の名前を入れる。<br/>
すると、git管理しているファイルが設定したサーバーのディレクトリにアップされる。<br/>
(初期化すると全てアップされ、<code>.git-ftp.log</code>というファイルがサーバーにアップロードされる）</p>

<h2>push</h2>

<p>pushは以下で可能。</p>

<pre><code>$ git ftp push -s dev
</code></pre>

<p>これで、ローカルでgit管理しつつコマンド一発で差分をFTPアップロード出来るようになった。</p>

<h2>参考</h2>

<p><a href="https://github.com/git-ftp/git-ftp">git-ftp/git-ftp</a><br/>
<a href="https://github.com/git-ftp/git-ftp/blob/develop/INSTALL.md">git-ftp/INSTALL.md at develop · git-ftp/git-ftp</a></p>

<p><a href="http://qiita.com/dojineko/items/b11d279d1ff8cfacf3dc">Gitでサイトを更新したい！ &ndash; Qiita</a><br/>
<a href="http://www.moongift.jp/2014/02/git-ftp-git%C3%97ftp%E3%81%AA%E9%81%8B%E7%94%A8%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%EF%BC%81/">Git-ftp &ndash; Git×FTPな運用をサポート！ MOONGIFT</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[WordPress] 別のユーザーグループが投稿した記事を編集出来ないようにする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/11/12/wordpress-usergroup-edit/"/>
    <updated>2015-11-12T15:49:20+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/11/12/wordpress-usergroup-edit</id>
    <content type="html"><![CDATA[<p>ユーザーグループを作成し、別のユーザーグループが作成した記事を別のユーザーグループが編集出来ないように設定してみた。</p>

<!-- more -->


<h2>カスタムユーザー権限の作成</h2>

<p>User Role Editorのプラグインを使用する。<br/>
<a href="https://ja.wordpress.org/plugins/user-role-editor/">https://ja.wordpress.org/plugins/user-role-editor/</a></p>

<p>インストール、有効化するとユーザーのメニュー内に、User Role Editorの項目が追加される。</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/user_group01.jpg" alt="" /></p>

<p>右側メニュー内の<code>Add Role</code>をクリックし、新しく権限を追加する。<br/>
Role name(ID)は英数字で設定しておく。<br/>
Display Role Nameはわかりやすいように日本語でも大丈夫。<br/>
Make copy of で、コピー元の権限があれば選択する。<br/>
今回は投稿者の権限を利用する事にする。</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/user_group02.jpg" alt="" /></p>

<p>もう一つ、white(白組)という権限も作成しておく。</p>

<h2>ユーザーグループの設定</h2>

<p>User Access Managerのプラグインを使用する。<br/>
<a href="https://ja.wordpress.org/plugins/user-access-manager/">https://ja.wordpress.org/plugins/user-access-manager/</a></p>

<p>インストール、有効化するとユーザーのメニュー内に、UAMというメニューが追加される。</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/user_group03.jpg" alt="" /></p>

<p>メニューをクリックするとグループが一つもない状態であれば、Add user groupが表示される状態となる。<br/>
なので、ここでユーザーグループを作成する。</p>

<p><code>User group name</code> はグループ名だが、日本語でも問題なかった。<br/>
<code>User group description</code> はグループの説明。<br/>
<code>IP range</code> はこのグループに属するユーザーのアクセスIPを制限する際に使用する。<br/>
<code>Read access</code> は、このグループが投稿した記事をだれが閲覧できるか、を設定する。<br/>
<code>All</code> にすれば誰でも閲覧可能。<br/>
<code>only group users</code> にすればこのユーザーグループのユーザーしか閲覧が出来ない。<br/>
今回は閲覧は全員可能としたかったので、allにした。<br/>
<code>Write access</code> は、この投稿した記事をだれが編集できるか、を設定する。<br/>
内容はReadと同じ。<br/>
今回は正にここが肝で、作成したユーザーグループ以外のユーザーには編集させないので、 <code>only group users</code> とした。<br/>
<code>Role affiliation</code>は、このユーザーグループに属する権限の設定。<br/>
ここを設定するとユーザーを作成する際に選んだ権限に属するユーザーグループは必ず選ばれるようになる。<br/>
要するに、権限を選べば自動でユーザーグループも指定されるので、設定しておいた方が楽。<br/>
ユーザーグループに入れるユーザーを個別に選びたい場合は外しておけばいいと思う。</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/user_group04.jpg" alt="" /></p>

<p>同じく白組も登録しておく。</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/user_group05.jpg" alt="" /></p>

<h2>ユーザーの追加</h2>

<p>ユーザーを追加する。<br/>
今回の環境が色々カスタマイズしているため未確認だけど、どうやら新規登録の際にはユーザーグループを選択する項目はなさそう。<br/>
とはいえ、権限を選べばグループも設定されるようになっているので問題はなし。<br/>
(権限ロールで、作成した「白組」の権限を選択するのを忘れないように）</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/user_group06.jpg" alt="" /></p>

<p>同様に赤組ユーザーも追加する。<br/>
以下のように、権限ロールを設定しただけで、ユーザーグループも設定されていることがわかる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/user_group07.jpg" alt="" /></p>

<h2>記事の投稿</h2>

<p>記事を投稿する。<br/>
この時にその記事を編集可能なユーザーグループを選択するのだけど、<br/>
ユーザーグループに所属しているユーザーで記事を作成しようとするとユーザーグループ選択の項目が表示されない。<br/>
なので、User Access Managerの設定画面で以下の項目を <code>Yes</code> に変更する。</p>

<blockquote><p>UAM &ndash;> Setting &ndash;> Authors settings &ndash;> Authors can add content to their own groups</p></blockquote>

<p><img src="http://kayakuguri.github.io/images/2015/11/user_group08.jpg" alt="" /></p>

<p>右側の列に以下のようなボックスが表示される。<br/>
記事作成の際に、チェックを入れるのを忘れないようにする。<br/>
(忘れてしまうとだれでも編集可能な記事となってしまう）</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/user_group09.jpg" alt="" /></p>

<p>管理者権限でログインして一覧を見ると以下のような状況だが、</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/user_group10.jpg" alt="" /></p>

<p>例えば白組のユーザーでログインして見ると以下のように白組に設定した記事のみが表示される。</p>

<p><img src="http://kayakuguri.github.io/images/2015/11/user_group11.jpg" alt="" /></p>

<h2>まとめ</h2>

<p>これで目的は達成出来た。<br/>
記事投稿する際にグループを選択しないといけない、など少し運用がめんどうになりそうな気配はあるが、<br/>
カスタムでここを触るのは現状不可能そうなので、プラグインでの対応しかなさそう。</p>

<h2>参考</h2>

<p><a href="http://ameblo.jp/signum21/entry-11468274679.html">WordPress会員制サイト構築 その7 User Access Manager｜オレオレWebサービス指南書！ 自分のチカラでサーバー世界を自由に創造するから面白い</a><br/>
<a href="http://ameblo.jp/ifl-nagatsuma-noriyuki/entry-11093035839.html">【WordPress】ユーザーごとに投稿ページ・固定ページの閲覧権限を設定する｜長妻紀之のブログ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacのOpenSSLでCSRファイルを作成する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/11/10/generate-csr/"/>
    <updated>2015-11-10T13:57:43+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/11/10/generate-csr</id>
    <content type="html"><![CDATA[<p>いつも忘れてググってしまうので備忘録。</p>

<!-- more -->


<h2>秘密鍵作成</h2>

<h3>乱数ファイル</h3>

<pre><code>$ openssl dgst -md5 /var/log/system.log &gt; rand.dat
</code></pre>

<h3>パスフレーズ付き秘密鍵</h3>

<pre><code>$ openssl genrsa -des3 -rand rand.dat 2048 &gt; server.pem
</code></pre>

<p>キー長は<code>2048</code>が多かったのでそれで。</p>

<h4>パスフレーズの解除方法</h4>

<pre><code>$ openssl rsa -in server.pem -out server.pem
</code></pre>

<h4>パスフレーズなしの秘密鍵</h4>

<pre><code>$ openssl genrsa -rand rand.dat 2048 &gt; server.pem
</code></pre>

<h2>CSR作成</h2>

<blockquote><p>証明書署名要求(CSR:Certificate Signing Request)</p></blockquote>

<pre><code>$ openssl req -new -key server.pem -out csr.pem
</code></pre>

<blockquote><p>Country Name (2 letter code) [AU]:(国名)<br/>
State or Province Name (full name) [Some-State]:(都道府県)<br/>
Locality Name (eg, city) []:(市町村)<br/>
Organization Name (eg, company) [Internet Widgits Pty Ltd]:(組織名)<br/>
Organizational Unit Name (eg, section) []:(部署名)<br/>
Common Name (e.g. server FQDN or YOUR name) []:(サーバ名:FQDN)<br/>
Email Address []:(メールアドレス)</p>

<p>Please enter the following &lsquo;extra&rsquo; attributes<br/>
to be sent with your certificate request<br/>
A challenge password []:<br/>
An optional company name []:</p></blockquote>

<p>部署名、メールアドレスは空でよい。</p>

<p>後はこのCSRを使用して証明書を発行する。</p>

<h2>確認</h2>

<p>CSRの内容確認。</p>

<pre><code>$ openssl req -in req.pem -text
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Certificate Request:
</span><span class='line'>    Data:
</span><span class='line'>        Version: 0 (0x0)
</span><span class='line'>        Subject: C=JP, ST=Tokyo, L=xxx, O=xxx, CN=xxx.jp
</span><span class='line'>        Subject Public Key Info:
</span><span class='line'>        ...</span></code></pre></td></tr></table></div></figure>


<p>確認ツール<br/>
<a href="http://tech-unlimited.com/csrcheck.html">CSR内容確認 | CSRの中身を再確認してミスを防止 | すぐに使える便利なWEBツール | Tech-Unlimited</a></p>

<h2>参考</h2>

<p><a href="http://www.karakaram.com/mac-apache-ssl">Macに最初から入っているApacheでSSL通信する環境を整えた | karakaram-blog</a><br/>
<a href="https://www.geotrust.co.jp/support/ssl/csr/apache_openssl_new.html">Apache + OpenSSL CSR生成手順 (新規)｜CSRの生成方法｜マニュアル｜サポート｜SSLサーバ証明書 ジオトラスト</a><br/>
<a href="http://chinmai.net/~osakana/tech-memo/wiki.cgi?page=OpenSSL+CSR%2C+%BE%DA%CC%C0%BD%F1%A4%CA%A4%C9%B3%CE%C7%A7%A5%B3%A5%DE%A5%F3%A5%C9">OpenSSL CSR, 証明書など確認コマンド &ndash; tech-memo＠さかにゃ日記</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant内でArtisanコマンドの実行とPostgreSQLの接続]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/10/13/vagrant-postgresql/"/>
    <updated>2015-10-13T18:48:30+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/10/13/vagrant-postgresql</id>
    <content type="html"><![CDATA[<p><a href="https://box.scotch.io/">Scotchbox</a>で立てたvagrant環境にてlaravelを使用している中で、<br/>
DB利用の際のartisanコマンドが実行出来なかったので調べてみた。</p>

<!-- more -->


<h2>artisan</h2>

<p>そのままvagrantを実行しているローカルのディレクトリ上でartisanコマンドを実行しても仮想環境のDBへの接続が出来ないため、エラーが出てしまう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php artisan migrate
</span><span class='line'>[PDOException]
</span><span class='line'>  SQLSTATE[08006] [7] could not connect to server: Connection refused
</span><span class='line'>      Is the server running on host "localhost" (::1) and accepting
</span><span class='line'>      TCP/IP connections on port 5432?
</span><span class='line'>  could not connect to server: Connection refused
</span><span class='line'>      Is the server running on host "localhost" (127.0.0.1) and accepting
</span><span class='line'>      TCP/IP connections on port 5432?
</span><span class='line'>  could not connect to server: Connection refused
</span><span class='line'>      Is the server running on host "localhost" (fe80::1) and accepting
</span><span class='line'>      TCP/IP connections on port 5432?</span></code></pre></td></tr></table></div></figure>


<p>なので、vagrant内にSSHで入ってから実行する必要がある。<br/>
実行するディレクトリは、<code>/var/www</code>となる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh
</span><span class='line'>vagrant@laravel-sample:~$ cd /var/www
</span><span class='line'>vagrant@laravel-sample:/var/www$ php artisan</span></code></pre></td></tr></table></div></figure>


<p>これでvagrant内のpostgreSQLに対してartisanを実行してテーブルの作成が出来た。</p>

<h2>GUI接続</h2>

<p>ついでに、vagrant内のpostgreSQLをローカルのGUI環境から確認したい場合は、接続情報のSSHの項目も設定してやることで接続が可能。</p>

<p>利用しているソフトが<a href="https://eggerapps.at/postico/">Potico</a>なので、その設定内容のキャプチャ。<br/>
DBの設定内容は、Scotchboxの場合。<br/>
<a href="https://github.com/scotch-io/scotch-box#postgresql">https://github.com/scotch-io/scotch-box#postgresql</a></p>

<p><img src="http://kayakuguri.github.io/images/2015/10/postico.png" alt="" /></p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Host </td>
<td align="left"> localhost</td>
</tr>
<tr>
<td></td>
<td align="left"> User </td>
<td align="left"> root</td>
</tr>
<tr>
<td></td>
<td align="left"> Password </td>
<td align="left"> root</td>
</tr>
<tr>
<td></td>
<td align="left"> Database </td>
<td align="left"> scotchbox</td>
</tr>
<tr>
<td></td>
<td align="left"> SSH Host </td>
<td align="left"> 192.168.33.10</td>
</tr>
<tr>
<td></td>
<td align="left"> (SSH) User </td>
<td align="left"> vagrant</td>
</tr>
<tr>
<td></td>
<td align="left"> (SSH) Password </td>
<td align="left"> vagrant</td>
</tr>
</tbody>
</table>


<h2>参考</h2>

<p><a href="https://laravel10.wordpress.com/2015/02/21/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/">初めてのLaravel 5.1 : (6) データベースの環境設定 | ララ帳</a><br/>
<a href="http://laravel.io/forum/02-11-2014-artisan-error-on-migrate-using-vagrant">aravel.io &ndash; The Laravel Community Portal</a><br/>
<a href="https://snakeycode.wordpress.com/2015/01/02/vagrant-postgresql-and-pgadmin/">Vagrant, PostgreSQL and pgAdmin | Snakey Code</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku アドオン] Filepickerを試してみた]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/10/08/filepicker/"/>
    <updated>2015-10-08T10:44:27+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/10/08/filepicker</id>
    <content type="html"><![CDATA[<p>ファイルストレージサービスである、Filepickerを試してみた。</p>

<!-- more -->


<p><img src="http://kayakuguri.github.io/images/2015/10/filepicker01.jpg" alt="" /></p>

<p><a href="https://www.filepicker.com/">Easy, Powerful File Uploads | Filepicker</a><br/>
<a href="https://addons.heroku.com/filepicker">Filepicker | Add-ons | Heroku</a></p>

<p>売りとしては、簡単に様々なクラウドサービスと連携出来る事、らしい。<br/>
サポートされているサービスは以下のよう。</p>

<ul>
<li>Alfresco</li>
<li>Amazon Cloud Drive</li>
<li>Box</li>
<li>Cloudapp</li>
<li>Dropbox</li>
<li>Evernote</li>
<li>Facebook</li>
<li>Flickr</li>
<li>Github</li>
<li>Google Drive</li>
<li>Instagram</li>
<li>One Drive</li>
<li>Picasa</li>
</ul>


<h2>インストール</h2>

<p>herokuにインストール。</p>

<pre><code>$ heroku addons:create filepicker
</code></pre>

<p>フリープランの場合は、1ファイル20MBの、月500ファイルまで利用可能。<br/>
herokuのプラントは少し違うけれど、値段は以下。</p>

<p><img src="http://kayakuguri.github.io/images/2015/10/filepicker02.jpg" alt="" /></p>

<h2>導入</h2>

<p>インストール後、herokuのダッシュボードからfilepickerのアドオンをクリックして、filepickerのダッシュボードに遷移すると、使い方の説明が色々出てきて最後に貼り付けるべきコードが表示される。<br/>
後から表示させる場合は、アプリケーションを選んだ後、DachbordのGet Startedをクリックすると表示出来る。</p>

<p><img src="http://kayakuguri.github.io/images/2015/10/filepicker03.jpg" alt="" /></p>

<p>ここで表示されるFor Engineersのコードを貼り付けるだけ。</p>

<p><img src="http://kayakuguri.github.io/images/2015/10/filepicker04.jpg" alt="" /></p>

<pre><code>&lt;script type="text/javascript" src="http://kayakuguri.github.io//api.filepicker.io/v2/filepicker.js"&gt;&lt;/script&gt;
&lt;input type="filepicker" data-fp-apikey="xxx" onchange="alert(event.fpfile.url)"&gt;
</code></pre>

<p>これを貼り付けたHTMLをアップすれば完了。以上。<br/>
アップしてアクセスすると以下の画面となる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/10/filepicker05.jpg" alt="" /></p>

<p>ボタンをクリックするとダイアログが表示される。</p>

<p><img src="http://kayakuguri.github.io/images/2015/10/filepicker06.jpg" alt="" /></p>

<p>アップロードすると、URLがアラートで表示。</p>

<p><img src="http://kayakuguri.github.io/images/2015/10/filepicker07.jpg" alt="" /></p>

<p>FilepickerのAssets、にて確認が出来る。</p>

<p><img src="http://kayakuguri.github.io/images/2015/10/filepicker08.jpg" alt="" /></p>

<p>たった２行追加するだけで完成。本当に簡単すぎてやることがない。</p>

<p>フリープランでは1ファイル20Mの制限があるように書かれていたのだけど、<br/>
試しに200Mくらいのファイルを上げてみても問題なくアップ出来た。<br/>
アップ時に制限をかけているわけではなく、そのまま利用していると注意やプラン変更の指示がくる仕様なのかもしれない。</p>

<p>とにかく、herokuからでも何の問題もなく大きいファイルをアップロード出来た。<br/>
(クライアントから直接アップしているので、サーバーの環境は関係ない）</p>

<h2>参考</h2>

<p>様々な環境に組み込めるようにプラグインが用意されている。<br/>
<a href="https://www.filepicker.com/documentation/integrations/libraries">Integration Libraries | Filepicker</a></p>

<p>様々なツールを利用出来るようにしたりするカスタマイズなんかも詳しく説明されてる。<br/>
ドキュメントも豊富っぽい。<br/>
<a href="https://www.filepicker.com/documentation/">Documentation | Filepicker</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku アドオン]keen.ioで簡単にアクセス解析を入れてみる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/10/06/try-keen-io/"/>
    <updated>2015-10-06T17:31:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/10/06/try-keen-io</id>
    <content type="html"><![CDATA[<p>簡単なアクセス解析を実装するheroku addonとして、keen.ioなるものがあったので、使って見た。</p>

<!-- more -->


<h2>プラン</h2>

<p>プランはイベントの保存数によって決まっており、月5万イベントまでは無料。</p>

<p><a href="https://addons.heroku.com/keen?utm_campaign=category&amp;utm_medium=dashboard&amp;utm_source=addons#developer">Keen IO | Add-ons | Heroku</a></p>

<p>herokuのaddonページには月、と書いてないけど、公式の方では<code>/Month</code>とあった。<br/>
<a href="https://keen.io/plans/self-service">Self-Service | Keen IO &ndash; Analytics for Developers</a></p>

<p><img src="http://kayakuguri.github.io/images/2015/10/keen01.jpg" alt="" /></p>

<h2>インストール</h2>

<p>環境はPHP。<br/>
composerでインストールする。</p>

<pre><code>$ composer require keen-io/keen-io:~2.5 
</code></pre>

<p>もしくは、composer.jsonに直接追加する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "require": {
</span><span class='line'>        "keen-io/keen-io": "~2.5"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>composer install</code>でインストール。</p>

<h2>herokuに追加</h2>

<p>Herokuには管理画面から、もしくは、以下のコマンドで追加。</p>

<pre><code>$ heroku addons:create keen
</code></pre>

<p>環境変数に必要な情報が格納される。</p>

<ul>
<li><code>KEEN_PROJECT_ID</code></li>
<li><code>KEEN_WRITE_KEY</code></li>
<li><code>KEEN_READ_KEY</code></li>
</ul>


<h2>利用</h2>

<p>公式のまんまだけど、以下で送信。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use KeenIO\Client\KeenIOClient;
</span><span class='line'>
</span><span class='line'>$client = KeenIOClient::factory([
</span><span class='line'>    'projectId' =&gt; getenv('KEEN_PROJECT_ID'),
</span><span class='line'>    'writeKey'  =&gt; getenv('KEEN_WRITE_KEY'),
</span><span class='line'>    'readKey'   =&gt; getenv('KEEN_READ_KEY')
</span><span class='line'>]);
</span><span class='line'>
</span><span class='line'>$event = ['purchase' =&gt; ['item' =&gt; 'Golden Elephant']];
</span><span class='line'>$client-&gt;addEvent('purchases', $event);</span></code></pre></td></tr></table></div></figure>


<p><code>purchase</code>は自由に変更可能。<br/>
<code>addEvent</code>の<code>purchases</code>は、Event Collectionの名前。<br/>
送信する内容は日本語も可能。</p>

<h2>取得</h2>

<p>APIで取得も出来るようだけれど、とりあえず管理画面から確認。<br/>
送信された生のJSONは以下のようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "keen": {
</span><span class='line'>        "timestamp": "2015-10-06T08:19:26.564Z",
</span><span class='line'>        "created_at": "2015-10-06T08:19:26.564Z",
</span><span class='line'>        "id": "5613840e672e6c1748501885"
</span><span class='line'>    },
</span><span class='line'>    "purchase": {
</span><span class='line'>        "item": "Golden Elephant"
</span><span class='line'>    }
</span><span class='line'>}    </span></code></pre></td></tr></table></div></figure>


<p><code>Exploer</code>から表示方法を選ぶことでグラフ表示などが可能。<br/>
例えば以下は、<code>purchase</code>の<code>item</code>項目ごとに件数でグルーピングした場合。<br/>
(1件しかないのでわかりにくいけれど）</p>

<p><img src="http://kayakuguri.github.io/images/2015/10/keen02.jpg" alt="" /></p>

<p>切り口は以下の様なものがあるよう。<br/>
<a href="https://keen.io/docs/data-analysis/">Data Analysis | Keen IO</a></p>

<h2>まとめ</h2>

<p>送信や取得のデータの基本がJSONになっているのはプログラム的には扱いやすそう。<br/>
また、簡単な表示であれば管理画面からさくっと出来そうでよさげ。<br/>
CSVの出力も出来た。</p>

<p>お手軽に実装し解析する分にはよさそう。</p>

<h2>参考</h2>

<p><a href="https://addons.heroku.com/keen?utm_campaign=category&amp;utm_medium=dashboard&amp;utm_source=addons#developer">Keen IO | Add-ons | Heroku</a><br/>
<a href="https://github.com/keenlabs/KeenClient-PHP">keenlabs/KeenClient-PHP · GitHub</a><br/>
<a href="http://onori.github.io/post/laravel-keenio-heroku/">laravel&#43;Keen.io&#43;herokuで簡易解析 &middot;  MAN.IN.BLOG</a><br/>
<a href="http://factage.com/2014/02/21/growthhack-analytics-by-keen-io/">Keen IOでグロースハックするための分析をする | yujilog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuでhtaccessを使ってIPアドレスによる制限を設定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/10/05/heroku-htaccess-allow-ip/"/>
    <updated>2015-10-05T16:25:49+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/10/05/heroku-htaccess-allow-ip</id>
    <content type="html"><![CDATA[<p>herokuにて構築しているapacheアプリにて、特定のIPからしかアクセス出来ないようにするために、<br/>
htaccessにて制限をかけようとしてたのだけど、どうも上手くいかなくてハマったのでメモ。</p>

<!-- more -->


<p>通常だと、以下のようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>order deny,allow
</span><span class='line'>deny from all
</span><span class='line'>allow from 124.xx.xxx.xxx</span></code></pre></td></tr></table></div></figure>


<p>この場合、制御は、拒否→許可、の順番で、<br/>
まず全て拒否して、<code>124.xx.xxx.xxx</code>からのアクセスのみ許可、という流れ。</p>

<p>しかし、herokuではこれでは上手くいかなかった。</p>

<p>というのも、herokuではサーバー側で負荷分散するためにロードバランサが使用されている。<br/>
(dynoが1の場合でも振り分けはされないけれど利用はされているみたい）<br/>
これによって、実際にアプリに到達するIPアドレスが、アクセス元のIPアドレスからロードバランサを経由したものに変わってしまう。<br/>
しかもそのIPは都度、変わってしまうよう。</p>

<p>これだとIPアドレスによる制限がかけられないのだけど、それを解決する仕組みとして、<br/>
<code>X-FORWARDED-FOR</code> という方法があるらしい。<br/>
<a href="https://ja.wikipedia.org/wiki/X-Forwarded-For">X-Forwarded-For &ndash; Wikipedia</a></p>

<p>それを利用する事で、アクセス元のIPアドレスをロードバランサやプロキシを挟んだとしてもそのままアプリに通知する事が出来るようになるよう。</p>

<p>実際のコードは以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SetEnvIf X-Forwarded-For 124.xx.xxx.xxx allowip
</span><span class='line'>
</span><span class='line'>order deny,allow
</span><span class='line'>deny  from all
</span><span class='line'>allow from env=allowip</span></code></pre></td></tr></table></div></figure>


<p><code>allowip</code>は変数名なのでなんでもよい。<br/>
こうやって記述することで、heroku上でも指定のIPアドレスのみ許可してやることが出来た。</p>

<p>指定のIPアドレスのみ拒否する場合も書き方は同じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SetEnvIf X-Forwarded-For 124.xx.xxx.xxx denyip
</span><span class='line'>
</span><span class='line'>order allow,deny
</span><span class='line'>allow from all
</span><span class='line'>deny from env=denyip</span></code></pre></td></tr></table></div></figure>


<p>複数指定する場合は、変数を複数定義してやるだけで大丈夫だった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SetEnvIf X-Forwarded-For 124.xx.xxx.xxx allowip1
</span><span class='line'>SetEnvIf X-Forwarded-For 196.xx.xxx.xxx allowip2
</span><span class='line'>
</span><span class='line'>order deny,allow
</span><span class='line'>deny  from all
</span><span class='line'>allow from env=allowip1
</span><span class='line'>allow from env=allowip2</span></code></pre></td></tr></table></div></figure>


<p>また、これはロードバランサ利用に限った話ではないけれど、IPアドレスの範囲指定をした場合には、<br/>
CIDR(サイダー)形式での表記で書いてやると実現可能。<br/>
以下のツールで厳密な範囲指定をしてやることが出来る。</p>

<p><a href="http://ipvx.info/ipv4/twoip2cidr/">２つのIPアドレス範囲を厳密にCIDR化ツール | IPV46</a></p>

<h2>参考</h2>

<p><a href="http://blog.mizoshiri.com/archives/1753">ロードバランサーやプロキシー経由でも.htaccessでのIPアドレスを制限したい場合</a><br/>
<a href="http://ipvx.info/2015/02/strictly-conv-range-to-cidr/">２つのIPアドレスの範囲をCIDRに厳密に変換するってどういう事？ | IPV46</a></p>

<hr />

<p>ちなみに、herokuアプリから外にアクセスする際のIPアドレスの固定方法は以下を参考に。<br/>
<a href="http://kayakuguri.github.io/blog/2014/09/26/static-ip-heroku/">[heroku]QuotaGuard Staticを使ってHerokuでのIP固定を試してみる</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery File Uploadを利用した大容量ファイルのアップロードをChunked uploadで実現する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/10/01/jquery-chunked-upload/"/>
    <updated>2015-10-01T17:57:05+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/10/01/jquery-chunked-upload</id>
    <content type="html"><![CDATA[<p>大容量のファイルをアップする際に、通常の<code>input type=file</code>で送ろうとすると<br/>
herokuだとタイムアウトになったりして上手くいかなかった。<br/>
なので、jQueryのファイルアップロードプラグインにある、<code>chunk upload</code>を利用してアップした。</p>

<!-- more -->


<p>・Github<br/>
<a href="https://github.com/blueimp/jQuery-File-Upload">blueimp/jQuery-File-Upload</a></p>

<p>公式のjQuery File Uploadのデモは以下。<br/>
<a href="https://blueimp.github.io/jQuery-File-Upload/">https://blueimp.github.io/jQuery-File-Upload/</a></p>

<p>セットアップの流れは以下を参考に。<br/>
<a href="https://github.com/blueimp/jQuery-File-Upload/wiki/Setup">https://github.com/blueimp/jQuery-File-Upload/wiki/Setup</a></p>

<h2>通常のアップロード</h2>

<p>以下から最新バージョンをダウンロード。<br/>
<a href="https://github.com/blueimp/jQuery-File-Upload/releases">https://github.com/blueimp/jQuery-File-Upload/releases</a></p>

<p>解凍して、PHPが動作する環境のドキュメントルートにアップロード。<br/>
そのままアクセスすると動作する。</p>

<p>アップしたファイルは、<br/>
<code>/server/php/files/</code>以下にアップされる。</p>

<h2>Chunk File</h2>

<p>このライブラリによるアップロードの容量制限はありますか？という質問には、一応、4GBです、とのこと。<br/>
これはブラウザの制限のよう。<br/>
ただし、Chunked file upload、という方法を使って、とのこと。</p>

<p><a href="https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#what-is-the-maximum-file-size-limitation">requently Asked Questions · blueimp/jQuery-File-Upload Wiki · GitHub</a></p>

<p>この<code>Chunked file upload</code>という方法は、大きいサイズのファイルを指定したサイズに分割して少しづつアップロードし、アップロード後に合体させる方法、とのこと。<br/>
(特にこのライブラリ特有の話ではないよう。)</p>

<p><a href="https://github.com/blueimp/jQuery-File-Upload/wiki/Chunked-file-uploads">Chunked file uploads · blueimp/jQuery-File-Upload Wiki · GitHub</a></p>

<p>使い方はいたって簡単で、通常の<code>fileupload</code>のオプションに、<code>maxChunkSize</code>の指定を追加するだけ。</p>

<p>例）通常</p>

<pre><code>$('#fileupload').fileupload({
    url: url,
    dataType: 'json'
});
</code></pre>

<p>Chunked upload</p>

<pre><code>$('#fileupload').fileupload({
    maxChunkSize: 20000000,
    url: url,
    dataType: 'json'
});
</code></pre>

<h2>Callback Option</h2>

<p>以下で一覧を参照可能。<br/>
<a href="https://github.com/blueimp/jQuery-File-Upload/wiki/Options#callback-options">Options · blueimp/jQuery-File-Upload Wiki · GitHub</a></p>

<p>Chunked Upload関連では以下のオプションがあった。</p>

<ul>
<li>fileuploadchunksend</li>
<li>fileuploadchunkdone</li>
<li>fileuploadchunkfail</li>
<li>fileuploadchunkalways</li>
</ul>


<p>それぞれ分割したファイルがアップロードされる度に呼び出されるので、結構な回数呼ばれる。</p>

<h2>ソース</h2>

<p>一式全部上げておく。<br/>
アップロードやエラーの処理については以下を参考にさせてもらいました。<br/>
<a href="http://qiita.com/mpyw/items/62e6e415f86eb30a5ff4">JavaScript(jQuery)からPHPのAPIを利用する &ndash; Qiita</a></p>

<p>ファイル構造は以下のようになっている。<br/>
htmlファイル以外はダウンロードしてきたまんま。</p>

<pre><code>public(ドキュメントルート)
└─file_upload
  ├─cors/
  ├─css/
  ├─img/
  ├─js/
  ├─server/
  │   ├─php/
  │   └─files/
  └─chunked_upload.html
</code></pre>

<script src="https://gist.github.com/anonymous/2e523356346040f6758a.js"></script>


<h2>まとめ</h2>

<p>herokuではgit管理でアップしたもの以外はデプロイなどでの再起動時に消えてしまいます。<br/>
なので、これでアップしてもそのまま残っているわけではないのでご注意ください。<br/>
じゃあどうするかというと、一旦アップして、ここからどこかに転送する、とかそういうもののために作成した次第です。<br/>
とはいえ、heroku以外でもchunked uploadを使えば、一時停止やリジュームなど、通信が切れても続きから再開したりとかが出来るようなので、普通のサーバー用途でも便利そう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitでカレントディレクトリのファイル一覧を表示]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/09/19/show-gitfilelist-with-status/"/>
    <updated>2015-09-19T19:56:40+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/09/19/show-gitfilelist-with-status</id>
    <content type="html"><![CDATA[<p>無視されているかどうかを確認したかったので。<br/>
コピペ用。</p>

<pre><code>git ls-files -v|perl -pe 's/\/.*/\//'|uniq
</code></pre>

<!-- more -->


<p>ファイル一覧を表示するのは以下。</p>

<pre><code>git ls-files
</code></pre>

<p><code>-v</code>オプションで無視されているかどうかを表示。<br/>
<code>H</code>はリストの含まれている。<br/>
<code>skip-worktree</code>の時は、<code>s</code>となる。<br/>
<code>assume-unchanged</code>の時は、状態が表示される、よう。</p>

<p>ただし、<code>ls-files</code>すると、管理しているファイル全てが表示されるので、多すぎて目的のファイルを見つけられない。<br/>
なので、現在のディレクトリのファイルのみを表示する。<br/>
git標準ではそんなオプションはないようで、正規表現で絞り込んでるよう。</p>

<h2>参考</h2>

<p><a href="http://qiita.com/zimathon/items/d964c4b3cc688cb2d114">git ls-files &ndash; Qiita</a><br/>
<a href="http://qiita.com/usamik26/items/56d0d3ba7a1300625f92">既に git 管理しているファイルをあえて無視したい &ndash; Qiita</a><br/>
<a href="http://iyukki.blog56.fc2.com/blog-entry-119.html">gitでファイル一覧を見る方法 CodingFirst</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]HerokuのclearDBとPostgresでのインポートとエクスポートまとめ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/09/10/mysql-postgres-import-export/"/>
    <updated>2015-09-10T15:38:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/09/10/mysql-postgres-import-export</id>
    <content type="html"><![CDATA[<p>herokuのmysqlとpostgresqlのDBのインポートエクスポートメモ。<br/>
heroku上のDBの中身を別のheroku上のDBへ移行するという前提。</p>

<!-- more -->


<h2>入れ替える情報</h2>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
<th align="left"> 例(clearDB) </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> USER_NAME </td>
<td align="left"> ユーザー名 </td>
<td align="left"> b114d7xxxxxxxb |</td>
</tr>
<tr>
<td></td>
<td align="left"> PASSWORD </td>
<td align="left"> パスワード </td>
<td align="left"> d81xxxxb |</td>
</tr>
<tr>
<td></td>
<td align="left"> HOST </td>
<td align="left"> ホスト名 </td>
<td align="left"> us-cdbr-iron-xxxx-xx.cleardb.net |</td>
</tr>
<tr>
<td></td>
<td align="left"> DB_NAME </td>
<td align="left"> DB名 </td>
<td align="left"> heroku_5f996e9xxxxxxxx |</td>
</tr>
</tbody>
</table>


<p>アプリを指定して実行する場合は、すべてのコマンドのお尻に、<code>--app app_name</code>とつける。</p>

<h2>ClearDB(mySql)</h2>

<h3>情報の構成</h3>

<p>環境変数にて取得可能な情報より。</p>

<pre><code>CLEARDB_DATABASE_URL=mysql://ユーザ名:パスワード@サーバ名/データベース?reconnect=true
</code></pre>

<h3>エクスポート</h3>

<pre><code>$ mysqldump -uUSER_NAME -pPASSWORD -h HOST -r backup.sql --single-transaction DB_NAME
</code></pre>

<h3>インポート</h3>

<pre><code>$ mysql --host=HOST --user=USER_NAME --password=PASSWORD --reconnect DB_NAME &lt; backup.sql
</code></pre>

<h3>参考</h3>

<p><a href="http://pronama.azurewebsites.net/2015/05/05/cleardb-to-azure-vm-mysql/">ClearDB から Azure VM 上の MySQL に移行 | プログラミング生放送</a><br/>
<a href="http://stackoverflow.com/questions/11803496/dump-sql-file-to-cleardb-in-heroku">mysql &ndash; Dump sql file to ClearDB in Heroku &ndash; Stack Overflow</a></p>

<h2>Heroku Postgres</h2>

<h3>概要</h3>

<p>Heroku Postgresに標準搭載されている<code>PG Backups</code>を使用します。</p>

<h3>エクスポート</h3>

<p>バックアップを取る</p>

<pre><code>$ heroku pg:backups capture
Use Ctrl-C at any time to stop monitoring progress; the backup
will continue running. Use heroku pg:backups info to check progress.
Stop a running backup with heroku pg:backups cancel.

DATABASE ---backup---&gt; b002
</code></pre>

<p>URLを取得する</p>

<pre><code>$ heroku pg:backups public-url b002
The following URL will expire at 2015-09-10 07:33:23 +0000:
  "https://xfrtu.s3.amazonaws.com/a53f7aa...."
</code></pre>

<p>ここで取得したS3のURLを、<code>S3_URL</code>とする。</p>

<p>（ダウンロードする場合は以下）</p>

<pre><code>$ curl -o latest.dump 'S3_URL'
</code></pre>

<h3>インポート</h3>

<pre><code>$ heroku pg:backups restore 'S3_URL' DATABASE_URL
</code></pre>

<h4>ローカルのDBにインポートする場合</h4>

<pre><code>$ pg_restore --verbose --clean --no-acl --no-owner -h localhost -U ユーザー名 -d DB名 バックアップファイル
</code></pre>

<h3>参考</h3>

<p><a href="https://devcenter.heroku.com/articles/heroku-postgres-import-export">Importing and Exporting Heroku Postgres Databases with PG Backups | Heroku Dev Center</a><br/>
<a href="https://devcenter.heroku.com/articles/heroku-postgres-backups">Heroku PGBackups | Heroku Dev Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuがcomposer.lock必須になったのでcomposerの入れ方をメモしておく]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/08/25/composer-lock-require/"/>
    <updated>2015-08-25T10:38:40+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/08/25/composer-lock-require</id>
    <content type="html"><![CDATA[<p>herokuにcomposerを使用したプロジェクトをデプロイする場合、今まではwarningは出ていたようだけど、composer.lockはなくてもデプロイ出来ていた。<br/>
それが、2015/8/21にPHPのランタイムがアップデートされ、composer.lockが必須になった、とのこと。<br/>
<a href="https://devcenter.heroku.com/changelog-items/704">PHP versions 5.5.28, 5.6.12, 7.0.0RC1 available; new composer.lock requirements | Heroku Dev Center</a></p>

<!-- more -->


<p>composer.lockがない場合は以下のようなエラーが出る。</p>

<blockquote><p>ERROR: Your &lsquo;composer.json&rsquo; lists dependencies inside &lsquo;require&rsquo;,but no &lsquo;composer.lock&rsquo; was found. Please run &lsquo;composer update&rsquo; to re-generate &lsquo;composer.lock&rsquo; if necessary, and commit it into your repository. For more information, please refer to the docs at <a href="https://devcenter.heroku.com/articles/php-support#activation">https://devcenter.heroku.com/articles/php-support#activation</a></p></blockquote>

<h2>composerのインストール</h2>

<p>環境はmacで、デフォルト等のPHPが入っている前提で。<br/>
以下のコマンドを適当なディレクトリで叩くだけ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -sS https://getcomposer.org/installer | php
</span><span class='line'>$ mv composer.phar /usr/local/bin/composer</span></code></pre></td></tr></table></div></figure>


<p>ターミナルを再起動して、確認。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ composer -v
</span><span class='line'>Composer version 1.0-dev (f1aa655e6113e0efa979b8b09d7951a762eaa04c) 2015-08-20 11:59:54</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<p><a href="http://mawatari.jp/archives/install-composer-in-mac">http://mawatari.jp/archives/install-composer-in-mac</a></p>

<h2>composer install</h2>

<p>この状態で、composer.jsonがあるディレクトリに移動し、<code>$ composer install</code>を叩いてみる。<br/>
これでインストール出来れば完了。<br/>
ただし、PCにインストールされているPHPによってはモジュールの関係でエラーが出る場合がある。<br/>
例）</p>

<blockquote><p>Problem 1<br/>
  &ndash; The requested PHP extension ext-mcrypt * is missing from your system.</p></blockquote>

<p>この場合は、全部入りのPHPを入れ直すのが早い。</p>

<h2>PHPのインストール</h2>

<p>以下のサイトに全部入りのものがまとまっているようなので、そこからインストール。<br/>
<a href="http://php-osx.liip.ch/">PHP for OS X as binary package</a></p>

<p>現時点で最新の5.6を入れる。</p>

<pre><code>$ curl -s http://php-osx.liip.ch/install.sh | bash -s 5.6
</code></pre>

<p>このままだと使用するようにはなってないのでパスを通す。<br/>
環境によって違うが、デフォルトでは、<code>.bash_profile</code>に記述すればよいよう。</p>

<p><code>~/</code>ディレクトリ以下の<code>.bash_profile</code>をエディタ等で開いて記述。<br/>
なければ作成する。<br/>
コマンドで実行する場合は、なければ新規作成としてくれる。<br/>
例えば、<code>vi</code>で開く場合は以下。<br/>
<code>sudo</code>をつけてルート権限で実行している。</p>

<pre><code>$ sudo vi ~/.bash_profile
</code></pre>

<p>以下を記述。</p>

<pre><code>export PATH=/usr/local/php5/bin:$PATH
</code></pre>

<p>保存して終了。<br/>
(viの場合は、<code>i</code>で入力モードに、<code>esc</code>で戻って、<code>:x</code>で保存して終了）<br/>
<a href="http://net-newbie.com/linux/commands/vi.html">ｖｉエディタの使い方</a></p>

<p>ターミナルを再起動してphpのバージョンを確認。</p>

<pre><code>$ php -v
PHP 5.6.11 (cli) (built: Jul 10 2015 21:46:48)
</code></pre>

<h2>composer install</h2>

<p>この状態で、<code>$ composer install</code>すれば完了。<br/>
実行後は実行したディレクトリ内に、<code>composer.lock</code>と<code>vendor/</code>が出来上がる。<br/>
<code>vendor</code>ディレクトリ以下はgitで共有しないように、<code>.gitignore</code>に追記しておくこと。</p>

<h2>.lockと.jsonの関係</h2>

<p><code>composer.json</code>には、必要なパッケージとインストールするバージョンの指定があれば記述する。<br/>
その状態で、<code>$ composer install</code>すると、パッケージがインストールされ、インストールされたパッケージのバージョン情報などが記述された、<code>composer.lock</code>ファイルが作成される。<br/>
この状態で、他環境などで同じく<code>$ composer install</code>すると、<code>composer.lock</code>に書かれたバージョンのパッケージがインストールされ、全く同じ環境が構築される。</p>

<p><code>$ copmoser update</code>をすると、再度<code>composer.json</code>の記述を元にパッケージがインストールされ、<code>composer.lock</code>が更新される。</p>

<h2>参考</h2>

<p><a href="http://qiita.com/nbkn/items/01a11392921119fa0153">MacでPATHを通す &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku]PHPのセッションをherokuのRedisで管理する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/08/06/session-storage-in-redis-on-heroku/"/>
    <updated>2015-08-06T18:06:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/08/06/session-storage-in-redis-on-heroku</id>
    <content type="html"><![CDATA[<p>heroku上でのPHPのセッション管理の定番は<a href="https://addons.heroku.com/memcachier">MemCachier</a>だけれど、<br/>
今回はHerokuのRedisに保存さえてみた。</p>

<!-- more -->


<h2>Redis</h2>

<p>herokuで使えるRedis、といってもいくつか種類がある。<br/>
それぞれどう違うのか、とか、設定方法の違い、とかは正直わからない。</p>

<p><a href="http://qiita.com/Oakbow/items/98599da0fc62863fc1b8#%E3%81%A9%E3%81%AE-redis-%E3%81%AE%E3%82%A2%E3%83%89%E3%82%AA%E3%83%B3%E3%82%92%E4%BD%BF%E3%81%86">herokuでセッションの保存先をRedisにする &ndash; Qiita</a></p>

<blockquote><p>現在、heroku には4つの Redis のアドオンがあります。<br/>
早晩5つめが増えるようです。</p></blockquote>

<p>この5つめ、にあたるものが今回使用する、Heroku Redis、です。　　
これは他のredisと違って、<a href="https://elements.heroku.com/addons/heroku-postgresql">Postgres</a>と同じくheroku内部のものなのでまぁ間違いないのかも、ってことで使ってみました。</p>

<p><a href="https://elements.heroku.com/addons/heroku-redis">Heroku Redis</a></p>

<h2>インストール</h2>

<p>公式の通り、インストールコマンドは以下。<br/>
アプリページからポチポチっと入れても問題なし。</p>

<pre><code>$ eroku addons:create heroku-redis:hobby-dev -a YOUR-APP-NAME
</code></pre>

<p><code>hobby-dev</code>は無料バージョン。</p>

<h2>セットアップ</h2>

<p>必要なソースはComposerで入れる。</p>

<p>(公式より)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"require": {
</span><span class='line'>  ...
</span><span class='line'>  "predis/predis": "1.0.1",
</span><span class='line'>  ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>接続先をredisに</h2>

<p>以下のページを参考、というかほぼそのままで。<br/>
<a href="http://www.sitepoint.com/saving-php-sessions-in-redis/">PHP Master | Saving PHP Sessions in Redis</a></p>

<p>まずは、接続用のクラスを用意。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>class RedisSessionHandler implements SessionHandlerInterface
</span><span class='line'>{
</span><span class='line'>    public $ttl = 1800; // 30 minutes default
</span><span class='line'>    protected $db;
</span><span class='line'>    protected $prefix;
</span><span class='line'> 
</span><span class='line'>    public function __construct(PredisClient $db, $prefix = 'PHPSESSID:') {
</span><span class='line'>        $this-&gt;db = $db;
</span><span class='line'>        $this-&gt;prefix = $prefix;
</span><span class='line'>    }
</span><span class='line'> 
</span><span class='line'>    public function open($savePath, $sessionName) {
</span><span class='line'>        // No action necessary because connection is injected
</span><span class='line'>        // in constructor and arguments are not applicable.
</span><span class='line'>    }
</span><span class='line'> 
</span><span class='line'>    public function close() {
</span><span class='line'>        $this-&gt;db = null;
</span><span class='line'>        unset($this-&gt;db);
</span><span class='line'>    }
</span><span class='line'> 
</span><span class='line'>    public function read($id) {
</span><span class='line'>        $id = $this-&gt;prefix . $id;
</span><span class='line'>        $sessData = $this-&gt;db-&gt;get($id);
</span><span class='line'>        $this-&gt;db-&gt;expire($id, $this-&gt;ttl);
</span><span class='line'>        return $sessData;
</span><span class='line'>    }
</span><span class='line'> 
</span><span class='line'>    public function write($id, $data) {
</span><span class='line'>        $id = $this-&gt;prefix . $id;
</span><span class='line'>        $this-&gt;db-&gt;set($id, $data);
</span><span class='line'>        $this-&gt;db-&gt;expire($id, $this-&gt;ttl);
</span><span class='line'>    }
</span><span class='line'> 
</span><span class='line'>    public function destroy($id) {
</span><span class='line'>        $this-&gt;db-&gt;del($this-&gt;prefix . $id);
</span><span class='line'>    }
</span><span class='line'> 
</span><span class='line'>    public function gc($maxLifetime) {
</span><span class='line'>        // no action necessary because using EXPIRE
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>で、最初に保存先を変更するページにて以下を実行する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require_once( dirname(__FILE__). "/vendor/autoload.php" );
</span><span class='line'>require_once( dirname(__FILE__). "/RedisSessionHandler.php" );
</span><span class='line'>
</span><span class='line'>$redis = new Predis\Client([
</span><span class='line'>    'host' =&gt; parse_url($_ENV['REDIS_URL'], PHP_URL_HOST),
</span><span class='line'>    'port' =&gt; parse_url($_ENV['REDIS_URL'], PHP_URL_PORT),
</span><span class='line'>    'password' =&gt; parse_url($_ENV['REDIS_URL'], PHP_URL_PASS),
</span><span class='line'>]);
</span><span class='line'>$sessHandler = new RedisSessionHandler($redis);
</span><span class='line'>session_set_save_handler($sessHandler);
</span><span class='line'>session_start();</span></code></pre></td></tr></table></div></figure>


<p>2行目はredisのライブラリを読み込むための設定。<br/>
3行目は先程作成したクラス。<br/>
で、5行目でnewしているが、ここが参考サイトから少し変えていて、Heroku Redis公式の方に合わせている。<br/>
で、後は参考サイト通りに。</p>

<p>これで後は普通にセッションを使えばRedisに保存されるようになる。</p>

<h2>参考</h2>

<p><a href="https://devcenter.heroku.com/articles/heroku-redis#connecting-in-php">Heroku Redis | Heroku Dev Center</a><br/>
<a href="http://www.sitepoint.com/saving-php-sessions-in-redis/">PHP Master | Saving PHP Sessions in Redis</a><br/>
<a href="http://qiita.com/Oakbow/items/98599da0fc62863fc1b8#%E3%81%A9%E3%81%AE-redis-%E3%81%AE%E3%82%A2%E3%83%89%E3%82%AA%E3%83%B3%E3%82%92%E4%BD%BF%E3%81%86">herokuでセッションの保存先をRedisにする &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[apex]バッチ実行時にカウントデータを引き継ぐ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/08/05/apex-batch-data/"/>
    <updated>2015-08-05T11:26:58+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/08/05/apex-batch-data</id>
    <content type="html"><![CDATA[<p>apexでバッチを走らせる場合は、デフォルトでの200件ごとに処理を走らせる場合が多いけれれど、<br/>
その時に処理の中でカウントアップしたデータを次の処理に引き継ぎたかった。</p>

<!-- more -->


<p>結論から言うと、 <code>Database.Stateful</code> を使うと、データの内容を保持した状態でバッチが走らせられた。</p>

<p>具体的には以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public with sharing class Hogehoge_Batch implements Database.Batchable&lt;sObject&gt;, Database.Stateful{
</span><span class='line'>  
</span><span class='line'>    private Integer count {get; set;}
</span><span class='line'>    
</span><span class='line'>  public Hogehoge_Batch(Boolean isLastBatch){
</span><span class='line'>      this.count = 0;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    public Database.QueryLocator start(Database.BatchableContext BC){
</span><span class='line'>        String query = 'select id from Lead';
</span><span class='line'>         return Database.getQueryLocator(query);
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    public void execute(Database.BatchableContext BC, List&lt;Lead&gt; scope){
</span><span class='line'>        for(Lead user : scope){ 
</span><span class='line'>            user.count__c = this.count;
</span><span class='line'>            this.count++;
</span><span class='line'>        }
</span><span class='line'>        update scope;
</span><span class='line'>    }
</span><span class='line'>   
</span><span class='line'>    public void finish(Database.BatchableContext BC){
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>クラス定義の1行目の最後にくっついてる。<br/>
これがないと<code>count</code>は毎回リセットされてしまう。</p>

<h2>参考</h2>

<p><a href="http://tyoshikawa1106.hatenablog.com/entry/2015/02/15/182505">SFDC：【大量データ処理】Apex Batchで一括更新処理を確認してみました &ndash; tyoshikawa1106のブログ</a><br/>
<a href="http://salesforceapexcodecorner.blogspot.jp/2011/08/state-management-in-batch-apex-in.html">State Management In Batch Apex in Salesforce</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce]apexでレコードをフォローさせる]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/07/02/record-follow/"/>
    <updated>2015-07-02T09:54:50+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/07/02/record-follow</id>
    <content type="html"><![CDATA[<p>レコードを作った段階で自動的にフォローさせたかったので調べてみた。</p>

<!-- more -->


<h2>チャター</h2>

<p>デフォルトでは一部のレコードを除いてレコードのフォロー機能はオフになっている。<br/>
オンにするには、<code>フィード追跡</code>で有効にする。</p>

<p><code>設定 -&gt; カスタマイズ -&gt; Chatter -&gt; フィード追跡</code>を選択。<br/>
有効にしたいオブジェクトを選んで、<code>フィード追跡の有効化</code>にチェックを入れて保存。</p>

<p><img src="http://kayakuguri.github.io/images/2015/07/feed_follow01.jpg" alt="" /></p>

<p>すると、設定したレコード詳細の上部にフォローの表示とチャターコメントが出現する。<br/>
フォローしたい場合はここをクリックしてフォロー出来る。</p>

<p><img src="http://kayakuguri.github.io/images/2015/07/feed_follow02.jpg" alt="" /></p>

<p>フォローすると以下のような表示に変わる。</p>

<p><img src="http://kayakuguri.github.io/images/2015/07/feed_follow03.jpg" alt="" /></p>

<h2>apexでのフォロー</h2>

<p>フォローは、<code>EntitySubscription</code>なるオブジェクトで管理されている。<br/>
現在のフォロー関係一覧を取得するSOQLは以下。</p>

<pre><code>SELECT Id, ParentId, SubscriberId FROM EntitySubscription
</code></pre>

<p><code>ParentId</code>が、フォロー対象のユーザーやオブジェクトのレコードID。<br/>
<code>SubscriberId</code>が、フォローするユーザーのID、となる。</p>

<p>なので、このオブジェクトにフォロー対象とフォローするIDを入れてインサートしてやればよい。</p>

<p>例）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>EntitySubscription follow = new EntitySubscription();
</span><span class='line'>follow.ParentId = 'ID'; //対象のレコード
</span><span class='line'>follow.SubscriberId = 'ID'; //ユーザーのID
</span><span class='line'>insert follow;</span></code></pre></td></tr></table></div></figure>


<p>トリガーで実装する場合は、レコードのIDが必要になるので、<code>after insert</code>で実行すること。</p>

<h2>参考</h2>

<p><a href="http://vaindespair.blogspot.jp/2011/01/blog-post.html">memo: Force.com&#12288;&#65306;&#12288;行動を作成したとき&#12289;自動的にフォローするようにしたい</a></p>

<p>チャター関係は以下のPDFにまとまっていた。<br/>
<a href="http://developerforcejp.s3.amazonaws.com/books/cheatsheets/Chatter-cheatsheet_Ja.pdf">http://developerforcejp.s3.amazonaws.com/books/cheatsheets/Chatter-cheatsheet_Ja.pdf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrantを1.7.2にアップデートしたら起動しなくなったメモ]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/07/01/update-vagrant/"/>
    <updated>2015-07-01T18:55:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/07/01/update-vagrant</id>
    <content type="html"><![CDATA[<p>Vagrantを1.3くらいから1.7.2にアップデートしたら起動しなくなった。<br/>
解決方法をメモ。</p>

<!-- more -->


<h2>対処方法</h2>

<p>以下のファイルを書き換えた。</p>

<p><code>~/.vagrant.d/setup_version</code><br/>
元は、<code>1.5</code>という文字列が入っていたが、それを、<br/>
<code>1.1</code>という文字に変更した。<br/>
追記ではなく、変更。</p>

<h2>実行</h2>

<p>で、任意のディレクトリで<code>vagrant up</code>すると以下の文言が。</p>

<blockquote><p>Vagrant is upgrading some internal state for the latest version.
Please do not quit Vagrant at this time. While upgrading, Vagrant
will need to copy all your boxes, so it will use a considerable
amount of disk space. After it is done upgrading, the temporary disk
space will be freed.</p>

<p>Press ctrl-c now to exit if you want to remove some boxes or free
up some disk space.</p>

<p>Press the Enter or Return key to continue.</p></blockquote>

<p>そのまま<code>Enter</code>キー叩く。<br/>
しばらく待つと何やら表示されるが、無事、起動。</p>

<pre><code>$ vagrant up
default                   running (virtualbox)
</code></pre>

<p>そもそもvagrantのアップデートやインストールがパッケージってのがめんどくさい。。</p>

<h2>参考</h2>

<p><a href="http://qiita.com/hgsk/items/520b4160804d7299eb34">Vagrant1.5.1へのアップグレード後にvagrant upに失敗する場合の直し方 &ndash; Qiita</a></p>
]]></content>
  </entry>
  
</feed>
