<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2017-06-19T11:45:55+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LaravelでCORSに対応する]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/06/19/larave-cors/"/>
    <updated>2017-06-19T11:45:01+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/06/19/larave-cors</id>
    <content type="html"><![CDATA[<p>Laravelでクロスオリジン、CORS (Cross-Origin Resource Sharing) に対応する方法。<br/>
対応用のLaravelライブラリがあるのでそれを利用する。</p>

<!-- more -->


<p>JSからajaxなどで通信する場合、ドメインをまたいだ通信の場合(クロスオリジン)はセキュリティ上禁止されている。<br/>
ので、それを通信を受けるサーバーサイドで許可してやる。</p>

<h1>barryvdh/laravel-cors</h1>

<p>ライブラリがあるので、そちらを利用する。</p>

<h2>インストール</h2>

<p>Composerで導入する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ composer require barryvdh/laravel-cors</span></code></pre></td></tr></table></div></figure>


<h2>セットアップ</h2>

<p><code>config/app.php</code>の <code>providers</code>の配列に以下を追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Barryvdh\Cors\ServiceProvider::class,</span></code></pre></td></tr></table></div></figure>


<p><code>app/Http/Kernel.php</code> の <code>$middleware</code> に以下を追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>protected $middleware = [
</span><span class='line'>    // ...
</span><span class='line'>    \Barryvdh\Cors\HandleCors::class,
</span><span class='line'>];</span></code></pre></td></tr></table></div></figure>


<p>上記は全体に対応する場合。<br/>
もし、APIのみに許可したい場合は以下のようにする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>protected $middlewareGroups = [
</span><span class='line'>    'web' =&gt; [
</span><span class='line'>       // ...
</span><span class='line'>    ],
</span><span class='line'>
</span><span class='line'>    'api' =&gt; [
</span><span class='line'>        // ...
</span><span class='line'>        \Barryvdh\Cors\HandleCors::class,
</span><span class='line'>    ],
</span><span class='line'>];</span></code></pre></td></tr></table></div></figure>


<h2>設定ファイル</h2>

<p>設定ファイルを以下のコマンドで作成する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php artisan vendor:publish --provider="Barryvdh\Cors\ServiceProvider"</span></code></pre></td></tr></table></div></figure>


<p>以下の内容で作成される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>return [
</span><span class='line'>     /*
</span><span class='line'>     |--------------------------------------------------------------------------
</span><span class='line'>     | Laravel CORS
</span><span class='line'>     |--------------------------------------------------------------------------
</span><span class='line'>     |
</span><span class='line'>     | allowedOrigins, allowedHeaders and allowedMethods can be set to array('*')
</span><span class='line'>     | to accept any value.
</span><span class='line'>     |
</span><span class='line'>     */
</span><span class='line'>    'supportsCredentials' =&gt; false,
</span><span class='line'>    'allowedOrigins' =&gt; ['*'],
</span><span class='line'>    'allowedHeaders' =&gt; ['Content-Type', 'X-Requested-With'],
</span><span class='line'>    'allowedMethods' =&gt; ['*'], // ex: ['GET', 'POST', 'PUT',  'DELETE']
</span><span class='line'>    'exposedHeaders' =&gt; [],
</span><span class='line'>    'maxAge' =&gt; 0,
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>supportsCredentials</code> : クッキーやBasic認証の許可設定</li>
<li><code>allowedOrigins</code> : 許可するドメイン</li>
<li><code>allowedHeaders</code> : 許可するヘッダー</li>
<li><code>allowedMethods</code> : 許可するメソッド</li>
<li><code>exposedHeaders</code> : レスポンスに含める内容があれば</li>
</ul>


<p>それぞれ、 <code>*</code> とすれば全て許可する設定となる。<br/>
(<code>maxAge</code>はよくわからない…）</p>

<p>これで完了。</p>

<h1>CURLで確認</h1>

<p>curlで設定されているかどうかを確認する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -X GET -I -H "Origin: http://sample.jp" https://your-domain.com/your/api</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>-I</code> : Headerのみ取得し出力</li>
<li><code>-X</code> : アクションメソッドの指定</li>
<li><code>-H</code> : ヘッダの指定</li>
</ul>


<p>ヘッダの <code>Origin</code> に送信元のURLを指定する。<br/>
許可されているドメインの場合は、 <code>200</code> が返ってくるが、<br/>
許可されていない場合は、 <code>403</code> が返ってくる。</p>

<p>OKの場合のレスポンス</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Date: Mon, 19 Jun 2017 02:17:21 GMT
</span><span class='line'>Server: Apache
</span><span class='line'>Cache-Control: no-cache, private
</span><span class='line'>Access-Control-Allow-Origin: http://sample.jp
</span><span class='line'>Vary: Origin
</span><span class='line'>Transfer-Encoding: chunked
</span><span class='line'>Content-Type: application/json
</span><span class='line'>Via: 1.1 vegur</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<ul>
<li><a href="http://qiita.com/bmf_san/items/a90255bf645890d96d0b">LaravelでCORS対応 &ndash; Qiita</a></li>
<li><a href="https://github.com/barryvdh/laravel-cors">barryvdh/laravel-cors: Adds CORS (Cross-Origin Resource Sharing) headers support in your Laravel application</a></li>
<li><a href="http://qiita.com/polikeiji/items/c8b79554015d75c073f8">curlでCORS設定を確認する &ndash; Qiita</a></li>
<li><a href="https://stackoverflow.com/questions/12173990/how-can-you-debug-a-cors-request-with-curl">How can you debug a CORS request with cURL? &ndash; Stack Overflow</a></li>
<li><a href="http://blog.toshimaru.net/s3-cloudfront-cors-setting/">AWS S3 + CloudFront のCORS設定手順 &ndash; Hack Your Design!</a></li>
<li><a href="http://www.minimalab.com/blog/2014/12/08/curl-option/">Curl の個人的によく使うオプションまとめ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravelで標準出力にエラーログを出力する]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/06/16/larave-std-error/"/>
    <updated>2017-06-16T16:01:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/06/16/larave-std-error</id>
    <content type="html"><![CDATA[<p>HerokuでWebサイトを作る場合、ログの出力はPapertrailを入れることが多い、というか必ず利用しています。<br/>
Papertrailでは標準出力に出力したログは漏れなく拾ってくれるので、Laravelも標準出力にエラーログを出力するようにする方法を毎回ググルので備忘録。</p>

<!-- more -->


<h1>設定</h1>

<p>以下の記述を、<code>bootstrap/app.php</code> に追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$app-&gt;configureMonologUsing(function ($monolog) {
</span><span class='line'>    $monolog-&gt;pushHandler(new \Monolog\Handler\StreamHandler('php://stderr'));
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h1>出力</h1>

<p>以下のようにすると出力可能です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Log::error('TEST LOG');</span></code></pre></td></tr></table></div></figure>


<h1>結果</h1>

<p>すると、以下のように出力されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2017-06-16 04:02:16] dev.ERROR: TEST LOG [] [] </span></code></pre></td></tr></table></div></figure>


<p><code>dev.ERROR</code>の<code>dev</code>の部分は、環境変数の<code>APP_ENV</code>で設定している文字列が出ます。<br/>
なので、<code>dev.ERROR</code>とかでひっかけてPapertrailでアラートを設定してやれば自分で出力したエラーログで通知とかが出せたりします。</p>

<h1>参考</h1>

<p>以下、参考にしました。ありがとうございます。</p>

<ul>
<li><a href="http://qiita.com/iakio/items/86086e046f73826c9bef">Laravelのログを標準エラーに出力する &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrantで、Authentication failureのWarningが出た場合の対処]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/04/24/vagrant-authentication-error/"/>
    <updated>2017-04-24T17:21:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/04/24/vagrant-authentication-error</id>
    <content type="html"><![CDATA[<p>Vagrantを起動させた場合に、Warningが出て起動しなくなってしまった時にググった対処方のメモ。</p>

<!-- more -->


<h1>環境</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>・ホスト側
</span><span class='line'>Mac OSX 10.11.6
</span><span class='line'>Vagrant 1.8.6
</span><span class='line'>Virtual Box 5.1.6
</span><span class='line'>
</span><span class='line'>・ゲスト側
</span><span class='line'>CentOX 6.5</span></code></pre></td></tr></table></div></figure>


<h1>エラー内容</h1>

<p>以下のエラーが出た。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Warning: Authentication failure. Retrying...</span></code></pre></td></tr></table></div></figure>


<p>起動途中で上記のwarningが連発し、タイムアウトで終了してしまう。</p>

<h1>原因</h1>

<p>vagrant 1.7以降の場合に、vagrantで使用している秘密鍵と公開鍵の不一致？によって引き起こされるエラーのよう。</p>

<h1>対処法</h1>

<p>以下の手順で対処した。</p>

<p><code>Vagrantfile</code>に、ゲストOSの公開鍵を書き換えないように以下の設定を追記。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.ssh.insert_key = false</span></code></pre></td></tr></table></div></figure>


<p><code>$ vagrant up</code>でvagrantを起動。途中、warningが出るが、<code>ctrl + c</code>で中断する。<br/>
中断してもvagrant自体は立ち上がっているので、<code>$ vagraht ssh</code>でゲストOSにログインする。</p>

<p><code>/home/vagrant/</code>以下に、<code>.ssh</code>ディレクトリがなければ作成する。<br/>
(すでにあったので今回は作成していない)</p>

<p>vagrantの作者のGithubリポジトリから公開鍵を取得し、<code>authorized_keys</code>という名前で保存する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget --no-check-certificate https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub -O /home/vagrant/.ssh/authorized_keys</span></code></pre></td></tr></table></div></figure>


<p>ファイルやディレクトリのパーミッションを変更する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod 0700 /home/vagrant/.ssh
</span><span class='line'>$ chmod 0600 /home/vagrant/.ssh/authorized_keys
</span><span class='line'>$ chown -R vagrant /home/vagrant/.ssh</span></code></pre></td></tr></table></div></figure>


<p>ホストOS側にある、<code>.vagrant</code>ディレクトリ内の<code>private_key</code>を削除する。
<code>.vagrant/machines/default/virtualbox/private_key</code> を削除。</p>

<p><code>$ vagrant halt</code>で停止する。</p>

<p>これで再度、<code>$ vagrant up</code>することで起動することが出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="http://qiita.com/shyse/items/9ec50b868b90f847c75f">vagrant upコマンド実行時にAuthentication failure.エラーが発生する</a></li>
<li><a href="https://github.com/NetCommons3/NetCommons3/wiki/vagrant-up-%E3%81%A7Authentication-failure.-Retrying...">vagrant up でAuthentication failure. Retrying&hellip;</a></li>
<li><a href="http://qiita.com/megane42/items/1d8ae7444d8c1b10bbd7">Vagrant で作った VM にやってはいけない2つのこと</a></li>
<li><a href="http://qiita.com/t_732_twit/items/2303a0c3f27c288382c5#1-4">Vagrantで自分の作成した公開鍵と秘密鍵を使う方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQueryを使ったCloudinaryのダイレクトアップロード]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/04/11/cloudinary-direct-upload/"/>
    <updated>2017-04-11T18:15:35+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/04/11/cloudinary-direct-upload</id>
    <content type="html"><![CDATA[<p>PHPなどのサーバーサイドのプログラムなしにクライアントのJSだけでCloudinaryにアップロードしてみた。</p>

<!-- more -->


<h1>情報</h1>

<p>Cloudinaryの情報として必要なものは以下。</p>

<ul>
<li>Upload Presets Name(unsigned)</li>
<li>Cloud Name</li>
</ul>


<h2>Upload Presets Name</h2>

<p>Cloudinaryへアップロードする際に、サイズや形式、フィルターなどをプリセットとして登録しておける。<br/>
unsigned アップロード、というのは、たぶん、プリセット名とCloudinaryの名前さえわかっていれば認証なしでアップロード出来る、というものっぽい。<br/>
これは、予め設定画面から有効にしてやる必要がある。</p>

<p><code>Settings</code>の、<code>Upload</code>タブを開くと、<code>Upload presets</code>という項目があるので、そこで、<code>Enable unsigned uploading</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2017/04/cloudinary_setting_1.jpg" alt="" /></p>

<p>有効となると情報が表示されるので、<code>Name</code>をメモっておく。</p>

<p><img src="http://kayakuguri.github.io/images/2017/04/cloudinary_setting_2.jpg" alt="" /></p>

<h2>Cloud Name</h2>

<p><code>Dashboard</code>に表示されているので、メモっておく。</p>

<p><img src="http://kayakuguri.github.io/images/2017/04/cloudinary_setting_3.jpg" alt="" /></p>

<h1>ライブラリ</h1>

<p>Cloudinaryが作成しているjQuery File Upload用のライブラリがあるのでそちらを利用する。</p>

<ul>
<li><a href="https://github.com/cloudinary/cloudinary_js">cloudinary/cloudinary_js</a></li>
<li><a href="https://github.com/blueimp/jQuery-File-Upload">blueimp/jQuery-File-Upload</a></li>
</ul>


<p>先頭でもろもろ読み込む。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script src='jquery.min.js' type='text/javascript'&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src='jquery.ui.widget.js' type='text/javascript'&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src='jquery.iframe-transport.js' type='text/javascript'&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src='jquery.fileupload.js' type='text/javascript'&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src='jquery.cloudinary.js' type='text/javascript'&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>全部CDNでやった場合は以下。<br/>
公式にはCDNはないので本番の案件では使わない方が無難かも。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script src='http://kayakuguri.github.io//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js' type='text/javascript'&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src="http://kayakuguri.github.io//code.jquery.com/ui/1.12.1/jquery-ui.min.js" integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=" crossorigin="anonymous"&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src='http://kayakuguri.github.io//cdnjs.cloudflare.com/ajax/libs/jquery.iframe-transport/1.0.1/jquery.iframe-transport.min.js' type='text/javascript'&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src='http://kayakuguri.github.io//cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/9.18.0/js/jquery.fileupload.min.js' type='text/javascript'&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src='http://kayakuguri.github.io//cdnjs.cloudflare.com/ajax/libs/cloudinary-jquery-file-upload/2.3.0/cloudinary-jquery-file-upload.min.js' type='text/javascript'&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>※バージョンは記事投稿現在(2017/4/11)での最新版(jQueryは古い）</p>

<h1>アップロードフォーム</h1>

<h2>inputタグを自動生成</h2>

<p>単純にアップロードするだけなら、自動でinputタグを挿入してくれる関数がある。</p>

<p>[HTML]</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div class="upload_form"&gt;&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>


<p>[JS]</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(function () {
</span><span class='line'>  $('.upload_form').append($.cloudinary.unsigned_upload_tag("preset-name-here", { cloud_name: 'cloud-name-here' }));
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>ライブラリを読み込んで、これで<code>append</code>すれば、自動的に、<code>&lt;input&gt;</code>タグが挿入される。<br/>
そこでファイルを選択すれば、アップロードが行われる。<br/>
(選ぶだけでアップロードされる）</p>

<p>以下のようなHTMLが挿入される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;input type="file" name="file" class="cloudinary_fileupload"&gt;</span></code></pre></td></tr></table></div></figure>


<h2>bind</h2>

<p>アップロードされた後や、アップロード中に処理をおこないたい場合は、<code>bind</code>する。<br/>
そのために、自分で<code>&lt;input&gt;</code>タグを作っておき、そのタグにたいして<code>bind</code>する。</p>

<p>[HTML]</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;input type="file" name="file" id="upload_form" /&gt;
</span><span class='line'>&lt;div class="progress"&gt;&lt;/div&gt;
</span><span class='line'>&lt;div class="thumbnails"&gt;&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>


<p>[JS]</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(function () {
</span><span class='line'>  $.cloudinary.config({ cloud_name: 'cloud_name_here'});
</span><span class='line'>  $('#upload_form').unsigned_cloudinary_upload('preset_name_here',
</span><span class='line'>    { cloud_name: 'cloud_name_here', tags: 'browser_uploads' },
</span><span class='line'>    { multiple: true }
</span><span class='line'>  )
</span><span class='line'>  .bind('cloudinaryprogress', function(e, data) {
</span><span class='line'>    $('.progress').text('アップロード中...');
</span><span class='line'>  })
</span><span class='line'>  .bind('cloudinarydone', function(e, data) {
</span><span class='line'>      $('.progress').text('完了');
</span><span class='line'>      $('.thumbnails').append($.cloudinary.image(data.result.public_id,
</span><span class='line'>        { format: 'jpg', width: 150, height: 100, crop: 'thumb' } ));
</span><span class='line'>    }
</span><span class='line'>  );
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p><code>cloudinaryprogress</code>がアップロード中の処理。アップロード中、というテキストを表示しているだけ。<br/>
<code>cloudinarydone</code>がアップロード後の処理。完了、と表示させ、サムネイルを取得して表示している。</p>

<p><code>$.cloudinary.image(name, option)</code>で画像を取得して表示させることが可能。<br/>
冒頭で<code>cloud_name</code>を設定している。
<code>data.result.public_id</code>でアップロードしたファイルのIDが取得可能。</p>

<p>ファイルのURLを直接参照したい場合は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$.cloudinary.url(data.result.public_id);</span></code></pre></td></tr></table></div></figure>


<p>第二引数でサイズやクロップなどのオプションを指定してやることが可能。</p>

<h1>注意</h1>

<p>注意点としては、ファイルの選択を行っただけでアップロードが開始されてしまうところ。<br/>
これを送信ボタンをクリックした時にアップロードを開始するようには変更出来るのだろうか…。<br/>
ライブラリに手を入れないと無理な気もする…。</p>

<h1>参考</h1>

<h2>公式</h2>

<ul>
<li><a href="http://cloudinary.com/blog/direct_upload_made_easy_from_browser_or_mobile_app_to_the_cloud#direct_uploading_from_the_browser_using_jquery">Direct uploading from the browser using jQuery</a></li>
<li><a href="http://cloudinary.com/documentation/jquery_integration">jQuery integration</a></li>
<li><a href="http://cloudinary.com/documentation/jquery_image_manipulation">jQuery image manipulation</a></li>
</ul>


<h2>コードの参考</h2>

<ul>
<li><a href="http://www.nerdtutorials.com/cloudinary-image-uploader-sponsored/">Cloudinary Image Uploader (Sponsored)</a></li>
<li><a href="http://stackoverflow.com/questions/40438882/restrict-uploading-file-size-greater-than-20-mb-cloudinary-api">restrict uploading file size greater than 20 mb [cloudinary api]</a></li>
</ul>


<h1>コード全文</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!doctype html&gt;
</span><span class='line'>
</span><span class='line'>&lt;html lang="ja"&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>  &lt;meta charset="utf-8"&gt;
</span><span class='line'>
</span><span class='line'>&lt;script src='https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js' type='text/javascript'&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js" integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=" crossorigin="anonymous"&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src='https://cdnjs.cloudflare.com/ajax/libs/jquery.iframe-transport/1.0.1/jquery.iframe-transport.min.js' type='text/javascript'&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src='https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/9.18.0/js/jquery.fileupload.min.js' type='text/javascript'&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src='https://cdnjs.cloudflare.com/ajax/libs/cloudinary-jquery-file-upload/2.3.0/cloudinary-jquery-file-upload.min.js' type='text/javascript'&gt;&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>&lt;script&gt;
</span><span class='line'>$(function () {
</span><span class='line'>  $.cloudinary.config({ cloud_name: 'cloud_name_here'});
</span><span class='line'>  $('#upload_form').unsigned_cloudinary_upload('preset_name_here',
</span><span class='line'>    { cloud_name: 'cloud_name_here', tags: 'browser_uploads' },
</span><span class='line'>    { multiple: true }
</span><span class='line'>  )
</span><span class='line'>  .bind('cloudinaryprogress', function(e, data) {
</span><span class='line'>    $('.progress').text('アップロード中...');
</span><span class='line'>  })
</span><span class='line'>  .bind('cloudinarydone', function(e, data) {
</span><span class='line'>      $('.progress').text('完了');
</span><span class='line'>      $('.thumbnails').append($.cloudinary.image(data.result.public_id,
</span><span class='line'>        { format: 'jpg', width: 150, height: 100, crop: 'thumb' } ));
</span><span class='line'>      var direct_url = $.cloudinary.url(data.result.public_id);
</span><span class='line'>    }
</span><span class='line'>  );
</span><span class='line'>});
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>  &lt;title&gt;Cloudinary Upload Sample&lt;/title&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>
</span><span class='line'>&lt;body&gt;
</span><span class='line'>&lt;h1&gt;Cloudinary Upload Test&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;div&gt;&lt;input type="file" name="file" id="upload_form" /&gt;&lt;/div&gt;
</span><span class='line'>&lt;div class="progress"&gt;&lt;/div&gt;
</span><span class='line'>&lt;div class="thumbnails"&gt;&lt;/div&gt;
</span><span class='line'>
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[salesforce] レコードのデータを取得し、CSVにしてS3にアップロードする]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/04/10/put-s3-csv-file/"/>
    <updated>2017-04-10T12:31:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/04/10/put-s3-csv-file</id>
    <content type="html"><![CDATA[<p>AWSで利用する事を想定し、レコードの内容をCSVファイルにしてS3にアップロードしてみたメモ。</p>

<!-- more -->


<p>SF内にCSVを生成して、そのファイルをS3にアップロード、すればいいかと思っていたが、直接CSVの内容をBodyに入れて送ってしまうことで、直接CSVファイルをS3に送信してしまう事が出来た。</p>

<h1>参考コード</h1>

<p>参考、というか、以下のコードをそのまま利用させてもらった。</p>

<ul>
<li><a href="https://github.com/darshanfarswan/haymarketCode/blob/6207a11fc072fed6dd4463b1ca4ebbbe991a232f/src/classes/S3Storage.cls">haymarketCode/src/classes/S3Storage.cls</a></li>
</ul>


<h1>CSV送信</h1>

<p>上記サンプルはテキストファイルになるので、CSVを保存するように変更。<br/>
具体的には、Bodyの内容をカンマ区切りにし、ファイルの拡張子を<code>csv</code>にし、Content-Typeを<code>text/csv</code>にする、だけ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public with sharing class SaveCSVSample {
</span><span class='line'>  public SaveCSVSample() {
</span><span class='line'>      String csv_body = 'テスト1,テスト2,テスト3\r\nサンプル1,サンプル2,サンプル3';
</span><span class='line'>
</span><span class='line'>      String fileName = 'test.csv';
</span><span class='line'>
</span><span class='line'>      String accessId = 'xxx';
</span><span class='line'>      String secretKey = 'xxx';
</span><span class='line'>      String bucketName = 'user';
</span><span class='line'>      String S3_Domain = 's3-ap-northeast-1.amazonaws.com';
</span><span class='line'>
</span><span class='line'>      String dateString = Datetime.now().formatGmt('EEE, dd MMM yyyy HH:mm:ss Z');
</span><span class='line'>      String stringToSign = 'PUT\n\ntext/csv\n' + dateString +'\n/' + bucketName + '/' + fileName;
</span><span class='line'>      Blob mac = Crypto.generateMac('hmacSHA1',  Blob.valueOf(stringToSign), Blob.valueOf(secretKey));
</span><span class='line'>      String signature = EncodingUtil.base64Encode(mac);
</span><span class='line'>
</span><span class='line'>      HttpRequest req = new HttpRequest();
</span><span class='line'>      req.setEndPoint('https://' + bucketName + '.' + S3_Domain + '/' + fileName);
</span><span class='line'>      req.setHeader('Content-Type', 'text/csv');
</span><span class='line'>      req.setHeader('Content-Length', String.valueOf(csv_body.length()));
</span><span class='line'>      req.setHeader('Host', bucketName + '.' + S3_Domain);
</span><span class='line'>      req.setHeader('Date', dateString);
</span><span class='line'>      req.setHeader('Authorization','AWS ' + accessId + ':' + signature);
</span><span class='line'>      req.setBody(csv_body);
</span><span class='line'>      req.setMethod('PUT');
</span><span class='line'>
</span><span class='line'>      Http httpConnection = new Http();
</span><span class='line'>      HTTPResponse res = httpConnection.send(req);
</span><span class='line'>
</span><span class='line'>      System.debug(res);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>アップされたCSVは、改行コード <code>\r\n</code> 、文字コードは、<code>UTF-8</code>となった。</p>

<p>これでS3側にCSVファイルを作成出来るので、あとはレコードをSOQLで取得し、Bodyをカンマ区切りで作成してやればよいだけ。</p>

<h2>環境情報</h2>

<p>この例では、アクセスキーなどはベタで書いてしまっているが、実際には<a href="https://kayakuguri.github.io/blog/2016/02/01/custom-setting/">カスタム設定などで作成し</a>取得するようにした方がよい。<br/>
それだと、sandboxと本番でS3の投げ先も変更出来る。</p>

<h2>エンドポイント</h2>

<p>送信先に設定している、<code>S3_Domain</code>は現状、日本リージョンのもの。<br/>
各サービスのリージョン別のエンドポイントは以下を参考。<br/>
<a href="http://docs.aws.amazon.com/ja_jp/general/latest/gr/rande.html#s3_region">http://docs.aws.amazon.com/ja_jp/general/latest/gr/rande.html#s3_region</a></p>

<h2>ガバナ制限</h2>

<blockquote><p>ファイルサイズが3MBを超えるとApexの実行時ガバナ制限に抵触する<br/>
<a href="http://www30304u.sakura.ne.jp/blog/?p=1808">http://www30304u.sakura.ne.jp/blog/?p=1808</a></p></blockquote>

<h1>参考</h1>

<ul>
<li><a href="http://www.nkjmkzk.net/?p=2638">CORSサポートを利用したAWS S3へのアップロード方法 – Force.comバージョン</a></li>
<li><a href="http://blog.livedoor.jp/volvic_beer/archives/52481242.html">【salesforce】【apex】【aws】apexでs3にアップロードでエラーがでたよ</a></li>
<li><a href="http://dev.classmethod.jp/cloud/aws/s3-cors-upload/">WebブラウザからAmazon S3に直接ファイルをアップロードする</a></li>
<li><a href="http://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/RESTAuthentication.html">REST リクエストの署名と認証</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[開発者コンソールで表示させるデバッグログのレベルを変更する]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/04/10/change-debug-log-level/"/>
    <updated>2017-04-10T11:45:42+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/04/10/change-debug-log-level</id>
    <content type="html"><![CDATA[<p>開発者コンソールを開いていると、ログインしているユーザーのデバッグログを直接参照する事が出来る。
このログは、ログレベルがデフォルトの設定になっているが、色んなログが大量に出てしまう。</p>

<!-- more -->


<p><code>Debug Only</code>にチェックをつければ自分で出力したログだけを表示してくれたり、<code>Filter</code>機能があるのでみたいログだけに絞って表示させることは比較的容易に出来る。<br/>
しかし、そもそもログの内容が多すぎて、出力出来る最大サイズを越えてしまうことがたまにある。<br/>
そんな時は余計なログは出力させないようにデバッグレベルを調整してやる必要がある。</p>

<p><img src="http://kayakuguri.github.io/images/2017/04/debug_log_level_01.jpg" alt="" /></p>

<p>(匿名実行のログを表示させたところ）</p>

<p>開発者コンソールじゃなくて、SFの設定からデバッグログを設定してやる場合はデバッグレベル名を必須で選択するので、レベルの調整が可能なことはわかっていたが、開発者コンソールでもこのデバッグレベルを変更出来た。</p>

<h1>デバッグレベル</h1>

<p>まず、予めデバッグレベルを作成しておく。<br/>
<code>設定 -&gt; ログ -&gt; デバッグレベル</code> にアクセス。</p>

<p>新規、から作成。</p>

<p>名前は適当に設定し、レベルは欲しい情報に絞ったりして調整する。<br/>
例えば、Apexで<code>System.debug()</code>で出力したものは、Apexコードで、レベルを <code>デバッグ</code> にしておけば出力される。<br/>
(それ以外のカテゴリはなし、で問題ない）</p>

<p><img src="http://kayakuguri.github.io/images/2017/04/debug_log_level_02.jpg" alt="" /></p>

<h1>ログレベルの変更</h1>

<p>開発者コンソールのメニューから、 <code>Debug -&gt; Change Log Levels</code> を選択。<br/>
<img src="http://kayakuguri.github.io/images/2017/04/debug_log_level_03.jpg" alt="" /></p>

<p>ログレベルの選択画面がモーダルで表示される。<br/>
一番上の、<code>General Trace Settings for You</code>が、開発者コンソールで表示されるログのレベルの設定となる。<br/>
現状は、デフォルトのレベルが設定されているはずなので、一番右の項目にある、 <code>Add/Change</code> をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2017/04/debug_log_level_04.jpg" alt="" /></p>

<p>デフォルトのレベルと、先ほど設定したレベルが表示されるので、設定したレベルを選択し、<code>Done</code>をクリック。</p>

<p><img src="http://kayakuguri.github.io/images/2017/04/debug_log_level_05.jpg" alt="" /></p>

<p>実は、予めレベルをSF側から作成しなくても、ここで、<code>Add</code>して作成する事も可能。<br/>
さらに、各カテゴリのレベルもここから変更する事も出来る。</p>

<p>これで設定は完了。先ほどの匿名実行と同じ内容でログを出力してみると、大幅に内容が減っているのが確認出来る。</p>

<p><img src="http://kayakuguri.github.io/images/2017/04/debug_log_level_07.jpg" alt="" /></p>

<p>また、実はSF側のデバッグログのページを確認すると、開発者コンソールを起動させた時点で設定したデバッグレベル・ログイン中のユーザーの状態で、デバッグログが自動的にセットされている。</p>

<p><img src="http://kayakuguri.github.io/images/2017/04/debug_log_level_06.jpg" alt="" /></p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Apex]エスケープ文字を置換する]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/01/26/apex-replase-escape/"/>
    <updated>2017-01-26T18:25:10+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/01/26/apex-replase-escape</id>
    <content type="html"><![CDATA[<p>apexにて取得した文字列から、エスケープ文字である、 <code>\</code> を取り除きたかったので、置換してみた。</p>

<!-- more -->


<h1>replaceAll</h1>

<p><code>replaceAll</code>を使用すれば全置換が出来るのだが、以下のように指定してしまうと <code>'</code> をエスケープしていることになるのでプログラムが破綻してエラーになっていまう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hoge.replaceAll('\', '');</span></code></pre></td></tr></table></div></figure>


<blockquote><p>エラー : line breaks not allowed in string literals</p></blockquote>

<p>なので、エスケープ文字をエスケープしてやればいいのでは、と思ったが、これだとエラーが出てしまった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hoge.replaceAll('\\', '');</span></code></pre></td></tr></table></div></figure>


<blockquote><p>エラー : System.StringException: Invalid regex: Unexpected internal error near index 1 \ ^</p></blockquote>

<p>正規表現が間違ってますよ、というような感じ？</p>

<p>なので、正規表現として指定してやればいけた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hoge.replaceAll('\\$', '');</span></code></pre></td></tr></table></div></figure>


<p>以上。<br/>
以下、蛇足。</p>

<h1>なぜ必要になったか</h1>

<p>以前書いた、<a href="http://kayakuguri.github.io/blog/2016/11/17/forrest-sfapi-laravel/">LaravelのSF接続用パッケージのforrest</a>を利用してデータの送信を行っていたのだが、<br/>
通常の配列のパラメータを送るのは問題なく出来ていたのだが、カスタムエンドポイントにJSONのデータをbodyに入れて送信するとapex側でパースエラーが出てしまった。<br/>
JSONデータは以前書いた方法でパースしている。<br/>
<a href="http://kayakuguri.github.io/blog/2015/12/08/json-apex-parse/">ApexでJSONをパースする</a></p>

<p>その内容が、上記のエスケープ文字がJSONデータに混ざり込んでいたため、だった。<br/>
なら、JSONデータからエスケープ文字を取り除いてやればよいのでは、と思い調べると、以下のようにJSONをエンコードするとエスケープされない事がわかった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>json_encode($hoge, JSON_UNESCAPED_SLASHES);</span></code></pre></td></tr></table></div></figure>


<p>第二引数に<code>JSON_UNESCAPED_SLASHES</code>を指定してやるだけでよい。<br/>
しかし、これを行ってもエスケープ文字が消えない。これはもしかして、ライブラリ側でエスケープをしているのでは、と思いコードを確認するとやはり以下の箇所で<code>body</code>に指定された値に<code>json_encode</code>をかけており、ここでは第二引数には何も指定されていなかった。</p>

<p><a href="https://github.com/omniphx/forrest/blob/master/src/Omniphx/Forrest/Client.php#L775">https://github.com/omniphx/forrest/blob/master/src/Omniphx/Forrest/Client.php#L775</a></p>

<p>ならば、設定ファイルでフォーマットの形式を指定する箇所があったので、そこで<code>none</code>を指定してやった。</p>

<p><a href="https://github.com/omniphx/forrest/blob/master/src/config/config.php#L50">https://github.com/omniphx/forrest/blob/master/src/config/config.php#L50</a></p>

<p>しかし上記の<code>json_encode</code>している箇所をよくみるとわかるのだが、フォーマットが指定されていない場合は、<code>body</code>を<a href="https://github.com/omniphx/forrest/blob/master/src/Omniphx/Forrest/Client.php#L772">空にして送る</a>ようになってしまっていた。</p>

<p>これは、必ずエスケープするという方針によるものなのか、単なる実装し忘れなのかわからないが、パッケージの中身を触るわけにもいかず<br/>
(オーバーラップして自分で実装し直すのも面倒なので）<br/>
apex側で置換してやったほうがよさそう、ということで本エントリー内容を試すこととなった、という顛末。</p>

<h2>参考</h2>

<ul>
<li><a href="http://blog.higty.xyz/archives/530/">php json_encode で&#8221;/&ldquo;のエスケープ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Scotchbox]Ubuntuの環境でのphp.ini]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/01/11/scotchbox-phpini/"/>
    <updated>2017-01-11T18:21:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/01/11/scotchbox-phpini</id>
    <content type="html"><![CDATA[<p>ちょっとしたメモ。<br/>
ScotchboxのデフォルトUbuntu環境での<code>php.ini</code>の場所にハマったので、そのメモ。</p>

<!-- more -->


<h2>正解</h2>

<p>結論から書くと、以下のファイルでの設定が有効となっていた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/php5/apache2/php.ini</span></code></pre></td></tr></table></div></figure>


<h2>間違い</h2>

<p>実は以下にも<code>php.ini</code>があるのだが、これの内容を変更しても反映されなかった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/php5/cli/php.ini  //反映されない</span></code></pre></td></tr></table></div></figure>


<hr />

<p>そもそも何を設定したかというと、<br/>
他のUbuntu環境を知らないので、Scotchbox特有かどうかはわからないけれど、デフォルトではスーパーグローバル変数の環境変数ではる、<code>$_ENV</code> が有効となっていないため、それを有効とすべく、<code>php.ini</code>の設定を触る必要があった。</p>

<ul>
<li><a href="http://kayakuguri.github.io/blog/2015/05/26/vagrant-env/">Vagrant環境での環境変数の設定方法</a></li>
</ul>


<p>以上、メモ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Herokuで独自ドメインを指定する際に使用するターゲット名]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/01/05/heroku-custom-domain/"/>
    <updated>2017-01-05T18:17:32+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/01/05/heroku-custom-domain</id>
    <content type="html"><![CDATA[<p>Herokuで独自ドメインを指定するには、CNAMEでHeroku側のドメインを指定して設定してやる必要がある。</p>

<!-- more -->


<ul>
<li><a href="http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain/">[heroku]herokuでのSSL設定とカスタムサブドメインの適用方法</a></li>
</ul>


<h1>少し前までのターゲット</h1>

<p>少し前まで（具体的には<a href="https://blog.heroku.com/announcing_heroku_free_ssl_beta_and_flexible_dyno_hours">SSLの設定がHerokuの標準機能に組み込まれる</a>まで）は、以下のような設定内容で設定していた。<br/>
（アプリ名を <code>appname</code> とし、設定するサブドメインは、<code>www.appname.com</code> とする)</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 種類 (Record) </th>
<th align="left"> 名前 (Name) </th>
<th align="left"> 内容 (Target) </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> CNAME </td>
<td align="left"> <code>www</code> </td>
<td align="left"> <code>appname.herokuapp.com</code></td>
</tr>
</tbody>
</table>


<h1>Heroku Free SSL導入後のターゲット</h1>

<h2>注意</h2>

<p>ここでの説明はあくまでも独自<strong>サブドメイン</strong>の設定方法となる。<br/>
ルートドメインをHerokuのアプリで使用したい場合は、別途PointDNSアドオンや、AWSのRoot53などのサービスを使用する必要があるが、ここでは割愛する（どれがデファクトスタンダードかまだ決まりきってない印象）。<br/>
なので、CNAMEでの設定となり、Aレコードでの設定ではないので注意。<br/>
(herokuは固定IPではないので、通常はAレコードは使用出来ない）</p>

<h2>前提</h2>

<p>今まで、Herokuに独自のSSL証明書を適用させるためには <a href="https://elements.heroku.com/addons/ssl">Heroku SSLのアドオン</a> が必要だったのだが、<br/>
<strong>FreeDyno以外の有料アプリに限り</strong>デフォルトでSSLの設定が出来るようになった。<br/>
しかもブラウザ上からドラッグアンドドロップでファイルをアップ出来るようになったため無料かつ便利になった。</p>

<p>(無料Dynoでの利用の場合はアドオンの追加が必要になるのだが、一番安い<code>hobby dyno</code>は月$7/1dyno、で、SSLアドオン 月$20、なので、有料dynoにした方が安いため、アドオンで設定するメリットはほぼないと思われる）</p>

<h2>ターゲットの変更</h2>

<p>そのタイミングで、CNAMEとして設定するターゲット名も変更になった。<br/>
今までは、 <code>hokkaido-1212.herokussl.com</code> など、都道府県が入ったようなランダムな名前だったのだが、新しく、 <code>www.appname.com.herokudns.com</code> というような名前となった。<br/>
以下のようになるよう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{設定するサブドメイン}.herokudns.com</span></code></pre></td></tr></table></div></figure>


<h2>ターゲット名</h2>

<p>よって、CNAMEでの設定も内容の部分が変更となる。<br/>
このターゲット名だが、<strong>SSLを使用の有無、無料・有料Dynoに関わらず</strong>、一律で <code>herokudns.com</code> の指定となる。</p>

<p>Herokuの設定画面から設定した場合は以下のような感じで表示がされるので、<code>DNA Target</code>の部分を使用すればよい。</p>

<p><img src="http://kayakuguri.github.io/images/2017/01/custom_domain01.jpg" alt="" /></p>

<p>コマンドで確認した場合は以下のような感じになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku domains -a appname
</span><span class='line'>=== appname Heroku Domain
</span><span class='line'>appname.herokuapp.com
</span><span class='line'>
</span><span class='line'>=== appname Custom Domains
</span><span class='line'>Domain Name      DNS Target
</span><span class='line'>───────────────  ─────────────────────────────
</span><span class='line'>www.appname.com  www.appname.com.herokudns.com</span></code></pre></td></tr></table></div></figure>


<h2>CNAMEの設定</h2>

<p>よって、設定内容は以下のようになる。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 種類 (Record) </th>
<th align="left"> 名前 (Name) </th>
<th align="left"> 内容 (Target) </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> CNAME </td>
<td align="left"> <code>www</code> </td>
<td align="left"> <code>www.appname.com.herokudns.com</code></td>
</tr>
</tbody>
</table>


<h1>参考</h1>

<ul>
<li><a href="https://devcenter.heroku.com/articles/custom-domains">Custom Domain Names for Apps | Heroku Dev Center</a></li>
<li><a href="http://www.ucom.ne.jp/enterprise/dnsmanual/p4_4_1_4.html">DNS設定ツールマニュアルWEB</a>

<ul>
<li>CNAME設定がどんなものなのかのイメージに</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostmanでSalesforce REST APIに接続]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/12/07/sf-rest-api-postman/"/>
    <updated>2016-12-07T16:27:12+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/12/07/sf-rest-api-postman</id>
    <content type="html"><![CDATA[<p>以前まではRestAPIの接続確認には、<a href="https://apigee.com/providers">Apigee</a>を使用していたのだけれど、TLS1.0無効化の問題の影響からsandboxでは接続できなくなってしまった。<br/>
なので、代替としてちょっとめんどうだけれど、Postmanで接続してみた。</p>

<!-- more -->


<h1>アクセストークンの取得</h1>

<p>ドメインは、sandboxの場合は、 <code>test.salesforce.com</code> 、本番は、 <code>login.salesforce.com</code> となる。<br/>
今回はsandboxで試す。</p>

<p>Postmanにて、以下の内容で送信。</p>

<blockquote><p>POST : <a href="https://test.salesforce.com/services/oauth2/token">https://test.salesforce.com/services/oauth2/token</a></p></blockquote>

<ul>
<li><code>grant_type</code> : <code>password</code></li>
<li><code>client_id</code> : 接続アプリケーションのコンシューマ鍵</li>
<li><code>client_secret</code> : 接続アプリケーションのコンシューマの秘密</li>
<li><code>username</code> : 使用するアカウントのユーザ名</li>
<li><code>password</code> : パスワード。必要な場合は、パスワード+セキュリティトークン</li>
</ul>


<p><img src="http://kayakuguri.github.io/images/2016/12/sf_api_postman_01.jpg" alt="" /></p>

<p>正しくログイン出来ると以下のようにJSONが返ってくる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "access_token": "xxx",
</span><span class='line'>  "instance_url": "https://xxxx.salesforce.com",
</span><span class='line'>  "id": "https://test.salesforce.com/id/xxxx/xxxx",
</span><span class='line'>  "token_type": "Bearer",
</span><span class='line'>  "issued_at": "xxx",
</span><span class='line'>  "signature": "xxx"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>access_token</code>と<code>instance_url</code>だけ必要。</p>

<h1>APIに接続</h1>

<p>例として、オブジェクトの一覧を取得してみる。<br/>
URLのドメイン部分を先程取得した、 <code>instance_url</code> を使用する。</p>

<blockquote><p>GET : <a href="https://xxx.salesforce.com/services/data/v24.0/sobjects">https://xxx.salesforce.com/services/data/v24.0/sobjects</a></p></blockquote>

<p>ヘッダーに以下を追加。<br/>
<code>ACCESS_TOKEN</code>には先程取得した、<code>access_token</code>を使用する。</p>

<ul>
<li><code>Authorization</code> : <code>Bearer ACCESS_TOKEN</code></li>
</ul>


<p><img src="http://kayakuguri.github.io/images/2016/12/sf_api_postman_02.jpg" alt="" /></p>

<p>カスタムRestAPIの場合は以下のURLになる。<br/>
<code>hoge/hoge</code>が<code>@RestResource(urlMapping='/hoge/hoge')</code>で指定したURLとなる。</p>

<blockquote><p><a href="https://xxx.salesforce.com/services/apexrest/hoge/hoge">https://xxx.salesforce.com/services/apexrest/hoge/hoge</a></p></blockquote>

<h1>参考</h1>

<ul>
<li><a href="http://sfdcbeginner.com/how-to-test-salesforce-rest-api.html">HOW TO TEST SALESFORCE REST API</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScotchboxでのPHPエラーの出力場所]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/12/05/ubuntu-error-log/"/>
    <updated>2016-12-05T17:02:15+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/12/05/ubuntu-error-log</id>
    <content type="html"><![CDATA[<p>自分用メモ。<br/>
<a href="https://box.scotch.io/">Scotchbox</a>のVagrant環境で、PHPの標準エラー出力がどこに吐かれるかをいつも調べるのでメモ。</p>

<!-- more -->


<h1>環境</h1>

<p>環境は以下。</p>

<ul>
<li>Scotchbox 2.5</li>
<li>Ubuntu 14.04 LTS</li>
<li>PHP 5.6</li>
</ul>


<p>純粋なUbuntuでも同じ場所にログが出力されるのかは調査していないので、あくまでもScotchbox環境、とする</p>

<h1>結果</h1>

<p>結論から書くと、以下のパスに保存されていた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/var/log/apache2/error.log</span></code></pre></td></tr></table></div></figure>


<p>というわけで、<code>tail</code>する場合は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># tail -f /var/log/apache2/error.log</span></code></pre></td></tr></table></div></figure>


<h1>設定内容</h1>

<p>出力するパスは、以下のファイルで設定されている。<br/>
<code>/etc/apache2/sites-available/000-default.conf</code></p>

<p>内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>  ...
</span><span class='line'>  ErrorLog ${APACHE_LOG_DIR}/error.log
</span><span class='line'>  ...
</span><span class='line'>&lt;/VirtualHost&gt;  </span></code></pre></td></tr></table></div></figure>


<p><code>APACHE_LOG_DIR</code>という環境変数で設定されていることがわかる。<br/>
では、この環境変数はどこで設定しているかというと、以下のファイル。</p>

<p><code>/etc/apache2/envvars</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>export APACHE_LOG_DIR=/var/log/apache2$SUFFIX
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>というわけで、冒頭のディレクトリに保存されていた。<br/>
もし変更したい場合は上記<code>envvars</code>にて変更すればよさそう。<br/>
(パーミッションの設定を与えてやる必要はあると思う。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Laravel]フォームのバリデーションをRequestクラスに分離する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/11/18/larave-request/"/>
    <updated>2016-11-18T17:46:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/11/18/larave-request</id>
    <content type="html"><![CDATA[<p>LaraveのバリデーションチェックをRequestクラスの別ファイルにまとめる方法。<br/>
すでに各所で解説が書かれているだろうけれど、自分なりに把握出来たのでメモ。</p>

<!-- more -->


<h1>作成</h1>

<h2>生成</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php artisan make:request HogeRequest</span></code></pre></td></tr></table></div></figure>


<p>これで、<code>app/Http/Requests/</code>以下に生成される。</p>

<p>デフォルトで生成される内容は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>
</span><span class='line'>namespace App\Http\Requests;
</span><span class='line'>
</span><span class='line'>use App\Http\Requests\Request;
</span><span class='line'>
</span><span class='line'>class HogeRequest extends Request
</span><span class='line'>{
</span><span class='line'>    /**
</span><span class='line'>     * Determine if the user is authorized to make this request.
</span><span class='line'>     *
</span><span class='line'>     * @return bool
</span><span class='line'>     */
</span><span class='line'>    public function authorize()
</span><span class='line'>    {
</span><span class='line'>        return false;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Get the validation rules that apply to the request.
</span><span class='line'>     *
</span><span class='line'>     * @return array
</span><span class='line'>     */
</span><span class='line'>    public function rules()
</span><span class='line'>    {
</span><span class='line'>        return [
</span><span class='line'>            //
</span><span class='line'>        ];
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>認証</h2>

<p>一つ目のメソッド、<code>authorize</code>はデフォルトでは<code>false</code>となっている。<br/>
これは、このフォームを送信出来るユーザの認証を判定する箇所で、デフォルトの<code>false</code>だと全てのユーザが弾かれてしまう。<br/>
なのでこれは<code>true</code>に変更する。</p>

<h2>バリデーションルール</h2>

<p>肝心のバリデーションルールは、<code>rules()</code>メソッド内の戻り値として書く。<br/>
配列にコントローラーに書いていた時と同じように書く。</p>

<p>例）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public function rules()
</span><span class='line'>{
</span><span class='line'>    return [
</span><span class='line'>        'LastName' =&gt; 'required',
</span><span class='line'>        'FirstName' =&gt; 'required',
</span><span class='line'>        'Email' =&gt; 'required|email',
</span><span class='line'>    ];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>項目の名前 (日本語化)</h2>

<p>バリデーションルールに引っかかった際に返されるエラーメッセージはデフォルトでは英語になっている。<br/>
これを日本語にするには、言語ファイルを用意してやるとよい。<br/>
<code>resouces/lang/ja/</code>以下に、<code>validation.php</code>を置いてやる。<br/>
以下が、デフォルトの英語ファイルを日本語訳してくれているもの。<br/>
<a href="https://gist.github.com/syokunin/b37725686b5baf09255b">https://gist.github.com/syokunin/b37725686b5baf09255b</a></p>

<p>しかしこのままだと、項目名についてはnameで指定したもののママになってしまう。<br/>
これをカスタムで日本語化するには、さきほど追加した、<code>validation.php</code>の<code>attributes</code>で指定してやる。</p>

<p>例）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'attributes' =&gt; [
</span><span class='line'>    'title' =&gt; 'タイトル',
</span><span class='line'>    'body' =&gt; '本文',
</span><span class='line'>    'published_at' =&gt; '公開日',
</span><span class='line'>],</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://laravel10.wordpress.com/2015/03/11/%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AElaravel-5-19-%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%8C%96/">初めてのLaravel 5.1 : (19) エラーメッセージの日本語化 &#8211; ララ帳</a></li>
</ul>


<p>ここでの設定は全体での適用となるので、一括指定出来る反面、切り分けが出来ない。<br/>
これを各フォーム個別の設定としてやるために、先ほどの、Requestクラスに追加してやることが可能。</p>

<p>例）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public function attributes()
</span><span class='line'>{
</span><span class='line'>    return [
</span><span class='line'>        'name'    =&gt; 'お名前',
</span><span class='line'>        'email'   =&gt; 'メールアドレス',
</span><span class='line'>        'subject' =&gt; '件名',
</span><span class='line'>        'content' =&gt; '内容',
</span><span class='line'>    ];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://qiita.com/ponko2/items/fd7ac38b964e10f16f52#%E3%81%8A%E5%95%8F%E3%81%84%E5%90%88%E3%82%8F%E3%81%9B%E7%94%BB%E9%9D%A2%E3%81%AErequest">Laravel 5で確認画面付き問い合わせフォームを作る &ndash; Qiita</a></li>
</ul>


<h2>戻り先</h2>

<p>デフォルトの状態では、バリデーションエラーがあった場合は一つ前のページへ自動的に遷移する。<br/>
入力 → 確認 という遷移なら、確認に遷移してきた時点でエラーが出ると、一つ前の入力ページへ飛ぶ。</p>

<p>しかし、確認画面を挟むようなフォームの場合、確認画面から完了画面の際にもバリデーションチェックが必要となる。<br/>
これがデフォルトのままだと、<br/>
確認 → 完了 という遷移となり、エラーが出ると一つ前の確認画面に戻ってしまう。<br/>
ここでは入力画面に戻って欲しい。</p>

<p>その場合、Requestクラスで戻り先を指定してやる事が出来る。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>protected $redirect = 'hoge_input';</span></code></pre></td></tr></table></div></figure>


<p>変数名で指定の仕方を変えてやることが可能。</p>

<ul>
<li><code>redirect</code> &ndash; URIでの指定</li>
<li><code>redirectRoute</code> &ndash; 名前付きルートの名前での指定</li>
<li><code>redirectAction</code> &ndash; コントローラーのアクションでの指定</li>
</ul>


<p>[参考]</p>

<ul>
<li><a href="http://n2utech.hatenablog.jp/entry/2015/11/13/154754">【メモ】 Laravel 5.1 において FormRequest でエラーが発生した際の戻し先を変更する &ndash; n2utech</a></li>
<li><a href="https://github.com/laravel/framework/blob/5.1/src/Illuminate/Foundation/Http/FormRequest.php#L34-L53">framework/FormRequest.php at 5.1 · laravel/framework · GitHub</a></li>
</ul>


<h1>完成</h1>

<p>最終的に以下のような形とした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>
</span><span class='line'>namespace App\Http\Requests;
</span><span class='line'>
</span><span class='line'>use App\Http\Requests\Request;
</span><span class='line'>
</span><span class='line'>class HogeRequest extends Request
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * 戻り先
</span><span class='line'>     *
</span><span class='line'>     * @var string
</span><span class='line'>     */
</span><span class='line'>    protected $redirect = 'hoge_input';
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Determine if the user is authorized to make this request.
</span><span class='line'>     *
</span><span class='line'>     * @return bool
</span><span class='line'>     */
</span><span class='line'>    public function authorize()
</span><span class='line'>    {
</span><span class='line'>        return true;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * バリデーションルール
</span><span class='line'>     *
</span><span class='line'>     * @return array
</span><span class='line'>     */
</span><span class='line'>    public function rules()
</span><span class='line'>    {
</span><span class='line'>        return [
</span><span class='line'>            'LastName' =&gt; 'required',
</span><span class='line'>            'FirstName' =&gt; 'required',
</span><span class='line'>            'Email' =&gt; 'required|email',
</span><span class='line'>        ];
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * エラー時に表示する項目名
</span><span class='line'>     *
</span><span class='line'>     * @return array
</span><span class='line'>     */
</span><span class='line'>    public function attributes()
</span><span class='line'>    {
</span><span class='line'>        return [
</span><span class='line'>            'LastName' =&gt; '姓',
</span><span class='line'>            'FirstName' =&gt; '名',
</span><span class='line'>            'Email' =&gt; 'メールアドレス',
</span><span class='line'>        ];
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SalesforceのREST API接続用のLaravelパッケージを使ってみる]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/11/17/forrest-sfapi-laravel/"/>
    <updated>2016-11-17T14:00:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/11/17/forrest-sfapi-laravel</id>
    <content type="html"><![CDATA[<p>Salesforce接続用のLaravel5パッケージ、<code>omniphx/forrest</code>を使ってみた。</p>

<!-- more -->


<h1>セットアップ</h1>

<p>Composerに追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ composer require "omniphx/forrest":"2.*"</span></code></pre></td></tr></table></div></figure>


<p><code>config/app.php</code>に以下を追加</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'providers' =&gt; [
</span><span class='line'>  // ...
</span><span class='line'>  Omniphx\Forrest\Providers\Laravel\ForrestServiceProvider::class,
</span><span class='line'>  // ...
</span><span class='line'>],
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>'aliases' =&gt; [
</span><span class='line'>  // ...
</span><span class='line'>    'Forrest' =&gt; Omniphx\Forrest\Providers\Laravel\Facades\Forrest::class
</span><span class='line'>  // ...
</span><span class='line'>],</span></code></pre></td></tr></table></div></figure>


<p>以下で設定ファイルを生成させる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php artisan vendor:publish</span></code></pre></td></tr></table></div></figure>


<h1>設定ファイル</h1>

<p>SFへの接続方法は２つから選択可能。</p>

<ul>
<li>Web Server authentication flow &ndash; 個別のSFアカウントでのログイン</li>
<li>Username-Password authentication flow &ndash; 接続用のアカウントを使用したログイン</li>
</ul>


<p>通常は、Username-Password authentication を利用する事が多い。</p>

<p><code>config/forrest.php</code>で以下を書き換え。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//11行目
</span><span class='line'>'authentication' =&gt; 'WebServer',
</span><span class='line'>↓↓
</span><span class='line'>'authentication' =&gt; 'UserPassword',</span></code></pre></td></tr></table></div></figure>


<p>あとは、<code>.env</code>ファイルでユーザ名やパスワード、アプリのキーなどを設定する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CONSUMER_KEY=xxx
</span><span class='line'>CONSUMER_SECRET=xxx
</span><span class='line'>LOGIN_URL=https://login.salesforce.com/
</span><span class='line'>USERNAME=xxx
</span><span class='line'>PASSWORD=xxx</span></code></pre></td></tr></table></div></figure>


<p><code>LOGIN_URL</code>を <code>https://test.salesforce.com/</code>としておくと常にsandboxへの接続となる。</p>

<h1>利用</h1>

<h2>ログイン</h2>

<p>以下でログイン。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use Omniphx\Forrest\Providers\Laravel\Facades\Forrest;
</span><span class='line'>...
</span><span class='line'>Forrest::authenticate();</span></code></pre></td></tr></table></div></figure>


<p>(PHPStormの補完が効かない…）</p>

<h2>クエリの発行</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Forrest::query('SELECT Id FROM Account');</span></code></pre></td></tr></table></div></figure>


<h2>レコードの作成など</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$body = ['Name' =&gt; 'New Account'];
</span><span class='line'>Forrest::sobjects('Account',[
</span><span class='line'>    'method' =&gt; 'post',
</span><span class='line'>    'body'   =&gt; $body]);</span></code></pre></td></tr></table></div></figure>


<p><code>sobjects</code>で第一引数にオブジェクトを指定し、第二引数に送信する内容を指定する。<br/>
送信内容は配列でキーを指定してやればよい。<br/>
<code>method</code>はそれぞれ以下。</p>

<ul>
<li>post &ndash; 作成</li>
<li>put &ndash; 更新</li>
<li>patch &ndash; アップサート</li>
<li>delete &ndash; 削除</li>
</ul>


<p>削除の場合は以下のようにREST形式でSFIDを指定してやる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Forrest::sobjects('Account/001i000000xxx', ['method' =&gt; 'delete']);</span></code></pre></td></tr></table></div></figure>


<h2>トークンの操作</h2>

<ul>
<li>リフレッシュ &ndash; <code>refresh()</code></li>
<li>廃止 &ndash; <code>revoke()</code></li>
</ul>


<h2>カスタムエンドポイント</h2>

<p>以下の様のして送信する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Forrest::custom('/myEndpoint', [
</span><span class='line'>    'method' =&gt; 'post',
</span><span class='line'>    'body' =&gt; ['foo' =&gt; 'bar'],
</span><span class='line'>    'parameters' =&gt; ['flim' =&gt; 'flam']]);</span></code></pre></td></tr></table></div></figure>


<p>その他は、GitHubのReadme参照。</p>

<h1>参考</h1>

<ul>
<li><a href="https://github.com/omniphx/forrest">omniphx/forrest: Salesforce.com REST API Client for Laravel 5</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScotchboxでWordPressのローカル環境をサクッと構築する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/11/15/scotchbox-wordpress/"/>
    <updated>2016-11-15T18:50:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/11/15/scotchbox-wordpress</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/flurinduerst/WPDistillery">WPDisillery</a>というScotch BoxのWordPress用キットを利用して簡単にローカルにWordPress環境を作る。</p>

<!-- more -->


<p>手順は以下のままで試してみた。</p>

<p><a href="https://box.scotch.io/">https://box.scotch.io/</a><br/>
[Installing WordPress]</p>

<h1>Setup</h1>

<p><code>WPDistillery</code>のリポジトリをクローンする。<br/>
実質、必要なものは、<code>config.yml</code>と<code>setup.sh</code>の2ファイルだけなので、それを引き上げて他は削除する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:flurinduerst/WPDistillery.git
</span><span class='line'>$ mv WPDistillery/config.yml config.yml
</span><span class='line'>$ mv WPDistillery/setup.sh setup.sh
</span><span class='line'>$ rm -rf WPDistillery</span></code></pre></td></tr></table></div></figure>


<p><code>Scotch Box</code>をクローンする。<br/>
必要なものは<code>Vagrantfile</code>と<code>public</code>フォルダなので引き上げて、その他は削除する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/scotch-io/scotch-box.git
</span><span class='line'>$ mv scotch-box/public public
</span><span class='line'>$ mv scotch-box/Vagrantfile Vagrantfile
</span><span class='line'>$ rm -rf scotch-box</span></code></pre></td></tr></table></div></figure>


<p>この時点で以下のような構造になっているはず。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vagrantfile
</span><span class='line'>config.yml
</span><span class='line'>public/
</span><span class='line'>setup.sh</span></code></pre></td></tr></table></div></figure>


<p>ここまでをワンライナーで実行するコマンド。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/scotch-io/scotch-box.git && mv scotch-box/public public && mv scotch-box/Vagrantfile Vagrantfile && rm -rf scotch-box && git clone --depth 1 https://github.com/flurinduerst/WPDistillery.git && mv WPDistillery/config.yml config.yml && mv WPDistillery/setup.sh setup.sh && rm -rf WPDistillery</span></code></pre></td></tr></table></div></figure>


<h1>Config.yml</h1>

<p>WordPressの設定のために、<code>Config.yml</code>を編集する。</p>

<p>デフォルトでは以下のような内容になっている。<br/>
<a href="https://github.com/flurinduerst/WPDistillery/blob/master/config.yml">https://github.com/flurinduerst/WPDistillery/blob/master/config.yml</a></p>

<h2>言語とタイムゾーン</h2>

<p>デフォルトではアメリカになっているので日本に変更する。<br/>
localeは日本版の場合は、<code>ja</code>となる。(<code>ja_JP</code>ではない)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># language/timezone
</span><span class='line'>wplocale: ja
</span><span class='line'>timezone: "Asia/Tokyo"</span></code></pre></td></tr></table></div></figure>


<h2>ユーザ</h2>

<p>初期ユーザの設定。(ローカルだし)そのままでも構わない。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># admin user settings
</span><span class='line'>admin:
</span><span class='line'>  user: admin
</span><span class='line'>  password: admin
</span><span class='line'>  email: mail@domain.tld
</span><span class='line'>  first_name: ""
</span><span class='line'>  last_name: ""</span></code></pre></td></tr></table></div></figure>


<h2>サイトの設定</h2>

<p>サイトのタイトルや説明、パーマリンクの設定など、ブログ全般の設定関係。<br/>
<strong>urlだけ、ホスト名で指定したURLを記入する</strong>。<br/>
その他はそのままで問題なし。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wpsettings:
</span><span class='line'>  url: scotchbox
</span><span class='line'>  title: Example Title
</span><span class='line'>  description: Example Description
</span><span class='line'>  permalink_structure: "/%postname%/"
</span><span class='line'>  thumbnail_width: 150
</span><span class='line'>  thumbnail_height: 150
</span><span class='line'>  medium_width: 300
</span><span class='line'>  medium_height: 300
</span><span class='line'>  large_width: 1024
</span><span class='line'>  large_height: 1024
</span><span class='line'>  # use page as frontpage
</span><span class='line'>  page_on_front: true
</span><span class='line'>    frontpage_name: Example Front Page
</span><span class='line'>  # automatic conversion of smilies
</span><span class='line'>  convert_smilies: false</span></code></pre></td></tr></table></div></figure>


<h2>テーマ</h2>

<p>デフォルトでは、<code>WPSeed</code>というテーマが指定されている。<br/>
<a href="https://github.com/flurinduerst/WPSeed/">flurinduerst/WPSeed: WordPress starter Theme + sage Workflow</a></p>

<p>これはテーマ作成の元になるようなものを集めた、テーマのフレームワーク？みたいなもののよう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># theme to install, choose new name in 'rename' or leave empty
</span><span class='line'>theme:
</span><span class='line'>  name: WPSeed
</span><span class='line'>  rename: ""
</span><span class='line'>  url: "https://github.com/flurinduerst/WPSeed/archive/master.zip"
</span><span class='line'>  # add branch (e.g. master) or leave empty ("") if theme is not downloaded from a git repository
</span><span class='line'>  source_branch: master</span></code></pre></td></tr></table></div></figure>


<p>デフォルトのプラグイン、Twenthsixteenはそのまま入っていた。</p>

<h2>プラグイン</h2>

<p>有効化するものと有効化しないで入れておくものをそれぞれ選択出来る。</p>

<p>インストールして有効化するものは以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># plugins to install & activate
</span><span class='line'>plugins_active:
</span><span class='line'>  - disable-comments
</span><span class='line'>  - duplicate-post
</span><span class='line'>  - enable-media-replace
</span><span class='line'>  - favicon-by-realfavicongenerator
</span><span class='line'>  - regenerate-thumbnails
</span><span class='line'>  - simple-page-ordering
</span><span class='line'>  - user-switching
</span><span class='line'>  - google-sitemap-generator</span></code></pre></td></tr></table></div></figure>


<p>インストールだけするものは以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># plugins to install
</span><span class='line'>plugins_inactive:
</span><span class='line'>  #development
</span><span class='line'>  - custom-post-type-ui
</span><span class='line'>  - search-and-replace
</span><span class='line'>  - capability-manager-enhanced
</span><span class='line'>  #administration
</span><span class='line'>  - adminimize
</span><span class='line'>  - admin-menu-editor
</span><span class='line'>  - admin-menu-reorder
</span><span class='line'>  - wordpress-seo
</span><span class='line'>  #security/backup
</span><span class='line'>  - wp-security-audit-log
</span><span class='line'>  - backwpup</span></code></pre></td></tr></table></div></figure>


<p>好きなものを追加したい場合はここに正式な名前でリストに追加すればよさそう。<br/>
( <code>https://ja.wordpress.org/plugins/</code> の後ろに付くもの)</p>

<p>とりあえず、長くなるけどデフォルトで入っているものを調べてみる。</p>

<h3>有効化されるもの</h3>

<ul>
<li><a href="https://ja.wordpress.org/plugins/disable-comments/">disable-comments</a> &ndash; コメント停止用</li>
<li><a href="https://ja.wordpress.org/plugins/duplicate-post/">duplicate-post</a> &ndash; 記事を複製する</li>
<li><a href="https://ja.wordpress.org/plugins/enable-media-replace/">enable-media-replace</a> &ndash; アップされている画像の置換</li>
<li><a href="https://ja.wordpress.org/plugins/favicon-by-realfavicongenerator/">favicon-by-realfavicongenerator</a> &ndash; ファビコン設定用</li>
<li><a href="https://ja.wordpress.org/plugins/regenerate-thumbnails/">regenerate-thumbnails</a> &ndash; アップロード済みの画像のサムネイルを一括再生成</li>
<li><a href="https://ja.wordpress.org/plugins/simple-page-ordering/">simple-page-ordering</a> &ndash; ページ・カスタム投稿タイプの並び順を入れ替える</li>
<li><a href="https://ja.wordpress.org/plugins/user-switching/">user-switching</a> &ndash; ユーザー切り替え</li>
<li><a href="https://ja.wordpress.org/plugins/google-sitemap-generator/">google-sitemap-generator</a> &ndash; sitemapを自動で作成</li>
</ul>


<h3>インストールのみ</h3>

<ul>
<li><a href="https://ja.wordpress.org/plugins/custom-post-type-ui/">custom-post-type-ui</a> &ndash; カスタム投稿タイプを作成</li>
<li><a href="https://ja.wordpress.org/plugins/search-and-replace/">search-and-replace</a> &ndash; DB内のデータを検索・置換する</li>
<li><a href="https://ja.wordpress.org/plugins/capability-manager-enhanced/">capability-manager-enhanced</a> &ndash; ユーザ権限の管理</li>
<li><a href="https://ja.wordpress.org/plugins/adminimize/">adminimize</a> &ndash; ユーザ権限の管理</li>
<li><a href="https://ja.wordpress.org/plugins/admin-menu-editor/">admin-menu-editor</a> &ndash; 管理画面メニューのカスタマイズ</li>
<li><a href="https://ja.wordpress.org/plugins/admin-menu-reorder/">admin-menu-reorder</a> &ndash; 管理画面メニューの並び替え</li>
<li><a href="https://ja.wordpress.org/plugins/wordpress-seo/">wordpress-seo</a> &ndash; SEO管理</li>
<li><a href="https://ja.wordpress.org/plugins/wp-security-audit-log/">wp-security-audit-log</a> &ndash; 作業ログ管理</li>
<li><a href="https://ja.wordpress.org/plugins/backwpup/">backwpup</a> &ndash; バックアップ</li>
</ul>


<p>一部、重複していたり、更新が止まってたりするものもあるので、実際本番アップする際には精査した方がよさそう。</p>

<h3>設定をスキップする設定</h3>

<p>最後の <code># WPDISTILLERY SETUP</code> のセクションは、自動セットアップをするかどうかの設定。デフォルトでは全てオン(<code>true</code>)になっている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setup:
</span><span class='line'>  wp: true
</span><span class='line'>  settings: true
</span><span class='line'>  theme: true
</span><span class='line'>  plugins: true
</span><span class='line'>  cleanup: true
</span><span class='line'>    comment: true
</span><span class='line'>    posts: true
</span><span class='line'>    files: true
</span><span class='line'>    themes: true</span></code></pre></td></tr></table></div></figure>


<h1>ホスト</h1>

<p><code>Vagrantfile</code>にてホストの設定をする。<br/>
デフォルトでは以下のように、<code>192.168.33.10</code>のIPで、<code>scotchbox</code>というホスト名になっている。<br/>
これを必要ならば、任意のものに変更する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.vm.network "private_network", ip: "192.168.33.10"
</span><span class='line'>config.vm.hostname = "scotchbox"</span></code></pre></td></tr></table></div></figure>


<h1>Vagrantを起動</h1>

<p>ここまでで設定が完了したので、Vagrantを起動する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant up</span></code></pre></td></tr></table></div></figure>


<h1>設定を実行</h1>

<p>Vagrantが起動したら、WordPressの自動設定を起動するためにVagrantにsshで入る。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh</span></code></pre></td></tr></table></div></figure>


<p>自動設定の前に、<code>WP CLI</code>を最新版に更新し、その後、<code>setup.sh</code>のシェルスクリプトを起動する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo wp cli update --allow-root
</span><span class='line'>You have version 0.20.3. Would you like to update to 0.25.0? [y/n] y
</span><span class='line'>Downloading from https://github.com/wp-cli/wp-cli/releases/download/v0.25.0/wp-cli-0.25.0.phar...
</span><span class='line'>New version works. Proceeding to replace.
</span><span class='line'>Success: Updated WP-CLI to 0.25.0
</span><span class='line'>
</span><span class='line'>$ cd ../../var/www/ && bash setup.sh
</span><span class='line'>========== WPDISTILLERY START ==========
</span><span class='line'>...
</span><span class='line'>Do you want to continue anyway? (y/n) y
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>========== WPDISTILLERY FINISHED ==========</span></code></pre></td></tr></table></div></figure>


<h1>アクセス</h1>

<p>設定したホスト名かIPでアクセスすると、トップページが表示される。<br/>
<code>/wp-login.php</code>でログイン画面が開き、設定したユーザでログインが出来る。
これで無事、起動出来た。</p>

<h1>簡易インストール</h1>

<p>デフォルトのままだとプラグインやテーマが入ってかなり時間がかかるので、さくっと起動するために、ほとんどの設定をオフにしてインストールしてみる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setup:
</span><span class='line'>  wp: true
</span><span class='line'>  settings: false
</span><span class='line'>  theme: false
</span><span class='line'>  plugins: false
</span><span class='line'>  cleanup: false
</span><span class='line'>    comment: false
</span><span class='line'>    posts: false
</span><span class='line'>    files: false
</span><span class='line'>    themes: false</span></code></pre></td></tr></table></div></figure>


<p>これだと、サイトの名前やユーザの設定以外はデフォルトのまま起動できた。<br/>
デフォルトのフルの状態のものよりかなり早いのでこちらの方がよいかもしれない。</p>

<h1>参考</h1>

<ul>
<li><a href="https://box.scotch.io/">Scotch Box ♥ A Vagrant LAMP Stack That Just Works</a></li>
<li><a href="https://github.com/flurinduerst/WPDistillery#setup">flurinduerst/WPDistillery: WordPress Setup runner for Scotch Box</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chatter in Apxを利用してコメントをメンション付きで投稿する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/10/17/coonect-api-post-comment/"/>
    <updated>2016-10-17T18:37:58+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/10/17/coonect-api-post-comment</id>
    <content type="html"><![CDATA[<p>タイトル通り。<br/>
ChatterのコメントをApex経由で<code>@</code>メンション付きで投稿する。</p>

<!-- more -->


<p>Chatterコメントは、<code>FeedComment</code>というオブジェクト名で作成されているので、
このオブジェクトにレコードをインサートすればコメントは作成出来る。
しかしその場合はコメントにそのまま<code>@ユーザ名</code>とつけてもメンションとして認識されない。<br/>
そのため、メンションをapex経由でつけるには、Chatter in Apex、<code>ConnectAip</code>を使用する。</p>

<h1>コメントの投稿</h1>

<p>Chatter in Apexのドキュメントは以下。(英語)<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/connectAPI_overview.htm">Chatter in Apex</a></p>

<p>この中で、コメントの投稿には、<code>postCommentToFeedElement</code>メソッドを使う。<br/>
以下のサンプルがほぼそのまま。<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/connectapi_examples_post_comment_feed_element_2.htm">Post a Comment with a Mention</a></p>

<p>以下、順番に組み立ててみる。</p>

<h2>postCommentToFeedElement</h2>

<p><code>postCommentToFeedElement</code>の引数は以下となっている。</p>

<ol>
<li><code>communityId</code><br/>
投稿するユーザーのコミュニティのID。<code>null</code>可。</li>
<li><code>feedElementId</code><br/>
親となる投稿(<code>FeedItem</code>)のSFID</li>
<li><code>comment</code><br/>
投稿するコメントの情報</li>
<li><code>feedElementFileUpload</code><br/>
投稿するファイルのバイナリ情報</li>
</ol>


<h2>(第二引数)comment</h2>

<p><code>ConnectApi.CommentInput</code>型。<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_input_comment.htm#apex_connectapi_input_comment">ConnectApi.CommentInput Class</a></p>

<p><code>body</code>メソッドに本文などの情報を入力する</p>

<h3>body</h3>

<p><code>ConnectApi.MessageBodyInput</code>型<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_input_msgBody.htm">ConnectApi.MessageBodyInput Class</a></p>

<p>メソッドは、<code>mesageSegments</code>のみ。</p>

<h3>mesageSegments</h3>

<p><code>List&lt;ConnectApi.MessageSegmentInput&gt;</code>型<br/>
<code>ConnectApi.MessageSegmentInput</code>クラスは、入力したい内容の型のクラスが継承している。<br/>
テキストの入力内容は、<code>ConnectApi.TextSegmentInput</code>クラスを使用する。<br/>
メンションの場合は、<code>ConnectApi.MentionSegmentInput</code>クラス、となっている。</p>

<p><a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_input_messageSegmentInput.htm">ConnectApi.MessageSegmentInput Class</a></p>

<h3>ConnectApi.TextSegmentInput</h3>

<p><code>text</code>メソッドのみ。ここに投稿する本文を入れる。<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_input_TxtMsgSeg.htm">ConnectApi.TextSegmentInput Class</a></p>

<h3>ConnectApi.MentionSegmentInput</h3>

<p><code>id</code>メソッドにメンションを送りたいユーザーのIDを入力する。
もしくは、APIバージョン38以降なら、<code>username</code>メソッドでユーザー名も利用出来るよう。<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_input_mentionMsgSeg.htm">ConnectApi.MentionSegmentInput Class</a></p>

<h3>コード</h3>

<p>一通りのコード全文は以下。<br/>
引数で、入力内容、親の投稿ID、メンションをつけるユーザのIDを渡すようにしている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * コメントを投稿する
</span><span class='line'> * 
</span><span class='line'> * @param body String 本文
</span><span class='line'> * @param feedId Id 親の投稿ID
</span><span class='line'> * @param userId Id メンションを付ける
</span><span class='line'> * @return ConnectApi.Comment コメントクラス
</span><span class='line'> */
</span><span class='line'>public static void doPostComment(String body, Id feedId, Id userId){
</span><span class='line'>  //子の投稿を作る
</span><span class='line'>  ConnectApi.CommentInput commentInput = new ConnectApi.CommentInput();
</span><span class='line'>  ConnectApi.MessageBodyInput messageBodyInput = new ConnectApi.MessageBodyInput();
</span><span class='line'>  messageBodyInput.messageSegments = new List&lt;ConnectApi.MessageSegmentInput&gt;();
</span><span class='line'>  
</span><span class='line'>  //本文を作る
</span><span class='line'>  ConnectApi.TextSegmentInput textSegmentInput = new ConnectApi.TextSegmentInput();
</span><span class='line'>  textSegmentInput.text = body;
</span><span class='line'>  messageBodyInput.messageSegments.add(textSegmentInput);
</span><span class='line'>  //メンションを作る
</span><span class='line'>  ConnectApi.MentionSegmentInput mentionSegmentInput = new ConnectApi.MentionSegmentInput();
</span><span class='line'>  mentionSegmentInput.id = userId;
</span><span class='line'>  messageBodyInput.messageSegments.add(mentionSegmentInput);
</span><span class='line'>
</span><span class='line'>  //投稿として追加
</span><span class='line'>  commentInput.body = messageBodyInput;
</span><span class='line'>  
</span><span class='line'>  //コメントを投稿
</span><span class='line'>  ConnectApi.Comment comment = ConnectApi.ChatterFeeds.postCommentToFeedElement(null, feedId, commentInput, null);
</span><span class='line'>  return comment;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>返却される<code>ConnectApi.Comment</code>クラスは以下。<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_output_comment.htm">ConnectApi.Comment Class</a></p>

<h2>参考</h2>

<ul>
<li><a href="https://help.salesforce.com/apex/HTViewSolution?id=000199689&amp;language=ja">Apexからの@メンションについて</a></li>
<li><a href="http://qiita.com/tyoshikawa1106/items/c68f8fbcd657a1a89ef2">Connect APIとTest Class &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[サブディレクトリに別のベーシック認証をかける]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/13/htpasswd-subdir/"/>
    <updated>2016-09-13T17:58:10+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/13/htpasswd-subdir</id>
    <content type="html"><![CDATA[<p>サイト全体にベーシック認証をかけ、特定のサブディレクトリにのみ、違うベーシック認証をかけたかったのだが、ちょっと苦労したのでメモ。</p>

<!-- more -->


<h1>状況</h1>

<p>まず、状況。<br/>
ドキュメントルートは、<code>/app/public/</code>とする。<br/>
(htpasswdは適切な階層にそれぞれおかれているとする）</p>

<h3>全体のベーシック認証</h3>

<p>全体のベーシック認証は以下のようにかけていた。<br/>
<code>/app/public/.htaccess</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;If "%{HTTP_HOST} != 'dev.example.com'"&gt;
</span><span class='line'>  AuthUserFile /app/.htpasswd
</span><span class='line'>  AuthType Basic
</span><span class='line'>  AuthName "Restricted Access"
</span><span class='line'>  Require valid-user
</span><span class='line'>&lt;/If&gt;</span></code></pre></td></tr></table></div></figure>


<p>開発環境でのみベーシック認証をかけたかったため、<code>&lt;If&gt;</code>ディレクティブにてホスト名で切り分けている。</p>

<h3>サブディレクトリのベーシック認証</h3>

<p>サブディレクトリのベーシック認証の設定は以下。<br/>
<code>/app/public/subdir/.htaccess</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AuthUserFile /app/public/subdir/.htpasswd
</span><span class='line'>AuthType Basic
</span><span class='line'>AuthName "Restricted Access"
</span><span class='line'>Require valid-user</span></code></pre></td></tr></table></div></figure>


<h2>結果</h2>

<p>サブディレクトリにアクセスすると、全体用のベーシック認証がかかった状態となってしまった。</p>

<h1>Ifディレクティブ</h1>

<p>色々試したり調べたりした結果、設定内容自体に間違いがあるわけではなく、実行順の問題ということがわかった。<br/>
全体のベーシック認証にて、Ifディレクティブを使用しているため特殊となっていた。</p>

<p>このIfディレクティブはapache2.4から使用可能になった機能となっている。<br/>
<a href="https://httpd.apache.org/docs/2.4/ja/mod/core.html#if">https://httpd.apache.org/docs/2.4/ja/mod/core.html#if</a></p>

<p>ドキュメントを読むと、以下のように書かれている。</p>

<blockquote><p><code>&lt;If&gt;</code> は <code>&lt;Files&gt;</code> と同じ処理順と用法になっています。</p></blockquote>

<p><code>&lt;Files&gt;</code>のドキュメントを参照してみると、以下の実行順となっていることが記載されていた。<br/>
<a href="https://httpd.apache.org/docs/2.4/ja/sections.html">https://httpd.apache.org/docs/2.4/ja/sections.html</a></p>

<ol>
<li><code>&lt;Directory&gt;</code> (正規表現無し) と <code>.htaccess</code> を同時に (<code>.htaccess</code> が許可されていれば、それが <Directory> を上書きします)</li>
<li><code>&lt;DirectoryMatch&gt;</code> (と <code>&lt;Directory ~&gt;</code></li>
<li><code>&lt;Files&gt;</code> と <code>&lt;FilesMatch&gt;</code> を同時に</li>
<li><code>&lt;Location&gt;</code> と <code>&lt;LocationMatch&gt;</code> を同時に</li>
</ol>


<p>ということで、<code>&lt;If&gt;</code>は3番目の実行順、となる。</p>

<p>よって、最初の設定での実行順を書き出してみると以下になっている事がわかる。</p>

<ol>
<li>全体の<code>.htaccess</code> → ベーシックの設定なし</li>
<li>サブディレクトリの <code>.htaccess</code> → ベーシック認証あり</li>
<li>全体の <code>.htaccess</code> 内の <code>&lt;If&gt;</code>ディレクティブ内 → ベーシック認証あり、上書き</li>
</ol>


<p>このように最後に<code>&lt;If&gt;</code>ディレクティブが実行されているため、ベーシック認証が全体のものに上書きされていたということがわかった。</p>

<h1>対応</h1>

<p>全体のベーシック認証で、<code>&lt;if&gt;</code>ディレクティブを外すことは出来ないので、サブディレクトリのベーシック認証の設定でも、<code>&lt;If&gt;</code>ディレクティブを(無理矢理)使うことで解決させた。</p>

<p>サブディレクトリのベーシック認証の設定は以下のようにした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;If true&gt;
</span><span class='line'>  AuthUserFile /app/public/subdir/.htpasswd
</span><span class='line'>  AuthType Basic
</span><span class='line'>  AuthName "Restricted Access"
</span><span class='line'>  Require valid-user
</span><span class='line'>&lt;/If&gt;</span></code></pre></td></tr></table></div></figure>


<p>プログラムとしては無駄なIfなのであまり綺麗な方法ではないかもしれないが…。<br/>
とりあえず、これで意図した動作をさせることが出来た。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuにComodoで取得したSSL証明書を反映させる]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/07/heroku-comodo-ssl/"/>
    <updated>2016-09-07T10:27:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/07/heroku-comodo-ssl</id>
    <content type="html"><![CDATA[<p>ちょっとつなげ方とかが特殊だったのでメモ。</p>

<!-- more -->


<p><a href="https://comodo.jp/">トップページ | COMODO JAPAN  | SSL 証明書</a></p>

<p>通常の流れであれば、取得した証明書の末尾に、対応している中間CA証明書をくっつけて、秘密鍵と共にアップすればOK。<br/>
<a href="http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain/">[heroku]herokuでのSSL設定とカスタムサブドメインの適用方法 &ndash; KayaMemo</a></p>

<p>しかし、Comodoという発行会社で取得したSSLの場合は以下のような内容で4つのファイルが送られてくる。</p>

<ul>
<li>AddTrustExternalCARoot.crt (ルート証明書)</li>
<li>COMODORSAAddTrustCA.crt    (中間証明書 その1)</li>
<li>COMODORSADomainValidationSecureServerCA.crt (中間証明書 その2)</li>
<li>STAR_example_com.crt   (サーバ証明書)</li>
</ul>


<p>アップする際にはこれらを全てつなげたファイルが必要になるよう。<br/>
そしてそのつなげ方にも順番があるようで、下から順番に末尾に追加していく形。<br/>
コマンドは以下となる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat STAR_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt &gt; STAR_example_com-bundle.pem</span></code></pre></td></tr></table></div></figure>


<p>これで全てつなげたファイル、 <code>STAR_example_com-bundle.pem</code> が出来上がる。<br/>
あとは、秘密鍵と共にアップするだけ。<br/>
(秘密鍵は、 <code>server.key</code> とする）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku certs:add STAR_example_com-bundle.pem server.key -a YOUR_APP</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/26100642/heroku-comodo-ssl-and-it-not-working">Heroku Comodo SSL and it not working? &ndash; Stack Overflow</a></li>
<li><a href="http://qiita.com/white_aspara25/items/d9a1f99e8abdee0b5450">ELB の ComodoSSL 証明書を更新 &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku] confファイルでのリダイレクトを設定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/01/heroku-cgi-bin-redirect/"/>
    <updated>2016-09-01T19:51:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/01/heroku-cgi-bin-redirect</id>
    <content type="html"><![CDATA[<p>herokuで構築したサイトで、ドキュメントルートにある、 <code>/cgi-bin/</code> 以下にある特定のファイルへのアクセスがあった場合に、別のディレクトリへリダイレクトさせて欲しい、という要件があった。<br/>
普通に設定しようと思ったらかなり深い話になったので備忘録。</p>

<!-- more -->


<p><code>/cgi-bin/hoge/hoge.php</code> を、<br/>
<code>/abc/hoge/hoge.php</code> へリダイレクトするとする。<br/>
(cgi-binディレクトリからabcディレクトリへリダイレクト)</p>

<h1>htacessでリダイレクト</h1>

<p>まずは何も考えずに <code>.htaccess</code> を利用してのリダイレクトを設定する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine on
</span><span class='line'>RewriteRule ^cgi-bin/hoge/hoge.php$ /abc/hoge/hoge.php [R=301,L]</span></code></pre></td></tr></table></div></figure>


<p>これでアクセスしてみるも、 Not Found の表示。</p>

<p>試しに、<code>/cgi-bin/</code> のディレクトリを作り、その中にファイルを設置してアクセスしてみるも、同じくNot Found。<br/>
リダイレクト以前に、<code>/cgi-bin/</code> ディレクトリ自体にアクセスが出来ていない。</p>

<h1>cgi-bin</h1>

<p>apacheのデフォルト設定では、 <code>/cgi-bin/</code> ディレクトリは別のディレクトリへエイリアスが貼られている事が多いような記述があった。<br/>
セキュリティ的にドキュメントルートのcgi-binには直接アクセスさせないようになっているらしい。</p>

<p><a href="http://www.adminweb.jp/apache/cgi/index1.html">CGI用エイリアスの設定(ScriptAlias) &ndash; CGIの利用 &ndash; Apache入門</a></p>

<p>Herokuもこの設定が行われているらしく、PHP環境のherokuのconfファイルを確認すると、以下のような設定が書かれている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ScriptAlias /cgi-bin/ "/app/.heroku/php//share/apache2/cgi-bin/"</span></code></pre></td></tr></table></div></figure>


<p>そのため、ドキュメントルート以下のcgi-binディレクトリにファイルをおいても、上記ディレクトリには該当のファイルがなく、not foundとなっていたよう。</p>

<p>さらに、htaccessよりも、confファイルの方が早く呼ばれるため、htaccessでのリダイレクトが効く前に上記にエイリアスで飛ばされ、htaccessによるリダイレクトも効かなかった事が原因だった。</p>

<h1>confファイル</h1>

<p>herokuのPHPのビルドパックでは、Procfileにて任意のconfファイルを読みこませる事が出来るよう。
そこで、そのconfファイルにてリダイレクト設定を書くことで対応する。</p>

<h2>Procfile</h2>

<p>Procfileでの設定内容のオプションなどは、PHPのビルドパックのソース内に書かれている。</p>

<p><a href="https://github.com/heroku/heroku-buildpack-php/blob/master/bin/heroku-php-apache2#L46">https://github.com/heroku/heroku-buildpack-php/blob/master/bin/heroku-php-apache2#L46</a></p>

<p>このヘルプの通り、以下の書式で記述することが可能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>web: vendor/bin/heroku-php-apache2 [options] [&lt;DOCUMENT_ROOT&gt;]</span></code></pre></td></tr></table></div></figure>


<h2>confファイルの読み込み</h2>

<p>任意のconfファイルを読みこませるには、2つのオプションがある。<br/>
一つは、全く新しいconfファイルを読みこませる方法。これには、小文字のcを使用する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-c &lt;httpd.conf&gt;</span></code></pre></td></tr></table></div></figure>


<p>これは既存の設定を全て上書きするため、正しく設定出来ていない場合はアプリケーションの起動に失敗するので注意が必要。<br/>
デフォルトで読み込まれているconfファイルは以下となる。</p>

<p><a href="https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/heroku.conf">https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/heroku.conf</a></p>

<p>これはあまり指定することはないと思われる。</p>

<p>もう一つは、既存のconfファイルに追加するもの。<br/>
こちらは、大文字のCを使う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-C &lt;httpd.inc.conf&gt;</span></code></pre></td></tr></table></div></figure>


<p>デフォルトで読み込まれているファイルは以下となる。
<a href="https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/default_include.conf">https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/default_include.conf</a></p>

<p>このファイルではディレクトリインデックスの設定のみが書かれている状態。
このように、設定したい内容を記述したファイルを作成し、大文字のCオプションで読み込ませることで既存の設定に追加で反映が出来る。</p>

<h2>Procfileでの設定</h2>

<p>アプリのルートに、 <code>my_app.conf</code> ファイルを作成し読み込ませるとする。<br/>
また、ドキュメントルートは <code>htdocs</code> で設定したい場合は、以下の様な内容となる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>web: vendor/bin/heroku-php-apache2 -C ./my_app.conf htdocs</span></code></pre></td></tr></table></div></figure>


<p>ファイルのパスは、 <code>/app</code> からの相対パスでの指定となる。<br/>
これでアプリの起動時に、 <code>my_app.conf</code> ファイルが読み込まれることとなる。</p>

<h2>confファイルでのリダイレクト</h2>

<p>そういうわけで、confファイル内に直接リダイレクトの設定を記述する。<br/>
１点注意点としては、 <code>htaccess</code>による設定の場合は、相対パスで記述する場合は先頭の <code>/</code> が必要ないのだが、<br/>
confファイルによる設定の場合は、先頭に <code>/</code> が必要となる。</p>

<p><a href="http://ysklog.net/mod-rewrite/related05.html">【mod_rewrite】「.htaccess」と「httpd.conf」での設定による違い &#8211; mod rewrite</a></p>

<p>よって、以下のように記述する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine on
</span><span class='line'>RewriteRule ^/cgi-bin/hoge/hoge.php$ /abc/hoge/hoge.php [R=301,L]</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、デフォルトで読み込まれているファイルに記述されている、ディレクトリインデックスの設定を記述せずに読み込ませると、その設定が消えてしまい、<code>/</code> でアクセスした場合には、 <code>index.html</code> が最初に呼び出されるようになってしまう。<br/>
よって、ディレクトリインデックスの設定も合わせて書いておくと挙動が変わらずに設定できる。
一応、全文は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DirectoryIndex index.php index.html index.htm
</span><span class='line'>
</span><span class='line'>RewriteEngine on
</span><span class='line'>RewriteRule ^/cgi-bin/hoge/hoge.php$ /abc/hoge/hoge.php [R=301,L]</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://ysklog.net/mod-rewrite/related02.html">【mod_rewrite】「httpd.conf」での設定方法 &#8211; mod rewrite</a></li>
<li><a href="https://devcenter.heroku.com/articles/custom-php-settings#apache">Customizing Web Server and Runtime Settings for PHP | Heroku Dev Center</a></li>
</ul>


<h1>まとめ</h1>

<p>cgi-binディレクトリからリダイレクト、というのは実際の要件としてはめったにあることではないけれど、herokuのPHPの設定として、confファイルをカスタマイズしたい要件はあると思う。<br/>
実際、htaccessでのリダイレクトより、confファイルでのリダイレクトのほうが早いようなので出来るならそっちの方がよかったりするだろうし。<br/>
herokuは簡単に利用出来る反面、設定が触れずガチガチだと思われガチだけど、結構設定はいじれたりする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku] タイムゾーンの設定各種]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/01/heroku-timezone/"/>
    <updated>2016-09-01T10:02:04+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/01/heroku-timezone</id>
    <content type="html"><![CDATA[<p>heroku環境でタイムゾーンの設定が色々あったのでまとめ。</p>

<!-- more -->


<h1>サーバー時間</h1>

<p>まずは、herokuのサーバー時間のタイムゾーン設定。<br/>
これは簡単で、環境変数に入れてやるだけ。</p>

<blockquote><p>TZ : Asia/Tokyo</p></blockquote>

<p>コマンドで入れる場合は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku config:add TZ=Asia/Tokyo -a APP_NAME</span></code></pre></td></tr></table></div></figure>


<p>きちんと反映されているかどうかは下記コマンドから参照可能。<br/>
意図した時間が返ってきてればOK。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku run date -a APP_NAME
</span><span class='line'>Running date on ⬢ APP_NAME... up, run.1198
</span><span class='line'>Thu Sep  1 10:06:57 JST 2016</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://blog.skktmlab.info/blog/2015_03_02_2">Herokuでホスティングしているブログのタイムゾーンを設定する</a></li>
</ul>


<h1>PHP</h1>

<p>PHPの設定でタイムゾーンを指定する場合。<br/>
通常は、 <code>php.ini</code> で設定するが、herokuの場合は、 <code>.user.ini</code> ファイルを使う。</p>

<p>ドキュメントルート直下に <code>.user.ini</code> ファイルを設置。<br/>
中に以下を記述。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>date.timezone = "Asia/Tokyo"</span></code></pre></td></tr></table></div></figure>


<p>この設定ではその他にはアップロードの最大容量なんかを指定する場合が多い。<br/>
参考 : <a href="http://kayakuguri.github.io/blog/2014/02/18/change-max-filesize/">[PHP][heroku]upload_max_filesizeを変更する &ndash; KayaMemo</a></p>

<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/hiro_y/items/bc631a27c9701f81a4f9#runtime-settings">HerokuでPHPを使うときに気を付けるところ &ndash; Qiita</a></li>
<li><a href="https://devcenter.heroku.com/articles/custom-php-settings#php-runtime-settings-ini-settings">Customizing Web Server and Runtime Settings for PHP | Heroku Dev Center</a></li>
</ul>


<h1>WordPress</h1>

<p>最後はherokuと直接は関係ないけれど、wordpressのタイムゾーン。<br/>
WordPressのタイムゾーンはデフォルトで標準時になるようにしてある、とのこと。<br/>
しかしこれは設定で変更するものではなく、取得する際に調整するもののよう。</p>

<p>一番簡易なものとしては、 <code>date</code> 関数で取得していた箇所をWordPress関数である、 <code>date_i18n</code> を利用して取得するようにする、というもの。<br/>
これだけで、日本時間で取得できるようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>date_i18n('Y-m-d H:i:s');</span></code></pre></td></tr></table></div></figure>


<p>その他では、 <code>datetime</code> クラスを使用してタイムゾーンを指定する方法もあり。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$now = new DateTime('', new DateTimeZone('Asia/Tokyo'));
</span><span class='line'>$now-&gt;format('Y-m-d H:i:s');</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/yousan/items/a385f794a9bb433aecbb">WordPressで現在時刻を利用すると9時間ずれてしまう問題 &ndash; Qiita</a></li>
</ul>


<h1>まとめ</h1>

<p>WordPressはともかく、herokuとPHPのタイムゾーン設定はherokuでPHPを使うのなら、デフォルトで設定しておいた方が後々間違いがなさそう。<br/>
環境構築の際にまず設定しておくとよさげ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant (Ubuntu) 環境でhttps接続する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/08/10/vagrant-ubuntu-ssl/"/>
    <updated>2016-08-10T15:18:45+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/08/10/vagrant-ubuntu-ssl</id>
    <content type="html"><![CDATA[<p>本番がhttpsの開発でローカル環境だけhttpで接続していると色々面倒があるため、ローカルのvagrant環境でもhttps接続出来るように調整してみたメモ。</p>

<!-- more -->


<h1>前提</h1>

<p>OSはubuntu。というか、いつものように、vagrantの環境はscotchbox。</p>

<p><a href="https://box.scotch.io/">https://box.scotch.io/</a></p>

<h1>参考</h1>

<p>主に以下を参考にそのまま作業した。ありがとうございます。</p>

<p><a href="http://hidex7777.hatenablog.com/entry/2014/03/18/220943">VagrantでUbuntuサーバ/Apache2のSSL(https) &ndash; orangeProse別館</a></p>

<h1>テスト用の証明書を作成</h1>

<p>まずはモジュールを有効に。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo a2enmod ssl
</span><span class='line'>$ sudo service apache2 reload</span></code></pre></td></tr></table></div></figure>


<p>で、テスト用の証明書を作成。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo make-ssl-cert generate-default-snakeoil --force-ovarwrite
</span><span class='line'>$ sudo make-ssl-cert /usr/share/ssl-cert/ssleay.cnf /etc/apache2/apache.pem</span></code></pre></td></tr></table></div></figure>


<p>二つ目を実行すると、コンソールの画面全体で設定画面が表示されて証明書の内容を聞かれる。
ひとつ目はコモンネーム。
hostsで指定しているURLを指定しておく。</p>

<p><img src="http://kayakuguri.github.io/images/2016/08/vagrant_ssl_01.jpg" alt="" /></p>

<p>二つ目は、 <code>Subject Alternative Names</code> (サブジェクトの別名)。<br/>
<a href="https://knowledge.geotrust.com/jp/support/knowledge-base/index?vproductcat=G&amp;vdomain=GEOTRUST_JP&amp;page=content&amp;id=SO24206&amp;actp=LIST&amp;viewlocale=ja_JP&amp;locale=ja_JP&amp;redirected=true">「Subject Alternative Names（サブジェクトの別名）」とは何ですか  | GeoTrust<br/>
</a></p>

<p>今回は特に使用しないので空白のままとしておく。</p>

<p><img src="http://kayakuguri.github.io/images/2016/08/vagrant_ssl_02.jpg" alt="" /></p>

<p>apacheを再起動。</p>

<h1>設定ファイル</h1>

<p>このままだとSSL用の設定ファイルがないようなので、<code>default-ssl.conf</code>というファイルをコピーして使用する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /etc/apache2/sites-available
</span><span class='line'>$ sudo cp default-ssl.conf ssl.conf
</span><span class='line'>$ sudo a2ensite ssl
</span><span class='line'>$ sudo service apache2 reload</span></code></pre></td></tr></table></div></figure>


<p>参考サイトでは<code>.conf</code>の拡張子が指定されていなかったのだが、指定されていないとエラーとなってしまう。<br/>
<a href="http://qiita.com/mzmttks/items/85c69313693cb1df4949">Apache2 on ubuntu で a2ensite すると does not exist と言われるときの対処法 &ndash; Qiita</a></p>

<p>最後はapacheを再起動。</p>

<p>この状態で、httpsでアクセスをすると、プライバシーが保護されていない、というような警告が出るが、無視してアクセスすると無事、接続できた。</p>

<p><img src="http://kayakuguri.github.io/images/2016/08/vagrant_ssl_03.jpg" alt="" /></p>

<h1>ドキュメントルート</h1>

<p>しかしhttpでアクセスしていたファイルにアクセスが出来ない。
どうやら、httpsで指定されているドキュメントルートが違っているよう。
先程コピーした、<code>ssl.conf</code>ファイルを見てみる。</p>

<p>すると、以下のようにドキュメントルートが設定されている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DocumentRoot /var/www/html</span></code></pre></td></tr></table></div></figure>


<p>今回は、<code>public</code>をドキュメントルートとしているので、そちらに変更する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DocumentRoot /var/www/public</span></code></pre></td></tr></table></div></figure>


<p>例によって、apacheを再起動して接続確認。無事、接続出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="https://www.k4750.net/2013/10/13/self-signed-cert/">（正しい）オレオレ証明書の作り方 |  K4750.net</a></li>
<li><a href="http://takuya-1st.hatenablog.jp/entry/20100730/1280474385">超簡単・オレオレ証明書の作り方 &ndash; それマグで！</a></li>
<li><a href="http://blog.inouetakuya.info/entry/20110605/1307261417">それ etckeeper でできるよ &ndash; /etc 以下を Git で自動的にバージョン管理 &ndash; 彼女からは、おいちゃんと呼ばれています</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
