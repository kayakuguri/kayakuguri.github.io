<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2015-04-20T12:00:05+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[.gitignoreを作成してくれる便利ツール]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/19/gitignore-tool/"/>
    <updated>2015-02-19T18:21:02+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/19/gitignore-tool</id>
    <content type="html"><![CDATA[<p>gitignoreを作成してくれる便利ツールがあったのでメモ。</p>

<!-- more -->


<p><img src="/images/2015/02/gitignore_io.jpg" alt="gitignore_io" /></p>

<p>真ん中の検索窓風のエリアに、適応したいgitignoreを入れていくと、インクリメンタルサーチで結果が出てくるので、エンターで追加。<br/>
<code>PhpStome</code>や<code>cakePHP</code>なんかを追加できる。</p>

<p><img src="/images/2015/02/gitignore_io2.jpg" alt="gitignore_io" /></p>

<p>で、<code>Generate</code>ボタンをクリックすると、作成され、テキストとして直接表示される。<br/>
ここからコピペなりなんなりで。</p>

<p>ちなみに、ボタンの横の矢印からファイルを直接ダウンロードする事も可能。</p>

<p><img src="/images/2015/02/gitignore_io3.jpg" alt="download file" /></p>

<p>ちょっと迷ったのがMac用の設定で、<code>OSX</code>とすれば設定されます。<br/>
その他、ドキュメントなどは以下。</p>

<p><a href="https://www.gitignore.io/docs">https://www.gitignore.io/docs</a></p>

<p>いつもgitignoreの設定で迷うのでこれで統一すれば便利かも。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitにて以降はこのファイルは変更に含めない指定]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/01/28/git-skip-worktree/"/>
    <updated>2015-01-28T14:27:07+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/01/28/git-skip-worktree</id>
    <content type="html"><![CDATA[<p>一度gitにてpushはしたけれど、それ以降は変更を無視する(ローカルとサーバーで内容が違うファイルをなる)設定。<br/>
いつも忘れるのでメモ。</p>

<!-- more -->


<p><code>gitignore</code>だと一度pushしてしまっているので効かない。<br/>
こんな時は、<code>skip-worktree</code>を使うそう。</p>

<pre><code>$ git update-index --skip-worktree スキップしたいファイル名
</code></pre>

<p>これを実行すると以降は指定したファイルの変更は検知されない(commitされない)<br/>
解除するには以下。</p>

<pre><code>$ git update-index --no-skip-worktree スキップしてたファイル名
</code></pre>

<h4>[参考]</h4>

<p><a href="http://qiita.com/usamik26/items/56d0d3ba7a1300625f92">既に git 管理しているファイルをあえて無視したい &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuからgitのアップグレードを促されたので対応する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/12/24/git-update-for-mac/"/>
    <updated>2014-12-24T11:56:25+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/12/24/git-update-for-mac</id>
    <content type="html"><![CDATA[<p>コマンドからherokuを使おうと思うと、以下のようなメッセージが。</p>

<blockquote><p>Your version of git is 2.1.2. <br/>
Which has serious security vulnerabilities.<br/>
More information here: <a href="https://blog.heroku.com/archives/2014/12/23/update_your_git_clients_on_windows_and_os_x">https://blog.heroku.com/archives/2014/12/23/update_your_git_clients_on_windows_and_os_x</a></p></blockquote>

<p><a href="https://blog.heroku.com/archives/2014/12/23/update_your_git_clients_on_windows_and_os_x">Update Git clients on Windows and OS X</a><br/>
どうやらgitが古いとセキュリティ的に危ないから最新にしてね、という事のよう。</p>

<!-- more -->


<h3>確認</h3>

<p>現行の状態を確認。</p>

<pre><code>$ git --version
git version 2.1.2
</code></pre>

<h3>homebrewで</h3>

<p><code>homebrew</code>でもアップグレード出来るよ、とあったので、コマンドをググって叩いてみた。</p>

<pre><code>$ brew upgrade git
Error: git-2.1.2 already installed
</code></pre>

<p>しかし、すでに最新が入っている、と起こられてしまう。<br/>
まだ対応していないのかな？</p>

<h3>パッケージでインストール</h3>

<p>仕方ないので、直接gitのページからインストーラーをダウンロードして、<br/>
道なりに(いい表現)インストール。</p>

<p><a href="http://sourceforge.net/projects/git-osx-installer/files/">http://sourceforge.net/projects/git-osx-installer/files/</a></p>

<p>しかし、変わらない。。</p>

<h3>パスを変更</h3>

<p>ググるとこんなパスが違う、とうい情報が。<br/>
<a href="http://qiita.com/d_nishiyama85/items/d63da1e50405abc0929c">OSX で Git をバージョンアップする</a></p>

<p>というわけで、heroku toolebeltのパスが記載されていた、<code>.bashrc</code>に以下を追記。</p>

<pre><code>export PATH="/usr/local/git/bin:$PATH"
</code></pre>

<p>で、読み込みなおす。</p>

<pre><code>$ source ~/.bashrc
</code></pre>

<p>バージョン確認。</p>

<pre><code>$ git --version
git version 2.2.1
</code></pre>

<p>無事、アップグレード完了。<br/>
herokuコマンドを叩いても注意は出なくなりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[エラー] bad line length character: Sysl]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/28/git-heroku-error/"/>
    <updated>2014-07-28T12:39:54+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/28/git-heroku-error</id>
    <content type="html"><![CDATA[<p>とあるタイミングでheroku上のgitからフェッチしようとすると、<br/>
タイトルのようなエラーが出た。</p>

<!-- more -->


<p>エラー内容。</p>

<pre><code>$ git fetch staging
Fetching repositoryfatal: protocol error: bad line length character: Sysl
</code></pre>

<p>環境は、herokuで、<a href="http://kayakuguri.github.io/blog/2014/07/02/heroku-staging/">ここで書いた</a>とおり、ローカルでブランチを切って、<br/>
それぞれのブランチでリモートのプッシュ先を変えて管理している。<br/>
ここでは、staging環境の分をフェッチしたかった。</p>

<p>heroku関連として全く同じ内容のエラーがStackOverFlowに投稿されていたが、<br/>
どうやら解決はしていないよう。</p>

<p><a href="http://stackoverflow.com/questions/23034100/git-error-bad-line-length-character-sysl">Git Error: bad line length character: Sysl</a></p>

<p>ググってみると、リモート先のサーバーにsshでログインする時に表示されるメッセージが悪いとか、<br/>
ssh関連で、<code>.bashrc</code>とか<code>.zshrc</code>とかの設定を見なおしたよ、というような内容が多い。</p>

<p><a href="http://d.hatena.ne.jp/kuromoyo/20120217/1329460576">protocol error: bad line length character と出たら &ndash; #9 Backyard</a><br/>
<a href="http://verytired.hateblo.jp/entry/2013/07/10/191324">gitのエラー解決方法 &ndash; Shut the fuck up and write some code</a><br/>
<a href="http://kimoi.hatenadiary.com/entry/20130701/1372693974">fatal: protocol error: bad line length character: # Us &ndash; きもい交換日記</a></p>

<p>しかしどれもピンと来ない。</p>

<p>とりあえず、master環境に切り替えてみよう(理由はない)と思い、変更してみると以下のエラー。</p>

<pre><code>$ git checkout master
fatal: This operation must be run in a work tree
</code></pre>

<p>ググると以下の情報が。<br/>
<a href="http://dqn.sakusakutto.jp/2012/09/git-bare-checkout-This-operation-must-be-run-in-a-work-tree.html">#git bareレポジトリでcheckoutしようとして&quot;This operation must be run in a work tree&quot;の対処法 &ndash; DQNEO起業日記</a></p>

<p>内容通り、以下のコマンドで切り替えは出来た。</p>

<pre><code>$ git symbolic-ref HEAD refs/heads/master
</code></pre>

<p>ただし、またstagingに戻そうとすると、上記のコマンドが必要になる。。</p>

<p>ターミナルだけでなく、gitはsourceTreeでも管理しているのだけれど、<br/>
そのソフト上では、ブランチの切り替えはダブルクリックだけで簡単に出来た。</p>

<p>そんな感じで、ブランチの切り替えをしていると、自動的にstaging環境でフェッチが行われていた。<br/>
流れとしてはこんな感じ。</p>

<blockquote><p>stagigブランチ<br/>
masterブランチに切り替え<br/>
stagingブランチに切り替え<br/>
自動的にフェッチが行われる<br/>
 (全てsourcetree上での作業)</p></blockquote>

<p>その後、ターミナル上でも<code>fetch</code>してみたが、何事もなく動作した。</p>

<pre><code>$ git fetch staging
Fetching repository, done.
</code></pre>

<hr />

<p>結局、原因は不明で、修正手順も不明、なのだけれど、<br/>
ちょっと情報が少なかったのでメモとして残しておく。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Herokuでステージング環境をブランチを切って作成する]]></title>
    <link href="http://kayakuguri.github.io/blog/2014/07/02/heroku-staging/"/>
    <updated>2014-07-02T15:18:31+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2014/07/02/heroku-staging</id>
    <content type="html"><![CDATA[<p>herokuでステージング環境を作成してみた。<br/>
ブランチを切って、切り替えできるようにした。</p>

<!-- more -->


<p>アプリの作成はブラウザ上で行い、<br/>
そこに後からpushしていく想定とする。<br/>
(使用していてターミナル上でアプリを作成することが少なかったので)<br/>
アプリ名(ID)は以下とする</p>

<p>本番：sampleapp<br/>
ステージング：sampleapp-staging</p>

<p>ターミナルでアプリ用のファイルが入ったディレクトリに移動する。<br/>
(以降はそのディレクトリでの作業となる。)<br/>
まず、本番環境の分にアプリをサクっとプッシュ＆デプロイ。</p>

<pre><code>$ git init
$ git add .
$ git remote add heroku git@heroku.com:sampleapp.git
$ git commit -m 'init'
$ git push heroku master
</code></pre>

<p>３つ目の<code>remote add</code>でプッシュ先のリモートリポジトリを設定しているわけだけれど、<br/>
このaddの後の、<code>heroku</code>が本番用のリモートリポジトリ名となる。</p>

<p>で。ローカルのリポジトリのブランチをステージング用に切る。<br/>
その後、stagingリポジトリに移動。</p>

<pre><code>$ git branch
* master

$ git branch staging
$ git checkout staging  
Switched to branch 'staging'
$ git branch
  master
* staging
</code></pre>

<p>で、ステージング環境のリモートリポジトリを追加。</p>

<pre><code>$ git remote add staging git@heroku.com:sampleapp-staging.git
</code></pre>

<p>確認。</p>

<pre><code>$ git remote --v
heroku  git@heroku.kano:sampleapp.git (fetch)
heroku  git@heroku.kano:sampleapp.git (push)
staging git@heroku.com:sampleapp-staging.git (fetch)
staging git@heroku.com:sampleapp-staging.git (push)
</code></pre>

<p>で、ステージング環境にプッシュ、するわけだけれど、通常の感覚で、<br/>
ローカルのstagingリポジトリをリモートのstagingリポジトリに追加、とすると、<br/>
<code>$ git push staging staging</code>になるわけだけれど、<br/>
そうすると、ステージング環境用のアプリがデプロイされない。</p>

<pre><code>$ git push staging staging
. . .
Pushed to non-master branch, skipping build.
. . .
</code></pre>

<p>書いてある通り、masterブランチにプッシュしないとデプロイされない。<br/>
以下に情報があった。<br/>
<a href="http://www.ownway.info/Ruby/index.php?heroku%2Fhow%2Fmanagement%2Fapplication">Heroku アプリケーションの管理 &ndash; 君の瞳はまるでルビー &ndash; Ruby 関連まとめサイト</a></p>

<blockquote><p>アプリケーションとして認識されるのは master ブランチにあるソースコードだけです。</p></blockquote>

<p>同サイト内に解決方法も載っていた。</p>

<blockquote><p>master 以外のブランチやタグにあるソースコードを既存の Heroku アプリケーションとしてデプロイするには git push に &mdash;force オプションを使う必要があります。<br/>
git push heroku beta_1:master &mdash;force<br/>
これはローカルリポジトリのブランチ beta_1 の内容を heroku リモートリポジトリの master に強制的に入れるためのものです。</p></blockquote>

<p>というわけで、以下のようにしてステージング環境にプッシュ。</p>

<pre><code>$ git push staging staging:master --force
</code></pre>

<p>これでステージング環境が作成できた。</p>

<p>主な作業はstagingブランチで作業し、上記の<code>--force</code>付きpushでステージングアプリに反映。<br/>
確認後、masterブランチに切り替えてstagingブランチとマージして、<br/>
通常の<code>$ git push heroku master</code>で、本番アプリに反映する、<br/>
という流れになる予定。</p>
]]></content>
  </entry>
  
</feed>
