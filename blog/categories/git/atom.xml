<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2016-02-29T18:08:17+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git-ftpを使ってGitでFTP更新を管理する]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/11/16/git-ftp/"/>
    <updated>2015-11-16T19:19:22+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/11/16/git-ftp</id>
    <content type="html"><![CDATA[<p>FTPでしか管理してないサイトの場合、いちいち差分を確認してちまちまFTPでアップしていくのはめんどくさいしミスのもとにもなる。<br/>
しかし、git-ftpなるツールを使えば、gitで管理しつつFTPにアップ出来るようになる。</p>

<!-- more -->


<h2>インストール</h2>

<p>macの場合は、homebrewを使ってインストール出来る。</p>

<pre><code>$ brew install git-ftp
</code></pre>

<p>インストールされたかどうかは以下のようにして出来る。</p>

<pre><code>$ git ftp
git-ftp &lt;action&gt; [&lt;options&gt;] &lt;url&gt;
</code></pre>

<h2>設定</h2>

<p><code>git config</code>で設定していく。<br/>
その際、ステージング・本番環境を分ける、というように、複数の環境を設定出来る。</p>

<pre><code>$ git config git-ftp.dev.url frp://&lt;ホスト名&gt;/&lt;アップするディレクトリ&gt;
$ git config git-ftp.dev.user &lt;ユーザー名&gt;
$ git config git-ftp.dev.password &lt;パスワード&gt;
</code></pre>

<p>git管理しているディレクトリがurlで設定したディレクトリと同期される。<br/>
(同期するローカルのディレクトリは設定出来ない)<br/>
vagrantなどで環境を作成している場合等は注意が必要。</p>

<p>で、初期化。</p>

<pre><code>$ git ftp init -s dev
</code></pre>

<p><code>-s</code>の後に設定した環境の名前を入れる。<br/>
すると、git管理しているファイルが設定したサーバーのディレクトリにアップされる。<br/>
(初期化すると全てアップされ、<code>.git-ftp.log</code>というファイルがサーバーにアップロードされる）</p>

<h2>push</h2>

<p>pushは以下で可能。</p>

<pre><code>$ git ftp push -s dev
</code></pre>

<p>これで、ローカルでgit管理しつつコマンド一発で差分をFTPアップロード出来るようになった。</p>

<h2>参考</h2>

<p><a href="https://github.com/git-ftp/git-ftp">git-ftp/git-ftp</a><br/>
<a href="https://github.com/git-ftp/git-ftp/blob/develop/INSTALL.md">git-ftp/INSTALL.md at develop · git-ftp/git-ftp</a></p>

<p><a href="http://qiita.com/dojineko/items/b11d279d1ff8cfacf3dc">Gitでサイトを更新したい！ &ndash; Qiita</a><br/>
<a href="http://www.moongift.jp/2014/02/git-ftp-git%C3%97ftp%E3%81%AA%E9%81%8B%E7%94%A8%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%EF%BC%81/">Git-ftp &ndash; Git×FTPな運用をサポート！ MOONGIFT</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitでカレントディレクトリのファイル一覧を表示]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/09/19/show-gitfilelist-with-status/"/>
    <updated>2015-09-19T19:56:40+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/09/19/show-gitfilelist-with-status</id>
    <content type="html"><![CDATA[<p>無視されているかどうかを確認したかったので。<br/>
コピペ用。</p>

<pre><code>git ls-files -v|perl -pe 's/\/.*/\//'|uniq
</code></pre>

<!-- more -->


<p>ファイル一覧を表示するのは以下。</p>

<pre><code>git ls-files
</code></pre>

<p><code>-v</code>オプションで無視されているかどうかを表示。<br/>
<code>H</code>はリストの含まれている。<br/>
<code>skip-worktree</code>の時は、<code>s</code>となる。<br/>
<code>assume-unchanged</code>の時は、状態が表示される、よう。</p>

<p>ただし、<code>ls-files</code>すると、管理しているファイル全てが表示されるので、多すぎて目的のファイルを見つけられない。<br/>
なので、現在のディレクトリのファイルのみを表示する。<br/>
git標準ではそんなオプションはないようで、正規表現で絞り込んでるよう。</p>

<h2>参考</h2>

<p><a href="http://qiita.com/zimathon/items/d964c4b3cc688cb2d114">git ls-files &ndash; Qiita</a><br/>
<a href="http://qiita.com/usamik26/items/56d0d3ba7a1300625f92">既に git 管理しているファイルをあえて無視したい &ndash; Qiita</a><br/>
<a href="http://iyukki.blog56.fc2.com/blog-entry-119.html">gitでファイル一覧を見る方法 CodingFirst</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuをデプロイするためにgitに空でコミットする]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/04/21/git-allow-empty/"/>
    <updated>2015-04-21T11:14:17+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/04/21/git-allow-empty</id>
    <content type="html"><![CDATA[<p>小ネタ。<br/>
タイトル通り。</p>

<!-- more -->


<p>herokuはgitにてpushした時にのみ、deployが走る。<br/>
しかし、アドオンを追加した時など、ファイルの変更はないけれどデプロイだけしたい場合がたまにある。<br/>
そんな時にはファイルを無駄に少しだけ触ったりしていたのだけれど、空でコミット出来る事が出来ると知ったので、メモ。</p>

<pre><code>$ git commit -m "for deploy heroku" --allow-empty
</code></pre>

<p>これでコミットしておいてpushすると無事、デプロイ出来る。</p>

<p>以下、検証。</p>

<pre><code>$ git push heroku master
Everything up-to-date
$ git commit -m "for deploy heroku" --allow-empty
[master 069260f] for deploy heroku
$ git push heroku master
Counting objects: 1, done.
Writing objects: 100% (1/1), 190 bytes | 0 bytes/s, done.
.....
  0022947..069260f  master -&gt; master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.gitignoreを作成してくれる便利ツール]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/02/19/gitignore-tool/"/>
    <updated>2015-02-19T18:21:02+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/02/19/gitignore-tool</id>
    <content type="html"><![CDATA[<p>gitignoreを作成してくれる便利ツールがあったのでメモ。</p>

<!-- more -->


<p><img src="/images/2015/02/gitignore_io.jpg" alt="gitignore_io" /></p>

<p>真ん中の検索窓風のエリアに、適応したいgitignoreを入れていくと、インクリメンタルサーチで結果が出てくるので、エンターで追加。<br/>
<code>PhpStome</code>や<code>cakePHP</code>なんかを追加できる。</p>

<p><img src="/images/2015/02/gitignore_io2.jpg" alt="gitignore_io" /></p>

<p>で、<code>Generate</code>ボタンをクリックすると、作成され、テキストとして直接表示される。<br/>
ここからコピペなりなんなりで。</p>

<p>ちなみに、ボタンの横の矢印からファイルを直接ダウンロードする事も可能。</p>

<p><img src="/images/2015/02/gitignore_io3.jpg" alt="download file" /></p>

<p>ちょっと迷ったのがMac用の設定で、<code>OSX</code>とすれば設定されます。<br/>
その他、ドキュメントなどは以下。</p>

<p><a href="https://www.gitignore.io/docs">https://www.gitignore.io/docs</a></p>

<p>いつもgitignoreの設定で迷うのでこれで統一すれば便利かも。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitにて以降はこのファイルは変更に含めない指定]]></title>
    <link href="http://kayakuguri.github.io/blog/2015/01/28/git-skip-worktree/"/>
    <updated>2015-01-28T14:27:07+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2015/01/28/git-skip-worktree</id>
    <content type="html"><![CDATA[<p>一度gitにてpushはしたけれど、それ以降は変更を無視する(ローカルとサーバーで内容が違うファイルをなる)設定。<br/>
いつも忘れるのでメモ。</p>

<!-- more -->


<p><code>gitignore</code>だと一度pushしてしまっているので効かない。<br/>
こんな時は、<code>skip-worktree</code>を使うそう。</p>

<pre><code>$ git update-index --skip-worktree スキップしたいファイル名
</code></pre>

<p>これを実行すると以降は指定したファイルの変更は検知されない(commitされない)<br/>
解除するには以下。</p>

<pre><code>$ git update-index --no-skip-worktree スキップしてたファイル名
</code></pre>

<h4>[参考]</h4>

<p><a href="http://qiita.com/usamik26/items/56d0d3ba7a1300625f92">既に git 管理しているファイルをあえて無視したい &ndash; Qiita</a></p>
]]></content>
  </entry>
  
</feed>
