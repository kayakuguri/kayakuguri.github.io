<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KayaMemo]]></title>
  <link href="http://kayakuguri.github.io/atom.xml" rel="self"/>
  <link href="http://kayakuguri.github.io/"/>
  <updated>2017-01-05T18:21:42+09:00</updated>
  <id>http://kayakuguri.github.io/</id>
  <author>
    <name><![CDATA[萱潜]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Herokuで独自ドメインを指定する際に使用するターゲット名]]></title>
    <link href="http://kayakuguri.github.io/blog/2017/01/05/heroku-custom-domain/"/>
    <updated>2017-01-05T18:17:32+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2017/01/05/heroku-custom-domain</id>
    <content type="html"><![CDATA[<p>Herokuで独自ドメインを指定するには、CNAMEでHeroku側のドメインを指定して設定してやる必要がある。</p>

<!-- more -->


<ul>
<li><a href="http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain/">[heroku]herokuでのSSL設定とカスタムサブドメインの適用方法</a></li>
</ul>


<h1>少し前までのターゲット</h1>

<p>少し前まで（具体的には<a href="https://blog.heroku.com/announcing_heroku_free_ssl_beta_and_flexible_dyno_hours">SSLの設定がHerokuの標準機能に組み込まれる</a>まで）は、以下のような設定内容で設定していた。<br/>
（アプリ名を <code>appname</code> とし、設定するサブドメインは、<code>www.appname.com</code> とする)</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 種類 (Record) </th>
<th align="left"> 名前 (Name) </th>
<th align="left"> 内容 (Target) </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> CNAME </td>
<td align="left"> <code>www</code> </td>
<td align="left"> <code>appname.herokuapp.com</code></td>
</tr>
</tbody>
</table>


<h1>Heroku Free SSL導入後のターゲット</h1>

<h2>注意</h2>

<p>ここでの説明はあくまでも独自<strong>サブドメイン</strong>の設定方法となる。<br/>
ルートドメインをHerokuのアプリで使用したい場合は、別途PointDNSアドオンや、AWSのRoot53などのサービスを使用する必要があるが、ここでは割愛する（どれがデファクトスタンダードかまだ決まりきってない印象）。<br/>
なので、CNAMEでの設定となり、Aレコードでの設定ではないので注意。<br/>
(herokuは固定IPではないので、通常はAレコードは使用出来ない）</p>

<h2>前提</h2>

<p>今まで、Herokuに独自のSSL証明書を適用させるためには <a href="https://elements.heroku.com/addons/ssl">Heroku SSLのアドオン</a> が必要だったのだが、<br/>
<strong>FreeDyno以外の有料アプリに限り</strong>デフォルトでSSLの設定が出来るようになった。<br/>
しかもブラウザ上からドラッグアンドドロップでファイルをアップ出来るようになったため無料かつ便利になった。</p>

<p>(無料での利用の場合はアドオンの追加が必要になるのだが、hobby dynoは月$7/1dyno、で、SSLアドオン $20/month、なので、有料dynoにした方が安いため、アドオンを追加するメリットはほぼないと思われる）</p>

<h2>ターゲットの変更</h2>

<p>そのタイミングで、CNAMEとして設定するターゲット名も変更になった。<br/>
今までは、 <code>hokkaido-1212.herokussl.com</code> など、都道府県が入ったようなランダムな名前だったのだが、新しく、 <code>www.APPNAME.com.herokudns.com</code> というような名前となった。<br/>
以下のようになるよう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{設定するサブドメイン}.herokudns.com</span></code></pre></td></tr></table></div></figure>


<h2>ターゲット名</h2>

<p>よって、CNAMEでの設定も内容の部分が変更となる。<br/>
このターゲット名だが、<strong>SSLを使用の有無、無料・有料Dynoに関わらず</strong>、一律で <code>herokudns.com</code> の指定となる。</p>

<p>Herokuの設定画面から設定した場合は以下のような感じで表示がされるので、<code>DNA Target</code>の部分を使用すればよい。</p>

<p><img src="http://kayakuguri.github.io/images/2017/01/custom_domain01.jpg" alt="" /></p>

<p>コマンドで確認した場合は以下のような感じになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku domains -a appname
</span><span class='line'>=== appname Heroku Domain
</span><span class='line'>appname.herokuapp.com
</span><span class='line'>
</span><span class='line'>=== appname Custom Domains
</span><span class='line'>Domain Name      DNS Target
</span><span class='line'>───────────────  ─────────────────────────────
</span><span class='line'>www.appname.com  www.appname.com.herokudns.com</span></code></pre></td></tr></table></div></figure>


<h2>CNAMEの設定</h2>

<p>よって、設定内容は以下のようになる。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 種類 (Record) </th>
<th align="left"> 名前 (Name) </th>
<th align="left"> 内容 (Target) </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> CNAME </td>
<td align="left"> <code>www</code> </td>
<td align="left"> <code>www.appname.com.herokudns.com</code></td>
</tr>
</tbody>
</table>


<h1>参考</h1>

<ul>
<li><a href="https://devcenter.heroku.com/articles/custom-domains">Custom Domain Names for Apps | Heroku Dev Center</a></li>
<li><a href="http://www.ucom.ne.jp/enterprise/dnsmanual/p4_4_1_4.html">DNS設定ツールマニュアルWEB</a>

<ul>
<li>CNAME設定がどんなものなのかのイメージに</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostmanでSalesforce REST APIに接続]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/12/07/sf-rest-api-postman/"/>
    <updated>2016-12-07T16:27:12+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/12/07/sf-rest-api-postman</id>
    <content type="html"><![CDATA[<p>以前まではRestAPIの接続確認には、<a href="https://apigee.com/providers">Apigee</a>を使用していたのだけれど、TLS1.0無効化の問題の影響からsandboxでは接続できなくなってしまった。<br/>
なので、代替としてちょっとめんどうだけれど、Postmanで接続してみた。</p>

<!-- more -->


<h1>アクセストークンの取得</h1>

<p>ドメインは、sandboxの場合は、 <code>test.salesforce.com</code> 、本番は、 <code>login.salesforce.com</code> となる。<br/>
今回はsandboxで試す。</p>

<p>Postmanにて、以下の内容で送信。</p>

<blockquote><p>POST : <a href="https://test.salesforce.com/services/oauth2/token">https://test.salesforce.com/services/oauth2/token</a></p></blockquote>

<ul>
<li><code>grant_type</code> : <code>password</code></li>
<li><code>client_id</code> : 接続アプリケーションのコンシューマ鍵</li>
<li><code>client_secret</code> : 接続アプリケーションのコンシューマの秘密</li>
<li><code>username</code> : 使用するアカウントのユーザ名</li>
<li><code>password</code> : パスワード。必要な場合は、パスワード+セキュリティトークン</li>
</ul>


<p><img src="http://kayakuguri.github.io/images/2016/12/sf_api_postman_01.jpg" alt="" /></p>

<p>正しくログイン出来ると以下のようにJSONが返ってくる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "access_token": "xxx",
</span><span class='line'>  "instance_url": "https://xxxx.salesforce.com",
</span><span class='line'>  "id": "https://test.salesforce.com/id/xxxx/xxxx",
</span><span class='line'>  "token_type": "Bearer",
</span><span class='line'>  "issued_at": "xxx",
</span><span class='line'>  "signature": "xxx"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>access_token</code>と<code>instance_url</code>だけ必要。</p>

<h1>APIに接続</h1>

<p>例として、オブジェクトの一覧を取得してみる。<br/>
URLのドメイン部分を先程取得した、 <code>instance_url</code> を使用する。</p>

<blockquote><p>GET : <a href="https://xxx.salesforce.com/services/data/v24.0/sobjects">https://xxx.salesforce.com/services/data/v24.0/sobjects</a></p></blockquote>

<p>ヘッダーに以下を追加。<br/>
<code>ACCESS_TOKEN</code>には先程取得した、<code>access_token</code>を使用する。</p>

<ul>
<li><code>Authorization</code> : <code>Bearer ACCESS_TOKEN</code></li>
</ul>


<p><img src="http://kayakuguri.github.io/images/2016/12/sf_api_postman_02.jpg" alt="" /></p>

<p>カスタムRestAPIの場合は以下のURLになる。<br/>
<code>hoge/hoge</code>が<code>@RestResource(urlMapping='/hoge/hoge')</code>で指定したURLとなる。</p>

<blockquote><p><a href="https://xxx.salesforce.com/services/apexrest/hoge/hoge">https://xxx.salesforce.com/services/apexrest/hoge/hoge</a></p></blockquote>

<h1>参考</h1>

<ul>
<li><a href="http://sfdcbeginner.com/how-to-test-salesforce-rest-api.html">HOW TO TEST SALESFORCE REST API</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScotchboxでのPHPエラーの出力場所]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/12/05/ubuntu-error-log/"/>
    <updated>2016-12-05T17:02:15+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/12/05/ubuntu-error-log</id>
    <content type="html"><![CDATA[<p>自分用メモ。<br/>
<a href="https://box.scotch.io/">Scotchbox</a>のVagrant環境で、PHPの標準エラー出力がどこに吐かれるかをいつも調べるのでメモ。</p>

<!-- more -->


<h1>環境</h1>

<p>環境は以下。</p>

<ul>
<li>Scotchbox 2.5</li>
<li>Ubuntu 14.04 LTS</li>
<li>PHP 5.6</li>
</ul>


<p>純粋なUbuntuでも同じ場所にログが出力されるのかは調査していないので、あくまでもScotchbox環境、とする</p>

<h1>結果</h1>

<p>結論から書くと、以下のパスに保存されていた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/var/log/apache2/error.log</span></code></pre></td></tr></table></div></figure>


<p>というわけで、<code>tail</code>する場合は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># tail -f /var/log/apache2/error.log</span></code></pre></td></tr></table></div></figure>


<h1>設定内容</h1>

<p>出力するパスは、以下のファイルで設定されている。<br/>
<code>/etc/apache2/sites-available/000-default.conf</code></p>

<p>内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>  ...
</span><span class='line'>  ErrorLog ${APACHE_LOG_DIR}/error.log
</span><span class='line'>  ...
</span><span class='line'>&lt;/VirtualHost&gt;  </span></code></pre></td></tr></table></div></figure>


<p><code>APACHE_LOG_DIR</code>という環境変数で設定されていることがわかる。<br/>
では、この環境変数はどこで設定しているかというと、以下のファイル。</p>

<p><code>/etc/apache2/envvars</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>export APACHE_LOG_DIR=/var/log/apache2$SUFFIX
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>というわけで、冒頭のディレクトリに保存されていた。<br/>
もし変更したい場合は上記<code>envvars</code>にて変更すればよさそう。<br/>
(パーミッションの設定を与えてやる必要はあると思う。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Laravel]フォームのバリデーションをRequestクラスに分離する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/11/18/larave-request/"/>
    <updated>2016-11-18T17:46:52+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/11/18/larave-request</id>
    <content type="html"><![CDATA[<p>LaraveのバリデーションチェックをRequestクラスの別ファイルにまとめる方法。<br/>
すでに各所で解説が書かれているだろうけれど、自分なりに把握出来たのでメモ。</p>

<!-- more -->


<h1>作成</h1>

<h2>生成</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php artisan make:request HogeRequest</span></code></pre></td></tr></table></div></figure>


<p>これで、<code>app/Http/Requests/</code>以下に生成される。</p>

<p>デフォルトで生成される内容は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>
</span><span class='line'>namespace App\Http\Requests;
</span><span class='line'>
</span><span class='line'>use App\Http\Requests\Request;
</span><span class='line'>
</span><span class='line'>class HogeRequest extends Request
</span><span class='line'>{
</span><span class='line'>    /**
</span><span class='line'>     * Determine if the user is authorized to make this request.
</span><span class='line'>     *
</span><span class='line'>     * @return bool
</span><span class='line'>     */
</span><span class='line'>    public function authorize()
</span><span class='line'>    {
</span><span class='line'>        return false;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Get the validation rules that apply to the request.
</span><span class='line'>     *
</span><span class='line'>     * @return array
</span><span class='line'>     */
</span><span class='line'>    public function rules()
</span><span class='line'>    {
</span><span class='line'>        return [
</span><span class='line'>            //
</span><span class='line'>        ];
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>認証</h2>

<p>一つ目のメソッド、<code>authorize</code>はデフォルトでは<code>false</code>となっている。<br/>
これは、このフォームを送信出来るユーザの認証を判定する箇所で、デフォルトの<code>false</code>だと全てのユーザが弾かれてしまう。<br/>
なのでこれは<code>true</code>に変更する。</p>

<h2>バリデーションルール</h2>

<p>肝心のバリデーションルールは、<code>rules()</code>メソッド内の戻り値として書く。<br/>
配列にコントローラーに書いていた時と同じように書く。</p>

<p>例）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public function rules()
</span><span class='line'>{
</span><span class='line'>    return [
</span><span class='line'>        'LastName' =&gt; 'required',
</span><span class='line'>        'FirstName' =&gt; 'required',
</span><span class='line'>        'Email' =&gt; 'required|email',
</span><span class='line'>    ];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>項目の名前 (日本語化)</h2>

<p>バリデーションルールに引っかかった際に返されるエラーメッセージはデフォルトでは英語になっている。<br/>
これを日本語にするには、言語ファイルを用意してやるとよい。<br/>
<code>resouces/lang/ja/</code>以下に、<code>validation.php</code>を置いてやる。<br/>
以下が、デフォルトの英語ファイルを日本語訳してくれているもの。<br/>
<a href="https://gist.github.com/syokunin/b37725686b5baf09255b">https://gist.github.com/syokunin/b37725686b5baf09255b</a></p>

<p>しかしこのままだと、項目名についてはnameで指定したもののママになってしまう。<br/>
これをカスタムで日本語化するには、さきほど追加した、<code>validation.php</code>の<code>attributes</code>で指定してやる。</p>

<p>例）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'attributes' =&gt; [
</span><span class='line'>    'title' =&gt; 'タイトル',
</span><span class='line'>    'body' =&gt; '本文',
</span><span class='line'>    'published_at' =&gt; '公開日',
</span><span class='line'>],</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://laravel10.wordpress.com/2015/03/11/%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AElaravel-5-19-%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%8C%96/">初めてのLaravel 5.1 : (19) エラーメッセージの日本語化 &#8211; ララ帳</a></li>
</ul>


<p>ここでの設定は全体での適用となるので、一括指定出来る反面、切り分けが出来ない。<br/>
これを各フォーム個別の設定としてやるために、先ほどの、Requestクラスに追加してやることが可能。</p>

<p>例）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public function attributes()
</span><span class='line'>{
</span><span class='line'>    return [
</span><span class='line'>        'name'    =&gt; 'お名前',
</span><span class='line'>        'email'   =&gt; 'メールアドレス',
</span><span class='line'>        'subject' =&gt; '件名',
</span><span class='line'>        'content' =&gt; '内容',
</span><span class='line'>    ];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://qiita.com/ponko2/items/fd7ac38b964e10f16f52#%E3%81%8A%E5%95%8F%E3%81%84%E5%90%88%E3%82%8F%E3%81%9B%E7%94%BB%E9%9D%A2%E3%81%AErequest">Laravel 5で確認画面付き問い合わせフォームを作る &ndash; Qiita</a></li>
</ul>


<h2>戻り先</h2>

<p>デフォルトの状態では、バリデーションエラーがあった場合は一つ前のページへ自動的に遷移する。<br/>
入力 → 確認 という遷移なら、確認に遷移してきた時点でエラーが出ると、一つ前の入力ページへ飛ぶ。</p>

<p>しかし、確認画面を挟むようなフォームの場合、確認画面から完了画面の際にもバリデーションチェックが必要となる。<br/>
これがデフォルトのままだと、<br/>
確認 → 完了 という遷移となり、エラーが出ると一つ前の確認画面に戻ってしまう。<br/>
ここでは入力画面に戻って欲しい。</p>

<p>その場合、Requestクラスで戻り先を指定してやる事が出来る。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>protected $redirect = 'hoge_input';</span></code></pre></td></tr></table></div></figure>


<p>変数名で指定の仕方を変えてやることが可能。</p>

<ul>
<li><code>redirect</code> &ndash; URIでの指定</li>
<li><code>redirectRoute</code> &ndash; 名前付きルートの名前での指定</li>
<li><code>redirectAction</code> &ndash; コントローラーのアクションでの指定</li>
</ul>


<p>[参考]</p>

<ul>
<li><a href="http://n2utech.hatenablog.jp/entry/2015/11/13/154754">【メモ】 Laravel 5.1 において FormRequest でエラーが発生した際の戻し先を変更する &ndash; n2utech</a></li>
<li><a href="https://github.com/laravel/framework/blob/5.1/src/Illuminate/Foundation/Http/FormRequest.php#L34-L53">framework/FormRequest.php at 5.1 · laravel/framework · GitHub</a></li>
</ul>


<h1>完成</h1>

<p>最終的に以下のような形とした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>
</span><span class='line'>namespace App\Http\Requests;
</span><span class='line'>
</span><span class='line'>use App\Http\Requests\Request;
</span><span class='line'>
</span><span class='line'>class HogeRequest extends Request
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * 戻り先
</span><span class='line'>     *
</span><span class='line'>     * @var string
</span><span class='line'>     */
</span><span class='line'>    protected $redirect = 'hoge_input';
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Determine if the user is authorized to make this request.
</span><span class='line'>     *
</span><span class='line'>     * @return bool
</span><span class='line'>     */
</span><span class='line'>    public function authorize()
</span><span class='line'>    {
</span><span class='line'>        return true;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * バリデーションルール
</span><span class='line'>     *
</span><span class='line'>     * @return array
</span><span class='line'>     */
</span><span class='line'>    public function rules()
</span><span class='line'>    {
</span><span class='line'>        return [
</span><span class='line'>            'LastName' =&gt; 'required',
</span><span class='line'>            'FirstName' =&gt; 'required',
</span><span class='line'>            'Email' =&gt; 'required|email',
</span><span class='line'>        ];
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * エラー時に表示する項目名
</span><span class='line'>     *
</span><span class='line'>     * @return array
</span><span class='line'>     */
</span><span class='line'>    public function attributes()
</span><span class='line'>    {
</span><span class='line'>        return [
</span><span class='line'>            'LastName' =&gt; '姓',
</span><span class='line'>            'FirstName' =&gt; '名',
</span><span class='line'>            'Email' =&gt; 'メールアドレス',
</span><span class='line'>        ];
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SalesforceのREST API接続用のLaravelパッケージを使ってみる]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/11/17/forrest-sfapi-laravel/"/>
    <updated>2016-11-17T14:00:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/11/17/forrest-sfapi-laravel</id>
    <content type="html"><![CDATA[<p>Salesforce接続用のLaravel5パッケージ、<code>omniphx/forrest</code>を使ってみた。</p>

<!-- more -->


<h1>セットアップ</h1>

<p>Composerに追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ composer require "omniphx/forrest":"2.*"</span></code></pre></td></tr></table></div></figure>


<p><code>config/app.php</code>に以下を追加</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'providers' =&gt; [
</span><span class='line'>  // ...
</span><span class='line'>  Omniphx\Forrest\Providers\Laravel\ForrestServiceProvider::class,
</span><span class='line'>  // ...
</span><span class='line'>],
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>'aliases' =&gt; [
</span><span class='line'>  // ...
</span><span class='line'>    'Forrest' =&gt; Omniphx\Forrest\Providers\Laravel\Facades\Forrest::class
</span><span class='line'>  // ...
</span><span class='line'>],</span></code></pre></td></tr></table></div></figure>


<p>以下で設定ファイルを生成させる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php artisan vendor:publish</span></code></pre></td></tr></table></div></figure>


<h1>設定ファイル</h1>

<p>SFへの接続方法は２つから選択可能。</p>

<ul>
<li>Web Server authentication flow &ndash; 個別のSFアカウントでのログイン</li>
<li>Username-Password authentication flow &ndash; 接続用のアカウントを使用したログイン</li>
</ul>


<p>通常は、Username-Password authentication を利用する事が多い。</p>

<p><code>config/forrest.php</code>で以下を書き換え。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//11行目
</span><span class='line'>'authentication' =&gt; 'WebServer',
</span><span class='line'>↓↓
</span><span class='line'>'authentication' =&gt; 'UserPassword',</span></code></pre></td></tr></table></div></figure>


<p>あとは、<code>.env</code>ファイルでユーザ名やパスワード、アプリのキーなどを設定する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CONSUMER_KEY=xxx
</span><span class='line'>CONSUMER_SECRET=xxx
</span><span class='line'>LOGIN_URL=https://login.salesforce.com/
</span><span class='line'>USERNAME=xxx
</span><span class='line'>PASSWORD=xxx</span></code></pre></td></tr></table></div></figure>


<p><code>LOGIN_URL</code>を <code>https://test.salesforce.com/</code>としておくと常にsandboxへの接続となる。</p>

<h1>利用</h1>

<h2>ログイン</h2>

<p>以下でログイン。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use Omniphx\Forrest\Providers\Laravel\Facades\Forrest;
</span><span class='line'>...
</span><span class='line'>Forrest::authenticate();</span></code></pre></td></tr></table></div></figure>


<p>(PHPStormの補完が効かない…）</p>

<h2>クエリの発行</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Forrest::query('SELECT Id FROM Account');</span></code></pre></td></tr></table></div></figure>


<h2>レコードの作成など</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$body = ['Name' =&gt; 'New Account'];
</span><span class='line'>Forrest::sobjects('Account',[
</span><span class='line'>    'method' =&gt; 'post',
</span><span class='line'>    'body'   =&gt; $body]);</span></code></pre></td></tr></table></div></figure>


<p><code>sobjects</code>で第一引数にオブジェクトを指定し、第二引数に送信する内容を指定する。<br/>
送信内容は配列でキーを指定してやればよい。<br/>
<code>method</code>はそれぞれ以下。</p>

<ul>
<li>post &ndash; 作成</li>
<li>put &ndash; 更新</li>
<li>patch &ndash; アップサート</li>
<li>delete &ndash; 削除</li>
</ul>


<p>削除の場合は以下のようにREST形式でSFIDを指定してやる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Forrest::sobjects('Account/001i000000xxx', ['method' =&gt; 'delete']);</span></code></pre></td></tr></table></div></figure>


<h2>トークンの操作</h2>

<ul>
<li>リフレッシュ &ndash; <code>refresh()</code></li>
<li>廃止 &ndash; <code>revoke()</code></li>
</ul>


<h2>カスタムエンドポイント</h2>

<p>以下の様のして送信する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Forrest::custom('/myEndpoint', [
</span><span class='line'>    'method' =&gt; 'post',
</span><span class='line'>    'body' =&gt; ['foo' =&gt; 'bar'],
</span><span class='line'>    'parameters' =&gt; ['flim' =&gt; 'flam']]);</span></code></pre></td></tr></table></div></figure>


<p>その他は、GitHubのReadme参照。</p>

<h1>参考</h1>

<ul>
<li><a href="https://github.com/omniphx/forrest">omniphx/forrest: Salesforce.com REST API Client for Laravel 5</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScotchboxでWordPressのローカル環境をサクッと構築する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/11/15/scotchbox-wordpress/"/>
    <updated>2016-11-15T18:50:13+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/11/15/scotchbox-wordpress</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/flurinduerst/WPDistillery">WPDisillery</a>というScotch BoxのWordPress用キットを利用して簡単にローカルにWordPress環境を作る。</p>

<!-- more -->


<p>手順は以下のままで試してみた。</p>

<p><a href="https://box.scotch.io/">https://box.scotch.io/</a><br/>
[Installing WordPress]</p>

<h1>Setup</h1>

<p><code>WPDistillery</code>のリポジトリをクローンする。<br/>
実質、必要なものは、<code>config.yml</code>と<code>setup.sh</code>の2ファイルだけなので、それを引き上げて他は削除する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:flurinduerst/WPDistillery.git
</span><span class='line'>$ mv WPDistillery/config.yml config.yml
</span><span class='line'>$ mv WPDistillery/setup.sh setup.sh
</span><span class='line'>$ rm -rf WPDistillery</span></code></pre></td></tr></table></div></figure>


<p><code>Scotch Box</code>をクローンする。<br/>
必要なものは<code>Vagrantfile</code>と<code>public</code>フォルダなので引き上げて、その他は削除する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/scotch-io/scotch-box.git
</span><span class='line'>$ mv scotch-box/public public
</span><span class='line'>$ mv scotch-box/Vagrantfile Vagrantfile
</span><span class='line'>$ rm -rf scotch-box</span></code></pre></td></tr></table></div></figure>


<p>この時点で以下のような構造になっているはず。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vagrantfile
</span><span class='line'>config.yml
</span><span class='line'>public/
</span><span class='line'>setup.sh</span></code></pre></td></tr></table></div></figure>


<p>ここまでをワンライナーで実行するコマンド。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/scotch-io/scotch-box.git && mv scotch-box/public public && mv scotch-box/Vagrantfile Vagrantfile && rm -rf scotch-box && git clone --depth 1 https://github.com/flurinduerst/WPDistillery.git && mv WPDistillery/config.yml config.yml && mv WPDistillery/setup.sh setup.sh && rm -rf WPDistillery</span></code></pre></td></tr></table></div></figure>


<h1>Config.yml</h1>

<p>WordPressの設定のために、<code>Config.yml</code>を編集する。</p>

<p>デフォルトでは以下のような内容になっている。<br/>
<a href="https://github.com/flurinduerst/WPDistillery/blob/master/config.yml">https://github.com/flurinduerst/WPDistillery/blob/master/config.yml</a></p>

<h2>言語とタイムゾーン</h2>

<p>デフォルトではアメリカになっているので日本に変更する。<br/>
localeは日本版の場合は、<code>ja</code>となる。(<code>ja_JP</code>ではない)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># language/timezone
</span><span class='line'>wplocale: ja
</span><span class='line'>timezone: "Asia/Tokyo"</span></code></pre></td></tr></table></div></figure>


<h2>ユーザ</h2>

<p>初期ユーザの設定。(ローカルだし)そのままでも構わない。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># admin user settings
</span><span class='line'>admin:
</span><span class='line'>  user: admin
</span><span class='line'>  password: admin
</span><span class='line'>  email: mail@domain.tld
</span><span class='line'>  first_name: ""
</span><span class='line'>  last_name: ""</span></code></pre></td></tr></table></div></figure>


<h2>サイトの設定</h2>

<p>サイトのタイトルや説明、パーマリンクの設定など、ブログ全般の設定関係。<br/>
<strong>urlだけ、ホスト名で指定したURLを記入する</strong>。<br/>
その他はそのままで問題なし。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wpsettings:
</span><span class='line'>  url: scotchbox
</span><span class='line'>  title: Example Title
</span><span class='line'>  description: Example Description
</span><span class='line'>  permalink_structure: "/%postname%/"
</span><span class='line'>  thumbnail_width: 150
</span><span class='line'>  thumbnail_height: 150
</span><span class='line'>  medium_width: 300
</span><span class='line'>  medium_height: 300
</span><span class='line'>  large_width: 1024
</span><span class='line'>  large_height: 1024
</span><span class='line'>  # use page as frontpage
</span><span class='line'>  page_on_front: true
</span><span class='line'>    frontpage_name: Example Front Page
</span><span class='line'>  # automatic conversion of smilies
</span><span class='line'>  convert_smilies: false</span></code></pre></td></tr></table></div></figure>


<h2>テーマ</h2>

<p>デフォルトでは、<code>WPSeed</code>というテーマが指定されている。<br/>
<a href="https://github.com/flurinduerst/WPSeed/">flurinduerst/WPSeed: WordPress starter Theme + sage Workflow</a></p>

<p>これはテーマ作成の元になるようなものを集めた、テーマのフレームワーク？みたいなもののよう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># theme to install, choose new name in 'rename' or leave empty
</span><span class='line'>theme:
</span><span class='line'>  name: WPSeed
</span><span class='line'>  rename: ""
</span><span class='line'>  url: "https://github.com/flurinduerst/WPSeed/archive/master.zip"
</span><span class='line'>  # add branch (e.g. master) or leave empty ("") if theme is not downloaded from a git repository
</span><span class='line'>  source_branch: master</span></code></pre></td></tr></table></div></figure>


<p>デフォルトのプラグイン、Twenthsixteenはそのまま入っていた。</p>

<h2>プラグイン</h2>

<p>有効化するものと有効化しないで入れておくものをそれぞれ選択出来る。</p>

<p>インストールして有効化するものは以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># plugins to install & activate
</span><span class='line'>plugins_active:
</span><span class='line'>  - disable-comments
</span><span class='line'>  - duplicate-post
</span><span class='line'>  - enable-media-replace
</span><span class='line'>  - favicon-by-realfavicongenerator
</span><span class='line'>  - regenerate-thumbnails
</span><span class='line'>  - simple-page-ordering
</span><span class='line'>  - user-switching
</span><span class='line'>  - google-sitemap-generator</span></code></pre></td></tr></table></div></figure>


<p>インストールだけするものは以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># plugins to install
</span><span class='line'>plugins_inactive:
</span><span class='line'>  #development
</span><span class='line'>  - custom-post-type-ui
</span><span class='line'>  - search-and-replace
</span><span class='line'>  - capability-manager-enhanced
</span><span class='line'>  #administration
</span><span class='line'>  - adminimize
</span><span class='line'>  - admin-menu-editor
</span><span class='line'>  - admin-menu-reorder
</span><span class='line'>  - wordpress-seo
</span><span class='line'>  #security/backup
</span><span class='line'>  - wp-security-audit-log
</span><span class='line'>  - backwpup</span></code></pre></td></tr></table></div></figure>


<p>好きなものを追加したい場合はここに正式な名前でリストに追加すればよさそう。<br/>
( <code>https://ja.wordpress.org/plugins/</code> の後ろに付くもの)</p>

<p>とりあえず、長くなるけどデフォルトで入っているものを調べてみる。</p>

<h3>有効化されるもの</h3>

<ul>
<li><a href="https://ja.wordpress.org/plugins/disable-comments/">disable-comments</a> &ndash; コメント停止用</li>
<li><a href="https://ja.wordpress.org/plugins/duplicate-post/">duplicate-post</a> &ndash; 記事を複製する</li>
<li><a href="https://ja.wordpress.org/plugins/enable-media-replace/">enable-media-replace</a> &ndash; アップされている画像の置換</li>
<li><a href="https://ja.wordpress.org/plugins/favicon-by-realfavicongenerator/">favicon-by-realfavicongenerator</a> &ndash; ファビコン設定用</li>
<li><a href="https://ja.wordpress.org/plugins/regenerate-thumbnails/">regenerate-thumbnails</a> &ndash; アップロード済みの画像のサムネイルを一括再生成</li>
<li><a href="https://ja.wordpress.org/plugins/simple-page-ordering/">simple-page-ordering</a> &ndash; ページ・カスタム投稿タイプの並び順を入れ替える</li>
<li><a href="https://ja.wordpress.org/plugins/user-switching/">user-switching</a> &ndash; ユーザー切り替え</li>
<li><a href="https://ja.wordpress.org/plugins/google-sitemap-generator/">google-sitemap-generator</a> &ndash; sitemapを自動で作成</li>
</ul>


<h3>インストールのみ</h3>

<ul>
<li><a href="https://ja.wordpress.org/plugins/custom-post-type-ui/">custom-post-type-ui</a> &ndash; カスタム投稿タイプを作成</li>
<li><a href="https://ja.wordpress.org/plugins/search-and-replace/">search-and-replace</a> &ndash; DB内のデータを検索・置換する</li>
<li><a href="https://ja.wordpress.org/plugins/capability-manager-enhanced/">capability-manager-enhanced</a> &ndash; ユーザ権限の管理</li>
<li><a href="https://ja.wordpress.org/plugins/adminimize/">adminimize</a> &ndash; ユーザ権限の管理</li>
<li><a href="https://ja.wordpress.org/plugins/admin-menu-editor/">admin-menu-editor</a> &ndash; 管理画面メニューのカスタマイズ</li>
<li><a href="https://ja.wordpress.org/plugins/admin-menu-reorder/">admin-menu-reorder</a> &ndash; 管理画面メニューの並び替え</li>
<li><a href="https://ja.wordpress.org/plugins/wordpress-seo/">wordpress-seo</a> &ndash; SEO管理</li>
<li><a href="https://ja.wordpress.org/plugins/wp-security-audit-log/">wp-security-audit-log</a> &ndash; 作業ログ管理</li>
<li><a href="https://ja.wordpress.org/plugins/backwpup/">backwpup</a> &ndash; バックアップ</li>
</ul>


<p>一部、重複していたり、更新が止まってたりするものもあるので、実際本番アップする際には精査した方がよさそう。</p>

<h3>設定をスキップする設定</h3>

<p>最後の <code># WPDISTILLERY SETUP</code> のセクションは、自動セットアップをするかどうかの設定。デフォルトでは全てオン(<code>true</code>)になっている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setup:
</span><span class='line'>  wp: true
</span><span class='line'>  settings: true
</span><span class='line'>  theme: true
</span><span class='line'>  plugins: true
</span><span class='line'>  cleanup: true
</span><span class='line'>    comment: true
</span><span class='line'>    posts: true
</span><span class='line'>    files: true
</span><span class='line'>    themes: true</span></code></pre></td></tr></table></div></figure>


<h1>ホスト</h1>

<p><code>Vagrantfile</code>にてホストの設定をする。<br/>
デフォルトでは以下のように、<code>192.168.33.10</code>のIPで、<code>scotchbox</code>というホスト名になっている。<br/>
これを必要ならば、任意のものに変更する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.vm.network "private_network", ip: "192.168.33.10"
</span><span class='line'>config.vm.hostname = "scotchbox"</span></code></pre></td></tr></table></div></figure>


<h1>Vagrantを起動</h1>

<p>ここまでで設定が完了したので、Vagrantを起動する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant up</span></code></pre></td></tr></table></div></figure>


<h1>設定を実行</h1>

<p>Vagrantが起動したら、WordPressの自動設定を起動するためにVagrantにsshで入る。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh</span></code></pre></td></tr></table></div></figure>


<p>自動設定の前に、<code>WP CLI</code>を最新版に更新し、その後、<code>setup.sh</code>のシェルスクリプトを起動する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo wp cli update --allow-root
</span><span class='line'>You have version 0.20.3. Would you like to update to 0.25.0? [y/n] y
</span><span class='line'>Downloading from https://github.com/wp-cli/wp-cli/releases/download/v0.25.0/wp-cli-0.25.0.phar...
</span><span class='line'>New version works. Proceeding to replace.
</span><span class='line'>Success: Updated WP-CLI to 0.25.0
</span><span class='line'>
</span><span class='line'>$ cd ../../var/www/ && bash setup.sh
</span><span class='line'>========== WPDISTILLERY START ==========
</span><span class='line'>...
</span><span class='line'>Do you want to continue anyway? (y/n) y
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>========== WPDISTILLERY FINISHED ==========</span></code></pre></td></tr></table></div></figure>


<h1>アクセス</h1>

<p>設定したホスト名かIPでアクセスすると、トップページが表示される。<br/>
<code>/wp-login.php</code>でログイン画面が開き、設定したユーザでログインが出来る。
これで無事、起動出来た。</p>

<h1>簡易インストール</h1>

<p>デフォルトのままだとプラグインやテーマが入ってかなり時間がかかるので、さくっと起動するために、ほとんどの設定をオフにしてインストールしてみる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setup:
</span><span class='line'>  wp: true
</span><span class='line'>  settings: false
</span><span class='line'>  theme: false
</span><span class='line'>  plugins: false
</span><span class='line'>  cleanup: false
</span><span class='line'>    comment: false
</span><span class='line'>    posts: false
</span><span class='line'>    files: false
</span><span class='line'>    themes: false</span></code></pre></td></tr></table></div></figure>


<p>これだと、サイトの名前やユーザの設定以外はデフォルトのまま起動できた。<br/>
デフォルトのフルの状態のものよりかなり早いのでこちらの方がよいかもしれない。</p>

<h1>参考</h1>

<ul>
<li><a href="https://box.scotch.io/">Scotch Box ♥ A Vagrant LAMP Stack That Just Works</a></li>
<li><a href="https://github.com/flurinduerst/WPDistillery#setup">flurinduerst/WPDistillery: WordPress Setup runner for Scotch Box</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chatter in Apxを利用してコメントをメンション付きで投稿する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/10/17/coonect-api-post-comment/"/>
    <updated>2016-10-17T18:37:58+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/10/17/coonect-api-post-comment</id>
    <content type="html"><![CDATA[<p>タイトル通り。<br/>
ChatterのコメントをApex経由で<code>@</code>メンション付きで投稿する。</p>

<!-- more -->


<p>Chatterコメントは、<code>FeedComment</code>というオブジェクト名で作成されているので、
このオブジェクトにレコードをインサートすればコメントは作成出来る。
しかしその場合はコメントにそのまま<code>@ユーザ名</code>とつけてもメンションとして認識されない。<br/>
そのため、メンションをapex経由でつけるには、Chatter in Apex、<code>ConnectAip</code>を使用する。</p>

<h1>コメントの投稿</h1>

<p>Chatter in Apexのドキュメントは以下。(英語)<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/connectAPI_overview.htm">Chatter in Apex</a></p>

<p>この中で、コメントの投稿には、<code>postCommentToFeedElement</code>メソッドを使う。<br/>
以下のサンプルがほぼそのまま。<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/connectapi_examples_post_comment_feed_element_2.htm">Post a Comment with a Mention</a></p>

<p>以下、順番に組み立ててみる。</p>

<h2>postCommentToFeedElement</h2>

<p><code>postCommentToFeedElement</code>の引数は以下となっている。</p>

<ol>
<li><code>communityId</code><br/>
投稿するユーザーのコミュニティのID。<code>null</code>可。</li>
<li><code>feedElementId</code><br/>
親となる投稿(<code>FeedItem</code>)のSFID</li>
<li><code>comment</code><br/>
投稿するコメントの情報</li>
<li><code>feedElementFileUpload</code><br/>
投稿するファイルのバイナリ情報</li>
</ol>


<h2>(第二引数)comment</h2>

<p><code>ConnectApi.CommentInput</code>型。<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_input_comment.htm#apex_connectapi_input_comment">ConnectApi.CommentInput Class</a></p>

<p><code>body</code>メソッドに本文などの情報を入力する</p>

<h3>body</h3>

<p><code>ConnectApi.MessageBodyInput</code>型<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_input_msgBody.htm">ConnectApi.MessageBodyInput Class</a></p>

<p>メソッドは、<code>mesageSegments</code>のみ。</p>

<h3>mesageSegments</h3>

<p><code>List&lt;ConnectApi.MessageSegmentInput&gt;</code>型<br/>
<code>ConnectApi.MessageSegmentInput</code>クラスは、入力したい内容の型のクラスが継承している。<br/>
テキストの入力内容は、<code>ConnectApi.TextSegmentInput</code>クラスを使用する。<br/>
メンションの場合は、<code>ConnectApi.MentionSegmentInput</code>クラス、となっている。</p>

<p><a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_input_messageSegmentInput.htm">ConnectApi.MessageSegmentInput Class</a></p>

<h3>ConnectApi.TextSegmentInput</h3>

<p><code>text</code>メソッドのみ。ここに投稿する本文を入れる。<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_input_TxtMsgSeg.htm">ConnectApi.TextSegmentInput Class</a></p>

<h3>ConnectApi.MentionSegmentInput</h3>

<p><code>id</code>メソッドにメンションを送りたいユーザーのIDを入力する。
もしくは、APIバージョン38以降なら、<code>username</code>メソッドでユーザー名も利用出来るよう。<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_input_mentionMsgSeg.htm">ConnectApi.MentionSegmentInput Class</a></p>

<h3>コード</h3>

<p>一通りのコード全文は以下。<br/>
引数で、入力内容、親の投稿ID、メンションをつけるユーザのIDを渡すようにしている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * コメントを投稿する
</span><span class='line'> * 
</span><span class='line'> * @param body String 本文
</span><span class='line'> * @param feedId Id 親の投稿ID
</span><span class='line'> * @param userId Id メンションを付ける
</span><span class='line'> * @return ConnectApi.Comment コメントクラス
</span><span class='line'> */
</span><span class='line'>public static void doPostComment(String body, Id feedId, Id userId){
</span><span class='line'>  //子の投稿を作る
</span><span class='line'>  ConnectApi.CommentInput commentInput = new ConnectApi.CommentInput();
</span><span class='line'>  ConnectApi.MessageBodyInput messageBodyInput = new ConnectApi.MessageBodyInput();
</span><span class='line'>  messageBodyInput.messageSegments = new List&lt;ConnectApi.MessageSegmentInput&gt;();
</span><span class='line'>  
</span><span class='line'>  //本文を作る
</span><span class='line'>  ConnectApi.TextSegmentInput textSegmentInput = new ConnectApi.TextSegmentInput();
</span><span class='line'>  textSegmentInput.text = body;
</span><span class='line'>  messageBodyInput.messageSegments.add(textSegmentInput);
</span><span class='line'>  //メンションを作る
</span><span class='line'>  ConnectApi.MentionSegmentInput mentionSegmentInput = new ConnectApi.MentionSegmentInput();
</span><span class='line'>  mentionSegmentInput.id = userId;
</span><span class='line'>  messageBodyInput.messageSegments.add(mentionSegmentInput);
</span><span class='line'>
</span><span class='line'>  //投稿として追加
</span><span class='line'>  commentInput.body = messageBodyInput;
</span><span class='line'>  
</span><span class='line'>  //コメントを投稿
</span><span class='line'>  ConnectApi.Comment comment = ConnectApi.ChatterFeeds.postCommentToFeedElement(null, feedId, commentInput, null);
</span><span class='line'>  return comment;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>返却される<code>ConnectApi.Comment</code>クラスは以下。<br/>
<a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_connectapi_output_comment.htm">ConnectApi.Comment Class</a></p>

<h2>参考</h2>

<ul>
<li><a href="https://help.salesforce.com/apex/HTViewSolution?id=000199689&amp;language=ja">Apexからの@メンションについて</a></li>
<li><a href="http://qiita.com/tyoshikawa1106/items/c68f8fbcd657a1a89ef2">Connect APIとTest Class &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[サブディレクトリに別のベーシック認証をかける]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/13/htpasswd-subdir/"/>
    <updated>2016-09-13T17:58:10+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/13/htpasswd-subdir</id>
    <content type="html"><![CDATA[<p>サイト全体にベーシック認証をかけ、特定のサブディレクトリにのみ、違うベーシック認証をかけたかったのだが、ちょっと苦労したのでメモ。</p>

<!-- more -->


<h1>状況</h1>

<p>まず、状況。<br/>
ドキュメントルートは、<code>/app/public/</code>とする。<br/>
(htpasswdは適切な階層にそれぞれおかれているとする）</p>

<h3>全体のベーシック認証</h3>

<p>全体のベーシック認証は以下のようにかけていた。<br/>
<code>/app/public/.htaccess</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;If "%{HTTP_HOST} != 'dev.example.com'"&gt;
</span><span class='line'>  AuthUserFile /app/.htpasswd
</span><span class='line'>  AuthType Basic
</span><span class='line'>  AuthName "Restricted Access"
</span><span class='line'>  Require valid-user
</span><span class='line'>&lt;/If&gt;</span></code></pre></td></tr></table></div></figure>


<p>開発環境でのみベーシック認証をかけたかったため、<code>&lt;If&gt;</code>ディレクティブにてホスト名で切り分けている。</p>

<h3>サブディレクトリのベーシック認証</h3>

<p>サブディレクトリのベーシック認証の設定は以下。<br/>
<code>/app/public/subdir/.htaccess</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AuthUserFile /app/public/subdir/.htpasswd
</span><span class='line'>AuthType Basic
</span><span class='line'>AuthName "Restricted Access"
</span><span class='line'>Require valid-user</span></code></pre></td></tr></table></div></figure>


<h2>結果</h2>

<p>サブディレクトリにアクセスすると、全体用のベーシック認証がかかった状態となってしまった。</p>

<h1>Ifディレクティブ</h1>

<p>色々試したり調べたりした結果、設定内容自体に間違いがあるわけではなく、実行順の問題ということがわかった。<br/>
全体のベーシック認証にて、Ifディレクティブを使用しているため特殊となっていた。</p>

<p>このIfディレクティブはapache2.4から使用可能になった機能となっている。<br/>
<a href="https://httpd.apache.org/docs/2.4/ja/mod/core.html#if">https://httpd.apache.org/docs/2.4/ja/mod/core.html#if</a></p>

<p>ドキュメントを読むと、以下のように書かれている。</p>

<blockquote><p><code>&lt;If&gt;</code> は <code>&lt;Files&gt;</code> と同じ処理順と用法になっています。</p></blockquote>

<p><code>&lt;Files&gt;</code>のドキュメントを参照してみると、以下の実行順となっていることが記載されていた。<br/>
<a href="https://httpd.apache.org/docs/2.4/ja/sections.html">https://httpd.apache.org/docs/2.4/ja/sections.html</a></p>

<ol>
<li><code>&lt;Directory&gt;</code> (正規表現無し) と <code>.htaccess</code> を同時に (<code>.htaccess</code> が許可されていれば、それが <Directory> を上書きします)</li>
<li><code>&lt;DirectoryMatch&gt;</code> (と <code>&lt;Directory ~&gt;</code></li>
<li><code>&lt;Files&gt;</code> と <code>&lt;FilesMatch&gt;</code> を同時に</li>
<li><code>&lt;Location&gt;</code> と <code>&lt;LocationMatch&gt;</code> を同時に</li>
</ol>


<p>ということで、<code>&lt;If&gt;</code>は3番目の実行順、となる。</p>

<p>よって、最初の設定での実行順を書き出してみると以下になっている事がわかる。</p>

<ol>
<li>全体の<code>.htaccess</code> → ベーシックの設定なし</li>
<li>サブディレクトリの <code>.htaccess</code> → ベーシック認証あり</li>
<li>全体の <code>.htaccess</code> 内の <code>&lt;If&gt;</code>ディレクティブ内 → ベーシック認証あり、上書き</li>
</ol>


<p>このように最後に<code>&lt;If&gt;</code>ディレクティブが実行されているため、ベーシック認証が全体のものに上書きされていたということがわかった。</p>

<h1>対応</h1>

<p>全体のベーシック認証で、<code>&lt;if&gt;</code>ディレクティブを外すことは出来ないので、サブディレクトリのベーシック認証の設定でも、<code>&lt;If&gt;</code>ディレクティブを(無理矢理)使うことで解決させた。</p>

<p>サブディレクトリのベーシック認証の設定は以下のようにした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;If true&gt;
</span><span class='line'>  AuthUserFile /app/public/subdir/.htpasswd
</span><span class='line'>  AuthType Basic
</span><span class='line'>  AuthName "Restricted Access"
</span><span class='line'>  Require valid-user
</span><span class='line'>&lt;/If&gt;</span></code></pre></td></tr></table></div></figure>


<p>プログラムとしては無駄なIfなのであまり綺麗な方法ではないかもしれないが…。<br/>
とりあえず、これで意図した動作をさせることが出来た。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuにComodoで取得したSSL証明書を反映させる]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/07/heroku-comodo-ssl/"/>
    <updated>2016-09-07T10:27:28+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/07/heroku-comodo-ssl</id>
    <content type="html"><![CDATA[<p>ちょっとつなげ方とかが特殊だったのでメモ。</p>

<!-- more -->


<p><a href="https://comodo.jp/">トップページ | COMODO JAPAN  | SSL 証明書</a></p>

<p>通常の流れであれば、取得した証明書の末尾に、対応している中間CA証明書をくっつけて、秘密鍵と共にアップすればOK。<br/>
<a href="http://kayakuguri.github.io/blog/2014/09/30/heroku-ssl-subdomain/">[heroku]herokuでのSSL設定とカスタムサブドメインの適用方法 &ndash; KayaMemo</a></p>

<p>しかし、Comodoという発行会社で取得したSSLの場合は以下のような内容で4つのファイルが送られてくる。</p>

<ul>
<li>AddTrustExternalCARoot.crt (ルート証明書)</li>
<li>COMODORSAAddTrustCA.crt    (中間証明書 その1)</li>
<li>COMODORSADomainValidationSecureServerCA.crt (中間証明書 その2)</li>
<li>STAR_example_com.crt   (サーバ証明書)</li>
</ul>


<p>アップする際にはこれらを全てつなげたファイルが必要になるよう。<br/>
そしてそのつなげ方にも順番があるようで、下から順番に末尾に追加していく形。<br/>
コマンドは以下となる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat STAR_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt &gt; STAR_example_com-bundle.pem</span></code></pre></td></tr></table></div></figure>


<p>これで全てつなげたファイル、 <code>STAR_example_com-bundle.pem</code> が出来上がる。<br/>
あとは、秘密鍵と共にアップするだけ。<br/>
(秘密鍵は、 <code>server.key</code> とする）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku certs:add STAR_example_com-bundle.pem server.key -a YOUR_APP</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/26100642/heroku-comodo-ssl-and-it-not-working">Heroku Comodo SSL and it not working? &ndash; Stack Overflow</a></li>
<li><a href="http://qiita.com/white_aspara25/items/d9a1f99e8abdee0b5450">ELB の ComodoSSL 証明書を更新 &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku] confファイルでのリダイレクトを設定する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/01/heroku-cgi-bin-redirect/"/>
    <updated>2016-09-01T19:51:39+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/01/heroku-cgi-bin-redirect</id>
    <content type="html"><![CDATA[<p>herokuで構築したサイトで、ドキュメントルートにある、 <code>/cgi-bin/</code> 以下にある特定のファイルへのアクセスがあった場合に、別のディレクトリへリダイレクトさせて欲しい、という要件があった。<br/>
普通に設定しようと思ったらかなり深い話になったので備忘録。</p>

<!-- more -->


<p><code>/cgi-bin/hoge/hoge.php</code> を、<br/>
<code>/abc/hoge/hoge.php</code> へリダイレクトするとする。<br/>
(cgi-binディレクトリからabcディレクトリへリダイレクト)</p>

<h1>htacessでリダイレクト</h1>

<p>まずは何も考えずに <code>.htaccess</code> を利用してのリダイレクトを設定する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine on
</span><span class='line'>RewriteRule ^cgi-bin/hoge/hoge.php$ /abc/hoge/hoge.php [R=301,L]</span></code></pre></td></tr></table></div></figure>


<p>これでアクセスしてみるも、 Not Found の表示。</p>

<p>試しに、<code>/cgi-bin/</code> のディレクトリを作り、その中にファイルを設置してアクセスしてみるも、同じくNot Found。<br/>
リダイレクト以前に、<code>/cgi-bin/</code> ディレクトリ自体にアクセスが出来ていない。</p>

<h1>cgi-bin</h1>

<p>apacheのデフォルト設定では、 <code>/cgi-bin/</code> ディレクトリは別のディレクトリへエイリアスが貼られている事が多いような記述があった。<br/>
セキュリティ的にドキュメントルートのcgi-binには直接アクセスさせないようになっているらしい。</p>

<p><a href="http://www.adminweb.jp/apache/cgi/index1.html">CGI用エイリアスの設定(ScriptAlias) &ndash; CGIの利用 &ndash; Apache入門</a></p>

<p>Herokuもこの設定が行われているらしく、PHP環境のherokuのconfファイルを確認すると、以下のような設定が書かれている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ScriptAlias /cgi-bin/ "/app/.heroku/php//share/apache2/cgi-bin/"</span></code></pre></td></tr></table></div></figure>


<p>そのため、ドキュメントルート以下のcgi-binディレクトリにファイルをおいても、上記ディレクトリには該当のファイルがなく、not foundとなっていたよう。</p>

<p>さらに、htaccessよりも、confファイルの方が早く呼ばれるため、htaccessでのリダイレクトが効く前に上記にエイリアスで飛ばされ、htaccessによるリダイレクトも効かなかった事が原因だった。</p>

<h1>confファイル</h1>

<p>herokuのPHPのビルドパックでは、Procfileにて任意のconfファイルを読みこませる事が出来るよう。
そこで、そのconfファイルにてリダイレクト設定を書くことで対応する。</p>

<h2>Procfile</h2>

<p>Procfileでの設定内容のオプションなどは、PHPのビルドパックのソース内に書かれている。</p>

<p><a href="https://github.com/heroku/heroku-buildpack-php/blob/master/bin/heroku-php-apache2#L46">https://github.com/heroku/heroku-buildpack-php/blob/master/bin/heroku-php-apache2#L46</a></p>

<p>このヘルプの通り、以下の書式で記述することが可能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>web: vendor/bin/heroku-php-apache2 [options] [&lt;DOCUMENT_ROOT&gt;]</span></code></pre></td></tr></table></div></figure>


<h2>confファイルの読み込み</h2>

<p>任意のconfファイルを読みこませるには、2つのオプションがある。<br/>
一つは、全く新しいconfファイルを読みこませる方法。これには、小文字のcを使用する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-c &lt;httpd.conf&gt;</span></code></pre></td></tr></table></div></figure>


<p>これは既存の設定を全て上書きするため、正しく設定出来ていない場合はアプリケーションの起動に失敗するので注意が必要。<br/>
デフォルトで読み込まれているconfファイルは以下となる。</p>

<p><a href="https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/heroku.conf">https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/heroku.conf</a></p>

<p>これはあまり指定することはないと思われる。</p>

<p>もう一つは、既存のconfファイルに追加するもの。<br/>
こちらは、大文字のCを使う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-C &lt;httpd.inc.conf&gt;</span></code></pre></td></tr></table></div></figure>


<p>デフォルトで読み込まれているファイルは以下となる。
<a href="https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/default_include.conf">https://github.com/heroku/heroku-buildpack-php/blob/master/conf/apache2/default_include.conf</a></p>

<p>このファイルではディレクトリインデックスの設定のみが書かれている状態。
このように、設定したい内容を記述したファイルを作成し、大文字のCオプションで読み込ませることで既存の設定に追加で反映が出来る。</p>

<h2>Procfileでの設定</h2>

<p>アプリのルートに、 <code>my_app.conf</code> ファイルを作成し読み込ませるとする。<br/>
また、ドキュメントルートは <code>htdocs</code> で設定したい場合は、以下の様な内容となる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>web: vendor/bin/heroku-php-apache2 -C ./my_app.conf htdocs</span></code></pre></td></tr></table></div></figure>


<p>ファイルのパスは、 <code>/app</code> からの相対パスでの指定となる。<br/>
これでアプリの起動時に、 <code>my_app.conf</code> ファイルが読み込まれることとなる。</p>

<h2>confファイルでのリダイレクト</h2>

<p>そういうわけで、confファイル内に直接リダイレクトの設定を記述する。<br/>
１点注意点としては、 <code>htaccess</code>による設定の場合は、相対パスで記述する場合は先頭の <code>/</code> が必要ないのだが、<br/>
confファイルによる設定の場合は、先頭に <code>/</code> が必要となる。</p>

<p><a href="http://ysklog.net/mod-rewrite/related05.html">【mod_rewrite】「.htaccess」と「httpd.conf」での設定による違い &#8211; mod rewrite</a></p>

<p>よって、以下のように記述する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine on
</span><span class='line'>RewriteRule ^/cgi-bin/hoge/hoge.php$ /abc/hoge/hoge.php [R=301,L]</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、デフォルトで読み込まれているファイルに記述されている、ディレクトリインデックスの設定を記述せずに読み込ませると、その設定が消えてしまい、<code>/</code> でアクセスした場合には、 <code>index.html</code> が最初に呼び出されるようになってしまう。<br/>
よって、ディレクトリインデックスの設定も合わせて書いておくと挙動が変わらずに設定できる。
一応、全文は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DirectoryIndex index.php index.html index.htm
</span><span class='line'>
</span><span class='line'>RewriteEngine on
</span><span class='line'>RewriteRule ^/cgi-bin/hoge/hoge.php$ /abc/hoge/hoge.php [R=301,L]</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://ysklog.net/mod-rewrite/related02.html">【mod_rewrite】「httpd.conf」での設定方法 &#8211; mod rewrite</a></li>
<li><a href="https://devcenter.heroku.com/articles/custom-php-settings#apache">Customizing Web Server and Runtime Settings for PHP | Heroku Dev Center</a></li>
</ul>


<h1>まとめ</h1>

<p>cgi-binディレクトリからリダイレクト、というのは実際の要件としてはめったにあることではないけれど、herokuのPHPの設定として、confファイルをカスタマイズしたい要件はあると思う。<br/>
実際、htaccessでのリダイレクトより、confファイルでのリダイレクトのほうが早いようなので出来るならそっちの方がよかったりするだろうし。<br/>
herokuは簡単に利用出来る反面、設定が触れずガチガチだと思われガチだけど、結構設定はいじれたりする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[heroku] タイムゾーンの設定各種]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/09/01/heroku-timezone/"/>
    <updated>2016-09-01T10:02:04+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/09/01/heroku-timezone</id>
    <content type="html"><![CDATA[<p>heroku環境でタイムゾーンの設定が色々あったのでまとめ。</p>

<!-- more -->


<h1>サーバー時間</h1>

<p>まずは、herokuのサーバー時間のタイムゾーン設定。<br/>
これは簡単で、環境変数に入れてやるだけ。</p>

<blockquote><p>TZ : Asia/Tokyo</p></blockquote>

<p>コマンドで入れる場合は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku config:add TZ=Asia/Tokyo -a APP_NAME</span></code></pre></td></tr></table></div></figure>


<p>きちんと反映されているかどうかは下記コマンドから参照可能。<br/>
意図した時間が返ってきてればOK。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku run date -a APP_NAME
</span><span class='line'>Running date on ⬢ APP_NAME... up, run.1198
</span><span class='line'>Thu Sep  1 10:06:57 JST 2016</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://blog.skktmlab.info/blog/2015_03_02_2">Herokuでホスティングしているブログのタイムゾーンを設定する</a></li>
</ul>


<h1>PHP</h1>

<p>PHPの設定でタイムゾーンを指定する場合。<br/>
通常は、 <code>php.ini</code> で設定するが、herokuの場合は、 <code>.user.ini</code> ファイルを使う。</p>

<p>ドキュメントルート直下に <code>.user.ini</code> ファイルを設置。<br/>
中に以下を記述。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>date.timezone = "Asia/Tokyo"</span></code></pre></td></tr></table></div></figure>


<p>この設定ではその他にはアップロードの最大容量なんかを指定する場合が多い。<br/>
参考 : <a href="http://kayakuguri.github.io/blog/2014/02/18/change-max-filesize/">[PHP][heroku]upload_max_filesizeを変更する &ndash; KayaMemo</a></p>

<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/hiro_y/items/bc631a27c9701f81a4f9#runtime-settings">HerokuでPHPを使うときに気を付けるところ &ndash; Qiita</a></li>
<li><a href="https://devcenter.heroku.com/articles/custom-php-settings#php-runtime-settings-ini-settings">Customizing Web Server and Runtime Settings for PHP | Heroku Dev Center</a></li>
</ul>


<h1>WordPress</h1>

<p>最後はherokuと直接は関係ないけれど、wordpressのタイムゾーン。<br/>
WordPressのタイムゾーンはデフォルトで標準時になるようにしてある、とのこと。<br/>
しかしこれは設定で変更するものではなく、取得する際に調整するもののよう。</p>

<p>一番簡易なものとしては、 <code>date</code> 関数で取得していた箇所をWordPress関数である、 <code>date_i18n</code> を利用して取得するようにする、というもの。<br/>
これだけで、日本時間で取得できるようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>date_i18n('Y-m-d H:i:s');</span></code></pre></td></tr></table></div></figure>


<p>その他では、 <code>datetime</code> クラスを使用してタイムゾーンを指定する方法もあり。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$now = new DateTime('', new DateTimeZone('Asia/Tokyo'));
</span><span class='line'>$now-&gt;format('Y-m-d H:i:s');</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/yousan/items/a385f794a9bb433aecbb">WordPressで現在時刻を利用すると9時間ずれてしまう問題 &ndash; Qiita</a></li>
</ul>


<h1>まとめ</h1>

<p>WordPressはともかく、herokuとPHPのタイムゾーン設定はherokuでPHPを使うのなら、デフォルトで設定しておいた方が後々間違いがなさそう。<br/>
環境構築の際にまず設定しておくとよさげ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant (Ubuntu) 環境でhttps接続する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/08/10/vagrant-ubuntu-ssl/"/>
    <updated>2016-08-10T15:18:45+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/08/10/vagrant-ubuntu-ssl</id>
    <content type="html"><![CDATA[<p>本番がhttpsの開発でローカル環境だけhttpで接続していると色々面倒があるため、ローカルのvagrant環境でもhttps接続出来るように調整してみたメモ。</p>

<!-- more -->


<h1>前提</h1>

<p>OSはubuntu。というか、いつものように、vagrantの環境はscotchbox。</p>

<p><a href="https://box.scotch.io/">https://box.scotch.io/</a></p>

<h1>参考</h1>

<p>主に以下を参考にそのまま作業した。ありがとうございます。</p>

<p><a href="http://hidex7777.hatenablog.com/entry/2014/03/18/220943">VagrantでUbuntuサーバ/Apache2のSSL(https) &ndash; orangeProse別館</a></p>

<h1>テスト用の証明書を作成</h1>

<p>まずはモジュールを有効に。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo a2enmod ssl
</span><span class='line'>$ sudo service apache2 reload</span></code></pre></td></tr></table></div></figure>


<p>で、テスト用の証明書を作成。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo make-ssl-cert generate-default-snakeoil --force-ovarwrite
</span><span class='line'>$ sudo make-ssl-cert /usr/share/ssl-cert/ssleay.cnf /etc/apache2/apache.pem</span></code></pre></td></tr></table></div></figure>


<p>二つ目を実行すると、コンソールの画面全体で設定画面が表示されて証明書の内容を聞かれる。
ひとつ目はコモンネーム。
hostsで指定しているURLを指定しておく。</p>

<p><img src="http://kayakuguri.github.io/images/2016/08/vagrant_ssl_01.jpg" alt="" /></p>

<p>二つ目は、 <code>Subject Alternative Names</code> (サブジェクトの別名)。<br/>
<a href="https://knowledge.geotrust.com/jp/support/knowledge-base/index?vproductcat=G&amp;vdomain=GEOTRUST_JP&amp;page=content&amp;id=SO24206&amp;actp=LIST&amp;viewlocale=ja_JP&amp;locale=ja_JP&amp;redirected=true">「Subject Alternative Names（サブジェクトの別名）」とは何ですか  | GeoTrust<br/>
</a></p>

<p>今回は特に使用しないので空白のままとしておく。</p>

<p><img src="http://kayakuguri.github.io/images/2016/08/vagrant_ssl_02.jpg" alt="" /></p>

<p>apacheを再起動。</p>

<h1>設定ファイル</h1>

<p>このままだとSSL用の設定ファイルがないようなので、<code>default-ssl.conf</code>というファイルをコピーして使用する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /etc/apache2/sites-available
</span><span class='line'>$ sudo cp default-ssl.conf ssl.conf
</span><span class='line'>$ sudo a2ensite ssl
</span><span class='line'>$ sudo service apache2 reload</span></code></pre></td></tr></table></div></figure>


<p>参考サイトでは<code>.conf</code>の拡張子が指定されていなかったのだが、指定されていないとエラーとなってしまう。<br/>
<a href="http://qiita.com/mzmttks/items/85c69313693cb1df4949">Apache2 on ubuntu で a2ensite すると does not exist と言われるときの対処法 &ndash; Qiita</a></p>

<p>最後はapacheを再起動。</p>

<p>この状態で、httpsでアクセスをすると、プライバシーが保護されていない、というような警告が出るが、無視してアクセスすると無事、接続できた。</p>

<p><img src="http://kayakuguri.github.io/images/2016/08/vagrant_ssl_03.jpg" alt="" /></p>

<h1>ドキュメントルート</h1>

<p>しかしhttpでアクセスしていたファイルにアクセスが出来ない。
どうやら、httpsで指定されているドキュメントルートが違っているよう。
先程コピーした、<code>ssl.conf</code>ファイルを見てみる。</p>

<p>すると、以下のようにドキュメントルートが設定されている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DocumentRoot /var/www/html</span></code></pre></td></tr></table></div></figure>


<p>今回は、<code>public</code>をドキュメントルートとしているので、そちらに変更する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DocumentRoot /var/www/public</span></code></pre></td></tr></table></div></figure>


<p>例によって、apacheを再起動して接続確認。無事、接続出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="https://www.k4750.net/2013/10/13/self-signed-cert/">（正しい）オレオレ証明書の作り方 |  K4750.net</a></li>
<li><a href="http://takuya-1st.hatenablog.jp/entry/20100730/1280474385">超簡単・オレオレ証明書の作り方 &ndash; それマグで！</a></li>
<li><a href="http://blog.inouetakuya.info/entry/20110605/1307261417">それ etckeeper でできるよ &ndash; /etc 以下を Git で自動的にバージョン管理 &ndash; 彼女からは、おいちゃんと呼ばれています</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Salesforce] Let’s Encryptの証明書ではSFからのコールアウトを受けられない]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/08/10/sf-lets-encrypt/"/>
    <updated>2016-08-10T11:49:42+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/08/10/sf-lets-encrypt</id>
    <content type="html"><![CDATA[<p>Let’s Encryptで取得した証明書を適用させたサイトへコールアウトしたところエラーが発生し接続出来なかったので、調査してみた。</p>

<!-- more -->


<h1>エラー内容</h1>

<p>エラーは下記の内容。</p>

<blockquote><p>System.CalloutException: sun.security.validator.ValidatorException: <br/>
PKIX path building failed: <br/>
sun.security.provider.certpath.SunCertPathBuilderException: <br/>
unable to find valid certification path to requested target</p></blockquote>

<p>エラー内容で調べてみると、自己証明書、ではSFからのアクセスが出来ない、という情報があり、その中で紹介されているエラーが上記内容と酷似していることがわかった。</p>

<p><a href="http://appirio.co.jp/category/tech-blog/2013/05/apex%E3%82%B3%E3%83%BC%E3%83%AB%E3%82%A2%E3%82%A6%E3%83%88%E3%81%AE%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9part-2/">Apexコールアウトのベストプラクティス:Part 2 &ndash; Appirio Japan</a></p>

<p>しかし、Let’s Encryptは自己証明書ではない…。</p>

<h1>SFが許可するCA</h1>

<p>引き続き調べてみると、どうやらsalesforceは接続出来る認証局 (CA) をホワイトリスト方式で設定しているよう。</p>

<p><a href="https://help.salesforce.com/HTViewSolution?id=000007225&amp;language=en_US">Salesforce.com SSL certificates Salesforce supports</a></p>

<p>以下が許可されている認証局のリスト。</p>

<p><a href="https://developer.salesforce.com/page/Outbound_Messaging_SSL_CA_Certificates">Outbound Messaging SSL CA Certificates &ndash; developer.force.com</a></p>

<p>このリストには、Let’s Encryptがない。<br/>
というわけで、SFがLet’s Encrypt認証局が作成した証明書を適用したサイトへの接続は許可していない、ということになり、冒頭のエラーが発生していた、ということになる。</p>

<p>ちなみに、Let’s Encryptの認証局をリストに加えてほしい、という要望は結構前から上がっているよう。</p>

<p><a href="https://success.salesforce.com/ideaView?id=08730000000E28LAAS">Support Let&rsquo;s Encrypt CA Certificate &ndash; Ideas &ndash; Salesforce Success Community</a></p>

<p>対応する気はないのか、まだ手が回ってないだけなのか…。</p>

<h1>参考</h1>

<ul>
<li><a href="https://jp.globalsign.com/service/knowledge/ca/">認証局 （CA：Certification Authority）とは？ | SSL・電子証明書ならGMOグローバルサイン</a></li>
<li><a href="http://qiita.com/kawaz/items/f90810b9ea823b6556a8">認証局を立ててぼろもうけしたいんですが＞無理な理由を理解しよう &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgresqlのシーケンス番号]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/07/19/postgresql-seqence/"/>
    <updated>2016-07-19T17:10:47+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/07/19/postgresql-seqence</id>
    <content type="html"><![CDATA[<p>PostgresqlのDBで、レコードをインサートしようとしたところエラーが出たので原因を調査したメモ。</p>

<!-- more -->


<h1>エラー内容</h1>

<p>エラーは以下のような内容。</p>

<blockquote><p>duplicate key value violates unique constraint &ldquo;table_pkey&rdquo;</p></blockquote>

<p><code>table_pkey</code>は、テーブル名+pkeyとなる。<br/>
文字通り受け取るなら、ユニークでないといけない項目が被ってるよ、というもの。</p>

<p>しかし投げたレコードは特に被っている項目もなく、ユニークな項目もIDだけだった。</p>

<h1>原因</h1>

<p>値をシークエンスに設定したint型の項目は、インサートした順番に自動発番してくれるのだが、その発番する番号はシーケンス番号、として内部的に保持しているよう。
それが、内容を別DBからコピーなどすると上手く更新されない事があるらしい。たぶん。</p>

<h1>シーケンス番号</h1>

<h2>確認</h2>

<p>現在のシーケンス番号が何番になっているかを確認するためには以下のSQLを発行してやるとよい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT last_value FROM シーケンス名</span></code></pre></td></tr></table></div></figure>


<p>シーケンス名は、デフォルトでは、<code>テーブル名_項目名_seq</code>となっていると思われる。
Posticoで確認する場合は、<code>Navigate -&gt; Go to Terminal</code>でターミナルが開くので、そこでSQLを発行して確認する事が出来る。</p>

<p><img src="http://kayakuguri.github.io/images/2016/07/seq_01.jpg" alt="" /></p>

<p><img src="http://kayakuguri.github.io/images/2016/07/seq_02.jpg" alt="" /></p>

<p>今回発行してみると、<code>9</code>が返ってきた。</p>

<p><img src="http://kayakuguri.github.io/images/2016/07/seq_03.jpg" alt="" /></p>

<p>しかし実際のレコードは12まであり、保持されているシーケンス番号の次の番号から発番されるため、<code>10</code>が発番され重複エラーとなっていたよう。</p>

<h2>設定</h2>

<p>なので、このシーケンス番号を設定し直してやる。<br/>
シーケンス番号を設定するには以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT setval('シーケンス名', 数値); </span></code></pre></td></tr></table></div></figure>


<p>シーケンス番号はさきほどと同じ。数値はここでは12を設定してやる。</p>

<p>Posticoで実行すると以下のようになる。</p>

<p><img src="http://kayakuguri.github.io/images/2016/07/seq_05.jpg" alt="" /></p>

<p>これで12にセットされたため、インサートを実行すると13から発番されるので重複エラーが解消された。</p>

<h1>参考</h1>

<ul>
<li><a href="http://pirlo21.hatenablog.com/entry/2013/11/11/sql_%E9%87%8D%E8%A4%87%E3%82%92%E8%AA%8D%E3%82%81%E3%81%AA%E3%81%84%E3%82%A8%E3%83%A9%E3%83%BC_duplicate_key_value_violates_unique_constraint_">sql 重複を認めないエラー　duplicate key value violates unique constraint  &ndash; エンジニア　北欧日記</a></li>
<li><a href="http://programp.com/sql/441/">PostgreSQLでシーケンスの現在値を取得する | Program Program</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WP REST API v2にてカスタムエンドポイントを追加するまとめ]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/07/12/wp-rest-api-custom-endpoint/"/>
    <updated>2016-07-12T19:15:48+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/07/12/wp-rest-api-custom-endpoint</id>
    <content type="html"><![CDATA[<p>カスタムエンドポイントの作り方全般をまとめてみた。</p>

<!-- more -->


<h1>環境など</h1>

<ul>
<li>PHP 5.6</li>
<li>WordPress ver.4.5.3

<ul>
<li>WP REST API ver.2.0-beta13.1</li>
</ul>
</li>
<li>ドメイン : <code>http://wprest.local</code></li>
</ul>


<h1>GET</h1>

<p>まずは基本的な追加方法として<code>GET</code>メソッドのエンドポイントを追加する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>add_action( 'rest_api_init', 'add_custom_endpoint' );
</span><span class='line'>function add_custom_endpoint() {
</span><span class='line'>  register_rest_route( 'custom/v0', '/show', array(
</span><span class='line'>      'methods' =&gt; 'GET',
</span><span class='line'>      'callback' =&gt; 'create_item'
</span><span class='line'>  ) );
</span><span class='line'>}
</span><span class='line'>function show_item(){
</span><span class='line'>  //何かしらの処理
</span><span class='line'>  $data = ['apple'=&gt;'りんご', 'peach'=&gt;'もも', 'pear'=&gt;'なし'];
</span><span class='line'>
</span><span class='line'>  $response = new WP_REST_Response($data);
</span><span class='line'>  $response-&gt;set_status(200);
</span><span class='line'>  $domain = (empty($_SERVER["HTTPS"]) ? "http://" : "https://") . $_SERVER["HTTP_HOST"];
</span><span class='line'>  $response-&gt;header( 'Location', $domain );
</span><span class='line'>  return $response;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>rest_api_init</code>のフックでREST APIが初期化されたタイミングで追加する。<br/>
呼びだされた<code>add_custom_endpoint</code>関数内でAPIのエンドポイントを追加している。<br/>
エンドポイントを追加するには、<code>register_rest_route</code>を利用する。</p>

<ul>
<li>第一引数 : 名前空間</li>
<li>第二引数 : エンドポイント</li>
<li>第三引数 : メソッドなどの設定配列</li>
</ul>


<p>第一引数と第二引数を合わせたものがエンドポイントとなる。<br/>
エンドポイントは(デフォルトでは) <code>/wp-json/</code>がルートとなるのでこの指定はそれ以下の分、となる。</p>

<p>なので、このエンドポイントへのアクセスは以下のURLのようになる。<br/>
<code>http://wprest.local/wp-json/custom/v0/show</code></p>

<p>第三引数の<code>callback</code>で指定した関数がAPIアクセス時に呼び出される。<br/>
返却する内容は実はなんでも構わないが、<code>WP_REST_Response</code>クラスを利用することでヘッダーなどの設定が出来るよう。<br/>
ここでは、ステータス200、ヘッダーにドメインをロケーションで追加、などしている。</p>

<p>返ってくる内容は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "apple": "りんご",
</span><span class='line'>  "peach": "もも",
</span><span class='line'>  "pear": "なし"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>パラメータの追加</h2>

<p>REST APIらしく、URLにIDなどのパラメータを含める事ができる。<br/>
<code>register_rest_route</code>でエンドポイントを指定する時に以下のようにする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>register_rest_route( 'custom/v0', '/show/(?P&lt;id&gt;\d+)', array(
</span><span class='line'>  'methods' =&gt; 'GET',
</span><span class='line'>  'callback' =&gt; 'show_item_id'
</span><span class='line'>) );</span></code></pre></td></tr></table></div></figure>


<p>受け取る際は、コールバックの関数内で以下のようにする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function show_item_id($data){
</span><span class='line'>  $posts = get_posts( array(
</span><span class='line'>      'author' =&gt; $data['id'],
</span><span class='line'>  ) );
</span><span class='line'>//(後略)</span></code></pre></td></tr></table></div></figure>


<h1>メソッドの指定方法</h1>

<p>メソッドの指定方法は<code>GET</code>や<code>POST</code>など文字列での指定も可能だが、<code>WP_REST_Server</code>クラスを指定して複数いっぺんに指定が出来たりもする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>register_rest_route( 'custom/v0', '/show', array(
</span><span class='line'>  'methods' =&gt; WP_REST_Server::READABLE,
</span><span class='line'>  'callback' =&gt; 'show_item'
</span><span class='line'>) );</span></code></pre></td></tr></table></div></figure>


<ul>
<li>READABLE = &lsquo;GET&rsquo;</li>
<li>CREATABLE = &lsquo;POST&rsquo;</li>
<li>EDITABLE = &lsquo;POST, PUT, PATCH&rsquo;</li>
<li>DELETABLE = &lsquo;DELETE&rsquo;</li>
<li>ALLMETHODS = &lsquo;GET, POST, PUT, PATCH, DELETE&rsquo;</li>
</ul>


<h1>エラーの追加</h1>

<p>指定されたIDの投稿がないなど、エラーを返したい場合は以下のようにする。<br/>
(404エラーの場合の例）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function show_item_id($data){
</span><span class='line'>  if($data['id'] == 0){
</span><span class='line'>      return new WP_Error( 'awesome_no_author', 'Invalid author', array( 'status' =&gt; 404 ) );
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>/custom/v0/show/0</code>でアクセスすると以下のように返ってくる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  code: "awesome_no_author",
</span><span class='line'>  message: "Invalid author",
</span><span class='line'>  data: {
</span><span class='line'>      status: 404
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>POST</h1>

<p>ポストでの送信、データ取得は以下。ほぼ、GETの時と変わらない。<br/>
送られたデータはどうやって取得するのかすごく悩んだのだが、単純に<code>$_POST</code>で取得、でよかった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>add_action( 'rest_api_init', 'add_custom_endpoint' );
</span><span class='line'>function add_custom_endpoint() {
</span><span class='line'>  register_rest_route( 'custom/v0', '/create', array(
</span><span class='line'>      'methods' =&gt; 'POST',
</span><span class='line'>      'callback' =&gt; 'create_item'
</span><span class='line'>  ) );
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function create_item() {
</span><span class='line'>  $data = $_POST;
</span><span class='line'>  $response = new WP_REST_Response( $data );
</span><span class='line'>  $response-&gt;set_status( 201 );
</span><span class='line'>  $domain = (empty($_SERVER["HTTPS"]) ? "http://" : "https://") . $_SERVER["HTTP_HOST"];
</span><span class='line'>  $response-&gt;header( 'Location', $domain );
</span><span class='line'>
</span><span class='line'>  return $response;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>送った内容を表示させているだけ、の内容。<br/>
bodyで、<code>id=2</code>, <code>body=test</code>の２つを送ってみると、返ってくる値は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "id": "2",
</span><span class='line'>  "body": "test"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>権限</h1>

<p>特にPOSTなどは実行するには認証を必要としたい場合が多いと思う。<br/>
そういう時には、実行前に権限をチェックする関数を呼び出すものとして、<code>permission_callback</code>が用意されている。<br/>
<code>register_rest_route</code>の第三引数の中で以下のように指定する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>register_rest_route( 'custom/v0', '/create', array(
</span><span class='line'>  'methods' =&gt; 'POST',
</span><span class='line'>  'permission_callback' =&gt; 'create_permissions_check',
</span><span class='line'>  'callback' =&gt; 'create_item'
</span><span class='line'>) );</span></code></pre></td></tr></table></div></figure>


<p>この呼びだされた関数で、<code>true</code>を返すと通り、<code>false</code>を返すとエラーとなる。<br/>
エラーは以下のように返却される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "code": "rest_forbidden",
</span><span class='line'>  "message": "この操作を行う権限がありません。",
</span><span class='line'>  "data": {
</span><span class='line'>    "status": 403
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>この権現の確認は、<code>current_user_can</code>関数で行う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function create_permissions_check(){
</span><span class='line'>  return current_user_can('publish_posts');
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>OAuthやアプリケーションパスワードを使った認証部分はこの手前で完了しているため、実際に接続しに来たユーザーの権限をここでチェックしてやるだけで良い。<br/>
権限は以下を参考に。</p>

<p>参考: <a href="http://elearn.jp/wpman/function/current_user_can.html">current_user_can:WordPress私的マニュアル</a></p>

<h1>参考</h1>

<ul>
<li><a href="http://ja.wp-api.org/extending/adding/">Adding Custom Endpoints | WP REST API v2 Documentation</a></li>
<li><a href="http://ginzanomama.hatenablog.com/entry/2016/02/04/212826">WordPress REST API v2にendpointを追加する &ndash; みんなのちからになりたい</a></li>
<li><a href="https://wpshout.com/using-custom-rest-routes-wordpress-4-4-beyond/">Making Custom REST Routes In WordPress 4.4 and Beyond | WPShout</a></li>
<li><a href="http://qiita.com/kuck1u/items/c879271aa280da62c573">WordPress 4.4 で追加された REST API の停止やエンドポイントの変更など</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Salesforce]関連リストのインライン編集をVFで作成する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/07/11/vf-inline-edit/"/>
    <updated>2016-07-11T17:56:11+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/07/11/vf-inline-edit</id>
    <content type="html"><![CDATA[<p>オブジェクトの詳細で表示される関連リスト部分、要するにそのレコードを参照しているレコード、を一覧表示からインライン編集出来るようにしたかったので、インライン編集の基本的な部分から調べてみた。</p>

<!-- more -->


<h1>参考</h1>

<ul>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.pages.meta/pages/pages_quick_start_inline_editing.htm">インライン編集の有効化 Visualforce開発者ガイド</a></li>
</ul>


<h1>詳細レコード</h1>

<p>該当のレコードの詳細を表示し、表示している項目をインライン編集出来るようにする。</p>

<p>作成しているVFページのURLにて、IDが指定されている + 指定されている<code>standardController</code>のオブジェクトであれば、Visualforceだけで表示させることが可能。</p>

<blockquote><p><a href="https://Salesforce_instance/apex/myPage?id=001x000xxx3Jsxb">https://Salesforce_instance/apex/myPage?id=001x000xxx3Jsxb</a></p></blockquote>

<p>この場合、IDが<code>001x000xxx3Jsxb</code>の取引先(<code>Account</code>)が表示される。<br/>
<code>apex:detail</code>タグを使うと、このレコードの詳細がそのまま表示される。<br/>
その際に、属性<code>inlineEdit</code>を<code>true</code>で指定するとインライン編集が可能となる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:page standardController="Account"&gt;
</span><span class='line'>        &lt;apex:detail subject="{!account.Id}" relatedList="false" inlineEdit="true"/&gt; 
</span><span class='line'>&lt;/apex:page&gt;</span></code></pre></td></tr></table></div></figure>


<p>特定のレコードの詳細をそのまま表示したい時とかには便利。</p>

<h1>一覧表示</h1>

<p>詳細ではなく、一覧表示で複数件いっぺんに編集したい場合。
<code>apex:page</code>の属性で、<code>recordSetVar</code>を指定してやれば、<code>standardController</code>で指定したオブジェクトのリストを表示出来る。</p>

<p><a href="http://qiita.com/tyoshikawa1106/items/4ef3b8e1998609f2c573">standardControllerとrecordSetVar &ndash; Qiita</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:page standardController="Account" recordSetVar="records" id="thePage"&gt; 
</span><span class='line'>    &lt;apex:form id="theForm"&gt; 
</span><span class='line'>        &lt;apex:pageBlock id="thePageBlock"&gt; 
</span><span class='line'>            &lt;apex:pageBlockTable value="{!records}" var="record" id="thePageBlockTable"&gt; 
</span><span class='line'>                &lt;apex:column &gt;
</span><span class='line'>                    &lt;apex:outputField value="{!record.Name}" id="AccountNameDOM" /&gt; 
</span><span class='line'>                    &lt;apex:facet name="header"&gt;Name&lt;/apex:facet&gt;
</span><span class='line'>                &lt;/apex:column&gt;
</span><span class='line'>                &lt;apex:column &gt;
</span><span class='line'>                    &lt;apex:outputField value="{!record.Type}" id="AccountTypeDOM" /&gt; 
</span><span class='line'>                    &lt;apex:facet name="header"&gt;Type&lt;/apex:facet&gt;
</span><span class='line'>                &lt;/apex:column&gt;
</span><span class='line'>                &lt;apex:column &gt;
</span><span class='line'>                    &lt;apex:outputField value="{!record.Industry}" 
</span><span class='line'>                        id="AccountIndustryDOM" /&gt;  
</span><span class='line'>                        &lt;apex:facet name="header"&gt;Industry&lt;/apex:facet&gt;
</span><span class='line'>                &lt;/apex:column&gt;
</span><span class='line'>                &lt;apex:inlineEditSupport event="ondblClick" 
</span><span class='line'>                        showOnEdit="saveButton,cancelButton" hideOnEdit="editButton" /&gt; 
</span><span class='line'>            &lt;/apex:pageBlockTable&gt; 
</span><span class='line'>            &lt;apex:pageBlockButtons &gt; 
</span><span class='line'>                &lt;apex:commandButton value="Edit" action="{!save}" id="editButton" /&gt;
</span><span class='line'>                &lt;apex:commandButton value="Save" action="{!save}" id="saveButton" /&gt;
</span><span class='line'>                &lt;apex:commandButton value="Cancel" action="{!cancel}" id="cancelButton" /&gt;
</span><span class='line'>            &lt;/apex:pageBlockButtons&gt; 
</span><span class='line'>        &lt;/apex:pageBlock&gt; 
</span><span class='line'>    &lt;/apex:form&gt;
</span><span class='line'>&lt;/apex:page&gt;</span></code></pre></td></tr></table></div></figure>


<p>コードは公式ドキュメントのママ。<br/>
formなど各タグ内のIDは別にあってもなくてもよさそう。</p>

<p>以下のように表示される。</p>

<p><img src="http://kayakuguri.github.io/images/2016/07/sf_inline01.jpg" alt="" /></p>

<p><code>apex:column</code>で囲まれてた部分が1つの項目になっており、<code>&lt;apex:facet name="header"&gt;</code>タグの内容がそれぞれの項目の見出しとなる。</p>

<p>このままページを表示してインライン編集後、saveボタンをクリックすると確かに更新はされるがホームへ遷移してしまう。
(キャンセルをクリックしても同様)</p>

<p>これを解消するために、カスタムコントローラーを割り当ててみた。<br/>
<code>recordSetVar</code>を使っていると、割り当てたカスタムコントローラ側で取得したレコードリストを使用するために、<code>StandardSetController</code>を使う必要がある、とのこと。</p>

<p><a href="http://tyoshikawa1106.hatenablog.com/entry/2013/09/03/232942">SFDC：recordSetVarとextensions &ndash; tyoshikawa1106のブログ</a></p>

<p>これを、<code>StandardController</code>をコントローラ側で使っていると下記のようなエラーがでる。
エラーメッセージだけでは非常にわかりにくそうなので注意。</p>

<blockquote><p>common.apex.runtime.bytecode.BytecodeApexObjectType cannot be cast to common.apex.runtime.impl.ApexType</p></blockquote>

<p>で、カスタムコントローラ内で、ボタンを押された際のアクションを作成し、<code>null</code>を返す事でページ遷移をしないようにする。<br/>
ただし、保存する<code>save</code>ボタンはこれをしてしまうと保存されなくなってしまったので、キャンセルボタンだけにしておいた。</p>

<p>VF</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:page standardController="Account" recordSetVar="records" extensions="VfInlineEditSample" id="thePage"&gt; </span></code></pre></td></tr></table></div></figure>


<p>apex (<code>VfInlineEditSample.apxc</code>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class VfInlineEditSample {
</span><span class='line'>    public VfInlineEditSample(ApexPages.StandardSetController stdController){
</span><span class='line'>        List&lt;Account&gt; lists = (List&lt;Account&gt;)stdController.getRecords();
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    public PageReference cancel(){
</span><span class='line'>        return null;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.developerforce.com/guides/fr/apex_fr/Content/apex_pages_standardsetcontroller.htm">Classe StandardSetController</a></p>

<h1>関連リスト</h1>

<p>とあるレコードの関連リストを一覧表示からインライン編集したい場合。<br/>
上記の一覧表示と同じようにすればインライン編集出来るテーブルを作る事は可能。</p>

<p>IDはVFページのパラメータから取得する。</p>

<p>例）<br/>
<code>VfInlineEditSamplePage.vfp</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;apex:page standardController="Account" extensions="VfInlineEditSample" id="thePage"&gt; 
</span><span class='line'>    &lt;apex:form id="theForm"&gt; 
</span><span class='line'>        &lt;apex:pageBlock title="商談" &gt;
</span><span class='line'>            &lt;apex:pageBlockTable value="{!opp_records}" var="opp"&gt;
</span><span class='line'>                &lt;apex:column &gt;
</span><span class='line'>                    &lt;apex:outputField value="{!opp.Name}" /&gt; 
</span><span class='line'>                    &lt;apex:facet name="header"&gt;商談名&lt;/apex:facet&gt;
</span><span class='line'>                &lt;/apex:column&gt;
</span><span class='line'>                &lt;apex:column &gt;
</span><span class='line'>                    &lt;apex:outputField value="{!opp.Amount}" /&gt; 
</span><span class='line'>                    &lt;apex:facet name="header"&gt;金額&lt;/apex:facet&gt;
</span><span class='line'>                &lt;/apex:column&gt;
</span><span class='line'>                &lt;apex:column &gt;
</span><span class='line'>                    &lt;apex:outputField value="{!opp.StageName}" /&gt; 
</span><span class='line'>                    &lt;apex:facet name="header"&gt;フェーズ&lt;/apex:facet&gt;
</span><span class='line'>                &lt;/apex:column&gt;
</span><span class='line'>                &lt;apex:column &gt;
</span><span class='line'>                    &lt;apex:outputField value="{!opp.NextStep}" /&gt; 
</span><span class='line'>                    &lt;apex:facet name="header"&gt;次回アクション&lt;/apex:facet&gt;
</span><span class='line'>                &lt;/apex:column&gt;
</span><span class='line'>                &lt;apex:inlineEditSupport event="ondblClick" /&gt;
</span><span class='line'>            &lt;/apex:pageBlockTable&gt; 
</span><span class='line'>            &lt;apex:pageBlockButtons &gt; 
</span><span class='line'>                &lt;apex:commandButton value="Save" action="{!save}" /&gt;
</span><span class='line'>                &lt;apex:commandButton value="Cancel" action="{!cancel}" /&gt;
</span><span class='line'>            &lt;/apex:pageBlockButtons&gt; 
</span><span class='line'>        &lt;/apex:pageBlock&gt; 
</span><span class='line'>    &lt;/apex:form&gt;
</span><span class='line'>&lt;/apex:page&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>VfInlineEditSample.apxc</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class VfInlineEditSample {
</span><span class='line'>    
</span><span class='line'>    public List&lt;Opportunity&gt; opp_records{get; set;}
</span><span class='line'>    
</span><span class='line'>    public VfInlineEditSample(ApexPages.StandardController stdController){
</span><span class='line'>        Account acc = (Account)stdController.getRecord();
</span><span class='line'>        Id aid = acc.id;
</span><span class='line'>        Account record = [SELECT id, name, (SELECT id,name,StageName,NextStep,Amount FROM Opportunities) FROM Account WHERE id=:aid];
</span><span class='line'>        opp_records = record.Opportunities;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    public PageReference cancel(){
</span><span class='line'>        return null;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以下のようになる。</p>

<p><img src="http://kayakuguri.github.io/images/2016/07/sf_inline02.jpg" alt="" /></p>

<p>このままだとSaveをクリックしても保存はされない。<br/>
なので、cancelと同じようにカスタムコントローラ内でアクションを受け取り、編集した内容はVFへ引き渡している、 <code>opp_records</code>に入っているので、それをupdateすれば更新される。</p>

<p>apexクラスに以下を追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public PageReference save(){
</span><span class='line'>    update opp_records;
</span><span class='line'>    return null;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>しかしこうすると、編集されたされてないにかかわらず、関連リストに並んでいるオブジェクト(この場合は商談)のレコード全てが更新されてしまう。<br/>
ガバナ制限は、1万レコードまで大丈夫なので、問題になることは少ないと思うが、最終更新日付が全て更新されてしまうのが都合が悪いかもしれない。</p>

<p><a href="https://developer.salesforce.com/docs/atlas.ja-jp.salesforce_app_limits_cheatsheet.meta/salesforce_app_limits_cheatsheet/salesforce_app_limits_platform_apexgov.htm">Apex ガバナ制限</a></p>

<h2>更新対象を選ぶ</h2>

<p>ワークフローであれば、<code>ISCHANGED</code>を使えば、その項目が変更されたかどうかをチェック出来るが、apexではそのメソッドはない。<br/>
(機能追加が要望があがってたりする(トリガの機能としてだけど） <a href="https://success.salesforce.com/ideaview?id=087300000007LI2AAM">IsChanged function in Apex</a>)</p>

<p>なので、更新される項目を一つずつ比較して更新があるかどうかを確認する泥臭い方法を取ってみる。<br/>
(他にいいアイデアがあれば教えて欲しい…）</p>

<p>修正後のapex</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class VfInlineEditSample {
</span><span class='line'>    
</span><span class='line'>    public List&lt;Opportunity&gt; opp_records{get; set;}
</span><span class='line'>    private List&lt;Opportunity&gt; old_records;
</span><span class='line'>    
</span><span class='line'>    public VfInlineEditSample(ApexPages.StandardController stdController){
</span><span class='line'>        Account acc = (Account)stdController.getRecord();
</span><span class='line'>        Id aid = acc.id;
</span><span class='line'>        Account record = [SELECT id, name, (SELECT id,name,StageName,NextStep,Amount FROM Opportunities) FROM Account WHERE id=:aid];
</span><span class='line'>        opp_records = record.Opportunities;
</span><span class='line'>        old_records = opp_records.deepClone();
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    public PageReference cancel(){
</span><span class='line'>        return null;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    public PageReference save(){
</span><span class='line'>        List&lt;Opportunity&gt; update_lists = new List&lt;Opportunity&gt;();
</span><span class='line'>        for(Integer i = 0; i&lt; opp_records.size(); i++){
</span><span class='line'>            if(opp_records[i].name != old_records[i].name){
</span><span class='line'>                update_lists.add(opp_records[i]);
</span><span class='line'>                continue;
</span><span class='line'>            }else if(opp_records[i].StageName != old_records[i].StageName){
</span><span class='line'>                update_lists.add(opp_records[i]);
</span><span class='line'>                continue;
</span><span class='line'>            }else if(opp_records[i].NextStep != old_records[i].NextStep){
</span><span class='line'>                update_lists.add(opp_records[i]);
</span><span class='line'>                continue;
</span><span class='line'>            }else if(opp_records[i].Amount != old_records[i].Amount){
</span><span class='line'>                update_lists.add(opp_records[i]);
</span><span class='line'>                continue;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        if(update_lists.size() &gt; 0){
</span><span class='line'>            update update_lists;
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        return null;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>リストをコピーする際に、<code>deepClone</code>を使わないと<code>clone</code>では浅いコピーとなってしまい、参照しているものが同じになってしまうので注意。
(一方の値を更新するともう一方も同じ値になってしまう）</p>

<h2>汎用的にする</h2>

<p>上記だと、表示する項目を増やす度に比較の条件文を追加しないといけない。<br/>
なので、全項目から取得出来るものだけを比較するようにしてみた。</p>

<p>以下、関数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public List&lt;sObject&gt; isChanged(String object_name, List&lt;sObject&gt; new_records, List&lt;sObject&gt; old_records){
</span><span class='line'>    sObject obj = (sObject)Type.forName(object_name).newInstance();
</span><span class='line'>    Schema.DescribeSObjectResult descR = obj.getsObjectType().getDescribe();
</span><span class='line'>    Set&lt;String&gt; fields = descR.fields.getMap().keySet();
</span><span class='line'>    Map&lt;String, Schema.SObjectField&gt; fmap = descR.fields.getMap();
</span><span class='line'>    
</span><span class='line'>    List&lt;sObject&gt; update_records = new List&lt;sObject&gt;();
</span><span class='line'>    for(Integer i = 0; i&lt; new_records.size(); i++){
</span><span class='line'>        for(String field : fields){
</span><span class='line'>            try{
</span><span class='line'>                Schema.SObjectField f = fmap.get(field);
</span><span class='line'>                Schema.DescribeFieldResult fr = f.getDescribe();
</span><span class='line'>                if(!fr.isUpdateable()) continue; //更新出来ない項目は飛ばす
</span><span class='line'>                //比較
</span><span class='line'>                if(new_records[i].get(field) != old_records[i].get(field)){
</span><span class='line'>                    update_records.add(new_records[i]);
</span><span class='line'>                    continue;
</span><span class='line'>                }
</span><span class='line'>            }catch(SObjectException e){
</span><span class='line'>                //取得していない項目
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    return update_records;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>getDescribe()</code>で指定したオブジェクトの全項目名を取得出来る</li>
<li>取得した項目名を使ってオブジェクトから<code>get()</code>で取得。例外が発生したものはselectで取得していない項目、となる</li>
<li>更新可能かどうかは、<code>Describe</code>で取得出来る項目の情報内を見れば判定可能<br/>
<code>isUpdateable</code>がtrueなら更新が出来る項目となるので、これがtrueのもののみ比較している</li>
</ul>


<p>使用の際は、第一引数にオブジェクトの参照名、第二引数に更新後のレコードリスト、第三引数に更新前のレコードリストを指定してやる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;Opportunity&gt; update_lists = isChanged('Opportunity', opp_records, old_records);</span></code></pre></td></tr></table></div></figure>


<p>これで項目が増えても安心。</p>

<h3>参考</h3>

<ul>
<li><a href="http://kayakuguri.github.io/blog/2014/04/23/sf-mailtemplate/">[SalesForce]メールテンプレートの項目一覧 &ndash; KayaMemo</a></li>
<li><a href="http://appirio.co.jp/category/tech-blog/2012/07/force-com-apex%E3%81%AE%E3%80%8Cdescribe%E3%80%8D%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8%EF%BC%88%E3%81%9D%E3%81%AE%EF%BC%91%EF%BC%89/">Force.com Apexの「Describe」でできること（その１） &ndash; Appirio Japan</a></li>
<li><a href="http://appirio.co.jp/category/tech-blog/2012/09/force-com-apex%E3%81%AE%E3%80%8Cdescribe%E3%80%8D%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8%EF%BC%88%E3%81%9D%E3%81%AE%EF%BC%92%EF%BC%89/">Force.com Apexの「Describe」でできること（その２） &ndash; Appirio Japan</a></li>
<li><a href="http://vaindespair.blogspot.jp/2012/04/blog-post_04.html">memo: Force.com&#12288;&#65306;&#12288;Apex でオブジェクト及び項目の情報を取得する</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PHP]CurlでのSSL接続をOpenSSL方式に変更する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/07/07/curl-openssl-tls/"/>
    <updated>2016-07-07T17:50:07+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/07/07/curl-openssl-tls</id>
    <content type="html"><![CDATA[<p>curlでsslを接続する際に、opensslを利用した接続になっていなかったために接続出来ない事例があったのだが、curlを入れ替えてopensslを利用するようにしたら接続出来たのでそのメモ。</p>

<!-- more -->


<h1>前提</h1>

<p>接続をしている環境は以下とする。</p>

<ul>
<li>CnetOS 5.6</li>
<li>PHP 5.3</li>
</ul>


<p>この環境で、SalesforceへRestAPIを利用して接続をする。<br/>
接続する際の認証は以下のクラスを利用している。</p>

<ul>
<li><a href="https://github.com/nkjm/Force.com-OAuth-Toolkit-for-PHP">nkjm/Force.com-OAuth-Toolkit-for-PHP: A toolkit to enable OAuth in external Web Services developed in php</a></li>
</ul>


<p>自作の <code>/sample/login</code>のエンドポイントへ接続するものとする。<br/>
接続に利用しているPHP。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require_once('oauth.php');
</span><span class='line'>
</span><span class='line'>define('CLIENT_ID', 'xxx');
</span><span class='line'>define('CLIENT_SECRET', 'xxx');
</span><span class='line'>define('CALLBACK_URL', 'http://localhost/');
</span><span class='line'>define('LOGIN_URL', 'https://test.salesforce.com');
</span><span class='line'>define('USERNAME', 'xxx');
</span><span class='line'>define('PASSWORD', 'xxx');
</span><span class='line'>
</span><span class='line'>$oauth = new oauth(CLIENT_ID, CLIENT_SECRET, CALLBACK_URL, LOGIN_URL);
</span><span class='line'>$oauth-&gt;auth_with_password(USERNAME, PASSWORD, 120);
</span><span class='line'>$url = "$oauth-&gt;instance_url/services/apexrest/sample/login";
</span><span class='line'>$curl = curl_init($url);
</span><span class='line'>$POST_DATA = array(
</span><span class='line'>    'email' =&gt; 'sample',
</span><span class='line'>    'passwd' =&gt; 'password'
</span><span class='line'>);
</span><span class='line'>
</span><span class='line'>curl_setopt($curl, CURLOPT_POST, TRUE);
</span><span class='line'>curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($POST_DATA));
</span><span class='line'>curl_setopt($curl, CURLOPT_HEADER, false);
</span><span class='line'>curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
</span><span class='line'>curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-type: application/x-www-form-urlencoded;charset=UTF-8', "Authorization: OAuth " . $oauth-&gt;access_token));
</span><span class='line'>$output= curl_exec($curl);
</span><span class='line'>curl_close($curl);
</span><span class='line'>$response = json_decode($output, true);
</span><span class='line'>
</span><span class='line'>echo $output;</span></code></pre></td></tr></table></div></figure>


<p>この辺詳しくは以下をどうぞ。<br/>
<a href="http://kayakuguri.github.io/blog/2014/10/27/apex-rest-post/">[Salesforce]apex Rest APIでPOSTでデータを送信する</a></p>

<h1>失敗する</h1>

<p>このまま送信をすると、以下のようなエラーが出て失敗する。<br/>
ちなみに、ログイン履歴には残っている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[
</span><span class='line'>  {
</span><span class='line'>      message: "この組織では TLS 1.0 が無効になりました。HTTPS を使用して Salesforce に接続するには、TLS 1.1 以降を使用してください。",
</span><span class='line'>      errorCode: "UNSUPPORTED_CLIENT"
</span><span class='line'>  }
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<h1>TLS</h1>

<p>ssl通信をする時の暗号化規格で、TLS1.0は暗号化のレベルが低い、とかで1.1以上が推奨されているよう。<br/>
<a href="http://www.intellilink.co.jp/article/pcidss/18.html">SSL/TLS 1.0 はいつまでに無効化しなければならないか？ | NTTデータ先端技術株式会社</a><br/>
それに伴って、Salesforceでは、TLS1.0での接続を無効に切り替えていっている。<br/>
変更内容など詳しくは公式で。</p>

<ul>
<li><a href="https://help.salesforce.com/apex/HTViewSolution?id=000221207&amp;language=ja">Salesforce による TLS 1.0 の無効化</a></li>
</ul>


<p>組織の設定から明示的に有効にする事も可能だが、強制的に切り替えが行われるタイミングは以下。</p>

<ul>
<li>Sandbox 組織 &ndash; 2016 年 6 月 25 日、午前 9:30 (太平洋夏時間) (16:30 UTC)</li>
<li>本番組織 &ndash; 2017 年 3 月 4 日、午前 9:30 (太平洋標準時) (17:30 UTC)</li>
</ul>


<p>今回は、Sandboxでの設定が適用されたために接続が出来なくなったよう。</p>

<p>ちなみにTLSについて調べていて、現状、SSLと呼んでいるものは全てTLSによる接続になっているらしい。</p>

<blockquote><p>SSLはバージョン1.0と2.0は既に脆弱性で消えていたが、2014(平成26)年10月14日、GoogleのセキュリティチームによりSSL 3.0の深刻な脆弱性「POODLE」が発見されたことでSSLは全バージョンに脆弱性が発覚、これをもってSSLは現役を退いた。<br/>
<a href="http://www.wdic.org/w/WDIC/TLS">http://www.wdic.org/w/WDIC/TLS</a></p></blockquote>

<h1>原因</h1>

<p>上記環境で原因を探ってみると、<code>curl</code>でエンドポイントへ投げる際に<code>NSS</code>という方式が使われている事が原因となっている事がわかった。</p>

<p><img src="http://kayakuguri.github.io/images/2016/07/tls01.jpg" alt="" /></p>

<p><a href="https://developer.mozilla.org/ja/docs/NSS_FAQ">NSS FAQ | MDN</a></p>

<p>NSSのバージョンは3.14だが、このバージョンでは一応TLS1.1には対応しているとリリースノートには書かれていたが…。詳細は不明。<br/>
<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_3.14_release_notes">NSS 3.14 release notes &ndash; Mozilla | MDN</a></p>

<h1>対処</h1>

<p>というわけで、これを<code>NSS</code>ではなく、<code>OpenSSL</code>方式で接続するように変更する。<br/>
といっても、設定変更で済むわけではなく、curlのインストールし直し、となる。</p>

<p>作業内容は以下のサイトをそのまま利用させてもらった。<br/>
<a href="http://www.apollo.jp/blog/?p=2382">wordpressの引っ越し | 紅い夕陽</a></p>

<h2>作業</h2>

<p>サーバー側での作業となる。<br/>
今回はvagrant環境で作業をしたので、<code>$ vagrant ssh</code>でsshログインして作業した。<br/>
また、ルートログインしておく。</p>

<p>・必要なモジュールをインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># yum install gcc
</span><span class='line'># yum -y install openssl-devel
</span><span class='line'># yum -y install wget
</span><span class='line'># yum -y install lbzip2</span></code></pre></td></tr></table></div></figure>


<p>・curlを取得して展開(curlは少し前のバージョン)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># wget http://curl.haxx.se/download/curl-7.37.0.tar.bz2
</span><span class='line'># tar xf curl-7.37.0.tar.bz2
</span><span class='line'># cd curl-7.37.0
</span><span class='line'># ./configure --enable-libcurl-option</span></code></pre></td></tr></table></div></figure>


<p>・コンパイルしてインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># make
</span><span class='line'># make install</span></code></pre></td></tr></table></div></figure>


<p>・ライブラリを登録</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vi /etc/ld.so.conf.d/curl-x86_64.conf</span></code></pre></td></tr></table></div></figure>


<p>内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/lib</span></code></pre></td></tr></table></div></figure>


<p>・ライブラリを更新</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ldconfig -v</span></code></pre></td></tr></table></div></figure>


<p>最後に、apacheを再起動しておく。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># service httpd restart</span></code></pre></td></tr></table></div></figure>


<p>これでOpensslを使うように変更できた。</p>

<p><img src="http://kayakuguri.github.io/images/2016/07/tls02.jpg" alt="" /></p>

<p>この状態で再度冒頭のPHPでアクセスすると、無事、接続することが出来た。</p>

<h1>参考</h1>

<ul>
<li><a href="http://www.apollo.jp/blog/?p=2382">wordpressの引っ越し | 紅い夕陽</a></li>
<li><a href="http://blog.wnotes.net/blog/article/php_curl_error">PHPのcurlで&quot;SSL Connection Error.&quot;のエラーがどうしても出る時の対策 | ブログ :: Web notes.log</a></li>
<li><a href="http://www.wdic.org/w/WDIC/TLS">TLS ‐ 通信用語の基礎知識</a></li>
<li><a href="http://www.intellilink.co.jp/article/pcidss/18.html">SSL/TLS 1.0 はいつまでに無効化しなければならないか？ | NTTデータ先端技術株式会社</a></li>
<li><a href="http://tkengo.github.io/blog/2015/12/01/https-details/">理解してるつもりの SSL/TLS でも、もっと理解したら面白かった話 &middot; けんごのお屋敷</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSVデータをMySQLにインポートする]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/07/04/mysql-import-csv/"/>
    <updated>2016-07-04T16:32:34+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/07/04/mysql-import-csv</id>
    <content type="html"><![CDATA[<p>CSVのデータをMySQLにインポートしたので方法のメモ。</p>

<!-- more -->


<h1>環境</h1>

<ul>
<li>Vagrant : <a href="https://box.scotch.io/">Scotchbox</a>

<ul>
<li>Ubuntu 14.04 LTS</li>
<li>PHP 5.6</li>
</ul>
</li>
</ul>


<h1>準備</h1>

<p>MySQLにテーブルを作成する。
テーブルに作成した項目順にカンマ区切りで値を作成する。</p>

<p>エクセルでCSVファイルを作成した場合は、MySQLの文字コードをUTF-8としたので、テキストエディタなどでUTF-8に変更しておく
改行コードは、<code>CRLF</code>。</p>

<p>作成したCSVファイルは、vagrantの共有フォルダに保存しておく。</p>

<h1>インポート</h1>

<p><code>$ vagrant ssh</code>から、<code>$ mysql -u root</code>でmysqlにログインし、以下のコマンドでインポートする。
インポートするファイルは、<code>data.csv</code>とする。</p>

<p>インポートするファイルはパスで指定するが、scotchboxの場合、共有フォルダの階層はvagrant内から見た場合は、<code>/var/www/</code>となるので、それを指定してやる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; LOAD DATA LOCAL INFILE '/var/www/data.csv' INTO TABLE SUB_ListAll FIELDS TERMINATED BY ',' LINES TERMINATED BY '\r\n';</span></code></pre></td></tr></table></div></figure>


<h1>注意点</h1>

<h2>改行コード</h2>

<p>インポートする際に使用する、<code>DATA INFILE</code>コマンドでは、デフォルトの改行コードは<code>LF</code>になっているよう。
なので、明示的に改行コードを指定してやる必要がある。
それが以下の部分。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LINES TERMINATED BY '\r\n'</span></code></pre></td></tr></table></div></figure>


<h2>LOCAL INFILE</h2>

<p><code>local infile</code>を利用するには、設定で許可されている必要があるよう。
これが許可されていないと、以下のエラーが返ってくる。</p>

<blockquote><p>The used command is not allowed with this MySQL version</p></blockquote>

<p>デフォルトでは許可されていなかったので、mysqlへログインする際に許可してログインする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mysql --local-infile=1 -u root</span></code></pre></td></tr></table></div></figure>


<h1>まとめ</h1>

<p>ちょっとググっても色々と落とし穴があるようで、環境によってはその他の穴も空いてるかもしれない。
とりあえず、冒頭にあげた環境では上記でいけた。</p>

<p>ちなみに、ファイルはパーミッションを777に指定してやらなくてもそのままでいけた。</p>

<h1>参考</h1>

<ul>
<li><a href="http://www.infoscoop.org/blogjp/2014/07/23/about-load-data-infile/">MySQLのLOAD DATA INFILEで大はまりした話 | infoScoop開発者ブロ</a></li>
<li><a href="http://oshiete.goo.ne.jp/qa/1030943.html">CSVファイルのインポートについて &ndash; MySQL 解決済 | 教えて！goo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SalesforceからWP REST APIへOAuth認証を利用して投稿する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/06/30/sf-callout-wp-rest-api-oauth1/"/>
    <updated>2016-06-30T17:36:44+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/06/30/sf-callout-wp-rest-api-oauth1</id>
    <content type="html"><![CDATA[<p>salesforceからWP REST APIのエンドポイントへコールアウトして投稿する。<br/>
投稿の際には、OAuth認証を利用する。</p>

<!-- more -->


<h1>前提</h1>

<p>WordPress側にで、OAuth 1.0a Serverを導入してアプリケーションを作成しておく。<br/>
また、そのアプリケーションを使用して、アクセストークンまで取得しているものとする。</p>

<p>通常は承認のフローなどはユーザー側が行うため、アクセストークンまでもった状態からスタートすることはないと思うが、今回は最後の投稿部分だけに絞って試してみた。</p>

<p>WP REST APIでアクセストークンを取得するには、前回書いたこの記事を参考にどうぞ。<br/>
<a href="http://kayakuguri.github.io/blog/2016/06/30/wp-rest-oauth/">WordPress REST APIにOAuth1.0aで認証して投稿する &ndash; KayaMemo</a></p>

<h1>リモートサイトの登録</h1>

<p>コールアウトする先のドメインを事前に許可しておいてやる必要がある。<br/>
<code>設定 -&gt; セキュリティのコントロール -&gt; リモートサイトの設定</code> から、<code>新規リモートサイト</code>をクリック。</p>

<ul>
<li>リモートサイト名 : 適当な名前</li>
<li>リモートさサイトのURL : 接続先ドメイン</li>
<li>プロトコルセキュリティの無効化 : HTTPでも接続を許可するか</li>
<li>説明 : 適当な説明</li>
<li>有効 : オンに</li>
</ul>


<p>通常では当然だが、HTTPSでの通信が推奨されている。
しかし、リスクを承知、もしくはテストでの接続の場合など、HTTPでも接続させる場合はこの項目にチェックをつけると許可する事が可能。
今回はテストってことでオンにした。</p>

<p><img src="http://kayakuguri.github.io/images/2016/06/sf_wprest01.jpg" alt="" /></p>

<p>ちなみに、このリモートサイトへの登録をせずにコールアウトしようとすると、以下のようなエラーが出力される。</p>

<blockquote><p>Unauthorized endpoint, please check Setup->Security->Remote site settings. endpoint =xxx</p></blockquote>

<h1>OAuth1.0a認証</h1>

<p>今回は、WP REST API + OAuth 1.0a Server　の設定で投稿するため、OAuth1.0aでの認証になる。<br/>
OAuth 1.0a での認証をするためには、アクセストークンやシグネチャなどの情報をヘッダーに付与してやる必要がある。<br/>
参考: <a href="https://syncer.jp/how-to-make-signature-of-oauth-1">OAuth1.0の署名(Signature)を作成する方法</a></p>

<p>これらの処理をするためのクラスがあったのでこちらを参考にさせてもらった。</p>

<p><a href="https://gist.github.com/surjikal/7539745">Apex 2-legged OAuth 1.0</a></p>

<p>ただし、このままでは足りない情報があったため、アクセストークンなどを送信するように修正させてもらったものが以下となる。</p>

<p><a href="https://gist.github.com/k-usk/894760237c73e47ed4c7333c30ce0b91">k-usk/OAuth.cls</a></p>

<h1>コールアウトを実装</h1>

<p>上記のクラスを利用して実際にコールアウトしてやる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class PostWPCallout {
</span><span class='line'>    @Future(callout=true)
</span><span class='line'>    public static void wpCalloutOAuth(){
</span><span class='line'>      String WP_URL = 'http://example.com';
</span><span class='line'>        String client_key = 'IdZQC4OG1Ppi';
</span><span class='line'>        String client_secret = 'S14spr4ny50fN4mjlEfvoBl4d9dWmIyqobp60DvWAD6b0j5g';
</span><span class='line'>        String oauth_token = '1IRo5QV2itt7BSeVA9m14yMQ';
</span><span class='line'>        String oauth_token_secret = 'MPDAnRor5Ajxr7z1N7JF2EOr7vCZqqJE48iYjgolQ1cD0Jm9';
</span><span class='line'>        
</span><span class='line'>        //リクエストを作成
</span><span class='line'>        HttpRequest req = new HttpRequest();
</span><span class='line'>        req.setMethod('POST');
</span><span class='line'>        req.setEndpoint(WP_URL + '/wp-json/wp/v2/posts'); //新規投稿
</span><span class='line'>        req.setHeader('Content-Type','application/json');
</span><span class='line'>        Map&lt;String,String&gt; mapEmp = new Map&lt;String,String&gt;();
</span><span class='line'>        mapEmp.put('title','タイトル');
</span><span class='line'>        mapEmp.put('content', '本文');
</span><span class='line'>        String jsonString = JSON.serialize(mapEmp);
</span><span class='line'>        req.setBody(jsonString);
</span><span class='line'>        
</span><span class='line'>        //クラスを利用して、OAuth用のヘッダを作る
</span><span class='line'>        req = OAuth.signRequest(req, client_key, client_secret, oauth_token, oauth_token_secret);
</span><span class='line'>
</span><span class='line'>        //コールアウト
</span><span class='line'>        Http http = new Http();
</span><span class='line'>        try{
</span><span class='line'>            HttpResponse res = http.send(req);
</span><span class='line'>            
</span><span class='line'>            System.debug(Logginglevel.INFO, '*** BODY : ' + res.getBody());
</span><span class='line'>            System.debug(Logginglevel.INFO, '*** STATUS : ' + res.getStatus());
</span><span class='line'>            System.debug(Logginglevel.INFO, '*** STATUS_CODE : ' + res.getStatusCode());
</span><span class='line'>        }catch(System.CalloutException e){
</span><span class='line'>            System.debug(Logginglevel.INFO,'*** ERROR_MESSAGE : ' + e.getMessage());
</span><span class='line'>            System.debug(Logginglevel.INFO,'*** ERROR_LINE_NUMBER : ' + e.getLineNumber());
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>コールアウトしたレスポンスがJSONで返ってくるので、投稿した記事IDを取得したい場合はここから取得したりも出来る。<br/>
(JSONでの取得はややこしいので、パースすることになるが）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordPress REST APIにOAuth1.0aで認証して投稿する]]></title>
    <link href="http://kayakuguri.github.io/blog/2016/06/30/wp-rest-oauth/"/>
    <updated>2016-06-30T17:04:32+09:00</updated>
    <id>http://kayakuguri.github.io/blog/2016/06/30/wp-rest-oauth</id>
    <content type="html"><![CDATA[<p>WordPress REST APIで投稿するには認証が必要となる。<br/>
認証には、クッキーベース、ベーシック認証ベース、OAuth認証ベース、の方法があるが、
その中でも一番セキュアな、OAuthでの認証を行ってみる。</p>

<!-- more -->


<h1>環境情報など</h1>

<p>試した環境など。</p>

<ul>
<li>PHP 5.6</li>
<li>WordPress ver.4.5.3

<ul>
<li>WP REST API ver.2.0-beta13.1</li>
<li>WP REST API &ndash; OAuth 1.0a Server  ver.0.2.1</li>
</ul>
</li>
<li>ドメイン : <code>http://wprest.local</code></li>
</ul>


<h1>WordPressのセットアップ</h1>

<h2>WP REST API</h2>

<p><a href="https://wordpress.org/plugins/rest-api/">WordPress REST API (Version 2) &mdash; WordPress Plugins</a><br/>
プラグインの新規追加から検索すれば出てくる。
そこからインストールして、有効化すればOK。</p>

<h2>WP REST API &ndash; OAuth 1.0a Server</h2>

<p><a href="https://github.com/WP-API/OAuth1">WP-API/OAuth1: OAuth server implementation for WP API</a><br/>
上記からzipをダウンロードし、<code>プラグイン-&gt;新規追加</code>からzipをアップロードし、その後有効化する。</p>

<p>ユーザー項目に、<code>Applicatons</code>が増えていれば正しく有効化出来ている。<br/>
また、WP REST APIを追加していれば、<code>/wp-json/</code>にアクセスした際にOAuth認証するためのURLが表示されるようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>authentication: {
</span><span class='line'>  oauth1: {
</span><span class='line'>    request: "http://wprest.local/oauth1/request",
</span><span class='line'>    authorize: "http://wprest.local/oauth1/authorize",
</span><span class='line'>    access: "http://wprest.local/oauth1/access",
</span><span class='line'>    version: "0.1"
</span><span class='line'>  }
</span><span class='line'>},</span></code></pre></td></tr></table></div></figure>


<h2>アプリケーションの追加</h2>

<p><code>ユーザー -&gt; Applications</code>を開き、<code>Add Application</code>をクリック。それぞれの項目を適当に入力する。
<code>Callback</code>の値は適当に<code>/test</code>などと入れておいた。<br/>
本来であれば、承認が行われた後にcallbackで指定されたURLへリダイレクトがかかるはずなのだが、不具合なのか動作しなかった。</p>

<p><code>Add Consumer</code>をクリックすると<code>Client Key</code>と<code>Client Secret</code>が生成される。</p>

<p><img src="http://kayakuguri.github.io/images/2016/06/wp_oauth01.jpg" alt="" /></p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Client Key </td>
<td align="left"> RY5OpVfznCzY </td>
</tr>
<tr>
<td></td>
<td align="left"> Client Secret </td>
<td align="left"> 8HHflSELMukNNE6NxFNFeJDAsoHA7Dhjkb6wXFoxduMykAwo </td>
</tr>
</tbody>
</table>


<h1>PHPで接続</h1>

<h2>環境変数</h2>

<p>環境変数に上記で取得したアプリケーションのキーなどを追加して使用することにする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WP_CLIENT_KEY=RY5OpVfznCzY
</span><span class='line'>WP_CLIENT_SECRET=8HHflSELMukNNE6NxFNFeJDAsoHA7Dhjkb6wXFoxduMykAwo</span></code></pre></td></tr></table></div></figure>


<h2>PECL oauth</h2>

<p><code>Oauth 1.0a</code>での認証を行うために、PECL oauthライブラリを使用する。<br/>
公式のマニュアル: <a href="http://php.net/manual/ja/book.oauth.php">PHP: OAuth &ndash; Manual</a></p>

<blockquote><p>PECL::OAuthは、OAuthコンシューマやプロバイダの機能をphpで手軽に実装できるようにする拡張モジュールです。
<a href="http://blog.flatlabs.net/20100611_062745/">http://blog.flatlabs.net/20100611_062745/</a></p></blockquote>

<p>HerokuでPHPの拡張モジュールを利用する場合には、composerで追加する事が出来る。
以下のコマンドで追加が可能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ composer require ext-oauth</span></code></pre></td></tr></table></div></figure>


<p>参考: <a href="https://devcenter.heroku.com/articles/php-support#extensions">Heroku PHP Support | Heroku Dev Center</a></p>

<p>ローカル環境などのサーバに追加する場合は、直接インストールしてやる必要がある。<br/>
参考: <a href="http://blog.unfindable.net/archives/5697">PECL/oauthの導入方法 | 配電盤</a></p>

<p>今回はローカル環境には、<a href="https://box.scotch.io/">Scotchbox</a>を利用しているので、Ubuntuにインストール方法をメモしておく。</p>

<h3>インストールと設定</h3>

<p>上記参考サイトの通りだが、そのまま<code>oauth</code>をインストールしようとするとバージョンでエラーが出る。
<code>oauth</code>の最新版では、PHP7.0以上のみサポートされているようなので、PHP5.6対応のバージョンを明示的に指定してやる必要がある。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install apache2 php5 php5-dev php-pear libpcre3-dev make
</span><span class='line'>$ sudo pecl install oauth-1.2.3</span></code></pre></td></tr></table></div></figure>


<p>最後に書かれている通り、<code>php.ini</code>に追記する。<br/>
<code>/etc/php5/apache2/php.ini</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>extension=oauth.so</span></code></pre></td></tr></table></div></figure>


<p>apache再起動。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo service apache2 restart</span></code></pre></td></tr></table></div></figure>


<p><code>phpinfo</code>でOAuthが有効と表示されていれば完了。</p>

<p><img src="http://kayakuguri.github.io/images/2016/06/wp_oauth02.jpg" alt="" /></p>

<h2>トークンの取得</h2>

<p>今回の承認などに必要なPHPファイルは全て同一ドメイン・同一階層に置くものとする。</p>

<p>OAuth1.0aの承認フローなどの動きは以下がとても参考になった。</p>

<p>参考: <a href="http://nskw-style.com/2016/wordpress/wp-api/oauth1.html">WP REST API の OAuth 認証の方法と何が起こっているのかとなぜそんなことをしているのか &#8211; Shinichi Nishikawa&#039;s</a></p>

<h2>コード</h2>

<p>参考 : <a href="http://qiita.com/newton/items/1114e443a90e204746ad">Tumblr API OAuth認証の方法（PHPサンプル付き） &ndash; Qiita</a></p>

<p>こちらのコードをほぼそのまま利用させてもらった。</p>

<p><code>login.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require_once './OAuthSample.php';
</span><span class='line'>
</span><span class='line'>$oauth_sample = new OAuthSample();
</span><span class='line'>try {
</span><span class='line'>    // リクエストトークンの取得とリダイレクト開始
</span><span class='line'>    $oauth_sample-&gt;goToAuthorize();
</span><span class='line'>} catch (\Exception $e) {
</span><span class='line'>    // エラー処理
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>OAuthSample.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>/**
</span><span class='line'> * Tumblr OAuth認証実装サンプル
</span><span class='line'> *
</span><span class='line'> * @author newton
</span><span class='line'> */
</span><span class='line'>class OAuthSample
</span><span class='line'>{
</span><span class='line'>    const REQUEST_TOKEN_URL  = 'http://wprest.local/oauth1/request';
</span><span class='line'>    const AUTHORIZE_URL      = 'http://wprest.local/oauth1/authorize';
</span><span class='line'>    const ACCESS_TOKEN_URL   = 'http://wprest.local/oauth1/access';
</span><span class='line'>
</span><span class='line'>    public $CONSUMER_KEY = '';
</span><span class='line'>    public $CONSUMER_SECRET = '';
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * コントストラク
</span><span class='line'>     * セッションの初期化をやる
</span><span class='line'>     */
</span><span class='line'>    public function __construct()
</span><span class='line'>    {
</span><span class='line'>        $this-&gt;CONSUMER_KEY = getenv('WP_CLIENT_KEY');
</span><span class='line'>        $this-&gt;CONSUMER_SECRET = getenv('WP_CLIENT_SECRET');
</span><span class='line'>
</span><span class='line'>        if (!isset($_SESSION)) {
</span><span class='line'>            session_start();
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * リクエストトークンの取得～リダイレクト
</span><span class='line'>     */
</span><span class='line'>    public function goToAuthorize()
</span><span class='line'>    {
</span><span class='line'>        $oauth = new \OAuth($this-&gt;CONSUMER_KEY, $this-&gt;CONSUMER_SECRET);
</span><span class='line'>        // リクエストトークン取得
</span><span class='line'>        $request_token = $oauth-&gt;getRequestToken(self::REQUEST_TOKEN_URL);
</span><span class='line'>
</span><span class='line'>        if (!$request_token) {
</span><span class='line'>            throw new Exception('リクエストトークンの取得に失敗');
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        // リクエストトークンをセッションに保存する
</span><span class='line'>        $_SESSION['request_token'] = $request_token['oauth_token'];
</span><span class='line'>        $_SESSION['request_token_secret'] = $request_token['oauth_token_secret'];
</span><span class='line'>
</span><span class='line'>        $params = ['oauth_token' =&gt; $request_token['oauth_token']];
</span><span class='line'>        $path = self::AUTHORIZE_URL . '?' . http_build_query($params);
</span><span class='line'>
</span><span class='line'>        $this-&gt;redirect($path);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * アクセストークンの取得
</span><span class='line'>     * コールバック後にコールされる用
</span><span class='line'>     *
</span><span class='line'>     * @return array アクセストークンのセットされたハッシュ
</span><span class='line'>     */
</span><span class='line'>    public function getAccessToken()
</span><span class='line'>    {
</span><span class='line'>        $oauth = new \OAuth(self::CONSUMER_KEY, self::CONSUMER_SECRET);
</span><span class='line'>        // アクセストークンの取得
</span><span class='line'>        $oauth-&gt;setToken($_SESSION['request_token'], $_SESSION['request_token_secret']);
</span><span class='line'>        $access_token = $oauth-&gt;getAccessToken(self::ACCESS_TOKEN_URL, $_GET['oauth_verifier']);
</span><span class='line'>
</span><span class='line'>        if (!$access_token) {
</span><span class='line'>            throw new \Exception('アクセストークンの取得に失敗');
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        return $access_token;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * リダイレクト
</span><span class='line'>     *
</span><span class='line'>     * @param string $path   リダイレクト先URL
</span><span class='line'>     * @param int    $status ステータスコード
</span><span class='line'>     */
</span><span class='line'>    private function redirect($path, $status = 302)
</span><span class='line'>    {
</span><span class='line'>        header('Cache-Control: no-store, no-cache, must-revalidate');
</span><span class='line'>        header('Expires: Thu, 01 Jan 1970 00:00:00 GMT');
</span><span class='line'>        header("Location: {$path}", true, $status);
</span><span class='line'>        exit;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>callback.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require_once './OAuthSample.php';
</span><span class='line'>
</span><span class='line'>$oauth_sample = new OAuthSample();
</span><span class='line'>try {
</span><span class='line'>    // アクセストークンの取得
</span><span class='line'>    $access_token = $oauth_sample-&gt;getAccessToken();
</span><span class='line'>    var_dump($access_token);
</span><span class='line'>} catch (\Exception $e) {
</span><span class='line'>    // エラー処理
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>承認</h2>

<p>作成した<code>login.php</code>へアクセスすると（ログインしていない場合はログイン画面が表示されログイン後に）承認のページが表示される。</p>

<p><img src="http://kayakuguri.github.io/images/2016/06/wp_oauth03.jpg" alt="" /></p>

<p><code>Authorize</code>をクリックすると、許可されて、承認コードが表示される。
(ここでコードが表示されるのではなく、コールバックURLへリダイレクトが行われるのが通常のフローだと思う）</p>

<p><img src="http://kayakuguri.github.io/images/2016/06/wp_oauth04.jpg" alt="" /></p>

<blockquote><p>Your verification token is j0lHiEOe07gOtUOkEA6J1q00</p></blockquote>

<h2>アクセストークンの取得</h2>

<p>コールバックが自動で行われないので、作成した<code>callback.php</code>へ直接アクセスしてやる。</p>

<blockquote><p><a href="http://wprest.local/callback.php?oauth_verifier=j0lHiEOe07gOtUOkEA6J1q00">http://wprest.local/callback.php?oauth_verifier=j0lHiEOe07gOtUOkEA6J1q00</a></p></blockquote>

<p>こうすることで、アクセストークンを取得できた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>array(2) {
</span><span class='line'>  ["oauth_token"]=&gt;
</span><span class='line'>  string(24) "UTriXsugNS1c0ddCc1UBuMPj"
</span><span class='line'>  ["oauth_token_secret"]=&gt;
</span><span class='line'>  string(48) "6GAHfovkjdSPm2LZbtf06vV3ouBML8WaqiwPIfCGsGY0jVHA"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>実際に投稿などをPOSTするには、アプリケーションのカスタマーキーなども合わせて必要になる。
まとめると以下となる。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Client Key </td>
<td align="left"> RY5OpVfznCzY </td>
</tr>
<tr>
<td></td>
<td align="left"> Client Secret </td>
<td align="left"> 8HHflSELMukNNE6NxFNFeJDAsoHA7Dhjkb6wXFoxduMykAwo </td>
</tr>
<tr>
<td></td>
<td align="left"> OAuth Token </td>
<td align="left"> UTriXsugNS1c0ddCc1UBuMPj </td>
</tr>
<tr>
<td></td>
<td align="left"> OAuth Token Secret </td>
<td align="left"> 6GAHfovkjdSPm2LZbtf06vV3ouBML8WaqiwPIfCGsGY0jVHA </td>
</tr>
</tbody>
</table>


<h1>投稿</h1>

<p>さて、ここまででアクセストークンなど投稿に必要なものが一通り揃ったので、ようやく新規投稿の準備が整った。
投稿は簡単で、今までと同じようにトークンなどをセットして指定のエンドポイントへパラメータを投げてやるだけでおｙい。<br/>
エンドポイントは、新規投稿となるので、<code>http://wprest.local/wp-json/wp/v2/posts</code>となる。<br/>
これも、先ほどのTumblerへの投稿を書いた記事を参考にさせてもらった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>
</span><span class='line'>$consumer_key = 'RY5OpVfznCzY';
</span><span class='line'>$consumer_secret = '8HHflSELMukNNE6NxFNFeJDAsoHA7Dhjkb6wXFoxduMykAwo';
</span><span class='line'>$oauth_token = 'UTriXsugNS1c0ddCc1UBuMPj';
</span><span class='line'>$oauth_token_secret = '6GAHfovkjdSPm2LZbtf06vV3ouBML8WaqiwPIfCGsGY0jVHA';
</span><span class='line'>$response = '';
</span><span class='line'>
</span><span class='line'>try {
</span><span class='line'>    $oauth = new \OAuth($consumer_key, $consumer_secret);
</span><span class='line'>    $oauth-&gt;setToken($oauth_token, $oauth_token_secret);
</span><span class='line'>    //POST
</span><span class='line'>    $params = ['title' =&gt; 'From PHP'];
</span><span class='line'>    $oauth-&gt;fetch('http://wprest.local/wp-json/wp/v2/posts', $params, OAUTH_HTTP_METHOD_POST);
</span><span class='line'>    $response_info = $oauth-&gt;getLastResponseInfo();
</span><span class='line'>    if ($response_info['http_code'] == 201) {
</span><span class='line'>        $response = json_decode($oauth-&gt;getLastResponse(), true);
</span><span class='line'>    }else{
</span><span class='line'>        throw new \Exception('記事の投稿に失敗');
</span><span class='line'>    }
</span><span class='line'>} catch (\Exception $e) {
</span><span class='line'>    // エラー処理
</span><span class='line'>    var_dump($e);
</span><span class='line'>}
</span><span class='line'>// 結果をダンプ
</span><span class='line'>var_dump($response);</span></code></pre></td></tr></table></div></figure>


<p>これでこのファイルへアクセスすると、無事、新規投稿が行われる。
以上。</p>
]]></content>
  </entry>
  
</feed>
